from django.conf import settings
from django.core.paginator import Paginator
from django.contrib.auth.models import User
from django.db.models import Q, Count, Sum, Value, DecimalField, IntegerField
from django.http import HttpResponse
from archivos.models import EndorsementFile, PolizasFile, SiniestrosFile, ContractorFile
from rest_framework.decorators import api_view, permission_classes
from rest_framework.response import Response
from core.models import Graphics, ReferenciadoresInvolved, Shared, Cedula
from ramos.models import Ramos, SubRamos
from claves.models import Claves
from core.models import Comments, PerfilUsuarioRestringido
from recibos.models import Recibos, Bonos
from polizas.models import Polizas, OldPolicies
from siniestros.models import Siniestros, Accidentes, Autos, Vida, Danios
from vendedores.models import Vendedor
from contratantes.models import Contractor
from aseguradoras.models import Provider
from fianzas.models import Contract
from recibos.serializers import *
from endosos.serializers import EndorsementSearchHyperSerializer
from organizations.views import get_org
from claves.views import *
from vendedores.views import *
from delivery.models import *
from vendedores.models import *
from functools import reduce
from operator import __or__ as OR
import operator
import time, math
import os
import requests
import json
import xlwt
from PIL import Image
from operator import and_
from core.v2.filtros_por_usuario import polizas_por_grupo

from datetime import datetime, timedelta,time
from control.permissions import IsAuthenticatedV2, IsOrgMemberV2, CobranzaReportesPermissionsV2, KBIPermissionV2, RenovacionesReportesPermissionsV2, PolizasReportesPermissionsV2,EndososReportesPermissionsV2,SiniestrosReportesPermissionsV2
from control.permission_functions import comisions
# ----------REPORTE EXCEL VERSIÓN 1****************+
# Reporte Cobranza Excel
from core.utils import getDataForPerfilRestricted, is_perm_ver_referenciadores
from control.models import Session
from archivos.presigned_url import get_presigned_url
from business_duration import businessDuration
import holidays
import pandas as pd

tpfs = {
      46: 'Familiar',
      47: 'Ahorro',
      48: 'Vitalicia',
      49: 'Temporal/Protección',
      1: 'Familiar',
      2: 'Casa Habitación',
      3: 'Condominio',
      4: 'Edificio',
      5: 'Empresarial',
      6: 'Múltiple Empresarial',
      10: 'Sólo Incendio',
      11: 'Animales',
      12: 'Cultivo',
      13: 'Crédito General',
      14: 'Crédito a la Vivienda',
      15: 'Documentos que sean objeto de oferta pública o de intermediación en mercados de valores',
      16: 'Emisores de Valores',
      17: 'Títulos de Crédito',
      18: 'Administración',
      19: 'Arquitectos',
      20: 'Aviones',
      21: 'Barcos',
      22: 'Contratista',
      23: 'Crime',
      24: 'Cyber (Protección de datos)',
      25: 'D&O (Consejeros y Funcionarios)',
      26: 'E&O Miscelaneos',
      27: 'Empresarial',
      28: 'Eventos',
      29: 'Familiar/Condominal',
      30: 'Hole in One',
      31: 'Ingeniería',
      32: 'Instituciones Financieras',
      33: 'Lineas Financieras',
      34: 'Médicos',
      36: 'Riesgos Catastróficos',
      37: 'Calderas y Recipientes Sujetos a Presión',
      38: 'Dinero y Valores',
      39: 'Eq. Contratistas y Maquinaria pesada',
      40: 'Eq. Electrónico',
      41: 'Montaje de Maquinaria',
      42: 'Obra Civil en Contrucción',
      43: 'Obra Civil Terminada',
      44: 'Rotura de Cristales',
      45: 'Rotura de Maquinaria',
      35: 'Otro',
      53: 'CRIME/BBB',
      54: 'D&O',
      55: 'FIPI',
      56: 'CYBER',
      57: 'VCAPS',
      58: 'RCP MÉDICA',
      59: 'E&O MISCELANEO',
      60: 'RIESGO POLITICO',
      61: 'RC SERVIDORES PUBLICOS',
      62: 'RCP',
      63: 'Terrorismo y Sabotaje'
    }

def getOrgInfo(request):
    orginfo = OrgInfo.objects.filter(org_name = request.GET.get('org'))
    campo_celula = False
    campo_lineanegocio = False
    campo_agrupacion = False
    moduleName='Célula'
    if orginfo.exists():
        campo_celula = orginfo[0].filtros_celula
        campo_lineanegocio = orginfo[0].filtros_lineanegocio
        campo_agrupacion = orginfo[0].filtros_agrupacion
        moduleName = orginfo[0].moduleName
    return campo_celula,campo_agrupacion,campo_lineanegocio, moduleName


@api_view(['POST'])
@permission_classes((IsAuthenticatedV2, CobranzaReportesPermissionsV2, IsOrgMemberV2))
def Service_ReporteCobranzaExcel(request):
    request.data['Authorization'] = request.META['HTTP_AUTHORIZATION']
    request.data['org'] = request.GET.get('org')    
    try:
        user_info = UserInfo.objects.get(user=request.user)
    except UserInfo.DoesNotExist:
        user_info = None
    except Exception as er:
        print(er)
        user_info = None

    if user_info == None:
        perfil_restringido_id = None
    else:
        try:
            if user_info.perfil_restringido:
                perfil_restringido = PerfilUsuarioRestringido.objects.get(pk=user_info.perfil_restringido.id)
                perfil_restringido_id = perfil_restringido.pk
            else:
                perfil_restringido_id = None
        except Exception as ert:
            perfil_restringido_id = None
    
    request.data['perfil_restringido_id'] = perfil_restringido_id  
    verReferenciadores = is_perm_ver_referenciadores(request)  
    request.data['verReferenciadores'] = verReferenciadores    
    request.data['user'] = request.user    
    try:
        # del request.data['cols1']
        request.data['cols'] =request.data['cols1'] if 'cols1' in request.data else []
    except Exception as e:
        print(e)
        pass

    if request.GET.get('org') == 'ancora':
        url = settings.SERVICEEXCEL_ANCORA_URL
    else:
        url = settings.SERVICEEXCEL_2_URL
    r = requests.post(url + 'reporte_cobranza/', headers={'Authorization': request.META['HTTP_AUTHORIZATION']}, data = request.data, stream=True)    
    return Response(r.text, status = r.status_code)   

@api_view(['POST'])
@permission_classes((IsAuthenticatedV2, CobranzaReportesPermissionsV2, IsOrgMemberV2))
def Service_ReporteCobranzaFianzasExcel(request):
    #Entrada
    valueCom = True
    try:
        valueCom = comisions(request)
    except Exception as ers:
        valueCom =  True
    if request.data['recibos_pagados']:
        recibos_pagados = True
    else:
        recibos_pagados = False

    if request.data['recibos_no_pagados']:
        recibos_no_pagados = True 
    else:
        recibos_no_pagados = False

    if request.data['recibos_liquidados']:
        recibos_liquidados = True 
    else:
        recibos_liquidados = False

    if request.data['recibos_conciliados']:
        recibos_conciliados = True 
    else:
        recibos_conciliados = False

    if request.data['recibos_delivered']:
        recibos_delivered = True 
    else:
        recibos_delivered = False

    if request.data['recibos_precancel']:
        recibos_precancel = True
    else:
        recibos_precancel = False

    if request.data['recibos_precancelados']:
        recibos_precancelados = True
    else:
        recibos_precancelados = False

    if request.data['recibos_precancel']:
        recibos_precancel = True
    else:
        recibos_precancel = False

    asc = int(request.data['asc'])
    report_by = int((request.data['report_by']))
    p_total_total_pesos = 0
    p_neta_total_pesos = 0
    comision_total_pesos = 0
    p_neta_total_dolares = 0
    p_total_total_dolares = 0
    comision_total_dolares = 0

    choices_report_by = {
        1: {'atributo': 'fecha_inicio', 'Nombre': 'Fecha de vigencia'},
        2: {'atributo': 'vencimiento', 'Nombre': 'Fecha de Vencimiento'}, 
        3: {'atributo': 'pay_date', 'Nombre': 'Fecha de Pago'}, 
        4: {'atributo': 'liquidacion_date', 'Nombre': 'Fecha de Liquidación'}, 
        5: {'atributo': 'conciliacion_date', 'Nombre':  'Fecha de Conciliación'}, 
        6: {'atributo': 'updated_at', 'Nombre': 'Fecha de Operacion'}, 
        7: {'atributo': 'promesa_pago', 'Nombre': 'Fecha de Promesa de Pago'}, 
    }

    date_by =  choices_report_by[report_by]['Nombre']
    try:
        f = "%d/%m/%Y %H:%M:%S"        
        since = datetime.strptime(request.data['since'] , f)
        until = datetime.strptime(request.data['until'] , f)
    except:
        f = "%m/%d/%Y %H:%M:%S"        
        since = datetime.strptime(request.data['since'] , f)
        until = datetime.strptime(request.data['until'] , f)

    info_org = getInfoOrg(request)
    if len(info_org['logo']) != 0:
        archivo_imagen = 'https://miurabox-public.s3.amazonaws.com/cas/' + info_org['logo']
        # archivo_imagen = get_presigned_url("cas/{url}".format(url=info_org['logo']),28800) 
    else:
      archivo_imagen = 'saam.jpg'
    
    if recibos_liquidados and report_by == 4:
        tipo_reporte ="Liquidaciones Efectuadas del " + str(since.strftime("%d/%m/%y")) + " al " + str(until.strftime("%d/%m/%y"))+' ('+ str(date_by)+')'
    elif recibos_no_pagados and not recibos_liquidados and not recibos_conciliados and not recibos_pagados and not recibos_precancelados:
        tipo_reporte = "Reporte recibos pendientes del " + str(since.strftime("%d/%m/%y")) + " al " + str(until.strftime("%d/%m/%y"))+' ('+ str(date_by)+')'
    else:
        tipo_reporte = "Reporte de cobranzas del " + str(since.strftime("%d/%m/%y")) + " al " + str(until.strftime("%d/%m/%y"))+' ('+ str(date_by)+')'

    try:
        ui = UserInfo.objects.get(user= request.user)
        perfil = None
        try:
            if ui.perfil_restringido:
                perfil = PerfilUsuarioRestringido.objects.get(pk = ui.perfil_restringido.id)
            else:
                perfil = None
        except Exception as ert:
            perfil = None
    except Exception as er:
        perfil = None
    try:
        celula = request.data['celula']
    except Exception as e:
        celula = 0
        
    verReferenciadores = is_perm_ver_referenciadores(request)  
    payload = {
        "user_req":request.user,
        "date_by" : date_by,
        "tipo_reporte": tipo_reporte,
        "verReferenciadores": verReferenciadores,
        "since": since,
        "until": until,
        "org": request.GET.get('org'),
        "identifier": request.data['identifier'],
        "programap": request.data['programap'],
        "poliza_number": request.data['poliza_number'],
        "vendedor": int(request.data['vendedor']),
        "celula" : celula,
        "ramos_sel" : (request.data['ramos']),
        "subramos_sel" : (request.data['subramos']),
        "providers_sel" : (request.data['providers'] if request.data['providers'] is not 0 else []),
        "report_by" : (request.data['report_by']),
        "contratante" : request.data['contratante'],
        "group" : request.data['grupo'],
        "excel_type" : 2,
        "recibos_pagados": recibos_pagados,
        "recibos_no_pagados": recibos_no_pagados,
        "recibos_liquidados": recibos_liquidados,
        "recibos_conciliados": recibos_conciliados,
        "recibos_delivered": recibos_delivered,
        "recibos_precancelados": recibos_precancelados,
        "recibos_precancel": recibos_precancel,
        'cols': request.data['cols1'] if 'cols1' in request.data else [],
        'valueCom':valueCom,
        'user':perfil.id if perfil else None,          
        "month_factura": request.data['month_factura'],
        "year_factura": request.data['year_factura'],
        'Authorization': request.META['HTTP_AUTHORIZATION']
    }
    if request.GET.get('org') == 'ancora':
        url = settings.SERVICEEXCEL_ANCORA_URL
    else:
        url = settings.SERVICEEXCEL_2_URL
    r = requests.post(url+ 'reporte_cobranza_fianza/', headers={'Authorization': request.META['HTTP_AUTHORIZATION']}, data = payload, stream=True)
    return Response(r.text, status = r.status_code)   

@api_view(['POST'])
@permission_classes((IsAuthenticatedV2, CobranzaReportesPermissionsV2, IsOrgMemberV2))
def Service_ReporteFianzasBenExcel(request):
    st = [1,2,10,11,12,13,14,15]
    grupos = Group.objects.filter(org_name = request.GET.get('org'))

    providers = list(Provider.objects.filter(org_name = request.GET.get('org'),provider_type = 2).values_list('pk', flat=True))
    ramos = list(Ramos.objects.filter(org_name = request.GET.get('org'), provider__in = providers).values_list('pk', flat=True))
    subramos = list(SubRamos.objects.filter(org_name = request.GET.get('org'), ramo_id__in = ramos).values_list('pk', flat=True))   
    cves = list(Claves.objects.filter(org_name = request.GET.get('org')).values_list('pk', flat=True))
    fianza = []  
    fianza = Polizas.objects.filter(status__in = st, 
                                   org_name = request.GET.get('org'),
                                   ramo__in = ramos, 
                                   subramo__in = subramos, 
                                   aseguradora__in = providers,
                                   clave__in = cves, document_type__in =[7,8])

    # Vigencia
    try:
        dataToFilter = getDataForPerfilRestricted(request, request.GET.get('org'))
    except Exception as er:
        dataToFilter = {}
    if dataToFilter:
        # Contratantes***
        polizasCl = Polizas.objects.filter(document_type__in = [1,3,11,7,8,12,6,4], org_name = request.GET.get('org'))
        polizasToF = Polizas.objects.filter(document_type__in = [1,3,11,7,8], org_name = request.GET.get('org'))
        if dataToFilter['ccpr']:
            polizasToF = polizasToF.filter(contractor__in = list(dataToFilter['ccpr']))
        if dataToFilter['cgpr']:
            polizasToF = polizasToF.filter(contractor__group__in = list(dataToFilter['cgpr']))
        if dataToFilter['ccepr']:
            polizasToF = polizasToF.filter(contractor__cellule__in = list(dataToFilter['ccepr']))
        if dataToFilter['crpr']:
            polizasToF = polizasToF.filter(contractor__vendor__in = list(dataToFilter['crpr']))
        if dataToFilter['cspr']:
            polizasToF = polizasToF.filter(contractor__sucursal__in = list(dataToFilter['cspr']))
        # Pólizas ****
        if dataToFilter['pppr']:
            polizasToF = polizasToF.filter(pk__in = list(dataToFilter['pppr']))
        if dataToFilter['pgpr']:
            polizasToF = polizasToF.filter(contractor__group__in = list(dataToFilter['pgpr']))
        if dataToFilter['prpr']:
            polizasToF = polizasToF.filter(ref_policy__referenciador__in = list(dataToFilter['prpr']))
        if dataToFilter['pcapr']:
            polizasToF = polizasToF.filter(clave__in = list(dataToFilter['pcapr']))
        if dataToFilter['psrpr']:
            polizasToF = polizasToF.filter(subramo__subramo_code__in = list(dataToFilter['psrpr']))
        if dataToFilter['paspr']:
            polizasToF = polizasToF.filter(aseguradora__in = list(dataToFilter['paspr']))
        if dataToFilter['pstpr']:
            polizasToF = polizasToF.filter(status__in = list(dataToFilter['pstpr']))
        
        polizasCT = polizasCl.filter(document_type = 12, parent__in = list(polizasToF))
        polizasGT = polizasCl.filter(document_type = 6, parent__parent__parent__in = list(polizasToF))
        polizasFin = list(polizasToF.values_list('pk', flat = True)) + list(polizasCT.values_list('pk', flat = True)) + list(polizasGT.values_list('pk', flat = True))
        fianza = fianza.filter(pk__in = list(polizasFin))
    
    response1 = BeneficiariesContract.objects.filter(poliza_many__in = list(fianza),org_name=request.GET.get('org'), type_person = 1).distinct('rfc')
    response2 = BeneficiariesContract.objects.filter(poliza_many__in = list(fianza),org_name=request.GET.get('org'), type_person = 2).distinct('rfc')
    bensc = list(response1) + list(response2) 
    # Empieza insertado de imagen
    info_org = getInfoOrg(request)
    if len(info_org['logo']) != 0:
        archivo_imagen = 'https://miurabox-public.s3.amazonaws.com/cas/' + info_org['logo']
        # archivo_imagen = get_presigned_url("cas/{url}".format(url=info_org['logo']),28800) 
    else:
      archivo_imagen = 'saam.jpg'
    tipo_reporte = "Reporte de Beneficiarios de Fianzas"

    si_com = comisions(request)

    columns = ['Nombre','RFC','Teléfono', 'Correo Electrónico']
      
    # ******************************************
    # Empieza insertado de imagen
    info_org = getInfoOrg(request)
    if len(info_org['logo']) != 0:
        archivo_imagen = 'https://miurabox-public.s3.amazonaws.com/cas/' + info_org['logo']
        # archivo_imagen = get_presigned_url("cas/{url}".format(url=info_org['logo']),28800) 
    else:
      archivo_imagen = 'saam.jpg'
    # print(info_org)
    tipo_reporte = "Reporte Beneficiarios de fianzas "
    
    bonovariable = []
    beneficiarios_name = []
    beneficiarios_rfc = []
    asegurado = []
    
    registros = len(bensc)
    beneficiarios_name = []
    beneficiarios_rfc = []
    telefono = []
    correo = []
    for r in bensc:
        beneficiario_name = "%s %s %s"%(r.first_name, r.last_name, r.second_last_name) if r.first_name else r.j_name
        try:
            beneficiario_name = ((((((beneficiario_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'') 
        except:
            pass
        beneficiario_rfc = r.rfc if r.rfc else ''
        try:
            beneficiario_rfc = ((((((beneficiario_rfc).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'') 
        except:
            pass
        beneficiario_ph = r.phone_number if r.phone_number else ''
        beneficiario_ce = r.email if r.email else ''
            
        beneficiarios_name.append(beneficiario_name)
        beneficiarios_rfc.append(beneficiario_rfc)
        telefono.append(beneficiario_ph)
        correo.append(beneficiario_ce)

    obj = {
        'nombre': str(list(beneficiarios_name)),
        'rfc': str(list(beneficiarios_rfc)),
        'telefono': str(list(telefono)),
        'correo' : str(list(correo)),
        'tipo_reporte': tipo_reporte,
        'email_org':info_org['email'],
        'phone_org':info_org['phone'],
        'webpage_org':info_org['webpage'],
        'address_org':info_org['address'],
        'urlname_org':info_org['name'],
        }  
    obj['columns'] = str(list(columns))
    obj['imagen'] = archivo_imagen
    obj['registros'] = (registros)
    r = requests.post(settings.SERVICEEXCEL_URL + 'get-fianzasbenExcelReporte/', obj,
    # headers = {
    # 'Authorization':'Bearer %s'%request.user.user_info.fi_token_refresh,
    # # 'Content-Type':'application/json' 
    # },
    stream=True)
    response_data= r.text

    response = HttpResponse(r.content,content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

    return response
# Normal reporte
@api_view(['POST'])
@permission_classes((IsAuthenticatedV2, CobranzaReportesPermissionsV2, IsOrgMemberV2))
def Service_ReporteCobranza1Excel(request):
    select_insurance = int(request.data['recibos_por'])
    option = int(request.data['option'])
    group_by = int(request.data['group_by'])
    ramos_sel = (request.data['ramos'])
    subramos_sel = (request.data['subramos'])
    providers_sel = (request.data['providers'])
    report_by = (request.data['report_by'])
    users_sel = (request.data['users'])
    user_pay = (request.data['user_pay'])
    type_contractor = request.data['type_contractor']
    contratante = request.data['contratante']
    group = request.data['grupo']
    valDolar = request.data['valDolar']
    valUdi = request.data['valUdi']
    p_total_total_pesos = 0
    p_neta_total_pesos = 0
    comision_total_pesos = 0
    p_neta_total_dolares = 0
    p_total_total_dolares = 0
    comision_total_dolares = 0
    # --------****
    valueCom = True
    try:
        valueCom = comisions(request)
    except Exception as ers:
        valueCom =  True
    # Los siguientes try son porque no estan en la url http://tag.localhost:3000/#/reportes/cobranzaLiquidaciones
    try:
        subgrupo = request.data['subgrupo']
    except:
        subgrupo = 0

    try:
        subsubgrupo = request.data['subsubgrupo']
    except:
        subsubgrupo = 0

    try:
        nivelagrupacion = request.data['groupinglevel']
    except:
        nivelagrupacion = 0

    try:
        nivelagrupacion = request.data['groupinglevel']
    except:
        nivelagrupacion = 0

    try:
        subnivel = request.data['subgrupinglevel']
    except:
        subnivel = 0

    try:
        subsubnivel = request.data['subsubgrupinglevel']
    except:
        subsubnivel = 0

    try:
        bsLine = request.data['businessLine']
    except:
        bsLine = 0

    try:
        clasificacion = request.data['classification']
    except:
        clasificacion = 0



    try:
        celula = request.data['celula']
    except Exception as e:
        celula = int(0)

    try:
        onlyCaratula = int(request.data['only_caratula'])
    except Exception as e:
        onlyCaratula = 0

    try:
        tipo_folio_buscar = request.data['tipo_folio_buscar']
    except:
        tipo_folio_buscar = 0

    try:
        folio_a_buscar = request.data['folio_a_buscar']
    except:
        folio_a_buscar = 0

    try:
        usuario_owner = request.data['usuario_owner']
    except:
        usuario_owner = 0

    if 'tipo_folio_buscar' in request.data and request.data['tipo_folio_buscar'] and request.data['tipo_folio_buscar'] != 0:
        if usuario_owner:
            users = list(User.objects.filter(pk = usuario_owner).values_list('pk', flat=True))    
        else:
            users = list ( UserInfo.objects.filter(org_name = request.GET.get('org')).values_list('user__id', flat = True ) )


        if int(tipo_folio_buscar) == 1:
            recibos = Recibos.objects.filter(org_name = request.GET.get('org'), folio_pago = folio_a_buscar).exclude(status__in = [0])
            recibos = recibos.filter(org_name = request.GET.get('org'),owner__in = users)

        else:
            recibos = Recibos.objects.filter(org_name = request.GET.get('org'), liquidacion_folio = folio_a_buscar).exclude(status__in = [0])
            recibos = recibos.filter(org_name = request.GET.get('org'),owner__in = users)

    else:

        # Estatus
        if request.data['recibos_pagados']:
            recibos_pagados = True
        else:
            recibos_pagados = False

        if request.data['recibos_no_pagados']:
            recibos_no_pagados = True 
        else:
            recibos_no_pagados = False

        if request.data['recibos_liquidados']:
            recibos_liquidados = True 
        else:
            recibos_liquidados = False

        if request.data['recibos_conciliados']:
            recibos_conciliados = True 
        else:
            recibos_conciliados = False

        if request.data['recibos_delivered']:
            recibos_delivered = True 
        else:
            recibos_delivered = False

        if request.data['recibos_precancel']:
            recibos_precancel = True
        else:
            recibos_precancel = False

        if request.data['recibos_precancelados']:
            recibos_precancelados = True
        else:
            recibos_precancelados = False

        if request.data['recibos_precancel']:
            recibos_precancel = True
        else:
            recibos_precancel = False

        # Extra variables
        provider = request.data['provider']
        identifier = request.data['identifier']
        vendedor = int(request.data['vendedor'])
        ramo = request.data['ramo']
        subramo = request.data['subramo']
        since = request.data['since']
        until = request.data['until']
        cve = request.data['cve']
        payment = request.data['payment']


        excel_type = int(request.data['export_type'])
        order = int(request.data['order'])
        try:
            sucursal = int(request.data['sucursal'])
        except Exception as e:
            sucursal = int(0)
        asc = int(request.data['asc'])

        try:
            domiciliado =  list(request.data['domiciliados'])
        except:

            domiciliado = []
        
        
        # --------****
        # Forma de pago
        if int(payment) > 0:
            fp = [int(payment)]
        else:
            fp = [12,24,6,5,4,3,2,1,14,7,15]

        # Identificador
        if identifier != '0':
            identificador = identifier
        else:
            identificador = ''

        # Varios creadores
        if (users_sel):
            users = list(User.objects.filter(pk__in = (users_sel)).values_list('pk', flat=True))
        else:
            users = list(User.objects.values_list('pk', flat=True))
        # Pagado por
        if (user_pay):
            users_pay = list(User.objects.filter(pk__in = (user_pay)).values_list('pk', flat=True))
        else:
            users_pay = list(User.objects.values_list('pk', flat=True))

        # Varias companias
        if (providers_sel):
            providers = list(Provider.objects.filter(pk__in = (providers_sel)).values_list('pk', flat=True))
        else:
            providers = list(Provider.objects.filter(org_name = request.GET.get('org')).values_list('pk', flat=True))

        # Clave
        try:
          clave = int(cve)
          if clave > 0:
            cves = list(Claves.objects.filter(clave__icontains = cve, org_name = request.GET.get('org')).values_list('pk', flat=True))
          else:
            cves = list(Claves.objects.filter(org_name = request.GET.get('org')).values_list('pk', flat=True))
        except:
            cve_filters = [Q(clave__icontains = cve),Q(name__icontains = cve)]
            cves = list(Claves.objects.filter(reduce(operator.or_,cve_filters), org_name = request.GET.get('org')).values_list('pk', flat=True))

        # Bonos
        bonos = Bonos.objects.filter(org_name = request.GET.get('org'), 
                                     aseguradora__in = providers,
                                     clave__in = cves,
                                     owner__in = users)

        # Varios ramos
        if (ramos_sel):
            bonos = []
            ramos = list(Ramos.objects.filter(org_name = request.GET.get('org'), provider__in = providers,ramo_code__in=ramos_sel).values_list('pk', flat=True))
        else:
            ramos = list(Ramos.objects.filter(org_name = request.GET.get('org'), provider__in = providers).values_list('pk', flat=True))
        
        # Varios subramos
        if (subramos_sel):
            bonos = []
            subramos = list(SubRamos.objects.filter(org_name = request.GET.get('org'), ramo__in = ramos,subramo_code__in= subramos_sel).values_list('pk', flat=True))
        else:
            subramos = list(SubRamos.objects.filter(org_name = request.GET.get('org'), ramo__in = ramos).values_list('pk', flat=True))


        # Grupo
        try:
            if int(group) > 0:
                bonos = []
                grupos = Group.objects.get(pk = int(group))
            else:
                grupos = Group.objects.filter(org_name = request.GET.get('org'))
        except:
            grupos = Group.objects.filter(org_name=request.GET.get('org'))
        if int(group) > 0:
                grupos1 = Group.objects.get(pk = int(group))
                subg = Group.objects.filter(parent__id = int(group), type_group = 2, org_name=request.GET.get('org')).values_list('pk', flat=True)
                subsubg = Group.objects.filter(parent__id__in = subg, type_group = 3, org_name=request.GET.get('org')).values_list('pk', flat=True)
                allgrupos = list(subg) + list(subsubg)
                allgrupos.append(grupos1.id)
                grupos = Group.objects.filter(pk__in = allgrupos, org_name=request.GET.get('org'))
        else:
                grupos = Group.objects.filter(org_name=request.GET.get('org'))

        if int(subgrupo) > 0:
                subg = Group.objects.get(pk = int(subgrupo), org_name=request.GET.get('org'))
                subsubg = Group.objects.filter(parent__id = int(subgrupo), type_group = 3, org_name=request.GET.get('org')).values_list('pk', flat=True)
                allgrupos =list(subsubg)
                allgrupos.append(subg.id)
                grupos = Group.objects.filter(pk__in = allgrupos, org_name=request.GET.get('org'))
        # else:
        #       grupos = Group.objects.filter(org_name=request.GET.get('org'))
        if int(subsubgrupo) > 0:
                grupos = Group.objects.get(pk = int(subsubgrupo), org_name=request.GET.get('org'))
        # else:
        #       grupos = Group.objects.filter(org_name = request.GET.get('org'))
        if int(clasificacion) > 0:
            clasifics = Classification.objects.get(pk = int(clasificacion), org_name=request.GET.get('org'))
        else:
            clasifics = Classification.objects.filter(org_name=request.GET.get('org'))

        # Filtro por cliente / grupo
        # Se introdujo cliente
        # else:# No hay cliente
        if int(group) >0:
            contratantes = Contractor.objects.filter(group = (grupos))
        else:
            contratantes = Contractor.objects.filter(org_name = request.GET.get('org'))
        if int(contratante) > 0 :
            contratantes = list(contratantes.filter(pk = int(contratante)).values_list('pk', flat = True))

        polizas = Polizas.objects.filter(contractor__in = contratantes,
                                        org_name = request.GET.get('org'),
                                         aseguradora__in = providers,
                                         ramo__in = ramos,
                                         subramo__in = subramos,
                                         clave__in = cves,
                                         owner__in = users).exclude(status__in = [1,2,0]).exclude(document_type__in = [2,6,10])
        if int(group) > 0:
            carat = polizas.filter(document_type__in = [1,3,11])
            carat = carat.filter(contractor__group = grupos).values_list('pk', flat = True)
            # pol = polizas.filter(document_type = 12).values_list('pk', flat = True)
            only_caratulas = Polizas.objects.filter(pk__in = carat,document_type = 11)
            pol = polizas.filter(document_type = 12, parent__in = only_caratulas).values_list('pk', flat = True)
            polizas = list(carat) + list(pol)
            polizas = Polizas.objects.filter(pk__in = polizas)
        # ----------------------******************************---------------------------------------------------
        # -----------------------------***********************************************-----------------------------------   
        if int(clasificacion) > 0 :
            polizas = polizas.filter(contractor__classification = clasifics)
        if int(celula) > 0 :
            polizas = polizas.filter(celula = celula)
        
        gp = nivelagrupacion
        gp1= subnivel
        gp2 = subsubnivel

        if(nivelagrupacion == 0):
            nivelagrupacion = GroupingLevel.objects.filter(org_name = request.GET.get('org'), type_grouping = 1).values_list('pk', flat = True)
        else :
            nivelagrupacion = GroupingLevel.objects.filter(id = nivelagrupacion).values_list('pk', flat = True)



        if(subnivel == 0):
            subnivel = GroupingLevel.objects.filter(org_name = request.GET.get('org'), type_grouping = 2, parent__in = list(nivelagrupacion)).values_list('pk', flat = True)
        else :
            subnivel = GroupingLevel.objects.filter(id = subnivel).values_list('pk', flat = True)



        if(subsubnivel == 0):
            subsubnivel = GroupingLevel.objects.filter(org_name = request.GET.get('org'), type_grouping = 3, parent__in = list(subnivel)).values_list('pk', flat = True)
        else :
            subsubnivel = GroupingLevel.objects.filter(id = subsubnivel).values_list('pk', flat = True)

        niveles = list(subsubnivel) + list(subnivel) + list(nivelagrupacion)
        
        if gp > 0 or gp1 > 0 or gp2 > 0:
            polizas = polizas.filter(groupinglevel__in = niveles)


        if int(bsLine) > 0:
            if int(bsLine) == 3:
                polizas = polizas.filter(business_line = 0) 
            else:
                polizas = polizas.filter(business_line = bsLine)
        # -----------------------------***********************************************-----------------------------------

        # Filtro de vendedor
        if vendedor > 0 :
            with open(os.path.join(settings.MEDIA_ROOT, 'file.txt'), 'w') as f:
                f.write(str(vendedor))
            vendors = list(Vendedor.objects.filter(pk = int(vendedor)).values_list('pk', flat=True))
            with open(os.path.join(settings.MEDIA_ROOT, 'file_1.txt'), 'w') as f:
                f.write(str(vendors))
            # polizas = polizas.filter(vendor__id__in = vendors)
            polizas = polizas.filter(ref_policy__referenciador__id__in = [vendedor])
            with open(os.path.join(settings.MEDIA_ROOT, 'file_2.txt'), 'w') as f:
                f.write(str(len(polizas)))

            #fianzas = fianzas.filter(vendor__id__in = vendors)
            if bonos:
                bonos = bonos.filter(vendor__id__in = vendors)

        # Filtro por identificador
        if identificador:
            polizas = polizas.filter(identifier__icontains = identificador)
            #fianzas = fianzas.filter(identifier__icontains = identificador)


        if select_insurance == 1:
            polizas = polizas.filter(document_type = 1)    
        elif select_insurance == 4:
            polizas = polizas.filter(document_type__in = [3,4])
        elif select_insurance == 2:
            polizas = polizas.filter(document_type__in = [7,8])
        elif select_insurance == 5:
            polizas = polizas.filter(document_type__in = [11,12])

        if onlyCaratula != 0:
            polizas = polizas.filter(Q(pk=onlyCaratula) | Q(parent__id=onlyCaratula), Q(document_type__in = list([11,12])),) 
        # Filtro excluir precanceladas
        if recibos_precancel:
            polizas = polizas.exclude(status = 4)
            #fianzas = fianzas.exclude(status = 4)

        parents = polizas.filter(document_type = 3)
        subgrupos = Polizas.objects.filter(parent__in = parents, document_type = 4, org_name = request.GET.get('org')).values_list('id', flat = True)
        recibos = Recibos.objects.filter(Q(poliza__id__in = polizas) | Q(bono__id__in = bonos) | Q(poliza__in = subgrupos),
                                         isActive = True, 
                                         isCopy = False,
                                         org_name = request.GET.get('org')).exclude(status__in = [2,0]).filter(receipt_type__in = [1,2,3,4])
        

        with open(os.path.join(settings.MEDIA_ROOT, 'file_3.txt'), 'w') as f:
                f.write(str(len(recibos)))
        # Filtro domiciliados
        if len(domiciliado) > 0:
            recibos = recibos.filter(conducto_de_pago__in = list(domiciliado))


        # Filtro entregados
        if recibos_delivered:
            recibos = recibos.exclude(delivered = True)

        # Filtro de fechas
        try:
            f = "%d/%m/%Y %H:%M:%S"        
            since = datetime.strptime(since , f)
            until = datetime.strptime(until , f)
        except:
            f = "%m/%d/%Y %H:%M:%S"        
            since = datetime.strptime(since , f)
            until = datetime.strptime(until , f)

        # Filtro reporte por
        if report_by == 3:
            date_filters = [Q(pay_date__gte=since),Q(pay_date__lte = until)]
        elif report_by == 4:
            date_filters = [Q(liquidacion_date__gte=since),Q(liquidacion_date__lte = until)]
        elif report_by == 2:
            date_filters = [Q(vencimiento__gte=since),Q(vencimiento__lte = until)]
        elif report_by == 6:
            date_filters = [Q(updated_at__gte=since),Q(updated_at__lte = until)]
        elif report_by == 5:
            date_filters = [Q(conciliacion_date__gte=since),Q(conciliacion_date__lte = until)]
        elif report_by == 7:
            date_filters = [Q(promesa_pago__gte=since),Q(promesa_pago__lte = until)]
        else:
            date_filters = [Q(fecha_inicio__gte=since),Q(fecha_inicio__lte = until)]

        # Filtro de estatus
        status_filter = []
        status_exclude = [0,7,2]

        if recibos_pagados:
            status_filter.append(1)        
        if recibos_no_pagados:
            status_filter.append(3)
            status_filter.append(4)
        if recibos_liquidados:
            status_filter.append(5)
        if recibos_conciliados:
            status_filter.append(6)  
        if recibos_precancelados:
            status_filter.append(8)   

        if user_pay:
            recibos = recibos.filter(user_pay__in = users_pay)
        recibos = recibos.filter(reduce(operator.and_, date_filters), 
                                 status__in = status_filter).exclude(status__in = status_exclude)

        
        # Filtro por tipo
        if select_insurance == 1:
            recibos = recibos.filter((Q(poliza__in = polizas)))
        elif select_insurance == 2:
            recibos = recibos.filter((Q(poliza__in = polizas)))
        elif select_insurance == 3:
            recibos = recibos.filter( Q(bono__in = bonos))
        elif select_insurance == 4:
            recibos = recibos.filter(Q(poliza__in = polizas))
        elif select_insurance == 5:
            recibos = recibos.filter(Q(poliza__in = polizas))

        if sucursal != 0:
            recibos = recibos.filter(poliza__sucursal__id = sucursal)

        # Filtro de opciones
        if option == 1:
            recibos = recibos.filter(receipt_type__in = [1,2,4])
        elif option == 2:
            recibos = recibos.filter(receipt_type__in = [3])

        with open(os.path.join(settings.MEDIA_ROOT, 'file_4.txt'), 'w') as f:
            f.write(str(len(recibos)))
    try:
        dataToFilter = getDataForPerfilRestricted(request, request.GET.get('org'))
    except Exception as er:
        dataToFilter = {}
    if dataToFilter:
        # Contratantes***
        polizasCl = Polizas.objects.filter(document_type__in = [1,3,11,7,8,12,6,4], org_name = request.GET.get('org'))
        polizasToF = Polizas.objects.filter(document_type__in = [1,3,11,7,8], org_name = request.GET.get('org'))
        if dataToFilter['ccpr']:
            polizasToF = polizasToF.filter(contractor__in = list(dataToFilter['ccpr']))
        if dataToFilter['cgpr']:
            polizasToF = polizasToF.filter(contractor__group__in = list(dataToFilter['cgpr']))
        if dataToFilter['ccepr']:
            polizasToF = polizasToF.filter(contractor__cellule__in = list(dataToFilter['ccepr']))
        if dataToFilter['crpr']:
            polizasToF = polizasToF.filter(contractor__vendor__in = list(dataToFilter['crpr']))
        if dataToFilter['cspr']:
            polizasToF = polizasToF.filter(contractor__sucursal__in = list(dataToFilter['cspr']))
        # Pólizas ****
        if dataToFilter['pppr']:
            polizasToF = polizasToF.filter(pk__in = list(dataToFilter['pppr']))
        if dataToFilter['pgpr']:
            polizasToF = polizasToF.filter(contractor__group__in = list(dataToFilter['pgpr']))
        if dataToFilter['pcepr']:
            polizasToF = polizasToF.filter(celula__in = list(dataToFilter['pcepr']))
        if dataToFilter['prpr']:
            polizasToF = polizasToF.filter(ref_policy__referenciador__in = list(dataToFilter['prpr']))
        if dataToFilter['pspr']:
            polizasToF = polizasToF.filter(sucursal__in = list(dataToFilter['pspr']))
        if dataToFilter['papr']:
            polizasToF = polizasToF.filter(groupinglevel__in = list(dataToFilter['papr']))
        if dataToFilter['pcapr']:
            polizasToF = polizasToF.filter(clave__in = list(dataToFilter['pcapr']))
        if dataToFilter['psrpr']:
            polizasToF = polizasToF.filter(subramo__subramo_code__in = list(dataToFilter['psrpr']))
        if dataToFilter['paspr']:
            polizasToF = polizasToF.filter(aseguradora__in = list(dataToFilter['paspr']))
        if dataToFilter['pstpr']:
            polizasToF = polizasToF.filter(status__in = list(dataToFilter['pstpr']))
        
        polizasCT = polizasCl.filter(document_type = 12, parent__in = list(polizasToF))
        polizasGT = polizasCl.filter(document_type = 6, parent__parent__parent__in = list(polizasToF))
        polizasFin = list(polizasToF.values_list('pk', flat = True)) + list(polizasCT.values_list('pk', flat = True)) + list(polizasGT.values_list('pk', flat = True))
        recibos = recibos.filter(poliza__in = list(polizasFin))    
    
    # Agrupación
    if int(group_by) == 0:
        recibos_pesos = recibos.filter(Q(poliza__f_currency = 1) | Q(bono__tipo_cambio= 1))
        recibos_dolares = recibos.filter(Q(poliza__f_currency = 2) | Q(bono__tipo_cambio= 2))
        recibos_udi = recibos.filter(poliza__f_currency = 3)
       
        p_total_total_pesos = recibos_pesos.aggregate(Sum('prima_total'))
        p_neta_total_pesos = recibos_pesos.aggregate(Sum('prima_neta'))
        comision_total_pesos = recibos_pesos.aggregate(Sum('comision'))

        p_total_total_dolares = recibos_dolares.aggregate(Sum('prima_total'))
        p_neta_total_dolares = recibos_dolares.aggregate(Sum('prima_neta'))
        comision_total_dolares = recibos_dolares.aggregate(Sum('comision'))
   
        
        p_total_total_udi = recibos_udi.aggregate(Sum('prima_total'))
        p_neta_total_udi = recibos_udi.aggregate(Sum('prima_neta'))
        comision_total_udi = recibos_udi.aggregate(Sum('comision'))
        
        sumas = {
            'p_total_total_pesos': p_total_total_pesos['prima_total__sum'],
            'p_neta_total_pesos': p_neta_total_pesos['prima_neta__sum'],
            'comision_total_pesos': comision_total_pesos['comision__sum'],

            'p_total_total_dolares': p_total_total_dolares['prima_total__sum'],
            'p_neta_total_dolares': p_neta_total_dolares['prima_neta__sum'],
            'comision_total_dolares': comision_total_dolares['comision__sum'],

            'p_total_total_udi': p_total_total_udi['prima_total__sum'],
            'p_neta_total_udi': p_neta_total_udi['prima_neta__sum'],
            'comision_total_udi': comision_total_udi['comision__sum'],
        }
        if valDolar == 0:
            sumas = sumas
        else:
            try:
                if sumas['p_total_total_dolares'] != None:
                    sumas['p_total_total_dolares'] = float(sumas['p_total_total_dolares']) * float(valDolar)

                if sumas['p_neta_total_dolares'] != None:
                    sumas['p_neta_total_dolares'] = float(sumas['p_neta_total_dolares']) * float(valDolar)

                if sumas['comision_total_dolares'] != None:
                    sumas['comision_total_dolares'] = float(sumas['comision_total_dolares']) * float(valDolar)

            except Exception as e:
                sumas['p_total_total_dolares'] = sumas['p_total_total_dolares']
                sumas['p_neta_total_dolares'] = sumas['p_neta_total_dolares']
                sumas['comision_total_dolares'] = sumas['comision_total_dolares']
        if valUdi == 0:
            sumas = sumas
        else:
            try:
                if sumas['p_total_total_udi'] != None:
                    sumas['p_total_total_udi'] = float(sumas['p_total_total_udi']) * float(valUdi)
                if sumas['p_neta_total_udi'] != None:
                    sumas['p_neta_total_udi'] = float(sumas['p_neta_total_udi']) * float(valUdi)
                if sumas['comision_total_udi'] != None:
                    sumas['comision_total_udi'] = float(sumas['comision_total_udi']) * float(valUdi)
            except Exception as e:
                sumas['p_total_total_udi'] = sumas['p_total_total_udi']
                sumas['p_neta_total_udi'] = sumas['p_neta_total_udi']
                sumas['comision_total_udi'] = sumas['comision_total_udi']
    else:
        try:
            if group_by == 1:
                prueba = {}
                recibos_pesos = recibos.filter(poliza__f_currency = 1)
                recibos_dolares = recibos.filter(poliza__f_currency = 2)
                recibos_udi = recibos.filter(poliza__f_currency = 3)
                prueba['pesos_pol'] = recibos_pesos.values('poliza__aseguradora__compania').annotate(Count('poliza__aseguradora')).annotate(Sum('prima_neta')).annotate(Sum('prima_total')).annotate(Sum('comision')).annotate(Sum('comision_conciliada')).order_by('poliza__aseguradora__alias')
                prueba['dolares_pol'] = recibos_dolares.values('poliza__aseguradora__compania').annotate(Count('poliza__aseguradora')).annotate(Sum('prima_neta')).annotate(Sum('prima_total')).annotate(Sum('comision')).annotate(Sum('comision_conciliada')).order_by('poliza__aseguradora__alias')
                prueba['pesos_fia'] = recibos_pesos.values('poliza__aseguradora__compania').annotate(Count('poliza__aseguradora')).annotate(Sum('prima_neta')).annotate(Sum('prima_total')).annotate(Sum('comision')).annotate(Sum('comision_conciliada')).order_by('poliza__aseguradora__alias')
                prueba['dolares_fia'] = recibos_dolares.values('poliza__aseguradora__compania').annotate(Count('poliza__aseguradora')).annotate(Sum('prima_neta')).annotate(Sum('prima_total')).annotate(Sum('comision')).annotate(Sum('comision_conciliada')).order_by('poliza__aseguradora__alias')
                # UDI
                prueba['udi_pol'] = recibos_udi.values('poliza__aseguradora__compania').annotate(Count('poliza__aseguradora')).annotate(Sum('prima_neta')).annotate(Sum('prima_total')).annotate(Sum('comision')).annotate(Sum('comision_conciliada')).order_by('poliza__aseguradora__alias')
                prueba['udi_fia'] = recibos_udi.values('poliza__aseguradora__compania').annotate(Count('poliza__aseguradora')).annotate(Sum('prima_neta')).annotate(Sum('prima_total')).annotate(Sum('comision')).annotate(Sum('comision_conciliada')).order_by('poliza__aseguradora__alias')
            
            elif group_by == 2:
                recibos_pesos = recibos.filter(poliza__f_currency = 1)
                recibos_dolares = recibos.filter(poliza__f_currency = 2)
                recibos_udi = recibos.filter(poliza__f_currency = 3)
                prueba = {}
                prueba['pesos_pol'] = recibos_pesos.values('poliza__ramo__ramo_name').annotate(Count('poliza__ramo')).annotate(Sum('prima_neta')).annotate(Sum('prima_total')).annotate(Sum('comision')).annotate(Sum('comision_conciliada')).order_by('poliza__ramo__ramo_name')
                prueba['dolares_pol'] = recibos_dolares.values('poliza__ramo__ramo_name').annotate(Count('poliza__ramo')).annotate(Sum('prima_neta')).annotate(Sum('prima_total')).annotate(Sum('comision')).annotate(Sum('comision_conciliada')).order_by('poliza__ramo__ramo_name')
                prueba['pesos_fia'] = recibos_pesos.values('poliza__ramo__ramo_name').annotate(Count('poliza__ramo')).annotate(Sum('prima_neta')).annotate(Sum('prima_total')).annotate(Sum('comision')).annotate(Sum('comision_conciliada')).order_by('poliza__ramo__ramo_name')
                prueba['dolares_fia'] = recibos_dolares.values('poliza__ramo__ramo_name').annotate(Count('poliza__ramo')).annotate(Sum('prima_neta')).annotate(Sum('prima_total')).annotate(Sum('comision')).annotate(Sum('comision_conciliada')).order_by('poliza__ramo__ramo_name')
                # UDI
                prueba['udi_pol'] = recibos_udi.values('poliza__ramo__ramo_name').annotate(Count('poliza__ramo')).annotate(Sum('prima_neta')).annotate(Sum('prima_total')).annotate(Sum('comision')).annotate(Sum('comision_conciliada')).order_by('poliza__ramo__ramo_name')
                prueba['udi_fia'] = recibos_udi.values('poliza__ramo__ramo_name').annotate(Count('poliza__ramo')).annotate(Sum('prima_neta')).annotate(Sum('prima_total')).annotate(Sum('comision')).annotate(Sum('comision_conciliada')).order_by('poliza__ramo__ramo_name')
                
            elif group_by == 3:
                recibos_pesos = recibos.filter(poliza__f_currency = 1)
                recibos_dolares = recibos.filter(poliza__f_currency = 2)
                recibos_udi = recibos.filter(poliza__f_currency = 3)
                prueba = {}
                prueba['pesos_pol'] = recibos_pesos.values('poliza__subramo__subramo_name').annotate(Count('poliza__subramo')).annotate(Sum('prima_neta')).annotate(Sum('prima_total')).annotate(Sum('comision')).annotate(Sum('comision_conciliada')).order_by('poliza__subramo__subramo_name')
                prueba['dolares_pol'] = recibos_dolares.values('poliza__subramo__subramo_name').annotate(Count('poliza__subramo')).annotate(Sum('prima_neta')).annotate(Sum('prima_total')).annotate(Sum('comision')).annotate(Sum('comision_conciliada')).order_by('poliza__subramo__subramo_name')
                prueba['pesos_fia'] = recibos_pesos.values('poliza__subramo__subramo_name').annotate(Count('poliza__subramo')).annotate(Sum('prima_neta')).annotate(Sum('prima_total')).annotate(Sum('comision')).annotate(Sum('comision_conciliada')).order_by('poliza__subramo__subramo_name')
                prueba['dolares_fia'] = recibos_dolares.values('poliza__subramo__subramo_name').annotate(Count('poliza__subramo')).annotate(Sum('prima_neta')).annotate(Sum('prima_total')).annotate(Sum('comision')).annotate(Sum('comision_conciliada')).order_by('poliza__subramo__subramo_name')
                # UDI
                prueba['udi_pol'] = recibos_udi.values('poliza__subramo__subramo_name').annotate(Count('poliza__subramo')).annotate(Sum('prima_neta')).annotate(Sum('prima_total')).annotate(Sum('comision')).annotate(Sum('comision_conciliada')).order_by('poliza__subramo__subramo_name')
                prueba['udi_fia'] = recibos_udi.values('poliza__subramo__subramo_name').annotate(Count('poliza__subramo')).annotate(Sum('prima_neta')).annotate(Sum('prima_total')).annotate(Sum('comision')).annotate(Sum('comision_conciliada')).order_by('poliza__subramo__subramo_name')
                
            elif group_by == 4:
                prueba = {}
                recibos_pesos_n = recibos.filter(poliza__f_currency = 1,poliza__contractor__type_person =1)
                recibos_pesos_j = recibos.filter(poliza__f_currency = 1,poliza__contractor__type_person =2)
                recibos_dolares_n = recibos.filter(poliza__f_currency = 2,poliza__contractor__type_person =1)
                recibos_dolares_j = recibos.filter(poliza__f_currency = 2,poliza__contractor__type_person =2)
                recibos_udi = recibos.filter(poliza__f_currency = 3)
                prueba_nat_pesos = recibos_pesos_n.values('poliza__contractor__group__group_name').annotate(Count('poliza__contractor__group__group_name')).annotate(Sum('prima_neta')).annotate(Sum('comision')).annotate(Sum('comision_conciliada')).annotate(Sum('prima_total')).order_by('poliza__contractor__group__group_name')
                prueba_nat_dolares = recibos_dolares_n.values('poliza__contractor__group__group_name').annotate(Count('poliza__contractor__group__group_name')).annotate(Sum('prima_neta')).annotate(Sum('comision')).annotate(Sum('comision_conciliada')).annotate(Sum('prima_total')).order_by('poliza__contractor__group__group_name')
                prueba_jur_pesos = recibos_pesos_j.values('poliza__contractor__group__group_name').annotate(Count('poliza__contractor__group__group_name')).annotate(Sum('prima_neta')).annotate(Sum('comision')).annotate(Sum('comision_conciliada')).annotate(Sum('prima_total')).order_by('poliza__contractor__group__group_name')
                prueba_jur_dolares = recibos_dolares_j.values('poliza__contractor__group__group_name').annotate(Count('poliza__contractor__group__group_name')).annotate(Sum('prima_neta')).annotate(Sum('comision')).annotate(Sum('comision_conciliada')).annotate(Sum('prima_total')).order_by('poliza__contractor__group__group_name')
                
                prueba['naturals_pesos'] = prueba_nat_pesos
                prueba['juridicals_pesos'] = prueba_jur_pesos
                prueba['naturals_dolares'] = prueba_nat_dolares
                prueba['juridicals_dolares'] = prueba_jur_dolares
            elif group_by == 5:
                prueba = {}
                recibos_pesos = recibos.filter(poliza__f_currency = 1)
                recibos_dolares = recibos.filter(poliza__f_currency = 2)
                prueba_p_pesos = recibos_pesos.values('poliza__ref_policy__referenciador__first_name', 'poliza__ref_policy__referenciador__last_name').annotate(Count('poliza__ref_policy__referenciador')).annotate(Sum('prima_neta')).annotate(Sum('comision')).annotate(Sum('comision_conciliada')).annotate(Sum('prima_total'))
                prueba_f_pesos = recibos_pesos.values('poliza__ref_policy__referenciador__first_name', 'poliza__ref_policy__referenciador__last_name').annotate(Count('poliza__ref_policy__referenciador')).annotate(Sum('prima_neta')).annotate(Sum('comision')).annotate(Sum('comision_conciliada')).annotate(Sum('prima_total'))
                prueba_p_dolares = recibos_dolares.values('poliza__ref_policy__referenciador__first_name', 'poliza__ref_policy__referenciador__last_name').annotate(Count('poliza__ref_policy__referenciador')).annotate(Sum('prima_neta')).annotate(Sum('comision')).annotate(Sum('comision_conciliada')).annotate(Sum('prima_total'))
                prueba_f_dolares = recibos_dolares.values('poliza__ref_policy__referenciador__first_name', 'poliza__ref_policy__referenciador__last_name').annotate(Count('poliza__ref_policy__referenciador')).annotate(Sum('prima_neta')).annotate(Sum('comision')).annotate(Sum('comision_conciliada')).annotate(Sum('prima_total'))

                prueba['fianzas_pesos'] = prueba_f_pesos
                prueba['fianzas_dolares'] = prueba_f_dolares

                prueba_prefs_pesos = recibos_pesos.values('poliza__ref_policy__referenciador__first_name', 'poliza__ref_policy__referenciador__last_name').annotate(Count('poliza__ref_policy__referenciador'),Count('poliza__ref_policy__referenciador__id')).annotate(Sum('prima_neta')).annotate(Sum('comision')).annotate(Sum('comision_conciliada')).annotate(Sum('prima_total')).order_by('poliza__ref_policy__referenciador__id')
                prueba_prefs_dols = recibos_dolares.values('poliza__ref_policy__referenciador__first_name', 'poliza__ref_policy__referenciador__last_name').annotate(Count('poliza__ref_policy__referenciador'),Count('poliza__ref_policy__referenciador__id')).annotate(Sum('prima_neta')).annotate(Sum('comision')).annotate(Sum('comision_conciliada')).annotate(Sum('prima_total')).order_by('poliza__ref_policy__referenciador__id')
                prueba['polizas_pesos'] = prueba_prefs_pesos
                prueba['polizas_dolares'] = prueba_prefs_dols
                c = prueba['polizas_pesos'].values('poliza__ref_policy__referenciador__first_name', 'poliza__ref_policy__referenciador__last_name','poliza__ref_policy__referenciador__id__count','prima_neta__sum','comision__sum','comision_conciliada__sum','prima_total__sum')
                c_ = prueba['polizas_dolares'].values('poliza__ref_policy__referenciador__first_name', 'poliza__ref_policy__referenciador__last_name','poliza__ref_policy__referenciador__id__count','prima_neta__sum','comision__sum','comision_conciliada__sum','prima_total__sum')
                prueba['polizas_pesos_refs'] = c
                prueba['polizas_dolares_refs'] = c_

            elif group_by == 7:
                prueba = {}
                recibos_pesos = recibos.filter(poliza__f_currency = 1)
                recibos_dolares = recibos.filter(poliza__f_currency = 2)
                prueba_p_pesos = recibos_pesos.values('poliza__owner__first_name', 'poliza__owner__last_name').annotate(Count('poliza__owner')).annotate(Sum('prima_neta')).annotate(Sum('comision')).annotate(Sum('comision_conciliada')).annotate(Sum('prima_total'))
                prueba_f_pesos = recibos_pesos.values('poliza__owner__first_name', 'poliza__owner__last_name').annotate(Count('poliza__owner')).annotate(Sum('prima_neta')).annotate(Sum('comision')).annotate(Sum('comision_conciliada')).annotate(Sum('prima_total'))
                prueba_p_dolares = recibos_dolares.values('poliza__owner__first_name', 'poliza__owner__last_name').annotate(Count('poliza__owner')).annotate(Sum('prima_neta')).annotate(Sum('comision')).annotate(Sum('comision_conciliada')).annotate(Sum('prima_total'))
                prueba_f_dolares = recibos_dolares.values('poliza__owner__first_name', 'poliza__owner__last_name').annotate(Count('poliza__owner')).annotate(Sum('prima_neta')).annotate(Sum('comision')).annotate(Sum('comision_conciliada')).annotate(Sum('prima_total'))
                prueba['polizas_pesos'] = prueba_p_pesos
                prueba['polizas_dolares'] = prueba_p_dolares
                prueba['fianzas_pesos'] = prueba_f_pesos
                prueba['fianzas_dolares'] = prueba_f_dolares
            recibos_pesos = recibos.filter(poliza__f_currency = 1)
            recibos_dolares = recibos.filter(poliza__f_currency = 2)
           
            p_total_total_pesos = recibos_pesos.aggregate(Sum('prima_total'))
            p_neta_total_pesos = recibos_pesos.aggregate(Sum('prima_neta'))
            comision_total_pesos = recibos_pesos.aggregate(Sum('comision'))

            p_total_total_dolares = recibos_dolares.aggregate(Sum('prima_total'))
            p_neta_total_dolares = recibos_dolares.aggregate(Sum('prima_neta'))
            comision_total_dolares = recibos_dolares.aggregate(Sum('comision'))

            sumas = {
                'p_total_total_pesos': p_total_total_pesos['prima_total__sum'],
                'p_neta_total_pesos': p_neta_total_pesos['prima_neta__sum'],
                'comision_total_pesos': comision_total_pesos['comision__sum'],
                'p_total_total_dolares': p_total_total_dolares['prima_total__sum'],
                'p_neta_total_dolares': p_neta_total_dolares['prima_neta__sum'],
                'comision_total_dolares': comision_total_dolares['comision__sum']
            }
        except Exception as e:
            pass
    # Empieza insertado de imagen
    choices_report_by = {
        1: {'atributo': 'fecha_inicio', 'Nombre': 'Fecha de vigencia'},
        2: {'atributo': 'vencimiento', 'Nombre': 'Fecha de Vencimiento'}, 
        3: {'atributo': 'pay_date', 'Nombre': 'Fecha de Pago'}, 
        4: {'atributo': 'liquidacion_date', 'Nombre': 'Fecha de Liquidación'}, 
        5: {'atributo': 'conciliacion_date', 'Nombre':  'Fecha de Conciliación'}, 
        6: {'atributo': 'updated_at', 'Nombre': 'Fecha de Operacion'}, 
        7: {'atributo': 'promesa_pago', 'Nombre': 'Fecha de Promesa de Pago'}, 
    }


    date_by =  choices_report_by[report_by]['Nombre']
    try:
        f = "%d/%m/%Y %H:%M:%S"        
        since = datetime.strptime(request.data['since'] , f)
        until = datetime.strptime(request.data['until'] , f)
    except:
        f = "%m/%d/%Y %H:%M:%S"        
        since = datetime.strptime(request.data['since'] , f)
        until = datetime.strptime(request.data['until'] , f)

    info_org = getInfoOrg(request)
    if len(info_org['logo']) != 0:
        archivo_imagen = 'https://miurabox-public.s3.amazonaws.com/cas/' + info_org['logo']
        # archivo_imagen = get_presigned_url("cas/{url}".format(url=info_org['logo']),28800) 
    else:
      archivo_imagen = 'saam.jpg'
    
    if recibos_liquidados and report_by == 4:
        tipo_reporte ="Liquidaciones Efectuadas del " + str(since.strftime("%d/%m/%y")) + " al " + str(until.strftime("%d/%m/%y"))+' ('+ str(date_by)+')'
    elif recibos_no_pagados and not recibos_liquidados and not recibos_conciliados and not recibos_pagados and not recibos_precancelados:
        tipo_reporte = "Reporte recibos pendientes del " + str(since.strftime("%d/%m/%y")) + " al " + str(until.strftime("%d/%m/%y"))+' ('+ str(date_by)+')'
    else:
        tipo_reporte = "Reporte de cobranzas del " + str(since.strftime("%d/%m/%y")) + " al " + str(until.strftime("%d/%m/%y"))+' ('+ str(date_by)+')'

    # Sheet header, first row
    row_num = 11
    # model = ModelsPermissions.objects.filter(user = request.user).values_list('pk', flat = True)
    # permiso = UserPermissions.objects.filter(model__in = list(model))
    # view_comision = permiso.get(permission_name = 'Comisiones')
    # if view_comision.checked:
    #     si_com = view_comision.checked
    # else:
    #     si_com = view_comision.checked

    
    verReferenciadores = is_perm_ver_referenciadores(request)  
    if excel_type == 1:
        rows_pesos = []
        columns = ['Agrupación','Prima neta','Prima Total','Comisión','Moneda','Registros','Comisión conciliada']       
        # ---------report excel service----
        if group_by == 1 or group_by == 2 or group_by == 3:
            if group_by == 1:
                prueba = {}
                values1 = ['poliza__aseguradora__compania','poliza__f_currency']

                recibos_pesos = recibos.filter(poliza__f_currency = 1)
                recibos_dolares = recibos.filter(poliza__f_currency = 2)
                prueba['pesos_pol'] = recibos_pesos.filter(poliza__document_type__in=[1, 3, 4]).values(*values1).annotate(Count('poliza__aseguradora')).annotate(Sum('prima_neta')).annotate(Sum('prima_total')).annotate(Sum('comision')).annotate(Sum('comision_conciliada')).order_by('poliza__aseguradora__alias')
                prueba['dolares_pol'] = recibos_dolares.filter(poliza__document_type__in=[1, 3, 4]).values(*values1).annotate(Count('poliza__aseguradora')).annotate(Sum('prima_neta')).annotate(Sum('prima_total')).annotate(Sum('comision')).annotate(Sum('comision_conciliada')).order_by('poliza__aseguradora__alias')
                prueba['pesos_fia'] = recibos_pesos.filter(poliza__document_type__in=[7, 8]).values(*values1).annotate(Count('poliza__aseguradora')).annotate(Sum('prima_neta')).annotate(Sum('prima_total')).annotate(Sum('comision')).annotate(Sum('comision_conciliada')).order_by('poliza__aseguradora__alias')
                prueba['dolares_fia'] = recibos_dolares.filter(poliza__document_type__in=[7, 8]).values(*values1).annotate(Count('poliza__aseguradora')).annotate(Sum('prima_neta')).annotate(Sum('prima_total')).annotate(Sum('comision')).annotate(Sum('comision_conciliada')).order_by('poliza__aseguradora__alias')
                # Columnas
                columns = ['Agrupación','Prima neta','Prima Total','Comisión','Moneda','Registros','Comisión conciliada']
                # Agrupación
                tipo_reporte = tipo_reporte + " por Aseguradora / Afianzadora"

                values2 = ['poliza__aseguradora__compania','prima_neta__sum','prima_total__sum','comision__sum','poliza__f_currency','poliza__aseguradora__count','comision_conciliada__sum']
                rows_pesos = prueba['pesos_pol'].values_list(*values2)
                rows_dolares = prueba['dolares_pol'].values_list(*values2)
                rows_pesosf = prueba['pesos_fia'].values_list(*values2)
                rows_dolaresf = prueba['dolares_fia'].values_list(*values2)

            elif group_by == 2:
                recibos_pesos = recibos.filter(poliza__f_currency = 1)
                recibos_dolares = recibos.filter(poliza__f_currency = 2)
                # prueba = recibos.values('poliza__ramo__ramo_name').annotate(Count('poliza__ramo')).annotate(Sum('prima_neta')).annotate(Sum('prima_total')).annotate(Sum('comision')).order_by('poliza__ramo__ramo_name')
                recibos_udi = recibos.filter(poliza__f_currency = 3) 
                
                prueba = {}
                prueba['pesos_pol'] = recibos_pesos.filter(poliza__document_type__in=[1, 3, 4]).values('poliza__ramo__ramo_name','poliza__f_currency').annotate(Count('poliza__ramo')).annotate(Sum('prima_neta')).annotate(Sum('prima_total')).annotate(Sum('comision')).annotate(Sum('comision_conciliada')).order_by('poliza__ramo__ramo_name')
                prueba['dolares_pol'] = recibos_dolares.filter(poliza__document_type__in=[1, 3, 4]).values('poliza__ramo__ramo_name','poliza__f_currency').annotate(Count('poliza__ramo')).annotate(Sum('prima_neta')).annotate(Sum('prima_total')).annotate(Sum('comision')).annotate(Sum('comision_conciliada')).order_by('poliza__ramo__ramo_name')

                prueba['pesos_fia'] = recibos_pesos.filter(poliza__document_type__in=[7, 8]).values('poliza__ramo__ramo_name','poliza__f_currency').annotate(Count('poliza__ramo')).annotate(Sum('prima_neta')).annotate(Sum('prima_total')).annotate(Sum('comision')).annotate(Sum('comision_conciliada')).order_by('poliza__ramo__ramo_name')
                prueba['dolares_fia'] = recibos_dolares.filter(poliza__document_type__in=[7, 8]).values('poliza__ramo__ramo_name','poliza__f_currency').annotate(Count('poliza__ramo')).annotate(Sum('prima_neta')).annotate(Sum('prima_total')).annotate(Sum('comision')).annotate(Sum('comision_conciliada')).order_by('poliza__ramo__ramo_name')
                # UDI
                prueba['udi_pol'] = recibos_udi.filter(poliza__document_type__in=[1, 3, 4]).values('poliza__ramo__ramo_name').annotate(Count('poliza__ramo')).annotate(Sum('prima_neta')).annotate(Sum('prima_total')).annotate(Sum('comision')).annotate(Sum('comision_conciliada')).order_by('poliza__ramo__ramo_name')
                prueba['udi_fia'] = recibos_udi.filter(poliza__document_type__in=[7, 8]).values('poliza__ramo__ramo_name','poliza__f_currency').annotate(Count('poliza__ramo')).annotate(Sum('prima_neta')).annotate(Sum('prima_total')).annotate(Sum('comision')).annotate(Sum('comision_conciliada')).order_by('poliza__ramo__ramo_name')
                
                tipo_reporte = tipo_reporte + " por Ramo"

                values = ['poliza__ramo__ramo_name','prima_neta__sum','prima_total__sum','comision__sum','poliza__f_currency','poliza__ramo__count','comision_conciliada__sum']
                rows_pesos = prueba['pesos_pol'].values_list(*values)
                rows_dolares = prueba['dolares_pol'].values_list(*values)
                rows_pesosf = prueba['pesos_fia'].values_list(*values)
                rows_dolaresf = prueba['dolares_fia'].values_list(*values)
                # UDI
                rows_UDIPol = prueba['udi_pol'].values_list(*values)
                rows_UDIFia = prueba['udi_fia'].values_list(*values)

            elif group_by == 3:
                recibos_pesos = recibos.filter(poliza__f_currency = 1)
                recibos_dolares = recibos.filter(poliza__f_currency = 2)
                prueba = {}
                # prueba = recibos.values('poliza__subramo__subramo_name').annotate(Count('poliza__subramo')).annotate(Sum('prima_neta')).annotate(Sum('prima_total')).annotate(Sum('comision')).order_by('poliza__subramo__subramo_name')

                values1 = ['poliza__subramo__subramo_name','poliza__f_currency']
                prueba['pesos_pol'] = recibos_pesos.exclude(poliza__document_type__in=[7, 8, 9, 10]).values(*values1).annotate(Count('poliza__subramo')).annotate(Sum('prima_neta')).annotate(Sum('prima_total')).annotate(Sum('comision')).annotate(Sum('comision_conciliada')).order_by('poliza__subramo__subramo_name')
                prueba['dolares_pol'] = recibos_dolares.exclude(poliza__document_type__in=[7, 8, 9, 10]).values(*values1).annotate(Count('poliza__subramo')).annotate(Sum('prima_neta')).annotate(Sum('prima_total')).annotate(Sum('comision')).annotate(Sum('comision_conciliada')).order_by('poliza__subramo__subramo_name')
                prueba['pesos_fia'] = recibos_pesos.filter(poliza__document_type__in=[7, 8, 9, 10]).values(*values1).annotate(Count('poliza__subramo')).annotate(Sum('prima_neta')).annotate(Sum('prima_total')).annotate(Sum('comision')).annotate(Sum('comision_conciliada')).order_by('poliza__subramo__subramo_name')
                prueba['dolares_fia'] = recibos_dolares.filter(poliza__document_type__in=[7, 8, 9, 10]).values(*values1).annotate(Count('poliza__subramo')).annotate(Sum('prima_neta')).annotate(Sum('prima_total')).annotate(Sum('comision')).annotate(Sum('comision_conciliada')).order_by('poliza__subramo__subramo_name')
                tipo_reporte = tipo_reporte + " por Subramo"

                values2 = ['poliza__subramo__subramo_name','prima_neta__sum','prima_total__sum','comision__sum','poliza__f_currency','poliza__subramo__count','comision_conciliada__sum']
                rows_pesos = prueba['pesos_pol'].values_list(*values2)
                rows_dolares = prueba['dolares_pol'].values_list(*values2)
                rows_pesosf = prueba['pesos_fia'].values_list(*values2)
                rows_dolaresf = prueba['dolares_fia'].values_list(*values2)
            
            agrupacion = []
            prima = []
            total = []
            comision = []
            moneda = []
            registrosA = []
            com_conciliada = []
            dolares = 0
            p = 0
            c_pesos = 0
            cc_pesos = 0
            c_dolares = 0
            cc_dolares = 0
            neta_pesos = 0
            neta_dolares = 0
            for row in rows_pesos:
                if row[0] != None:
                    row_num += 1
                    c_pesos = c_pesos + row[3]
                    cc_pesos = cc_pesos + row[6]
                    neta_pesos = neta_pesos + row[1]
                    if row[2]:
                        p = p + row[2]
                    ag = ((((((row[0]).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')    
                    prn = row[1]
                    tot = row[2]
                    com = row[3]
                    mon = 'Pesos'
                    regs = row[5]
                    cc = row[6]
                    agrupacion.append(ag)
                    prima.append(prn)
                    total.append(tot)
                    comision.append(com)
                    moneda.append(mon)
                    registrosA.append(regs)
                    com_conciliada.append(cc)
            # Pesos 2
            for row_1 in rows_pesosf:
                pesos_total_f = 0
                if row_1[0] != None:
                    row_num += 1
                    c_pesos = c_pesos + row_1[3]
                    cc_pesos = cc_pesos + row_1[6]
                    neta_pesos = neta_pesos + row_1[1]
                    if row_1[2]:
                        p = p + row_1[2]                    
                    ag = ((((((row_1[0]).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')   
                    prn = row_1[1]
                    tot = row_1[2]
                    com = row_1[3]
                    mon = 'Pesos'
                    regs = row_1[5]
                    cc = row_1[6]
                    agrupacion.append(ag)
                    prima.append(prn)
                    total.append(tot)
                    comision.append(com)
                    moneda.append(mon)
                    registrosA.append(regs)
                    com_conciliada.append(cc)
            # dolares 1
            for row_2 in rows_dolares:
                if row_2[0] != None:
                    row_num += 1
                    c_dolares = c_dolares + row_2[3]
                    if row_2[6]:
                        cc_dolares = cc_dolares + int(row_2[6])
                    else:
                        cc_dolares = cc_dolares
                    neta_dolares = neta_dolares + row_2[1]
                    if row_2[2]:
                        dolares = dolares + row_2[2]
                    ag = ((((((row_2[0]).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')   
                    prn = row_2[1]
                    tot = row_2[2]
                    com = row_2[3]
                    mon = 'Dolares'
                    regs = row_2[5]
                    cc = row_2[6]
                    agrupacion.append(ag)
                    prima.append(prn)
                    total.append(tot)
                    comision.append(com)
                    moneda.append(mon)
                    registrosA.append(regs)
                    com_conciliada.append(cc)
            # dolares 2               
            for row_2f in rows_dolaresf:
                    if row_2f[0] != None:
                        row_num += 1
                        c_dolares = c_dolares + row_2f[3]
                        cc_dolares = cc_dolares + row_2f[6]
                        neta_dolares = neta_dolares + row_2f[1]
                        if row_2f[2]:
                            dolares = dolares + row_2f[2]
                        ag = ((((((row_2f[0]).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')   
                        prn = row_2f[1]
                        tot = row_2f[2]
                        com = row_2f[3]
                        mon = 'Dolares'
                        regs = row_2f[5]
                        cc = row_2f[6]
                        agrupacion.append(ag)
                        prima.append(prn)
                        total.append(tot)
                        comision.append(com)
                        moneda.append(mon)
                        registrosA.append(regs)
                        com_conciliada.append(cc)
            obj = {                
                'agrupacion'   : str(list(agrupacion)),
                'prima'   : str(list(prima)),
                'total'   : str(list(total)),
                'comision'   : str(list(comision)),
                'moneda'   : str(list(moneda)),
                'registrosA'   : str(list(registrosA)),
                'com_conciliada'   : str(list(com_conciliada)),
                'dolares'   : '$ {:,.2f}'.format(dolares),
                'pesos'   : '$ {:,.2f}'.format(p),
                'cpesos'   : '$ {:,.2f}'.format(c_pesos),
                'cdolares'   : '$ {:,.2f}'.format(c_dolares),
                'ccpesos'   : '$ {:,.2f}'.format(cc_pesos),
                'ccdolares'   : '$ {:,.2f}'.format(cc_dolares),
                'npesos'   : '$ {:,.2f}'.format(neta_pesos),
                'ndolares'   : '$ {:,.2f}'.format(neta_dolares),
                'grupo': int(group_by),
                'tipo_reporte': tipo_reporte,
                'email_org':info_org['email'],
                'phone_org':info_org['phone'],
                'webpage_org':info_org['webpage'],
                'address_org':info_org['address'],
                'urlname_org':info_org['name'],
            }   

            obj['columns'] = columns
            obj['imagen'] = archivo_imagen
            obj['registros'] = len(agrupacion) 
            obj['typeReport'] = 2
            r = requests.post(settings.SERVICEEXCEL_URL + 'get-cobranzaAgrupadoExcelReporte/', obj,
            # headers = {
            # 'Authorization':'Bearer %s'%request.user.user_info.fi_token_refresh,
            # # 'Content-Type':'application/json' 
            # },
            stream=True)
            response_data= r.text

            response = HttpResponse(r.content,content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')
            return response
        elif group_by == 4:
            prueba = {}
            recibos_pesos_j = recibos.filter(poliza__f_currency = 1, poliza__contractor__type_person =2)
            recibos_dolares_j = recibos.filter(poliza__f_currency = 2, poliza__contractor__type_person =2)
            recibos_pesos_n = recibos.filter(poliza__f_currency = 1, poliza__contractor__type_person =1)
            recibos_dolares_n = recibos.filter(poliza__f_currency = 2, poliza__contractor__type_person =1)
            prueba_nat_pesos = recibos_pesos_n.values('poliza__contractor__group__group_name','poliza__f_currency').annotate(Count('poliza__contractor__group__group_name')).annotate(Sum('prima_neta')).annotate(Sum('comision')).annotate(Sum('comision_conciliada')).annotate(Sum('prima_total')).order_by('poliza__contractor__group__group_name')
            prueba_nat_dolares = recibos_dolares_n.values('poliza__contractor__group__group_name','poliza__f_currency').annotate(Count('poliza__contractor__group__group_name')).annotate(Sum('prima_neta')).annotate(Sum('comision')).annotate(Sum('comision_conciliada')).annotate(Sum('prima_total')).order_by('poliza__contractor__group__group_name')
            prueba_jur_pesos = recibos_pesos_j.values('poliza__contractor__group__group_name','poliza__f_currency').annotate(Count('poliza__contractor__group__group_name')).annotate(Sum('prima_neta')).annotate(Sum('comision')).annotate(Sum('comision_conciliada')).annotate(Sum('prima_total')).order_by('poliza__contractor__group__group_name')
            prueba_jur_dolares = recibos_dolares_j.values('poliza__contractor__group__group_name','poliza__f_currency').annotate(Count('poliza__contractor__group__group_name')).annotate(Sum('prima_neta')).annotate(Sum('comision')).annotate(Sum('comision_conciliada')).annotate(Sum('prima_total')).order_by('poliza__contractor__group__group_name')
            
            prueba['naturals_pesos'] = prueba_nat_pesos
            prueba['juridicals_pesos'] = prueba_jur_pesos
            prueba['naturals_dolares'] = prueba_nat_dolares
            prueba['juridicals_dolares'] = prueba_jur_dolares
            tipo_reporte = tipo_reporte +" por Grupo"

            valuesn = ['poliza__contractor__group__group_name','prima_neta__sum','prima_total__sum','comision__sum','poliza__f_currency','poliza__contractor__group__group_name__count','comision_conciliada__sum']
            valuesj = ['poliza__contractor__group__group_name','prima_neta__sum','prima_total__sum','comision__sum','poliza__f_currency','poliza__contractor__group__group_name__count','comision_conciliada__sum']
            rows_pesos = prueba['naturals_pesos'].values_list(*valuesn)
            rows_dolares = prueba['naturals_dolares'].values_list(*valuesn)
            rows_pesosf = prueba['juridicals_pesos'].values_list(*valuesj)
            rows_dolaresf = prueba['juridicals_dolares'].values_list(*valuesj)
            
            columns = ['Agrupación','Tipo Contratante','Prima neta','Prima Total','Comisión','Moneda','Registros','Comisión conciliada']
            
            tipoContratante = []
            agrupacion = []
            prima = []
            total = []
            comision = []
            moneda = []
            registrosA = []
            com_conciliada = []
            dolares = 0
            p = 0
            c_pesos = 0
            cc_pesos = 0
            c_dolares = 0
            cc_dolares = 0
            neta_pesos = 0
            neta_dolares = 0
            for row in rows_pesos:
                if row[0] != None:                    # -------------------
                    row_num += 1
                    c_pesos = c_pesos + row[3]
                    cc_pesos = cc_pesos + row[6]
                    neta_pesos = neta_pesos + row[1]
                    if row[2]:
                        p = p + row[2]
                    ag = ((((((row[0]).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'') 
                    tipoc = 'Naturales'   
                    prn = row[1]
                    tot = row[2]
                    com = row[3]
                    mon = 'Pesos'
                    regs = row[5]
                    cc = row[6]
                    agrupacion.append(ag)
                    tipoContratante.append(tipoc)
                    prima.append(prn)
                    total.append(tot)
                    comision.append(com)
                    moneda.append(mon)
                    registrosA.append(regs)
                    com_conciliada.append(cc)
            # Pesos 2
            for row_1 in rows_pesosf:
                pesos_total_f = 0
                if row_1[0] != None:
                    row_num += 1
                    c_pesos = c_pesos + row_1[3]
                    cc_pesos = cc_pesos + row_1[6]
                    neta_pesos = neta_pesos + row_1[1]
                    if row_1[2]:
                        p = p + row_1[2]                    
                    ag = ((((((row_1[0]).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')   
                    tipoc = 'Morales'
                    prn = row_1[1]
                    tot = row_1[2]
                    com = row_1[3]
                    mon = 'Pesos'
                    regs = row_1[5]
                    cc = row_1[6]
                    agrupacion.append(ag)
                    tipoContratante.append(tipoc)
                    prima.append(prn)
                    total.append(tot)
                    comision.append(com)
                    moneda.append(mon)
                    registrosA.append(regs)
                    com_conciliada.append(cc)
            # dolares 1
            for row_2 in rows_dolares:
                if row_2[0] != None:
                    row_num += 1
                    c_dolares = c_dolares + row_2[3]
                    if row_2[6]:
                        cc_dolares = cc_dolares + int(row_2[6])
                    else:
                        cc_dolares = cc_dolares
                    neta_dolares = neta_dolares + row_2[1]
                    if row_2[2]:
                        dolares = dolares + row_2[2]
                    ag = ((((((row_2[0]).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')   
                    tipoc = 'Naturales'
                    prn = row_2[1]
                    tot = row_2[2]
                    com = row_2[3]
                    mon = 'Dolares'
                    regs = row_2[5]
                    cc = row_2[6]
                    agrupacion.append(ag)
                    tipoContratante.append(tipoc)
                    prima.append(prn)
                    total.append(tot)
                    comision.append(com)
                    moneda.append(mon)
                    registrosA.append(regs)
                    com_conciliada.append(cc)
            # dolares 2               
            for row_2f in rows_dolaresf:
                    if row_2f[0] != None:
                        row_num += 1
                        c_dolares = c_dolares + row_2f[3]
                        cc_dolares = cc_dolares + row_2f[6]
                        neta_dolares = neta_dolares + row_2f[1]
                        if row_2f[2]:
                            dolares = dolares + row_2f[2]
                        ag = ((((((row_2f[0]).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')   
                        tipoc = 'Morales'
                        prn = row_2f[1]
                        tot = row_2f[2]
                        com = row_2f[3]
                        mon = 'Dolares'
                        regs = row_2f[5]
                        cc = row_2f[6]
                        agrupacion.append(ag)
                        tipoContratante.append(tipoc)
                        prima.append(prn)
                        total.append(tot)
                        comision.append(com)
                        moneda.append(mon)
                        registrosA.append(regs)
                        com_conciliada.append(cc)
            obj = {                
                'agrupacion'   : str(list(agrupacion)),
                'tipoContratante': str(list(tipoContratante)),
                'prima'   : str(list(prima)),
                'total'   : str(list(total)),
                'comision'   : str(list(comision)),
                'moneda'   : str(list(moneda)),
                'registrosA'   : str(list(registrosA)),
                'com_conciliada'   : str(list(com_conciliada)),
                'dolares'   : '$ {:,.2f}'.format(dolares),
                'pesos'   : '$ {:,.2f}'.format(p),
                'cpesos'   : '$ {:,.2f}'.format(c_pesos),
                'cdolares'   : '$ {:,.2f}'.format(c_dolares),
                'ccpesos'   : '$ {:,.2f}'.format(cc_pesos),
                'ccdolares'   : '$ {:,.2f}'.format(cc_dolares),
                'npesos'   : '$ {:,.2f}'.format(neta_pesos),
                'ndolares'   : '$ {:,.2f}'.format(neta_dolares),
                'tipo_reporte': tipo_reporte,
                'grupo': int(group_by),
                'email_org':info_org['email'],
                'phone_org':info_org['phone'],
                'webpage_org':info_org['webpage'],
                'address_org':info_org['address'],
                'urlname_org':info_org['name'],
            }   
            obj['columns'] = columns
            obj['imagen'] = archivo_imagen
            obj['registros'] = len(agrupacion) 
            obj['typeReport'] = 2
            r = requests.post(settings.SERVICEEXCEL_URL + 'get-cobranzaAgrupadoExcelReporte/', obj,
            # headers = {
            # 'Authorization':'Bearer %s'%request.user.user_info.fi_token_refresh,
            # # 'Content-Type':'application/json' 
            # }, 
            stream=True)
            response_data= r.text
            response = HttpResponse(r.content,content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')
            return response
        elif group_by == 5:
            prueba = {}
            recibos_pesos = recibos.filter(poliza__f_currency = 1)
            recibos_dolares = recibos.filter(poliza__f_currency = 2)
            prueba_p_pesos = recibos_pesos.filter(poliza__document_type__in=[1, 3, 4]).values('poliza__vendor__first_name', 'poliza__vendor__last_name','poliza__f_currency').annotate(Count('poliza__vendor')).annotate(Sum('prima_neta')).annotate(Sum('comision')).annotate(Sum('comision_conciliada')).annotate(Sum('prima_total'))
            prueba_f_pesos = recibos_pesos.filter(poliza__document_type__in=[7, 8]).values('poliza__vendor__first_name', 'poliza__vendor__last_name','poliza__f_currency').annotate(Count('poliza__vendor')).annotate(Sum('prima_neta')).annotate(Sum('comision')).annotate(Sum('comision_conciliada')).annotate(Sum('prima_total'))
            prueba_p_dolares = recibos_dolares.filter(poliza__document_type__in=[1, 3, 4]).values('poliza__vendor__first_name', 'poliza__vendor__last_name','poliza__f_currency').annotate(Count('poliza__vendor')).annotate(Sum('prima_neta')).annotate(Sum('comision')).annotate(Sum('comision_conciliada')).annotate(Sum('prima_total'))
            prueba_f_dolares = recibos_dolares.filter(poliza__document_type__in=[7, 8]).values('poliza__vendor__first_name', 'poliza__vendor__last_name','poliza__f_currency').annotate(Count('poliza__vendor')).annotate(Sum('prima_neta')).annotate(Sum('comision')).annotate(Sum('comision_conciliada')).annotate(Sum('prima_total'))
            prueba['polizas_pesos'] = prueba_p_pesos
            prueba['polizas_dolares'] = prueba_p_dolares
            prueba['fianzas_pesos'] = prueba_f_pesos
            prueba['fianzas_dolares'] = prueba_f_dolares 
            #ñññññññññññññññññññññññññññññ
            prueba_prefs_pesos = recibos_pesos.values('poliza__ref_policy__referenciador__first_name', 'poliza__ref_policy__referenciador__last_name').annotate(Count('poliza__ref_policy__referenciador'),Count('poliza__ref_policy__referenciador__id')).annotate(Sum('prima_neta')).annotate(Sum('comision')).annotate(Sum('comision_conciliada')).annotate(Sum('prima_total')).order_by('poliza__ref_policy__referenciador__id')
            prueba_prefs_dols = recibos_dolares.values('poliza__ref_policy__referenciador__first_name', 'poliza__ref_policy__referenciador__last_name').annotate(Count('poliza__ref_policy__referenciador'),Count('poliza__ref_policy__referenciador__id')).annotate(Sum('prima_neta')).annotate(Sum('comision')).annotate(Sum('comision_conciliada')).annotate(Sum('prima_total')).order_by('poliza__ref_policy__referenciador__id')
            prueba['polizas_pesos'] = prueba_prefs_pesos
            prueba['polizas_dolares'] = prueba_prefs_dols
            c = prueba['polizas_pesos'].values('poliza__ref_policy__referenciador__first_name', 'poliza__ref_policy__referenciador__last_name','poliza__ref_policy__referenciador__id__count','prima_neta__sum','comision__sum','comision_conciliada__sum','prima_total__sum')
            c_ = prueba['polizas_dolares'].values('poliza__ref_policy__referenciador__first_name', 'poliza__ref_policy__referenciador__last_name','poliza__ref_policy__referenciador__id__count','prima_neta__sum','comision__sum','comision_conciliada__sum','prima_total__sum')
            prueba['polizas_pesos_refs'] = c
            prueba['polizas_dolares_refs'] = c_
            prueba['polizas_pesos'] = c
            prueba['polizas_dolares'] = c_
            # ----
            tipo_reporte = tipo_reporte + " por Referenciador"
            prueba_prefs_pesos = recibos_pesos.values('poliza__ref_policy__referenciador__first_name', 'poliza__ref_policy__referenciador__last_name').annotate(Count('poliza__ref_policy__referenciador'),Count('poliza__ref_policy__referenciador__id')).annotate(Sum('prima_neta')).annotate(Sum('comision')).annotate(Sum('comision_conciliada')).annotate(Sum('prima_total')).order_by('poliza__ref_policy__referenciador__id')
            prueba_prefs_dols = recibos_dolares.values('poliza__ref_policy__referenciador__first_name', 'poliza__ref_policy__referenciador__last_name').annotate(Count('poliza__ref_policy__referenciador'),Count('poliza__ref_policy__referenciador__id')).annotate(Sum('prima_neta')).annotate(Sum('comision')).annotate(Sum('comision_conciliada')).annotate(Sum('prima_total')).order_by('poliza__ref_policy__referenciador__id')

            prueba['polizas_pesos_r'] = prueba_prefs_pesos
            prueba['polizas_dolares_r'] = prueba_prefs_dols            
            rows_pesos = prueba['polizas_pesos'].values_list('poliza__ref_policy__referenciador__first_name','prima_neta__sum','prima_total__sum','comision__sum','poliza__f_currency','poliza__ref_policy__referenciador__id__count','poliza__ref_policy__referenciador__last_name','comision_conciliada__sum')
            rows_dolares = prueba['polizas_dolares'].values_list('poliza__ref_policy__referenciador__first_name','prima_neta__sum','prima_total__sum','comision__sum','poliza__f_currency','poliza__ref_policy__referenciador__id__count','poliza__ref_policy__referenciador__last_name','comision_conciliada__sum')
            rows_pesosf = prueba['fianzas_pesos'].values_list('poliza__vendor__first_name','prima_neta__sum','prima_total__sum','comision__sum','poliza__f_currency','poliza__vendor__count','poliza__vendor__last_name','comision_conciliada__sum')
            rows_dolaresf = prueba['fianzas_dolares'].values_list('poliza__vendor__first_name','prima_neta__sum','prima_total__sum','comision__sum','poliza__f_currency','poliza__vendor__count','poliza__vendor__last_name','comision_conciliada__sum')
            rows_pesos_pr = prueba['polizas_pesos_r'].values_list('poliza__ref_policy__referenciador__first_name','prima_neta__sum','prima_total__sum','comision__sum','poliza__f_currency','poliza__ref_policy__referenciador__id__count','poliza__ref_policy__referenciador__last_name','comision_conciliada__sum')
            rows_dolares_pr = prueba['polizas_dolares_r'].values_list('poliza__ref_policy__referenciador__first_name','prima_neta__sum','prima_total__sum','comision__sum','poliza__f_currency','poliza__ref_policy__referenciador__id__count','poliza__ref_policy__referenciador__last_name','comision_conciliada__sum')
            # -------
            tipoContratante = []
            agrupacion = []
            prima = []
            total = []
            comision = []
            moneda = []
            registrosA = []
            com_conciliada = []
            dolares = 0
            p = 0
            c_pesos = 0
            cc_pesos = 0
            c_dolares = 0
            cc_dolares = 0
            neta_pesos = 0
            neta_dolares = 0
            for row in rows_pesos:
                if row[0] != None:                    # -------------------
                    row_num += 1
                    c_pesos = c_pesos + row[3]
                    cc_pesos = cc_pesos + row[7]
                    neta_pesos = neta_pesos + row[1]
                    if row[2]:
                        p = p + row[2]
                    ag = row[0] + ' ' + str(row[6])
                    tipoc = 'Pólizas'   
                    prn = row[1]
                    tot = row[2]
                    com = row[3]
                    mon = 'Pesos'
                    regs = row[5]
                    cc = row[7]
                    agrupacion.append(ag)
                    tipoContratante.append(tipoc)
                    prima.append(prn)
                    total.append(tot)
                    comision.append(com)
                    moneda.append(mon)
                    registrosA.append(regs)
                    com_conciliada.append(cc)
            # Pesos 2
            for row_1 in rows_pesosf:
                pesos_total_f = 0
                if row_1[0] != None:
                    row_num += 1
                    c_pesos = c_pesos + row_1[3]
                    cc_pesos = cc_pesos + row_1[7]
                    neta_pesos = neta_pesos + row_1[1]
                    if row_1[2]:
                        p = p + row_1[2]                    
                    ag = row_1[0]+' '+str(row_1[6])  
                    tipoc = 'Fianzas'
                    prn = row_1[1]
                    tot = row_1[2]
                    com = row_1[3]
                    mon = 'Pesos'
                    regs = row_1[5]
                    cc = row_1[7]
                    agrupacion.append(ag)
                    tipoContratante.append(tipoc)
                    prima.append(prn)
                    total.append(tot)
                    comision.append(com)
                    moneda.append(mon)
                    registrosA.append(regs)
                    com_conciliada.append(cc)
            # dolares 1
            for row_2 in rows_dolares:
                if row_2[0] != None:
                    row_num += 1
                    c_dolares = c_dolares + row_2[3]
                    if row_2[7]:
                        cc_dolares = cc_dolares + int(row_2[7])
                    else:
                        cc_dolares = cc_dolares
                    neta_dolares = neta_dolares + row_2[1]
                    if row_2[2]:
                        dolares = dolares + row_2[2]
                    ag = row_2[0] +' '+str(row_2[6])
                    tipoc = 'Pólizas'
                    prn = row_2[1]
                    tot = row_2[2]
                    com = row_2[3]
                    mon = 'Dolares'
                    regs = row_2[5]
                    cc = row_2[7]
                    agrupacion.append(ag)
                    tipoContratante.append(tipoc)
                    prima.append(prn)
                    total.append(tot)
                    comision.append(com)
                    moneda.append(mon)
                    registrosA.append(regs)
                    com_conciliada.append(cc)
            # dolares 2               
            for row_2f in rows_dolaresf:
                if row_2f[0] != None:
                    row_num += 1
                    c_dolares = c_dolares + row_2f[3]
                    cc_dolares = cc_dolares + row_2f[7]
                    neta_dolares = neta_dolares + row_2f[1]
                    if row_2f[2]:
                        dolares = dolares + row_2f[2]
                    ag = row_2f[0] +' '+str(row_2f[6])
                    tipoc = 'Fianzas'
                    prn = row_2f[1]
                    tot = row_2f[2]
                    com = row_2f[3]
                    mon = 'Dolares'
                    regs = row_2f[5]
                    cc = row_2f[7]
                    agrupacion.append(ag)
                    tipoContratante.append(tipoc)
                    prima.append(prn)
                    total.append(tot)
                    comision.append(com)
                    moneda.append(mon)
                    registrosA.append(regs)
                    com_conciliada.append(cc)
            obj = {                
                'agrupacion'   : str(list(agrupacion)),
                'tipoContratante': str(list(tipoContratante)),
                'prima'   : str(list(prima)),
                'total'   : str(list(total)),
                'comision'   : str(list(comision)),
                'moneda'   : str(list(moneda)),
                'registrosA'   : str(list(registrosA)),
                'com_conciliada'   : str(list(com_conciliada)),
                'dolares'   : '$ {:,.2f}'.format(dolares),
                'pesos'   : '$ {:,.2f}'.format(p),
                'cpesos'   : '$ {:,.2f}'.format(c_pesos),
                'cdolares'   : '$ {:,.2f}'.format(c_dolares),
                'ccpesos'   : '$ {:,.2f}'.format(cc_pesos),
                'ccdolares'   : '$ {:,.2f}'.format(cc_dolares),
                'npesos'   : '$ {:,.2f}'.format(neta_pesos),
                'ndolares'   : '$ {:,.2f}'.format(neta_dolares),
                'tipo_reporte': tipo_reporte,
                'grupo': int(group_by),
                'email_org':info_org['email'],
                'phone_org':info_org['phone'],
                'webpage_org':info_org['webpage'],
                'address_org':info_org['address'],
                'urlname_org':info_org['name'],
            }   
            obj['columns'] = columns
            obj['imagen'] = archivo_imagen
            obj['registros'] = len(agrupacion) 
            obj['typeReport'] = 2
            r = requests.post(settings.SERVICEEXCEL_URL + 'get-cobranzaAgrupadoExcelReporte/', obj,
            # headers = {
            # 'Authorization':'Bearer %s'%request.user.user_info.fi_token_refresh,
            # # 'Content-Type':'application/json' 
            # },
            stream=True)
            response_data= r.text

            response = HttpResponse(r.content,content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')
            return response
        elif group_by == 7:
            prueba = {}
            recibos_pesos = recibos.filter(poliza__f_currency = 1)
            recibos_dolares = recibos.filter(poliza__f_currency = 2)
            prueba_p_pesos = recibos_pesos.filter(poliza__document_type__in=[1, 3, 4]).values('poliza__owner__first_name', 'poliza__owner__last_name','poliza__f_currency').annotate(Count('poliza__owner')).annotate(Sum('prima_neta')).annotate(Sum('comision')).annotate(Sum('comision_conciliada')).annotate(Sum('prima_total'))
            prueba_f_pesos = recibos_pesos.filter(poliza__document_type__in=[7, 8]).values('poliza__owner__first_name', 'poliza__owner__last_name','poliza__f_currency').annotate(Count('poliza__owner')).annotate(Sum('prima_neta')).annotate(Sum('comision')).annotate(Sum('comision_conciliada')).annotate(Sum('prima_total'))
            prueba_p_dolares = recibos_dolares.filter(poliza__document_type__in=[1, 3, 4]).values('poliza__owner__first_name', 'poliza__owner__last_name','poliza__f_currency').annotate(Count('poliza__owner')).annotate(Sum('prima_neta')).annotate(Sum('comision')).annotate(Sum('comision_conciliada')).annotate(Sum('prima_total'))
            prueba_f_dolares = recibos_dolares.filter(poliza__document_type__in=[7, 8]).values('poliza__owner__first_name', 'poliza__owner__last_name','poliza__f_currency').annotate(Count('poliza__owner')).annotate(Sum('prima_neta')).annotate(Sum('comision')).annotate(Sum('comision_conciliada')).annotate(Sum('prima_total'))
            prueba['polizas_pesos'] = prueba_p_pesos
            prueba['polizas_dolares'] = prueba_p_dolares
            prueba['fianzas_pesos'] = prueba_f_pesos
            prueba['fianzas_dolares'] = prueba_f_dolares
            tipo_reporte = tipo_reporte +  " por Usuario"
            rows_pesos = prueba['polizas_pesos'].values_list('poliza__owner__first_name','prima_neta__sum','prima_total__sum','comision__sum','poliza__f_currency','poliza__owner__count','comision_conciliada__sum','poliza__owner__last_name')
            rows_dolares = prueba['polizas_dolares'].values_list('poliza__owner__first_name','prima_neta__sum','prima_total__sum','comision__sum','poliza__f_currency','poliza__owner__count','comision_conciliada__sum','poliza__owner__last_name')
            rows_pesosf = prueba['fianzas_pesos'].values_list('poliza__owner__first_name','prima_neta__sum','prima_total__sum','comision__sum','poliza__f_currency','poliza__owner__count','comision_conciliada__sum','poliza__owner__last_name')
            rows_dolaresf = prueba['fianzas_dolares'].values_list('poliza__owner__first_name','prima_neta__sum','prima_total__sum','comision__sum','poliza__f_currency','poliza__owner__count','comision_conciliada__sum','poliza__owner__last_name')
            agrupacion = []
            prima = []
            total = []
            comision = []
            moneda = []
            registrosA = []
            com_conciliada = []
            dolares = 0
            p = 0
            c_pesos = 0
            cc_pesos = 0
            c_dolares = 0
            cc_dolares = 0
            neta_pesos = 0
            neta_dolares = 0
            for row in rows_pesos:
                if row[0] != None:
                    row_num += 1
                    c_pesos = c_pesos + row[3]
                    cc_pesos = cc_pesos + row[6]
                    neta_pesos = neta_pesos + row[1]
                    if row[2]:
                        p = p + row[2]
                    ag = row[0]+ ' ' + str(row[7])  
                    prn = row[1]
                    tot = row[2]
                    com = row[3]
                    mon = 'Pesos'
                    regs = row[5]
                    cc = row[6]
                    agrupacion.append(ag)
                    prima.append(prn)
                    total.append(tot)
                    comision.append(com)
                    moneda.append(mon)
                    registrosA.append(regs)
                    com_conciliada.append(cc)
            # Pesos 2
            for row_1 in rows_pesosf:
                pesos_total_f = 0
                if row_1[0] != None:
                    row_num += 1
                    c_pesos = c_pesos + row_1[3]
                    cc_pesos = cc_pesos + row_1[6]
                    neta_pesos = neta_pesos + row_1[1]
                    if row_1[2]:
                        p = p + row_1[2]       
                    ag = row_1[0]+ ' ' + str(row_1[7])  
                    prn = row_1[1]
                    tot = row_1[2]
                    com = row_1[3]
                    mon = 'Pesos'
                    regs = row_1[5]
                    cc = row_1[6]
                    agrupacion.append(ag)
                    prima.append(prn)
                    total.append(tot)
                    comision.append(com)
                    moneda.append(mon)
                    registrosA.append(regs)
                    com_conciliada.append(cc)
            # dolares 1
            for row_2 in rows_dolares:
                if row_2[0] != None:
                    row_num += 1
                    c_dolares = c_dolares + row_2[3]
                    if row_2[6]:
                        cc_dolares = cc_dolares + int(row_2[6])
                    else:
                        cc_dolares = cc_dolares
                    neta_dolares = neta_dolares + row_2[1]
                    if row_2[2]:
                        dolares = dolares + row_2[2]
                    ag = row_2[0]+ ' ' + str(row_2[7]) 
                    prn = row_2[1]
                    tot = row_2[2]
                    com = row_2[3]
                    mon = 'Dolares'
                    regs = row_2[5]
                    cc = row_2[6]
                    agrupacion.append(ag)
                    prima.append(prn)
                    total.append(tot)
                    comision.append(com)
                    moneda.append(mon)
                    registrosA.append(regs)
                    com_conciliada.append(cc)
            # dolares 2               
            for row_2f in rows_dolaresf:
                    if row_2f[0] != None:
                        row_num += 1
                        c_dolares = c_dolares + row_2f[3]
                        cc_dolares = cc_dolares + row_2f[6]
                        neta_dolares = neta_dolares + row_2f[1]
                        if row_2f[2]:
                            dolares = dolares + row_2f[2]
                        ag = row_2f[0]+ ' ' + str(row_2f[7])  
                        prn = row_2f[1]
                        tot = row_2f[2]
                        com = row_2f[3]
                        mon = 'Dolares'
                        regs = row_2f[5]
                        cc = row_2f[6]
                        agrupacion.append(ag)
                        prima.append(prn)
                        total.append(tot)
                        comision.append(com)
                        moneda.append(mon)
                        registrosA.append(regs)
                        com_conciliada.append(cc)
            obj = {                
                'agrupacion'   : str(list(agrupacion)),
                'prima'   : str(list(prima)),
                'total'   : str(list(total)),
                'comision'   : str(list(comision)),
                'moneda'   : str(list(moneda)),
                'registrosA'   : str(list(registrosA)),
                'com_conciliada'   : str(list(com_conciliada)),
                'dolares'   : '$ {:,.2f}'.format(dolares),
                'pesos'   : '$ {:,.2f}'.format(p),
                'cpesos'   : '$ {:,.2f}'.format(c_pesos),
                'cdolares'   : '$ {:,.2f}'.format(c_dolares),
                'ccpesos'   : '$ {:,.2f}'.format(cc_pesos),
                'ccdolares'   : '$ {:,.2f}'.format(cc_dolares),
                'npesos'   : '$ {:,.2f}'.format(neta_pesos),
                'ndolares'   : '$ {:,.2f}'.format(neta_dolares),
                'grupo': int(group_by),
                'tipo_reporte': tipo_reporte,
                'email_org':info_org['email'],
                'phone_org':info_org['phone'],
                'webpage_org':info_org['webpage'],
                'address_org':info_org['address'],
                'urlname_org':info_org['name'],
            }   
            obj['columns'] = columns
            obj['imagen'] = archivo_imagen
            obj['registros'] = len(agrupacion) 
            obj['typeReport'] = 2
            r = requests.post(settings.SERVICEEXCEL_URL + 'get-cobranzaAgrupadoExcelReporte/', obj,
            # headers = {
            # 'Authorization':'Bearer %s'%request.user.user_info.fi_token_refresh,
            # # 'Content-Type':'application/json' 
            # }, 
            stream=True)
            response_data= r.text

            response = HttpResponse(r.content,content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')
            return response
        # ---------report service excel----        
    elif excel_type == 2:        
        # if si_com:
        columns = ['No.Póliza/Fianza','Tipo', 'No.Endoso','Estatus Póliza/Endoso','Grupo','Subgrupo','Subsubgrupo','Contratante','Correo electrónico','Teléfono',
                 'Alías Aseguradora/Afianzadora','Ramo','Subramo','Identificador','Riesgo/Asegurado', 'Año(Automovil)', 'Auto(serie)', 'Forma de Pago','Moneda',
                 'Serie No.Recibo','Fecha Inicio recibo', 'Fecha Fin recibo','Vencimiento','Antigüedad','Promesa Pago','Prima Neta','RPF','Derecho',
                 'IVA','Prima Total','Comisión','Estatus recibo', 'Conducto de Pago','Metodo de Pago','Documento de Pago', 'Tipo Cambio',
                 'Importe Pesos','Fecha Pago','Fecha Liquidación','Folio de Liquidación','Fecha de conciliación','Comisión conciliada','Fecha Inicio Póliza/Fianza', 
                 'Fecha Fin Póliza/Fianza', 'Clave de Agente', 'Referenciador', 'Sucursal','Responsable','Ej. Cobranza','Pagado por','Creado por',
                 'Creación','Promesa Pago','Agrupación','Subagrupación', 'Subsubagrupación','Clasificación','Línea Negocio','Célula', 'Contacto']

        try:
            columns = request.data['cols1']
            fo = len (columns)            
            if not 'Bitacora' in columns:
                columns.insert(fo,'Bitacora')
            if not 'Célula' in columns:
                columns.insert(int(fo)+1,'Célula')

            if not 'Año(Automovil)' in columns:
                columns.insert(13,'Año(Automovil)')

            if not 'Serie(Automovil)' in columns:
                columns.insert(14,'Serie(Automovil)')
            if not 'Contacto(nombre)' in columns:
                columns.append('Contacto(nombre)')
            if not 'Contacto(telefono)' in columns:
                columns.append('Contacto(telefono)')
            if not 'Contacto(email)' in columns:
                columns.append('Contacto(email)')

        except:
            pass       
        asegurado = []
        clave = []
        aseguradora = []
        antiguedad = []
        referenciador = []
        responsable = []
        collection = []
        userpay = []
        creadopor = []
        contract = []
        contractemail = []
        contractphone = []
        contractgrupo = []
        inicio = []
        fin = []
        aseguradora = []
        clave = []
        poliza_number = []
        inc = ''
        fn = ''
        aseg = ''
        cve = ''
        pnumber = ''
        subramo = []
        ramo = []
        identifier = []
        statusP = []
        forma_de_pago = []
        payForm = ''
        sucursal = []
        receipttype = []
        metodoPago = []
        mpago = ''
        currency = []
        bitacora = []
        promesa_pago =[]
        fc = 1
        importe = 0
        importePesos=[]

        document_type_list = []
        tipo_pago_list = []
        documento_pago_list = []
        recibo_numero_list = []

        fecha_inicio_list = []
        fecha_fin_list = []
        vencimiento_list = []
        endoso_number_list = []
        is_cat_list = []
        status_list = []

        promesa_pago_list = []
        fecha_pago_list = []
        fecha_conciliacion_list = []
        fecha_liquidacion_list = []
        folio_liquidacion_list = []
        folio_pago_list = []
        

        prima_neta_list = []
        comision_conciliada_list = []
        rpf_list = []
        derecho_list = []
        iva_list = []
        p_total_list = []
        comision_list = []

        id_list = []
        created_at_list =[]
        observations_list = []

        recibos = recibos.order_by('id')
        grupo1 = []
        grupo2 = []
        nivelAg = []
        grupo3 = []
        grupo4 = []
        clasifica = []
        celula = []
        businessLine = []
        contactos_nombre = []
        contactos_email = []
        contactos_telefono = []
        tipo_poliza_fianza = []
        caratulas = []

        cars_serials = []
        cars_years = [] 
        try:
            t3 = time()
        except:
            t3=''

        for r in recibos:
            value=''
            celula_ = ''
            contratanteG = ''
            grupo1_ = ''
            grupo2_ = ''
            nivelAg_ = ''
            grupo3_ = ''
            grupo4_ = '' 
            clasifica_=''
            businessLine_=''
            referenc=[]
            tipo_pago_list.append(r.rate_exchange)
            documento_pago_list.append(r.pay_doc)
            recibo_numero_list.append(r.recibo_numero)
            tpf = 'No especificado'

            try:
                endoso_number_list.append(r.endorsement.number_endorsement)
            except:
                endoso_number_list.append(None)
            status_list.append(r.status)

            is_cat_list.append(r.conducto_de_pago)
            fi = r.fecha_inicio
            if r.fecha_inicio:
                try:
                    fi = r.fecha_inicio
                    try:
                        formatted = r.fecha_inicio.strftime('%H/%M/%S')
                        if formatted =='00/00/00' or formatted =='17/00/00' or formatted =='05/00/00':
                            fir_ =  (str(r.fecha_inicio).split('.')[0])
                            fir_ = r.fecha_inicio+ timedelta(hours=6, minutes=00)
                            fi = fir_
                            fi = fi.strftime("%d/%m/%Y")
                    except Exception as eft:
                        fi = r.fecha_inicio.strftime("%d/%m/%Y")
                except:
                    fi = ''

            fecha_inicio_list.append(fi)

            ff = r.fecha_fin
            if ff:
                try:
                    ff = r.fecha_fin
                    try:
                        formatted = r.fecha_fin.strftime('%H/%M/%S')
                        if formatted =='00/00/00' or formatted =='17/00/00' or formatted =='05/00/00':
                            ffr_ =  (str(r.fecha_fin).split('.')[0])
                            ffr_ = r.fecha_fin+ timedelta(hours=6, minutes=00)
                            ff = ffr_
                            ff = ff.strftime("%d/%m/%Y")
                    except Exception as eft:
                        ff = r.fecha_fin.strftime("%d/%m/%Y")
                except:
                    ff = ''
            fecha_fin_list.append(ff)

            venc = r.vencimiento
            if venc:
                try:
                    venc = r.vencimiento
                    try:
                        formatted = r.vencimiento.strftime('%H/%M/%S')
                        if formatted =='00/00/00' or formatted =='17/00/00' or formatted =='05/00/00':
                            vencr_ =  (str(r.vencimiento).split('.')[0])
                            vencr_ = r.vencimiento+ timedelta(hours=6, minutes=00)
                            venc = vencr_
                            venc = venc.strftime("%d/%m/%Y")
                    except Exception as eft:
                        venc = r.vencimiento.strftime("%d/%m/%Y")
                except:
                    venc = ''          
            vencimiento_list.append(venc)

            try:
                prom_pago = r.promesa_pago.strftime("%d/%m/%Y")
            except:
                prom_pago = ''            

            promesa_pago_list.append(prom_pago)

            try:
                f_pago = r.pay_date.strftime("%d/%m/%Y")
            except Exception as e:
                f_pago = ''            
            fecha_pago_list.append(f_pago)

            try:
                f_conciliacion = r.conciliacion_date.strftime("%d/%m/%Y")
            except Exception as e:
                f_conciliacion = ''            
            fecha_conciliacion_list.append(f_conciliacion)

            try:
                f_liquidacion = r.liquidacion_date.strftime("%d/%m/%Y")
            except Exception as e:
                f_liquidacion = ''            
            fecha_liquidacion_list.append(f_liquidacion)
                
            folio_liquidacion_list.append(r.liquidacion_folio)
            folio_pago_list.append(r.folio_pago)

            prima_neta_list.append(r.prima_neta)
            comision_conciliada_list.append(r.comision_conciliada)
            rpf_list.append(r.rpf)
            derecho_list.append(r.derecho)
            iva_list.append(r.iva)
            p_total_list.append(r.prima_total)
            comision_list.append(r.comision)
            id_list.append(r.id)

            try:
                observations = r.poliza.observations.replace('[','').replace(']','').replace(",",'').replace(".",'').replace("'",'')
            except: 
                observations = ''

            observations_list.append(observations)

            try:
                r_created_at = r.created_at.strftime("%d/%m/%Y")
            except Exception as e:
                r_created_at = ''            
            created_at_list.append(r_created_at)

            importe = r.prima_total
            mpago = ''
            try:            
                pp = r.promesa_pago.strftime("%d/%m/%Y")
            except Exception as es:
                pp = r.promesa_pago

            if r.pay_form == 1:
                mpago = "Cheque"
            elif r.pay_form == 2:
                mpago = "Efectivo"
            elif r.pay_form == 3:
                mpago = "Transferencia"
            elif r.pay_form == 4:
                mpago = "Deposito Bancario"
            elif r.pay_form == 5:
                mpago = "Tarjeta de Credito"
            elif r.pay_form == 6:
                mpago = "Tarjeta de Debito"
            elif r.pay_form == 7:
                mpago = "Estado de Cuenta"
            elif r.pay_form == 8:
                mpago = "Compañia"
            elif r.pay_form == 0:
                mpago = "No Especificado"
            else:
                mpago = 'No Especificado'
            receipt1 = ''
            contratantex = ''
            contratanteE = ''
            contratanteP = ''
            contratanteG = ''
            inc = ''
            fn = ''
            aseg = ''
            cve = ''
            pnumber = ''
            sramo = ''
            rm = ''
            iden = ''
            status_p = ''
            payForm = ''
            sc= ''
            val_resp=''
            val_cexe = ''
            
            antig = get_antiguedad(r.fecha_inicio)
            if r.user_pay:
                val_userpay = r.user_pay.first_name + ' '+ str(r.user_pay.last_name)
            else:
                val_userpay = ''
            if r.owner:
                val_owner = r.owner.first_name + ' '+ str(r.owner.last_name)
            else:
                val_owner = ''
            
            #Recibo proveniente de una poliza
            if r.poliza:
                receipt1 = 'Póliza'
                document_type_list.append(r.poliza.document_type)
                if r.poliza.document_type == 12:
                    caratulas.append(r.poliza.parent.poliza_number)
                else:
                    caratulas.append(0)
                if r.poliza.document_type == 6:
                    pnumber=r.poliza.parent.parent.parent.poliza_number
                    receipt1 = 'Categoría'
                    try:
                        if r.poliza.parent.parent.parent.f_currency == 2 or r.poliza.parent.parent.parent.f_currency == 3 or r.poliza.parent.parent.parent.f_currency == 4:
                            try:
                                importe = float(r.prima_total) * float(r.rate_exchange)
                            except Exception as es:
                                importe = r.prima_total
                        else:
                            importe = r.prima_total
                    except Exception as err:
                        importe = r.prima_total
                    try:
                        fc = r.poliza.parent.parent.parent.f_currency
                        sramo = r.poliza.parent.parent.parent.subramo.subramo_name
                        status_p = r.poliza.parent.parent.parent.status
                        rm = r.poliza.parent.parent.parent.ramo.ramo_name
                        pnumber = r.poliza.parent.parent.parent.poliza_number
                        iden = r.poliza.parent.parent.parent.identifier
                        if iden:
                            iden = ((((((iden).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'') 
                        payForm = r.poliza.parent.parent.parent.forma_de_pago
                        sc = r.poliza.parent.parent.parent.sucursal.sucursal_name
                        inc = r.poliza.parent.parent.parent.start_of_validity.strftime("%d/%m/%Y")
                        fn =r.poliza.parent.parent.parent.end_of_validity.strftime("%d/%m/%Y")
                        try:
                            cve = r.poliza.parent.parent.parent.clave.name +' '+str(r.poliza.parent.parent.parent.clave.clave)
                            cve = ((((((cve).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        except Exception as ere:
                            cve =''                         
                        aseg = r.poliza.parent.parent.parent.aseguradora.alias
                    except Exception as fd:
                        inc = ''
                        fn = ''
                        aseg = ''
                        cve = ''
                        pnumber = ''
                        sramo = ''
                        status_p = ''
                        rm = ''
                        iden = ''
                        payForm = 12
                        fc = ''
                        sc = ''
                    if r.poliza.parent.parent.parent.contractor:                        
                        contratantex = ((((((r.poliza.parent.parent.parent.contractor.full_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        contratanteE = r.poliza.parent.parent.parent.contractor.email
                        contratanteP = r.poliza.parent.parent.parent.contractor.phone_number
                        try:
                            contratanteG = ((((((r.poliza.parent.parent.parent.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        except Exception as e:
                            contratanteG = ''

                        if r.poliza.parent.parent.parent.business_line:
                            if int(r.poliza.parent.parent.parent.business_line) ==1:
                                businessLine_ = 'Comercial'
                            elif int(r.poliza.parent.parent.parent.business_line) ==2:
                                businessLine_ = 'Personal'
                            elif int(r.poliza.parent.parent.parent.business_line) ==0:
                                businessLine_ = 'Otro'
                            else:
                                businessLine_ = ''
                        else:
                            if int(r.poliza.parent.parent.parent.business_line) ==0:
                                businessLine_ = 'Otro'
                            else:
                                businessLine_ = ''
                        try:
                            if r.poliza.parent.parent.parent.contractor.group.type_group == 1:
                                contratanteG = ((((((r.poliza.parent.parent.parent.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo1_ = ''
                                grupo2_ = ''
                            elif r.poliza.parent.parent.parent.contractor.group.type_group == 2:
                                grupotype1 = Group.objects.get(pk = r.poliza.parent.parent.parent.contractor.group.parent.id)
                                contratanteG = ((((((grupotype1.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo1_ = ((((((r.poliza.parent.parent.parent.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo2_ = ''
                            elif r.poliza.parent.parent.parent.contractor.group.type_group == 3:
                                grupotype1 = Group.objects.get(pk = r.poliza.parent.parent.parent.contractor.group.parent.parent.id)
                                contratanteG = ((((((grupotype1.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                subgrupotype2 = Group.objects.get(pk = r.poliza.parent.parent.parent.contractor.group.parent.id)
                                grupo1_ = ((((((subgrupotype2.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo2_ = ((((((r.poliza.parent.parent.parent.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        except Exception as e:
                            contratanteG = ''
                            grupo1_ = ''
                            grupo2_ = ''
                        try:
                            if r.poliza.parent.parent.parent.groupinglevel:
                                if r.poliza.parent.parent.parent.groupinglevel.type_grouping == 1:
                                    nivelAg_ = ((((((r.poliza.parent.parent.parent.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                    grupo3_ = ''
                                    grupo4_ = ''
                                elif r.poliza.parent.parent.parent.groupinglevel.type_grouping == 2:
                                    grupotype1 = GroupingLevel.objects.get(pk = r.poliza.parent.parent.parent.groupinglevel.parent.id)
                                    nivelAg_ = ((((((grupotype1.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                    grupo3_ = ((((((r.poliza.parent.parent.parent.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                    grupo4_ = ''
                                elif r.poliza.parent.parent.parent.groupinglevel.type_grouping == 3:
                                    grupotype1 = GroupingLevel.objects.get(pk = r.poliza.parent.parent.parent.groupinglevel.parent.parent.id)
                                    nivelAg_ = ((((((grupotype1.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                    subgrupotype2 = GroupingLevel.objects.get(pk = r.poliza.parent.parent.parent.groupinglevel.parent.id)
                                    grupo3_ = ((((((subgrupotype2.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                    grupo4_ = ((((((r.poliza.parent.parent.parent.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                            else:
                                nivelAg_ = ''
                                grupo3_ = ''
                                grupo4_ = ''  
                        except Exception as e:
                            nivelAg_ = ''
                            grupo3_ = ''
                            grupo4_ = '' 
             
                        if r.poliza.parent.parent.parent.contractor.classification:
                            clasifica_ = r.poliza.parent.parent.parent.contractor.classification.classification_name  
                        else:
                            clasifica_='-----'  
                        if r.poliza.parent.parent.parent.contractor.cellule:
                            celula_ = r.poliza.parent.parent.parent.contractor.cellule.celula_name  
                        else:
                            celula_='-----'                     

                    else:
                        contratantex = ''
                        contratanteE = ''
                        contratanteG = ''
                        businessLine_ = ''
                        contratanteG = ''
                        grupo1_ = ''
                        grupo2_ = ''
                        nivelAg_ = ''
                        grupo3_ = ''
                        grupo4_ = ''  
                        clasifica_='-----' 
                        celula_='-----' 
                elif r.poliza.document_type == 4:
                    pnumber=r.poliza.parent.poliza_number
                    receipt1 = 'Subgrupo'
                    try:
                        if r.poliza.parent.f_currency == 2 or r.poliza.parent.f_currency == 3 or r.poliza.parent.f_currency == 4:
                            try:
                                importe = float(r.prima_total) * float(r.rate_exchange)
                            except Exception as es:
                                importe = r.prima_total
                        else:
                            importe = r.prima_total
                    except Exception as err:
                        importe = r.prima_total
                    try:
                        sramo = r.poliza.parent.subramo.subramo_name
                        fc = r.poliza.parent.f_currency
                        status_p = r.poliza.parent.status
                        rm = r.poliza.parent.ramo.ramo_name
                        pnumber = r.poliza.parent.poliza_number
                        iden = r.poliza.parent.identifier
                        if iden:
                            iden = ((((((iden).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')                       
                        payForm = r.poliza.parent.forma_de_pago
                        try:
                            sc = r.poliza.parent.sucursal.sucursal_name
                        except Exception as f:
                            sc = ''
                        inc = r.poliza.parent.start_of_validity.strftime("%d/%m/%Y")
                        fn =r.poliza.parent.end_of_validity.strftime("%d/%m/%Y")
                        try:
                            cve = r.poliza.parent.clave.name +' '+str(r.poliza.parent.clave.clave)
                            if cve:
                                cve = ((((((cve).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')                         
                        except Exception as e:
                            cve = ''
                        aseg = r.poliza.parent.aseguradora.alias
                    except Exception as fd:
                        inc = ''
                        fn = ''
                        aseg = ''
                        cve = ''
                        pnumber = ''
                        sramo = ''
                        status_p = ''
                        iden = ''
                        payForm = 12
                        fc = 1
                        sc = ''
                    #FK de clientes
                    if r.poliza.parent.contractor:
                        contratantex = ((((((r.poliza.parent.contractor.full_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        contratanteE = r.poliza.parent.contractor.email
                        contratanteP = r.poliza.parent.contractor.phone_number
                        # contratanteG = r.poliza.parent.contractor.group.group_name
                        contratanteG = ((((((r.poliza.parent.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        if r.poliza.parent.business_line:
                            if int(r.poliza.parent.business_line) ==1:
                                businessLine_ = 'Comercial'
                            elif int(r.poliza.parent.business_line) ==2:
                                businessLine_ = 'Personal'
                            elif int(r.poliza.parent.business_line) ==0:
                                businessLine_ = 'Otro'
                            else:
                                businessLine_ = ''
                        else:
                            if int(r.poliza.parent.business_line) ==0:
                                businessLine_ = 'Otro'
                            else:
                                businessLine_ = ''
                        try:
                            if r.poliza.parent.contractor.group.type_group == 1:
                                contratanteG = ((((((r.poliza.parent.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo1_ = ''
                                grupo2_ = ''
                            elif r.poliza.parent.contractor.group.type_group == 2:
                                grupotype1 = Group.objects.get(pk = r.poliza.parent.contractor.group.parent.id)
                                contratanteG = ((((((grupotype1.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo1_ = ((((((r.poliza.parent.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo2_ = ''
                            elif r.poliza.parent.contractor.group.type_group == 3:
                                grupotype1 = Group.objects.get(pk = r.poliza.parent.contractor.group.parent.parent.id)
                                contratanteG = ((((((grupotype1.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                subgrupotype2 = Group.objects.get(pk = r.poliza.parent.contractor.group.parent.id)
                                grupo1_ = ((((((subgrupotype2.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo2_ = ((((((r.poliza.parent.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        except Exception as e:
                            contratanteG = ''
                            grupo1_ = ''
                            grupo2_ = ''
                        try:
                            if r.poliza.parent.groupinglevel:
                                if r.poliza.parent.groupinglevel.type_grouping == 1:
                                    nivelAg_ = ((((((r.poliza.parent.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                    grupo3_ = ''
                                    grupo4_ = ''
                                elif r.poliza.parent.groupinglevel.type_grouping == 2:
                                    grupotype1 = GroupingLevel.objects.get(pk = r.poliza.parent.groupinglevel.parent.id)
                                    nivelAg_ = ((((((grupotype1.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                    grupo3_ = ((((((r.poliza.parent.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                    grupo4_ = ''
                                elif r.poliza.parent.groupinglevel.type_grouping == 3:
                                    grupotype1 = GroupingLevel.objects.get(pk = r.poliza.parent.groupinglevel.parent.parent.id)
                                    nivelAg_ = ((((((grupotype1.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                    subgrupotype2 = GroupingLevel.objects.get(pk = r.poliza.parent.groupinglevel.parent.id)
                                    grupo3_ = ((((((subgrupotype2.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                    grupo4_ = ((((((r.poliza.parent.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                            else:
                                nivelAg_ = ''
                                grupo3_ = ''
                                grupo4_ = ''  
                        except Exception as e:
                            nivelAg_ = ''
                            grupo3_ = ''
                            grupo4_ = '' 
             
                        if r.poliza.parent.contractor.classification:
                            clasifica_ = r.poliza.parent.contractor.classification.classification_name  
                        else:
                            clasifica_='-----' 
                        if r.poliza.parent.celula:
                            celula_ = r.poliza.parent.celula.celula_name  
                        else:
                            celula_='-----'

                        contacto = ContactInfo.objects.filter(contractor=r.poliza.parent.contractor)
                        
                        if contacto:
                            contacto_nombre = contacto[0].name
                            contacto_telefono = contacto[0].phone_number
                            contacto_email = contacto[0].email
                        else:
                            contacto_nombre = ''
                            contacto_telefono = ''
                            contacto_email = ''

                    else:
                        contratantex = ''
                        contratanteE = ''
                        contratanteG = ''
                        businessLine_ = ''
                        contratanteG = ''
                        grupo1_ = ''
                        grupo2_ = ''
                        nivelAg_ = ''
                        grupo3_ = ''
                        grupo4_ = ''  
                        clasifica_='-----' 
                        celula_='-----' 
                else:    
                    pnumber=r.poliza.poliza_number  
                    try:
                        if r.poliza.f_currency == 2 or r.poliza.f_currency == 3 or r.poliza.f_currency == 4:
                            try:
                                importe = float(r.prima_total) * float(r.rate_exchange)
                            except Exception as es:
                                importe = r.prima_total
                        else:
                            importe = r.prima_total
                    except Exception as err:
                        importe = r.prima_total          
                    if r.poliza.document_type == 7:
                        receipt1 = 'Fianza'
                    if r.poliza.document_type == 8:
                        receipt1 = 'Fianza Colectiva'
                    if r.poliza.document_type == 11:
                        receipt1 = 'Colectividad'
                    if r.poliza.document_type == 12:
                        receipt1 = 'Póliza de Colectividad'
                    if r.poliza.document_type == 3:
                        receipt1 = 'Póliza de Grupo'
                    if r.poliza.fianza_type:
                        tpf = r.poliza.fianza_type.type_name
                    try:
                        sramo = r.poliza.subramo.subramo_name
                        fc = r.poliza.f_currency
                        status_p = r.poliza.status
                        rm = r.poliza.ramo.ramo_name
                        pnumber = r.poliza.poliza_number
                        iden = r.poliza.identifier
                        try:
                            iden = ((((((iden).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')                         
                        except Exception as e:
                            iden = ''
                        inc = r.poliza.start_of_validity.strftime("%d/%m/%Y")
                        fn =r.poliza.end_of_validity.strftime("%d/%m/%Y")
                        try:
                            cve = r.poliza.clave.name +' '+str(r.poliza.clave.clave)
                            cve = ((((((cve).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')                  
                        except Exception as re:
                            cve = ''
                        aseg = r.poliza.aseguradora.alias
                        payForm = r.poliza.forma_de_pago
                        try:
                            sc = r.poliza.sucursal.sucursal_name
                        except Exception as c:
                            sc = ''
                    except Exception as fd:
                        inc = ''
                        fn = ''
                        aseg = ''
                        cve = ''
                        pnumber = ''
                        iden = ''
                        ident = ''
                        status_p = ''
                        payForm = 12
                        sc = ''
                        fc = 1
                    if r.poliza.contractor:
                        contratantex = ((((((r.poliza.contractor.full_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        contratanteE = r.poliza.contractor.email
                        contratanteP = r.poliza.contractor.phone_number
                        # contratanteG = r.poliza.contractor.group.group_name
                        contratanteG = ((((((r.poliza.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        if r.poliza.business_line:
                            if int(r.poliza.business_line) ==1:
                                businessLine_ = 'Comercial'
                            elif int(r.poliza.business_line) ==2:
                                businessLine_ = 'Personal'
                            elif int(r.poliza.business_line) ==0:
                                businessLine_ = 'Otro'
                            else:
                                businessLine_ = ''
                        else:
                            if r.poliza.business_line in [0, '0', None]:
                                businessLine_ = 'Otro'
                            else:
                                businessLine_ = ''
                        try:
                            if r.poliza.contractor.group.type_group == 1:
                                contratanteG = ((((((r.poliza.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo1_ = ''
                                grupo2_ = ''
                            elif r.poliza.contractor.group.type_group == 2:
                                grupotype1 = Group.objects.get(pk = r.poliza.contractor.group.parent.id)
                                contratanteG = ((((((grupotype1.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo1_ = ((((((r.poliza.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo2_ = ''
                            elif r.poliza.contractor.group.type_group == 3:
                                grupotype1 = Group.objects.get(pk = r.poliza.contractor.group.parent.parent.id)
                                contratanteG = ((((((grupotype1.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                subgrupotype2 = Group.objects.get(pk = r.poliza.contractor.group.parent.id)
                                grupo1_ = ((((((subgrupotype2.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo2_ = ((((((r.poliza.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        except Exception as e:
                            contratanteG = ''
                            grupo1_ = ''
                            grupo2_ = ''
                        try:
                            if r.poliza.groupinglevel:
                                if r.poliza.groupinglevel.type_grouping == 1:
                                    nivelAg_ = ((((((r.poliza.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                    grupo3_ = ''
                                    grupo4_ = ''
                                elif r.poliza.groupinglevel.type_grouping == 2:
                                    grupotype1 = GroupingLevel.objects.get(pk = r.poliza.groupinglevel.parent.id)
                                    nivelAg_ = ((((((grupotype1.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                    grupo3_ = ((((((r.poliza.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                    grupo4_ = ''
                                elif r.poliza.groupinglevel.type_grouping == 3:
                                    grupotype1 = GroupingLevel.objects.get(pk = r.poliza.groupinglevel.parent.parent.id)
                                    nivelAg_ = ((((((grupotype1.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                    subgrupotype2 = GroupingLevel.objects.get(pk = r.poliza.groupinglevel.parent.id)
                                    grupo3_ = ((((((subgrupotype2.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                    grupo4_ = ((((((r.poliza.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                            else:
                                nivelAg_ = ''
                                grupo3_ = ''
                                grupo4_ = ''  
                        except Exception as e:
                            nivelAg_ = ''
                            grupo3_ = ''
                            grupo4_ = '' 
             
                        if r.poliza.contractor.classification:
                            clasifica_ = r.poliza.contractor.classification.classification_name  
                        else:
                            clasifica_='-----'

                        contacto = ContactInfo.objects.filter(contractor=r.poliza.contractor)
                        
                        if contacto:
                            contacto_nombre = contacto[0].name
                            contacto_telefono = contacto[0].phone_number
                            contacto_email = contacto[0].email
                        else:
                            contacto_nombre = ''
                            contacto_telefono = ''
                            contacto_email = ''

                        if r.poliza.celula:
                            celula_ = r.poliza.celula.celula_name  
                        else:
                            celula_='-----'

                    else:
                        contratantex = ''
                        contratanteE = ''
                        contratanteG = ''
                        businessLine_ = ''
                        contratanteG = ''
                        grupo1_ = ''
                        grupo2_ = ''
                        nivelAg_ = ''
                        grupo3_ = ''
                        grupo4_ = ''  
                        clasifica_='-----' 
                        celula_='-----' 

                if r.poliza.responsable:
                    val_resp = r.poliza.responsable.first_name + ' '+ str(r.poliza.responsable.last_name)
                else:
                    val_resp = ''
                if r.poliza.collection_executive:
                    val_cexe = r.poliza.collection_executive.first_name + ' '+ str(r.poliza.collection_executive.last_name)
                else:
                    val_cexe = ''
                refs_policy = []
                try:
                    if r.poliza.document_type ==4:
                        if r.poliza.parent:
                            refs_policy = ReferenciadoresInvolved.objects.filter(policy = r.poliza.parent.id,is_changed=False).values_list('referenciador__first_name','referenciador__last_name')
                    elif r.poliza.document_type ==6:
                        if r.poliza.parent and r.poliza.parent.parent and r.poliza.parent.parent.parent:
                            refs_policy = ReferenciadoresInvolved.objects.filter(policy = r.poliza.parent.parent.parent.id,is_changed=False).values_list('referenciador__first_name','referenciador__last_name')
                    else:
                        refs_policy = ReferenciadoresInvolved.objects.filter(policy = r.poliza.id,is_changed=False).values_list('referenciador__first_name','referenciador__last_name')
                    if len(refs_policy):
                        v = []
                        try:
                            for it in refs_policy:
                                v.append(it[0] +' '+ str(it[1])+str('-'))
                            referenc = v
                        except Exception as y:
                            referenc = []
                    else:
                        referenc = []
                except Exception as e:
                    referenc = []

                value = ''
                car_serial = ''
                car_year = ''

                if r.poliza.ramo:
                    if r.poliza.ramo.ramo_code == 1:
                        form = Life.objects.filter(policy = r.poliza.id)
                        tpf = tpfs[form.first().personal.policy_type] if form.exists() and form.first().personal and form.first().personal.policy_type in tpfs  else 'No especificado'
                        try:
                            if form:
                                value = form[0].personal.full_name
                            else:
                                value = ''
                        except Exception as rt:
                           value = ''
                    elif r.poliza.ramo.ramo_code == 2:
                        form = AccidentsDiseases.objects.filter(policy = r.poliza.id)
                        tpf = tpfs[form.first().personal.policy_type] if form.exists() and form.first().personal and form.first().personal.policy_type in tpfs  else 'No especificado'
                        if form:
                            value = form[0].personal.full_name
                        else:
                            value = ''
                    elif r.poliza.subramo.subramo_code == 9:
                        form = AutomobilesDamages.objects.filter(policy = r.poliza.id)
                        tpf = form.first().get_policy_type_display() if form.exists() else 'No especificado'
                        if form:
                            try:
                                form[0].model = ((((((form[0].model).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                form[0].version = ((((((form[0].version).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                            except Exception as erse:
                                form[0].model = form[0].model
                                form[0].version = form[0].version
                            value = str(form[0].brand) + '-' + str(form[0].model) + '-' + str(form[0].version)
                            
                            car_serial = form[0].serial
                            car_year = form[0].year
                        else:
                            value = ''
                        
                    elif r.poliza.ramo.ramo_code == 3 and not r.poliza.subramo.subramo_code == 9:
                        form = Damages.objects.filter(policy = r.poliza.id)
                        tpf = form.first().get_damage_type_display() if form.exists() else 'No especificado'

                        if form:
                            value = form[0].insured_item
                        else:
                            value = ''
                    else:
                        value = 'Sin asegurado'
                else:
                    value = 'Sin asegurado'
                    car_serial = ''
                    car_year = ''

            else:
                value = 'Sin asegurado'
                val_resp = 'Sin responsable'
                val_cexe = 'Sin ejecutivo'
                car_serial = ''
                car_year = ''           

            #Recibo proveniente de un bono
            if r.bono:
                receipt1 = 'Bono'
                fc = r.bono.tipo_cambio
                try:
                    if r.bono.tipo_cambio == 2 or r.bono.tipo_cambio == 3 or r.bono.tipo_cambio == 4:
                        try:
                            importe = float(r.prima_total) * float(r.bono.tipo_cambio)
                        except Exception as es:
                            importe = r.prima_total
                    else:
                        importe = r.prima_total
                except Exception as err:
                    importe = r.prima_total

                try:
                    cve = r.bono.clave.name +' '+str(r.bono.clave.clave)
                    cve = ((((((cve).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                except Exception as er:
                    cve = ''
                try:
                    aseg = r.bono.aseguradora.alias
                except Exception as er:
                    aseg = ''
                try:
                    pnumber = r.bono.factura_number
                except:
                    pnumber = ''
                try:
                    if r.bono.vendor:
                        referenc = [r.bono.vendor.first_name + ' '+ str(r.bono.vendor.last_name)]
                    else:
                        referenc = []
                except:
                    referenc = []
                inc = 'Sin fecha'
                fn = 'Sin fecha'

            if r.receipt_type == 3:
                receipt1 = 'Nota de Crédito'
            elif r.receipt_type == 2:
                receipt1 = 'Endoso'
            elif r.receipt_type == 4:
                receipt1 = 'Bono'

            if value:
                value = ((((((value).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'') 
            else:
                value = value



            promesa_pago.append(pp)
            asegurado.append(value)
            metodoPago.append(mpago)
            receipttype.append(receipt1)
            referenciador.append(referenc)
            antiguedad.append(antig)
            responsable.append(val_resp)
            collection.append(val_cexe)
            userpay.append(val_userpay)
            creadopor.append(val_owner)
            contract.append(contratantex)
            contractemail.append(contratanteE)
            contractphone.append(contratanteP)
            contractgrupo.append(contratanteG)
            aseguradora.append(aseg)
            inicio.append(inc)
            fin.append(fn)
            poliza_number.append(pnumber)
            clave.append(cve)
            subramo.append(sramo)
            ramo.append(rm)
            identifier.append(iden)
            statusP.append(status_p)
            forma_de_pago.append(payForm)
            sucursal.append(sc)
            currency.append(fc)
            importePesos.append(importe)
            # ---
            grupo1.append(grupo1_)
            grupo2.append(grupo2_)
            nivelAg.append(nivelAg_)
            grupo3.append(grupo3_)
            grupo4.append(grupo4_)
            clasifica.append(clasifica_)
            celula.append(celula_)
            businessLine.append(businessLine_)

            contactos_nombre.append(contacto_nombre)
            contactos_email.append(contacto_email)
            contactos_telefono.append(contacto_telefono)

            tipo_poliza_fianza.append(tpf)
            # ----
            comments =  Comments.objects.filter(id_model=r.id, model=4).order_by('-id')
            if comments:
                com = comments[0].content
                if com:
                    com = com.replace(',', '')
                bitacora.append(com)
            else:
                bitacora.append('')

            cars_serials.append(car_serial)
            cars_years.append(car_year)
       

        obj = {
            'document_type': str(list(document_type_list)),
            'caratulas': str(list(caratulas)),
            'tipo_poliza_fianza': str(list(tipo_poliza_fianza)),
            'metodo_pago'   : str(list(metodoPago)),
            'promesa_pago'   : str(list(promesa_pago)),
            'tipo_pago': str(list(tipo_pago_list)),
            'documento_pago': str(list(documento_pago_list)),
            'receipt_type'   : str(list(receipttype)),
            'recibo_numero'   : str(list(recibo_numero_list)),
            'endoso_number'   : str(list(endoso_number_list)),
            'poliza_number'   : str(list(poliza_number)),
            'identifier'   : str(list(identifier)),
            'aseguradora'   : str(list(aseguradora)),
            'subramo'   : str(list(subramo)),
            'forma_de_pago'   : str(list(forma_de_pago)),
            'status'   : str(list(status_list)),
            'domiciliado'   : str(list(is_cat_list)),
            'status_p'   : str(list(statusP)),
            'fecha_inicio'   : str(list(fecha_inicio_list)),
            'fecha_fin'   : str(list(fecha_fin_list)),
            'vencimiento'   : str(list(vencimiento_list)),
            'promesa_pago'   : str(list(promesa_pago_list)),
            'fecha_pago'   : str(list(fecha_pago_list)),
            'fecha_conciliacion'  : str(list(fecha_conciliacion_list)),
            'fecha_liquidacion'  : str(list(fecha_liquidacion_list)),
            'liquidacion_folio'   : str(list(folio_liquidacion_list)),
            'pago_folio'   : str(list(folio_pago_list)),
            'start_of_validity'   : str(list(inicio)),
            'end_of_validity'   : str(list(fin)),
            'f_currency'   : str(list(currency)),
            'p_neta'   : str(list(prima_neta_list)),
            'comision_conc': str(list(comision_conciliada_list)),
            'rpf'   : str(list(rpf_list)),
            'derecho'   : str(list(derecho_list)),
            'iva'   : str(list(iva_list)),
            'p_total'   : str(list(p_total_list)),
            'importe_pesos'   : str(list(importePesos)),
            'comision'   : str(list(comision_list)),            
            'clave'   : str(list(clave)),
            '_id'   : str(list(id_list)),
            'observations'   : str(list(observations_list)),
            'created_at'   : str(list(created_at_list))  ,             
            'sucursal'   : str(list(sucursal)),
            'asegurado'   : str(list(asegurado)),
            'ramo'   : str(list(ramo)),
            'celula'   : str(list(celula)),
            'referenciador'   : str(list(referenciador)),
            'antiguedad'   : str(list(antiguedad)),
            'creadopor'   : str(list(creadopor)),
            'collection'   : str(list(collection)),
            'user_pay'   : str(list(userpay)),
            'responsable'   : str(list(responsable)),
            'contratante'   : str(list(contract)),
            'contratanteE'   : str(list(contractemail)),
            'contratanteP'   : str(list(contractphone)),
            'contratanteG'   : str(list(contractgrupo)),
            'grupo1'   : str(list(grupo1)) ,
            'grupo2'   : str(list(grupo2)) ,
            'nivelAg'   : str(list(nivelAg)) ,
            'grupo3'   : str(list(grupo3)) ,
            'grupo4'   : str(list(grupo4)) ,
            'clasifica'   : str(list(clasifica)) ,
            'businessLine'   : str(list(businessLine)),
            'contactos_nombre'   : str(list(contactos_nombre)),
            'contactos_telefono'   : str(list(contactos_telefono)),
            'contactos_email'   : str(list(contactos_email)),
            'cars_years'   : str(list(cars_years)),
            'cars_serials'   : str(list(cars_serials)),
            'tipo_reporte': tipo_reporte,
            'bitacora': str(list(bitacora)),
            'email_org':info_org['email'],
            'phone_org':info_org['phone'],
            'webpage_org':info_org['webpage'],
            'address_org':info_org['address'],
            'urlname_org':info_org['name'],
            'bitacora': str(bitacora)
        }   


        obj['columns'] = str(list(columns))
        obj['imagen'] = archivo_imagen
        obj['valueCom'] = valueCom
        obj['verReferenciadores'] = verReferenciadores
        obj['registros'] = len(recibos)


        r = requests.post(settings.SERVICEEXCEL_URL + 'get-cobranzaExcelReporte/', obj,
        # headers = {
        # 'Authorization':'Bearer %s'%request.user.user_info.fi_token_refresh,
        # # 'Content-Type':'application/json' 
        # }, 
        stream=True)
        response_data= r.text

        response = HttpResponse(r.content,content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

        return response

# Reporte Renpovaciones Reporte
@api_view(['POST'])
@permission_classes((IsAuthenticatedV2, RenovacionesReportesPermissionsV2, IsOrgMemberV2))
def Service_ReporteRenovacionesExcel(request):  
    valueCom = True
    try:
        valueCom = comisions(request)
    except Exception as ers:
        valueCom =  True
    if 'addsiniestrop' in request.data:
        addsiniestrop = request.data['addsiniestrop']
    else:
        addsiniestrop= False
    excel_type = int(request.data['excel_type'])
    org_name =  request.GET.get('org')
    subramo = int(request.data['subramo'])
    ramo = int(request.data['ramo'])
    aseguradora = int(request.data['provider']) 
    payment = int(request.data['payment'])
    contratante = request.data['contratante']
    group = request.data['grupo']
    status = int(request.data['status'])
    cve = request.data['cve']
    validity = request.data['validity']
    order = int(request.data['order'])
    asc = int(request.data['asc'])
    renovadas = int(request.data['renovadas'])
    ramos_sel = (request.data['ramos'])
    subramos_sel = (request.data['subramos'])
    providers_sel = (request.data['providers'])
    users_sel = (request.data['users'])
    group_by = request.data['group_by']
    sucursal = request.data['sucursal'] if 'sucursal' in request.data else None
    p_neta_total = 0
    p_total_total = 0
    comision_total = 0
    
    # los valores en try No se encuentran en localhost:3000/#/reportes/renovacionesPendientes
    try:
        bsLine = request.data['businessLine']
    except:
        bsLine = 0

    try:
        subgrupo = request.data['subgrupo']
    except:
        subgrupo = 0

    try:
        subsubgrupo = request.data['subsubgrupo']
    except:
        subsubgrupo = 0

    try:
        subsubgrupo = request.data['subsubgrupo']
    except:
        subsubgrupo = 0

    try:
        nivelagrupacion = request.data['groupinglevel']
    except:
        nivelagrupacion = 0

    try:
        subnivel = request.data['subgrupinglevel']
    except:
        subnivel = 0

    try:
        subsubnivel = request.data['subsubgrupinglevel']
    except:
        subsubnivel = 0

    try:
        clasificacion = request.data['classification']
    except:
        clasificacion = 0

    try:
        celula = request.data['celula']
    except:
        celula = 0

    try:
        bsLine = request.data['businessLine']
    except:
        bsLine = 0
        
    # --------****
    try:
        onlyCaratula = request.data['only_caratula']
    except:
        onlyCaratula = 0
    # --------****
    if int(ramo) > 0 :
        ramo = list(Ramos.objects.filter(pk = int(ramo)).values_list('pk', flat=True))
    else:
        ramo = list(Ramos.objects.filter(org_name = request.GET.get('org')).values_list('pk', flat=True))
    
    if int(subramo) > 0 :
        subramo = list(SubRamos.objects.filter(pk = int(subramo)).values_list('pk', flat=True))
    else:
        subramo = list(SubRamos.objects.filter(org_name = request.GET.get('org'), ramo__in = ramo).values_list('pk', flat=True))
            
    if aseguradora == 0:
        aseguradora = list(Provider.objects.filter(org_name = request.GET.get('org')).values_list('pk', flat=True))
    else:
        aseguradora = [aseguradora]

    # Provider sel----
    if (providers_sel):
        aseguradora = list(Provider.objects.filter(pk__in = (providers_sel)).values_list('pk', flat=True))
    else:
        aseguradora = list(Provider.objects.filter(org_name = request.GET.get('org')).values_list('pk', flat=True))
    # ramos_selected----
    if (ramos_sel):
        ramo = list(Ramos.objects.filter(org_name = request.GET.get('org'), provider__in = aseguradora,ramo_code__in=ramos_sel).values_list('pk', flat=True))
    else:
        ramo = list(Ramos.objects.filter(org_name = request.GET.get('org'), provider__in = aseguradora).values_list('pk', flat=True))

    # rsubramos_sel----
    if (subramos_sel):
        subramo = list(SubRamos.objects.filter(org_name = request.GET.get('org'), ramo__in = ramo,subramo_code__in= subramos_sel).values_list('pk', flat=True))
    else:
        subramo = list(SubRamos.objects.filter(org_name = request.GET.get('org'), ramo__in = ramo).values_list('pk', flat=True))   
    # users sel----
    if (users_sel):
        users = list(User.objects.filter(pk__in = (users_sel)).values_list('pk', flat=True))
    else:
        users = list(User.objects.values_list('pk', flat=True))

    if int(payment) > 0:
        fp = [int(payment)]
    else:
        fp = [12,24,6,5,4,3,2,1,7,14,15]

    if int(status) > 0:
        status = [int(status)]
    else:
        status = list([10, 12, 13,14,15])
    clave = 0
    try:
        clave = int(cve)
        if clave > 0:
            cves = list(Claves.objects.filter(clave__icontains = cve, org_name = request.GET.get('org')).values_list('pk', flat=True))
        else:
            cves = list(Claves.objects.filter(org_name = request.GET.get('org')).values_list('pk', flat=True))
    except:
        cve_filters = [Q(clave__icontains = cve),Q(name__icontains = cve)]
        cves = list(Claves.objects.filter(reduce(operator.or_,cve_filters), org_name = request.GET.get('org')).values_list('pk', flat=True))

    try:
        if int(group) > 0:
            grupos = Group.objects.get(pk = int(group))
        else:
            grupos = Group.objects.filter(org_name = request.GET.get('org'))
    except:
        pass
    if int(group) > 0:
            grupos1 = Group.objects.get(pk = int(group))
            subg = Group.objects.filter(parent__id = int(group), type_group = 2, org_name=request.GET.get('org')).values_list('pk', flat=True)
            subsubg = Group.objects.filter(parent__id__in = subg, type_group = 3, org_name=request.GET.get('org')).values_list('pk', flat=True)
            allgrupos = list(subg) + list(subsubg)
            allgrupos.append(grupos1.id)
            grupos = Group.objects.filter(pk__in = allgrupos, org_name=request.GET.get('org'))
    else:
            grupos = Group.objects.filter(org_name=request.GET.get('org'))

    if int(subgrupo) > 0:
            subg = Group.objects.get(pk = int(subgrupo), org_name=request.GET.get('org'))
            subsubg = Group.objects.filter(parent__id = int(subgrupo), type_group = 3, org_name=request.GET.get('org')).values_list('pk', flat=True)
            allgrupos =list(subsubg)
            allgrupos.append(subg.id)
            grupos = Group.objects.filter(pk__in = allgrupos, org_name=request.GET.get('org'))
    # else:
    #       grupos = Group.objects.filter(org_name=request.GET.get('org'))
    if int(subsubgrupo) > 0:
            grupos = Group.objects.get(pk = int(subsubgrupo), org_name=request.GET.get('org'))
    # else:
    #       grupos = Group.objects.filter(org_name = request.GET.get('org'))
    if int(clasificacion) > 0:
        clasifics = Classification.objects.get(pk = int(clasificacion), org_name=request.GET.get('org'))
    else:
        clasifics = Classification.objects.filter(org_name=request.GET.get('org'))

    try:
        f = "%d/%m/%Y %H:%M:%S"        
        since = datetime.strptime(request.data['since'] , f)
        until = datetime.strptime(request.data['until'], f)
    except:
        f = "%m/%d/%Y %H:%M:%S"        
        since = datetime.strptime(request.data['since'] , f)
        until = datetime.strptime(request.data['until'] , f)

    org = request.GET.get('org')
    if int(validity) == 1:
        if renovadas == 1:
            # date_filters = [Q(start_of_validity__gte=since),Q(start_of_validity__lte = until), Q(renewed_status = 1)]
            date_filters = [Q(start_of_validity__gte=since),Q(start_of_validity__lte = until), Q(status = 12)]
        else:
            date_filters = [Q(start_of_validity__gte=since),Q(start_of_validity__lte = until), Q(status__in = [10, 13,14]), Q(renewed_status = 0)]
    elif  int(validity) == 2:
        if renovadas == 1:
            # date_filters = [Q(end_of_validity__gte=since),Q(end_of_validity__lte = until), Q(renewed_status = 1)]
            date_filters = [Q(end_of_validity__gte=since),Q(end_of_validity__lte = until), Q(status = 12)]
        else:
            # date_filters = [Q(end_of_validity__gte=since),Q(end_of_validity__lte = until), Q(status__in = [10, 13,14]), Q(renewed_status = 0)]
            if org !='ancora':
                date_filters = [Q(end_of_validity__gte=since),Q(end_of_validity__lte = until), Q(status__in = [10, 13,14]), Q(renewed_status = 0)]
            else:
                date_filters = [Q(end_of_validity__gte=since),Q(end_of_validity__lte = until), Q(status__in = [10, 13,14]), Q(renewed_status__in = [0,2])]
    else:
        if renovadas == 1:
            # date_filters = [Q(renewed_status = 1)]
            date_filters = [Q(status = 12)]
        else:
            date_filters = [Q(status__in = [10, 13,14]), Q(renewed_status = 0)]

    polizas = Polizas.objects.filter(org_name =  request.GET.get('org'),
                                      ramo__in = ramo, 
                                      subramo__in = subramo, 
                                      forma_de_pago__in = fp,
                                      aseguradora__in = aseguradora,
                                      status__in = status,
                                      document_type__in = list([1,3,7,8,11,12]),
                                      # clave__in = cves,
                                      is_renewable = 1,
                                      owner__in = users)
    # ---------------------
    if int(validity) == 1:
        if renovadas == 2:
            date_filters2 = [Q(start_of_validity__gte=since),Q(start_of_validity__lte = until), Q(status__in = [10, 13,14]), Q(renewed_status = 2)]
    elif  int(validity) == 2:
        if renovadas == 2:
            if org !='ancora':
                date_filters2 = [Q(end_of_validity__gte=since),Q(end_of_validity__lte = until), Q(status__in = [10, 13,14]), Q(renewed_status = 2)]
            else:
                date_filters2 = [Q(end_of_validity__gte=since),Q(end_of_validity__lte = until), Q(status__in = [10, 13,14]), Q(renewed_status__in = [2])]
    else:
        if renovadas == 2:
            date_filters2 = [Q(status__in = [10, 13,14]), Q(renewed_status = 2)]

    polizas = Polizas.objects.filter(org_name =  request.GET.get('org'),
                                      ramo__in = ramo, 
                                      subramo__in = subramo, 
                                      forma_de_pago__in = fp,
                                      aseguradora__in = aseguradora,
                                      status__in = status,
                                      document_type__in = list([1,3,7,8,11,12]),
                                      # clave__in = cves,
                                      is_renewable = 1,
                                      owner__in = users)
    # *********************
    polizasenproceso = Polizas.objects.filter(org_name =  request.GET.get('org'),
                                      ramo__in = ramo, 
                                      subramo__in = subramo, 
                                      forma_de_pago__in = fp,
                                      aseguradora__in = aseguradora,
                                      status__in = status,
                                      document_type__in = list([1,3,7,8,11,12]),
                                      is_renewable = 1,
                                      owner__in = users)
    if sucursal:
        polizas = polizas.filter(sucursal__id =sucursal)
        polizasenproceso = polizasenproceso.filter(sucursal__id =sucursal)

    polizas_n = []
    polizas_j = []
    polizas_total = []
    
    if clave > 0:
        polizas = polizas.filter(clave__in = cves)
        polizasenproceso = polizasenproceso.filter(clave__in = cves)
    try:
        if int(contratante) > 0:
            contratanten = list( Contractor.objects.filter(pk = int(contratante)).values_list('pk', flat = True) )
            polizas = polizas.filter(contractor__in = contratanten)
            polizasenproceso = polizasenproceso.filter(contractor__in = contratanten)
        else:
            contratanten = list( Contractor.objects.filter(org_name = request.GET.get('org')).values_list('pk', flat = True))
            polizas = polizas.filter(contractor__in = contratanten)
            polizasenproceso = polizasenproceso.filter(contractor__in = contratanten)
    except Exception as e:
        polizas = polizas
        polizasenproceso = polizasenproceso
    # ----------------------**************************----------------------------
    if int(group) > 0 :
        carat = polizas.filter(document_type__in = [1,3,11])
        carat = carat.filter(contractor__group = grupos).values_list('pk', flat = True)
        # pol = polizas.filter(document_type = 12).values_list('pk', flat = True)
        only_caratulas = Polizas.objects.filter(pk__in = carat,document_type = 11)
        pol = polizas.filter(document_type = 12, parent__in = only_caratulas).values_list('pk', flat = True)
        pol2 = polizasenproceso.filter(document_type = 12, parent__in = only_caratulas).values_list('pk', flat = True)
        polizas = list(carat) + list(pol)
        polizasenproceso = list(carat) + list(pol2)
        polizas = Polizas.objects.filter(pk__in = polizas)
        polizasenproceso = Polizas.objects.filter(pk__in = polizasenproceso)
    # -----------------------------***********************************************-----------------------------------   
    if int(clasificacion) > 0 :
        polizas = polizas.filter(contractor__classification = clasifics)  
        polizasenproceso = polizasenproceso.filter(contractor__classification = clasifics)  
    

    if int(celula) > 0 :
        #************ si son carátula debe mandar el contratnte que tenga la carátula y los de la póliza no cuentan***************
        polizas = polizas.filter(celula = celula)
        polizasenproceso = polizasenproceso.filter(celula = celula)



    gp = nivelagrupacion
    gp1= subnivel
    gp2 = subsubnivel

    if gp > 0 or gp1 > 0 or gp2 > 0:

        if(nivelagrupacion == 0):
            nivelagrupacion = GroupingLevel.objects.filter(org_name = request.GET.get('org'), type_grouping = 1).values_list('pk', flat = True)
        else :
            nivelagrupacion = GroupingLevel.objects.filter(id = nivelagrupacion).values_list('pk', flat = True)



        if(subnivel == 0):
            subnivel = GroupingLevel.objects.filter(org_name = request.GET.get('org'), type_grouping = 2, parent__in = list(nivelagrupacion)).values_list('pk', flat = True)
        else :
            subnivel = GroupingLevel.objects.filter(id = subnivel).values_list('pk', flat = True)


        if(subsubnivel == 0):
            subsubnivel = GroupingLevel.objects.filter(org_name = request.GET.get('org'), type_grouping = 3, parent__in = list(subnivel)).values_list('pk', flat = True)
        else :
            subsubnivel = GroupingLevel.objects.filter(id = subsubnivel).values_list('pk', flat = True)

        niveles = list(subsubnivel) + list(subnivel) + list(nivelagrupacion)

        polizas = polizas.filter(groupinglevel__in = niveles)
        polizasenproceso = polizasenproceso.filter(groupinglevel__in = niveles)
    # -----------------------------***********************************************-----------------------------------
    if int(bsLine) > 0:
        if int(bsLine) == 3:
            polizas = polizas.filter(business_line = 0) 
            polizasenproceso = polizasenproceso.filter(business_line = 0) 
        else:
            polizas = polizas.filter(business_line = bsLine)
            polizasenproceso = polizasenproceso.filter(business_line = bsLine)
    # -------------------------------------------------------
    
    if order == 1:
        if asc == 1:
            polizas = polizas.filter(reduce(operator.and_, date_filters), document_type__in = list([1,3,7,8,11,12]), org_name = request.GET.get('org')).order_by('poliza_number')
        else:
            polizas = polizas.filter(reduce(operator.and_, date_filters), document_type__in = list([1,3,7,8,11,12]), org_name = request.GET.get('org')).order_by('-poliza_number')

    elif order == 2:
        if asc == 1:
            polizas = polizas.filter(reduce(operator.and_, date_filters), document_type__in = list([1,3,7,8,11,12]), org_name = request.GET.get('org')).order_by('-document_type')
        else:
            polizas = polizas.filter(reduce(operator.and_, date_filters), document_type__in = list([1,3,7,8,11,12]), org_name = request.GET.get('org')).order_by('document_type')

    elif order == 3:
        if asc == 1:
            polizas = polizas.filter(reduce(operator.and_, date_filters), document_type__in = list([1,3,7,8,11,12]), org_name = request.GET.get('org')).order_by('contractor__full_name')
        else:
            polizas = polizas.filter(reduce(operator.and_, date_filters), document_type__in = list([1,3,7,8,11,12]), org_name = request.GET.get('org')).order_by('-contractor__full_name')
    
    elif order == 4:
        if asc == 1:
            polizas = polizas.filter(reduce(operator.and_, date_filters), document_type__in = list([1,3,7,8,11,12]), org_name = request.GET.get('org')).order_by('aseguradora__compania')
        else:
            polizas = polizas.filter(reduce(operator.and_, date_filters), document_type__in = list([1,3,7,8,11,12]), org_name = request.GET.get('org')).order_by('-aseguradora__compania')
    
    elif order == 5:
        if asc == 1:
            polizas = polizas.filter(reduce(operator.and_, date_filters), document_type__in = list([1,3,7,8,11,12]), org_name = request.GET.get('org')).order_by('ramo__ramo_name')
        else:
            polizas = polizas.filter(reduce(operator.and_, date_filters), document_type__in = list([1,3,7,8,11,12]), org_name = request.GET.get('org')).order_by('-ramo__ramo_name')


    elif order == 6:
        if asc == 1:
            polizas = polizas.filter(reduce(operator.and_, date_filters), document_type__in = list([1,3,7,8,11,12]), org_name = request.GET.get('org')).order_by('subramo__subramo_name')
        else:
            polizas = polizas.filter(reduce(operator.and_, date_filters), document_type__in = list([1,3,7,8,11,12]), org_name = request.GET.get('org')).order_by('-subramo__subramo_name')
    
    elif order == 7:
        if asc == 1:
            polizas = polizas.filter(reduce(operator.and_, date_filters), document_type__in = list([1,3,7,8,11,12]), org_name = request.GET.get('org')).order_by('paquete__package_name')
        else:
            polizas = polizas.filter(reduce(operator.and_, date_filters), document_type__in = list([1,3,7,8,11,12]), org_name = request.GET.get('org')).order_by('-paquete__package_name')

    elif order == 8:
        if asc == 1:
            polizas = polizas.filter(reduce(operator.and_, date_filters), document_type__in = list([1,3,7,8,11,12]), org_name = request.GET.get('org')).order_by('forma_de_pago')
        else:
            polizas = polizas.filter(reduce(operator.and_, date_filters), document_type__in = list([1,3,7,8,11,12]), org_name = request.GET.get('org')).order_by('-forma_de_pago')

    elif order == 9:
        if asc == 1:
            polizas = polizas.filter(reduce(operator.and_, date_filters), document_type__in = list([1,3,7,8,11,12]), org_name = request.GET.get('org')).order_by('status')
        else:
            polizas = polizas.filter(reduce(operator.and_, date_filters), document_type__in = list([1,3,7,8,11,12]), org_name = request.GET.get('org')).order_by('-status')

    elif order == 10:
        if asc == 1:
            polizas = polizas.filter(reduce(operator.and_, date_filters), document_type__in = list([1,3,7,8,11,12]), org_name = request.GET.get('org')).order_by('start_of_validity')
        else:
            polizas = polizas.filter(reduce(operator.and_, date_filters), document_type__in = list([1,3,7,8,11,12]), org_name = request.GET.get('org')).order_by('-start_of_validity')

    elif order ==11:
        if asc == 1:
            polizas = polizas.filter(reduce(operator.and_, date_filters), document_type__in = list([1,3,7,8,11,12]), org_name = request.GET.get('org')).order_by('created_at')
        else:
            polizas = polizas.filter(reduce(operator.and_, date_filters), document_type__in = list([1,3,7,8,11,12]), org_name = request.GET.get('org')).order_by('-created_at')

    elif order == 12:
        if asc == 1:
            polizas = polizas.filter(reduce(operator.and_, date_filters), document_type__in = list([1,3,7,8,11,12]), org_name = request.GET.get('org')).order_by('folio')
        else:
            polizas = polizas.filter(reduce(operator.and_, date_filters), document_type__in = list([1,3,7,8,11,12]), org_name = request.GET.get('org')).order_by('-folio')

    elif order == 13:
        if asc == 1:
            polizas = polizas.filter(reduce(operator.and_, date_filters), document_type__in = list([1,3,7,8,11,12]), org_name = request.GET.get('org')).order_by('-f_currency')
        else:
            polizas = polizas.filter(reduce(operator.and_, date_filters), document_type__in = list([1,3,7,8,11,12]), org_name = request.GET.get('org')).order_by('f_currency')

    elif order == 14:
        if asc == 1:
            polizas = polizas.filter(reduce(operator.and_, date_filters), document_type__in = list([1,3,7,8,11,12]), org_name = request.GET.get('org')).order_by('p_neta')
        else: 
            polizas = polizas.filter(reduce(operator.and_, date_filters), document_type__in = list([1,3,7,8,11,12]), org_name = request.GET.get('org')).order_by('-p_neta')

    elif order == 15:
        if asc == 1:
            polizas = polizas.filter(reduce(operator.and_, date_filters), document_type__in = list([1,3,7,8,11,12]), org_name = request.GET.get('org')).order_by('rpf')
        else:
            polizas = polizas.filter(reduce(operator.and_, date_filters), document_type__in = list([1,3,7,8,11,12]), org_name = request.GET.get('org')).order_by('-rpf')

    elif order == 16:
        if asc == 1:
            polizas = polizas.filter(reduce(operator.and_, date_filters), document_type__in = list([1,3,7,8,11,12]), org_name = request.GET.get('org')).order_by('derecho')
        else:
            polizas = polizas.filter(reduce(operator.and_, date_filters), document_type__in = list([1,3,7,8,11,12]), org_name = request.GET.get('org')).order_by('-derecho')

    elif order == 17:
        if asc == 1:
            polizas = polizas.filter(reduce(operator.and_, date_filters), document_type__in = list([1,3,7,8,11,12]), org_name = request.GET.get('org')).order_by('iva')
        else:
            polizas = polizas.filter(reduce(operator.and_, date_filters), document_type__in = list([1,3,7,8,11,12]), org_name = request.GET.get('org')).order_by('-iva')

    elif order == 18:
        if asc == 1:
            polizas = polizas.filter(reduce(operator.and_, date_filters), document_type__in = list([1,3,7,8,11,12]), org_name = request.GET.get('org')).order_by('p_total')
        else:
            polizas = polizas.filter(reduce(operator.and_, date_filters), document_type__in = list([1,3,7,8,11,12]), org_name = request.GET.get('org')).order_by('-p_total')

    elif order == 19:
        if asc == 1:
            polizas = polizas.filter(reduce(operator.and_, date_filters), document_type__in = list([1,3,7,8,11,12]), org_name = request.GET.get('org')).order_by('comision')
        else:
            polizas = polizas.filter(reduce(operator.and_, date_filters), document_type__in = list([1,3,7,8,11,12]), org_name = request.GET.get('org')).order_by('-comision')

    elif order == 20:
        if asc == 1:
            polizas = polizas.filter(reduce(operator.and_, date_filters), document_type__in = list([1,3,7,8,11,12]), org_name = request.GET.get('org')).order_by('observations')
        else:
            polizas = polizas.filter(reduce(operator.and_, date_filters), document_type__in = list([1,3,7,8,11,12]), org_name = request.GET.get('org')).order_by('-observations')

    elif order == 21:
        if asc == 1:
            polizas = polizas.filter(reduce(operator.and_, date_filters), document_type__in = list([1,3,7,8,11,12]), org_name = request.GET.get('org')).order_by('clave__clave')
        else:
            polizas = polizas.filter(reduce(operator.and_, date_filters), document_type__in = list([1,3,7,8,11,12]), org_name = request.GET.get('org')).order_by('-clave__clave')
    elif order == 22:
        if asc == 1:
            polizas = polizas.filter(reduce(operator.and_, date_filters), document_type__in = list([1,3,7,8,11,12]), org_name = request.GET.get('org')).order_by('end_of_validity')
        else:
            polizas = polizas.filter(reduce(operator.and_, date_filters), document_type__in = list([1,3,7,8,11,12]), org_name = request.GET.get('org')).order_by('-end_of_validity')
    else:
      polizas = polizas.filter(reduce(operator.and_, date_filters), document_type__in = list([1,3,7,8,11,12]), org_name = request.GET.get('org')).order_by('aseguradora__compania')
    # return polizas
    polizasenproceso = polizasenproceso.filter(reduce(operator.and_, date_filters2), document_type__in = list([1,3,7,8,11,12]), org_name = request.GET.get('org'))
    if int(onlyCaratula) != 0:
        polizas = polizas.filter(Q(id=onlyCaratula) | Q(parent__id=onlyCaratula), document_type__in = list([11,12]))
        polizasenproceso = polizasenproceso.filter(Q(id=onlyCaratula) | Q(parent__id=onlyCaratula), document_type__in = list([11,12]))
    else:
        polizas = polizas
        polizasenproceso = polizasenproceso

    try:
        dataToFilter = getDataForPerfilRestricted(request, request.GET.get('org'))
    except Exception as er:
        dataToFilter = {}
    if dataToFilter:
        # Contratantes***
        polizasCl = Polizas.objects.filter(document_type__in = [1,3,11,7,8,12,6,4], org_name = request.GET.get('org'))
        polizasToF = Polizas.objects.filter(document_type__in = [1,3,11,7,8], org_name = request.GET.get('org'))
        if dataToFilter['ccpr']:
            polizasToF = polizasToF.filter(contractor__in = list(dataToFilter['ccpr']))
        if dataToFilter['cgpr']:
            polizasToF = polizasToF.filter(contractor__group__in = list(dataToFilter['cgpr']))
        if dataToFilter['ccepr']:
            polizasToF = polizasToF.filter(contractor__cellule__in = list(dataToFilter['ccepr']))
        if dataToFilter['crpr']:
            polizasToF = polizasToF.filter(contractor__vendor__in = list(dataToFilter['crpr']))
        if dataToFilter['cspr']:
            polizasToF = polizasToF.filter(contractor__sucursal__in = list(dataToFilter['cspr']))
        # Pólizas ****
        if dataToFilter['pppr']:
            polizasToF = polizasToF.filter(pk__in = list(dataToFilter['pppr']))
        if dataToFilter['pgpr']:
            polizasToF = polizasToF.filter(contractor__group__in = list(dataToFilter['pgpr']))
        if dataToFilter['pcepr']:
            polizasToF = polizasToF.filter(celula__in = list(dataToFilter['pcepr']))
        if dataToFilter['prpr']:
            polizasToF = polizasToF.filter(ref_policy__referenciador__in = list(dataToFilter['prpr']))
        if dataToFilter['pspr']:
            polizasToF = polizasToF.filter(sucursal__in = list(dataToFilter['pspr']))
        if dataToFilter['papr']:
            polizasToF = polizasToF.filter(groupinglevel__in = list(dataToFilter['papr']))
        if dataToFilter['pcapr']:
            polizasToF = polizasToF.filter(clave__in = list(dataToFilter['pcapr']))
        if dataToFilter['psrpr']:
            polizasToF = polizasToF.filter(subramo__subramo_code__in = list(dataToFilter['psrpr']))
        if dataToFilter['paspr']:
            polizasToF = polizasToF.filter(aseguradora__in = list(dataToFilter['paspr']))
        if dataToFilter['pstpr']:
            polizasToF = polizasToF.filter(status__in = list(dataToFilter['pstpr']))
        
        polizasCT = polizasCl.filter(document_type = 12, parent__in = list(polizasToF))
        polizasGT = polizasCl.filter(document_type = 6, parent__parent__parent__in = list(polizasToF))
        polizasFin = list(polizasToF.values_list('pk', flat = True)) + list(polizasCT.values_list('pk', flat = True)) + list(polizasGT.values_list('pk', flat = True))
        polizas = polizas.filter(pk__in = list(polizasFin)) 
        polizasenproceso = polizasenproceso.filter(pk__in = list(polizasFin)) 
    info_org = getInfoOrg(request)
    if len(info_org['logo']) != 0:
        archivo_imagen = 'https://miurabox-public.s3.amazonaws.com/cas/' + info_org['logo']
        # archivo_imagen = get_presigned_url("cas/{url}".format(url=info_org['logo']),28800) 
    else:
      archivo_imagen = 'saam.jpg'
    if renovadas == 1:
        tipo_reporte = "Reporte de renovaciones del " + str(since.strftime("%d/%m/%y")) + " al " + str(until.strftime("%d/%m/%y"))
    elif renovadas == 2:
        tipo_reporte = "Reporte de Renovaciones Pendientes del " + str(since.strftime("%d/%m/%y")) + " al " + str(until.strftime("%d/%m/%y"))
    else:
        tipo_reporte = "Reporte de renovaciones del " + str(since.strftime("%d/%m/%y")) + " al " + str(until.strftime("%d/%m/%y"))
    tipo_reporte_2 = "Reporte de pólizas en proceso de renovación del " + str(since.strftime("%d/%m/%y")) + " al " + str(until.strftime("%d/%m/%y"))

    # Sheet header, first row
    row_num = 10

    font_style = xlwt.XFStyle()
    font_style.font.bold = True


    si_com = comisions(request)
    verReferenciadores = is_perm_ver_referenciadores(request)  
    rows_pesos_R = []
    rows_dolares_R = []
    if renovadas == 2:
        renovadas_provider = polizas.exclude(document_type = 2).values_list('document_type', 'poliza_number', 'contractor__full_name', 'contractor__email', 'contractor__phone_number', 'aseguradora__compania', #6
                                                                      'subramo__subramo_name', 'forma_de_pago', 'status', 'start_of_validity', 'end_of_validity', 'f_currency', 'p_neta', 'rpf', #14
                                                                      'derecho', 'iva', 'p_total', 'comision', 'clave__clave', 'id', 'observations', #23
                                                                      'owner__first_name', 'owner__last_name', 'created_at', 'clave__name',
                                                                      'renewed_status','sucursal__sucursal_name').order_by('aseguradora__compania')
        renovadas_provider_2 = polizasenproceso.exclude(document_type = 2).values_list('document_type', 'poliza_number', 'contractor__full_name', 'contractor__email', 'contractor__phone_number', 'aseguradora__compania', #6
                                                                      'subramo__subramo_name', 'forma_de_pago', 'status', 'start_of_validity', 'end_of_validity', 'f_currency', 'p_neta', 'rpf', #14
                                                                      'derecho', 'iva', 'p_total', 'comision', 'clave__clave', 'id', 'observations', #23
                                                                      'owner__first_name', 'owner__last_name', 'created_at', 'clave__name',
                                                                      'renewed_status','sucursal__sucursal_name').order_by('aseguradora__compania')

    if int(excel_type) == 1:
        rows_pesos = []
        prueba = {} 
        columns = ['Agrupación','Prima neta','Prima Total','Comisión','Moneda','Registros','Comisión conciliada']       
        # ---------report excel service----
        rows_pesos = []
        rows1_pesos  =[]
        rows1_dolares  =[]
        prueba = {}
        renovaciones_pesos = polizas.filter(Q(f_currency = 1))
        renovaciones_dolares = polizas.filter(Q(f_currency = 2))
        renovaciones_pesos_n = polizas.filter(Q(f_currency = 1, contractor__type_person =1))
        renovaciones_dolares_n = polizas.filter(Q(f_currency = 2, contractor__type_person =1))
        renovaciones_pesos_j = polizas.filter(Q(f_currency = 1, contractor__type_person =2))
        renovaciones_dolares_j = polizas.filter(Q(f_currency = 2, contractor__type_person =2))

        if group_by == 1 or group_by == 2 or group_by == 3:
            if group_by == 1:
                prueba['pesos'] = renovaciones_pesos.values('aseguradora__compania').annotate(Count('aseguradora__id')).annotate(Sum('p_neta')).annotate(Sum('p_total')).annotate(Sum('comision')).annotate(Sum('recibos_poliza__comision_conciliada')).order_by('aseguradora__id')
                prueba['dolares'] = renovaciones_dolares.values('aseguradora__compania').annotate(Count('aseguradora__id')).annotate(Sum('p_neta')).annotate(Sum('p_total')).annotate(Sum('comision')).annotate(Sum('recibos_poliza__comision_conciliada')).order_by('aseguradora__id')
            
                tipo_reporte = tipo_reporte + " por Aseguradora"
                rows_pesos = prueba['pesos'].values_list('aseguradora__compania','p_neta__sum','p_total__sum','comision__sum','aseguradora__id__count','recibos_poliza__comision_conciliada__sum')
                rows_dolares = prueba['dolares'].values_list('aseguradora__compania','p_neta__sum','p_total__sum','comision__sum','aseguradora__id__count','recibos_poliza__comision_conciliada__sum')           
            elif group_by == 2:
                prueba['pesos'] = renovaciones_pesos.values('ramo__ramo_name').annotate(Count('ramo')).annotate(Sum('p_neta')).annotate(Sum('p_total')).annotate(Sum('comision')).annotate(Sum('recibos_poliza__comision_conciliada')).order_by('ramo__ramo_name')
                prueba['dolares'] = renovaciones_dolares.values('ramo__ramo_name').annotate(Count('ramo')).annotate(Sum('p_neta')).annotate(Sum('p_total')).annotate(Sum('comision')).annotate(Sum('recibos_poliza__comision_conciliada')).order_by('ramo__ramo_name')
                tipo_reporte = tipo_reporte + " por Ramo"
                rows_pesos = prueba['pesos'].values_list('ramo__ramo_name','p_neta__sum','p_total__sum','comision__sum','ramo__count','recibos_poliza__comision_conciliada__sum')
                rows_dolares = prueba['dolares'].values_list('ramo__ramo_name','p_neta__sum','p_total__sum','comision__sum','ramo__count','recibos_poliza__comision_conciliada__sum')
            elif group_by == 3:
                prueba['pesos'] = renovaciones_pesos.values('subramo__subramo_name').annotate(Count('subramo')).annotate(Sum('p_neta')).annotate(Sum('p_total')).annotate(Sum('comision')).annotate(Sum('recibos_poliza__comision_conciliada')).order_by('subramo__subramo_name')
                prueba['dolares'] = renovaciones_dolares.values('subramo__subramo_name').annotate(Count('subramo')).annotate(Sum('p_neta')).annotate(Sum('p_total')).annotate(Sum('comision')).annotate(Sum('recibos_poliza__comision_conciliada')).order_by('subramo__subramo_name')
                tipo_reporte =tipo_reporte + " por Subramo"
                rows_pesos = prueba['pesos'].values_list('subramo__subramo_name','p_neta__sum','p_total__sum','comision__sum','subramo__count','recibos_poliza__comision_conciliada__sum')
                rows_dolares = prueba['dolares'].values_list('subramo__subramo_name','p_neta__sum','p_total__sum','comision__sum','subramo__count','recibos_poliza__comision_conciliada__sum')
           
            agrupacion = []
            prima = []
            total = []
            comision = []
            moneda = []
            registrosA = []
            com_conciliada = []
            dolares = 0
            p = 0
            c_pesos = 0
            cc_pesos = 0
            c_dolares = 0
            cc_dolares = 0
            neta_pesos = 0
            neta_dolares = 0
            for row in rows_pesos:
                if row[0] != None:
                    row_num += 1
                    c_pesos = c_pesos + row[3]
                    try:
                        cc_pesos = cc_pesos + row[5]
                    except Exception as ere:
                        cc_pesos = cc_pesos
                    neta_pesos = neta_pesos + row[1]
                    if row[2]:
                        p = p + row[2]
                    ag = ((((((row[0]).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')    
                    prn = row[1]
                    tot = row[2]
                    com = row[3]
                    mon = 'Pesos'
                    regs = row[4]
                    cc = row[5]
                    agrupacion.append(ag)
                    prima.append(prn)
                    total.append(tot)
                    comision.append(com)
                    moneda.append(mon)
                    registrosA.append(regs)
                    com_conciliada.append(cc)
            # dolares 1
            for row_2 in rows_dolares:
                if row_2[0] != None:
                    row_num += 1
                    c_dolares = c_dolares + row_2[3]
                    if row_2[5]:
                        cc_dolares = cc_dolares + int(row_2[5])
                    else:
                        cc_dolares = cc_dolares
                    neta_dolares = neta_dolares + row_2[1]
                    if row_2[2]:
                        dolares = dolares + row_2[2]
                    ag = ((((((row_2[0]).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')   
                    prn = row_2[1]
                    tot = row_2[2]
                    com = row_2[3]
                    mon = 'Dolares'
                    regs = row_2[4]
                    cc = row_2[5]
                    agrupacion.append(ag)
                    prima.append(prn)
                    total.append(tot)
                    comision.append(com)
                    moneda.append(mon)
                    registrosA.append(regs)
                    com_conciliada.append(cc)
            obj = {                
                'agrupacion'   : str(list(agrupacion)),
                'prima'   : str(list(prima)),
                'total'   : str(list(total)),
                'comision'   : str(list(comision)),
                'moneda'   : str(list(moneda)),
                'registrosA'   : str(list(registrosA)),
                'com_conciliada'   : str(list(com_conciliada)),
                'dolares'   : '$ {:,.2f}'.format(dolares),
                'pesos'   : '$ {:,.2f}'.format(p),
                'cpesos'   : '$ {:,.2f}'.format(c_pesos),
                'cdolares'   : '$ {:,.2f}'.format(c_dolares),
                'ccpesos'   : '$ {:,.2f}'.format(cc_pesos),
                'ccdolares'   : '$ {:,.2f}'.format(cc_dolares),
                'npesos'   : '$ {:,.2f}'.format(neta_pesos),
                'ndolares'   : '$ {:,.2f}'.format(neta_dolares),
                'grupo': int(group_by),
                'tipo_reporte': tipo_reporte,
                'email_org':info_org['email'],
                'phone_org':info_org['phone'],
                'webpage_org':info_org['webpage'],
                'address_org':info_org['address'],
                'urlname_org':info_org['name'],
            }   
            obj['columns'] = columns
            obj['imagen'] = archivo_imagen
            obj['registros'] = len(agrupacion) 
            obj['typeReport'] = 2
            r = requests.post(settings.SERVICEEXCEL_URL + 'get-cobranzaAgrupadoExcelReporte/', obj,
            # headers = {
            # 'Authorization':'Bearer %s'%request.user.user_info.fi_token_refresh,
            # # 'Content-Type':'application/json' 
            # }, 
            stream=True)
            response_data= r.text

            response = HttpResponse(r.content,content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')
            return response
        elif group_by == 4:
            prueba_contratantes = {}
            prueba_n_pesos = renovaciones_pesos_n.values('contractor__group__group_name').annotate(Count('contractor__group')).annotate(Sum('p_neta')).annotate(Sum('p_total')).annotate(Sum('comision')).annotate(Sum('recibos_poliza__comision_conciliada')).order_by('contractor__group__group_name')
            prueba_j_pesos = renovaciones_pesos_j.values('contractor__group__group_name').annotate(Count('contractor__group')).annotate(Sum('p_neta')).annotate(Sum('p_total')).annotate(Sum('comision')).annotate(Sum('recibos_poliza__comision_conciliada')).order_by('contractor__group__group_name')
            prueba_n_dolares = renovaciones_dolares_n.values('contractor__group__group_name').annotate(Count('contractor__group')).annotate(Sum('p_neta')).annotate(Sum('p_total')).annotate(Sum('comision')).annotate(Sum('recibos_poliza__comision_conciliada')).order_by('contractor__group__group_name')
            prueba_j_dolares = renovaciones_dolares_j.values('contractor__group__group_name').annotate(Count('contractor__group')).annotate(Sum('p_neta')).annotate(Sum('p_total')).annotate(Sum('comision')).annotate(Sum('recibos_poliza__comision_conciliada')).order_by('contractor__group__group_name')
            prueba['naturals_pesos'] = prueba_n_pesos
            prueba['juridicals_pesos'] = prueba_j_pesos
            prueba['naturals_dolares'] = prueba_n_dolares
            prueba['juridicals_dolares'] = prueba_j_dolares
            tipo_reporte = tipo_reporte + " por Grupo"
            rows_pesos = prueba['naturals_pesos'].values_list('contractor__group__group_name','p_neta__sum','p_total__sum','comision__sum','contractor__group__count','recibos_poliza__comision_conciliada__sum')
            rows_dolares = prueba['naturals_dolares'].values_list('contractor__group__group_name','p_neta__sum','p_total__sum','comision__sum','contractor__group__count','recibos_poliza__comision_conciliada__sum')
            rows1_pesos = prueba['juridicals_pesos'].values_list('contractor__group__group_name','p_neta__sum','p_total__sum','comision__sum','contractor__group__count','recibos_poliza__comision_conciliada__sum')
            rows1_dolares = prueba['juridicals_dolares'].values_list('contractor__group__group_name','p_neta__sum','p_total__sum','comision__sum','contractor__group__count','recibos_poliza__comision_conciliada__sum')
        
            columns = ['Agrupación','Tipo Contratante','Prima neta','Prima Total','Comisión','Moneda','Registros','Comisión conciliada']
            
            tipoContratante = []
            agrupacion = []
            prima = []
            total = []
            comision = []
            moneda = []
            registrosA = []
            com_conciliada = []
            dolares = 0
            p = 0
            c_pesos = 0
            cc_pesos = 0
            c_dolares = 0
            cc_dolares = 0
            neta_pesos = 0
            neta_dolares = 0
            for row in rows_pesos:
                if row[4] != 0 and row[0] != None:                  # -------------------
                    row_num += 1
                    c_pesos = c_pesos + row[3]
                    cc_pesos = cc_pesos + row[5]
                    neta_pesos = neta_pesos + row[1]
                    if row[2]:
                        p = p + row[2]
                    ag = ((((((row[0]).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'') 
                    tipoc = 'Naturales'   
                    prn = row[1]
                    tot = row[2]
                    com = row[3]
                    mon = 'Pesos'
                    regs = row[4]
                    cc = row[5]
                    agrupacion.append(ag)
                    tipoContratante.append(tipoc)
                    prima.append(prn)
                    total.append(tot)
                    comision.append(com)
                    moneda.append(mon)
                    registrosA.append(regs)
                    com_conciliada.append(cc)
            # Pesos 2
            for row_1 in rows1_pesos:
                pesos_total_f = 0
                if row_1[4] != 0 and row_1[0] != None:
                    row_num += 1
                    c_pesos = c_pesos + row_1[3]
                    cc_pesos = cc_pesos + row_1[5]
                    neta_pesos = neta_pesos + row_1[1]
                    if row_1[2]:
                        p = p + row_1[2]                    
                    ag = ((((((row_1[0]).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')   
                    tipoc = 'Morales'
                    prn = row_1[1]
                    tot = row_1[2]
                    com = row_1[3]
                    mon = 'Pesos'
                    regs = row_1[4]
                    cc = row_1[5]
                    agrupacion.append(ag)
                    tipoContratante.append(tipoc)
                    prima.append(prn)
                    total.append(tot)
                    comision.append(com)
                    moneda.append(mon)
                    registrosA.append(regs)
                    com_conciliada.append(cc)
            # dolares 1
            for row_2 in rows_dolares:
                if row_2[4] != 0 and row_2[0] != None:
                    row_num += 1
                    c_dolares = c_dolares + row_2[3]
                    if row_2[5]:
                        cc_dolares = cc_dolares + int(row_2[5])
                    else:
                        cc_dolares = cc_dolares
                    neta_dolares = neta_dolares + row_2[1]
                    if row_2[2]:
                        dolares = dolares + row_2[2]
                    ag = ((((((row_2[0]).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')   
                    tipoc = 'Naturales'
                    prn = row_2[1]
                    tot = row_2[2]
                    com = row_2[3]
                    mon = 'Dolares'
                    regs = row_2[4]
                    cc = row_2[5]
                    agrupacion.append(ag)
                    tipoContratante.append(tipoc)
                    prima.append(prn)
                    total.append(tot)
                    comision.append(com)
                    moneda.append(mon)
                    registrosA.append(regs)
                    com_conciliada.append(cc)
            # dolares 2  
             
            for row_2f in rows1_dolares:
                if row_2f[4] != 0 and row_2f[0] != None:
                    row_num += 1
                    c_dolares = c_dolares + row_2f[3]
                    cc_dolares = cc_dolares + row_2f[5]
                    neta_dolares = neta_dolares + row_2f[1]
                    if row_2f[2]:
                        dolares = dolares + row_2f[2]
                    ag = ((((((row_2f[0]).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')   
                    tipoc = 'Morales'
                    prn = row_2f[1]
                    tot = row_2f[2]
                    com = row_2f[3]
                    mon = 'Dolares'
                    regs = row_2f[4]
                    cc = row_2f[5]
                    agrupacion.append(ag)
                    tipoContratante.append(tipoc)
                    prima.append(prn)
                    total.append(tot)
                    comision.append(com)
                    moneda.append(mon)
                    registrosA.append(regs)
                    com_conciliada.append(cc)
            obj = {                
                'agrupacion'   : str(list(agrupacion)),
                'tipoContratante': str(list(tipoContratante)),
                'prima'   : str(list(prima)),
                'total'   : str(list(total)),
                'comision'   : str(list(comision)),
                'moneda'   : str(list(moneda)),
                'registrosA'   : str(list(registrosA)),
                'com_conciliada'   : str(list(com_conciliada)),
                'dolares'   : '$ {:,.2f}'.format(dolares),
                'pesos'   : '$ {:,.2f}'.format(p),
                'cpesos'   : '$ {:,.2f}'.format(c_pesos),
                'cdolares'   : '$ {:,.2f}'.format(c_dolares),
                'ccpesos'   : '$ {:,.2f}'.format(cc_pesos),
                'ccdolares'   : '$ {:,.2f}'.format(cc_dolares),
                'npesos'   : '$ {:,.2f}'.format(neta_pesos),
                'ndolares'   : '$ {:,.2f}'.format(neta_dolares),
                'tipo_reporte': tipo_reporte,
                'grupo': int(group_by),
                'email_org':info_org['email'],
                'phone_org':info_org['phone'],
                'webpage_org':info_org['webpage'],
                'address_org':info_org['address'],
                'urlname_org':info_org['name'],
            }   
            obj['columns'] = columns
            obj['imagen'] = archivo_imagen
            obj['registros'] = len(agrupacion) 
            obj['typeReport'] = 2
            r = requests.post(settings.SERVICEEXCEL_URL + 'get-cobranzaAgrupadoExcelReporte/', obj,
            # headers = {
            # 'Authorization':'Bearer %s'%request.user.user_info.fi_token_refresh,
            # # 'Content-Type':'application/json' 
            # }, 
            stream=True)
            response_data= r.text

            response = HttpResponse(r.content,content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')
            return response
        elif group_by == 5:
            prueba['pesos'] = renovaciones_pesos.values('ref_policy__referenciador__first_name', 'ref_policy__referenciador__last_name').annotate(Count('ref_policy__referenciador')).annotate(Sum('p_neta')).annotate(Sum('p_total')).annotate(Sum('comision')).annotate(Sum('recibos_poliza__comision_conciliada')).order_by('ref_policy__referenciador')
            prueba['dolares'] = renovaciones_dolares.values('ref_policy__referenciador__first_name', 'ref_policy__referenciador__last_name').annotate(Count('ref_policy__referenciador')).annotate(Sum('p_neta')).annotate(Sum('p_total')).annotate(Sum('comision')).annotate(Sum('recibos_poliza__comision_conciliada')).order_by('ref_policy__referenciador') 
            tipo_reporte = tipo_reporte + " por Referenciador"
            rows_pesos = prueba['pesos'].values_list(
              'ref_policy__referenciador__first_name',
              'p_neta__sum',
              'p_total__sum',
              'comision__sum',
              'ref_policy__referenciador__count',
              'recibos_poliza__comision_conciliada__sum',
              'ref_policy__referenciador__last_name'
            )
            
            rows_dolares = prueba['dolares'].values_list(
              'ref_policy__referenciador__first_name',
              'p_neta__sum',
              'p_total__sum',
              'comision__sum',
              'ref_policy__referenciador__count',
              'recibos_poliza__comision_conciliada__sum',
              'ref_policy__referenciador__last_name'
            )
            
            prefs_pesos = renovaciones_pesos.values('ref_policy__referenciador__first_name', 'ref_policy__referenciador__last_name').annotate(Count('ref_policy__referenciador'),Count('ref_policy__referenciador__id')).annotate(Sum('p_neta')).annotate(Sum('comision')).annotate(Sum('recibos_poliza__comision_conciliada')).annotate(Sum('p_total')).order_by('ref_policy__referenciador__id','ref_policy__referenciador__id')
            prefs_dols = renovaciones_dolares.values('ref_policy__referenciador__first_name', 'ref_policy__referenciador__last_name').annotate(Count('ref_policy__referenciador'),Count('ref_policy__referenciador__id')).annotate(Sum('p_neta')).annotate(Sum('comision')).annotate(Sum('recibos_poliza__comision_conciliada')).annotate(Sum('p_total')).order_by('ref_policy__referenciador__id','ref_policy__referenciador__id')
            rows_pesos_R  = prefs_pesos.values_list('ref_policy__referenciador__first_name','p_neta__sum','p_total__sum','comision__sum','ref_policy__referenciador__id__count','recibos_poliza__comision_conciliada__sum','ref_policy__referenciador__last_name')
            rows_dolares_R  = prefs_dols.values_list('ref_policy__referenciador__first_name','p_neta__sum','p_total__sum','comision__sum','ref_policy__referenciador__id__count','recibos_poliza__comision_conciliada__sum','ref_policy__referenciador__last_name')
            # -------
            tipoContratante = []
            agrupacion = []
            prima = []
            total = []
            comision = []
            moneda = []
            registrosA = []
            com_conciliada = []
            dolares = 0
            p = 0
            c_pesos = 0
            cc_pesos = 0
            c_dolares = 0
            cc_dolares = 0
            neta_pesos = 0
            neta_dolares = 0
            for row in rows_pesos:
                if row[0] != None:                    # -------------------
                    row_num += 1
                    c_pesos = c_pesos + row[3]
                    cc_pesos = cc_pesos + row[5]
                    neta_pesos = neta_pesos + row[1]
                    if row[2]:
                        p = p + row[2]
                    ag = row[0] + ' ' + str(row[6])
                    tipoc = 'Pólizas'   
                    prn = row[1]
                    tot = row[2]
                    com = row[3]
                    mon = 'Pesos'
                    regs = row[4]
                    cc = row[5]
                    agrupacion.append(ag)
                    tipoContratante.append(tipoc)
                    prima.append(prn)
                    total.append(tot)
                    comision.append(com)
                    moneda.append(mon)
                    registrosA.append(regs)
                    com_conciliada.append(cc)
            # Pesos 2
            for row_1 in rows_pesos_R:
                pesos_total_f = 0
                if row_1[0] != None:
                    row_num += 1
                    c_pesos = c_pesos + row_1[3]
                    cc_pesos = cc_pesos + row_1[5]
                    neta_pesos = neta_pesos + row_1[1]
                    if row_1[2]:
                        p = p + row_1[2]                    
                    ag = row_1[0]+' '+str(row_1[6])  
                    tipoc = 'Fianzas'
                    prn = row_1[1]
                    tot = row_1[2]
                    com = row_1[3]
                    mon = 'Pesos'
                    regs = row_1[4]
                    cc = row_1[5]
                    agrupacion.append(ag)
                    tipoContratante.append(tipoc)
                    prima.append(prn)
                    total.append(tot)
                    comision.append(com)
                    moneda.append(mon)
                    registrosA.append(regs)
                    com_conciliada.append(cc)
            # dolares 1
            for row_2 in rows_dolares:
              
                if row_2[0] != None:
                    row_num += 1
                    c_dolares = c_dolares + row_2[3]
                    if row_2[5]:
                        cc_dolares = cc_dolares + int(row_2[5])
                    else:
                        cc_dolares = cc_dolares
                    neta_dolares = neta_dolares + row_2[1]
                    if row_2[2]:
                        dolares = dolares + row_2[2]
                    ag = row_2[0] +' '+str(row_2[6])
                    tipoc = 'Pólizas'
                    prn = row_2[1]
                    tot = row_2[2]
                    com = row_2[3]
                    mon = 'Dolares'
                    regs = row_2[4]
                    cc = row_2[5]
                    agrupacion.append(ag)
                    tipoContratante.append(tipoc)
                    prima.append(prn)
                    total.append(tot)
                    comision.append(com)
                    moneda.append(mon)
                    registrosA.append(regs)
                    com_conciliada.append(cc)


            # dolares 2               
            for row_2f in rows_dolares_R:
                if row_2f[0] != None:
                    row_num += 1
                    c_dolares = c_dolares + row_2f[3]
                    cc_dolares = cc_dolares + row_2f[5]
                    neta_dolares = neta_dolares + row_2f[1]
                    if row_2f[2]:
                        dolares = dolares + row_2f[2]
                    ag = row_2f[0] +' '+str(row_2f[6])
                    tipoc = 'Fianzas'
                    prn = row_2f[1]
                    tot = row_2f[2]
                    com = row_2f[3]
                    mon = 'Dolares'
                    regs = row_2f[4]
                    cc = row_2f[5]
                    agrupacion.append(ag)
                    tipoContratante.append(tipoc)
                    prima.append(prn)
                    total.append(tot)
                    comision.append(com)
                    moneda.append(mon)
                    registrosA.append(regs)
                    com_conciliada.append(cc)
            obj = {                
                'agrupacion'   : str(list(agrupacion)),
                'tipoContratante': str(list(tipoContratante)),
                'prima'   : str(list(prima)),
                'total'   : str(list(total)),
                'comision'   : str(list(comision)),
                'moneda'   : str(list(moneda)),
                'registrosA'   : str(list(registrosA)),
                'com_conciliada'   : str(list(com_conciliada)),
                'dolares'   : '$ {:,.2f}'.format(dolares),
                'pesos'   : '$ {:,.2f}'.format(p),
                'cpesos'   : '$ {:,.2f}'.format(c_pesos),
                'cdolares'   : '$ {:,.2f}'.format(c_dolares),
                'ccpesos'   : '$ {:,.2f}'.format(cc_pesos),
                'ccdolares'   : '$ {:,.2f}'.format(cc_dolares),
                'npesos'   : '$ {:,.2f}'.format(neta_pesos),
                'ndolares'   : '$ {:,.2f}'.format(neta_dolares),
                'tipo_reporte': tipo_reporte,
                'grupo': int(group_by),
                'email_org':info_org['email'],
                'phone_org':info_org['phone'],
                'webpage_org':info_org['webpage'],
                'address_org':info_org['address'],
                'urlname_org':info_org['name'],
            }   
            obj['columns'] = columns
            obj['imagen'] = archivo_imagen
            obj['registros'] = len(agrupacion) 
            obj['typeReport'] = 2
            r = requests.post(settings.SERVICEEXCEL_URL + 'get-cobranzaAgrupadoExcelReporte/', obj,
            # headers = {
            # 'Authorization':'Bearer %s'%request.user.user_info.fi_token_refresh,
            # # 'Content-Type':'application/json' 
            # }, 
            stream=True)
            response_data= r.text

            response = HttpResponse(r.content,content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')
            return response
        elif group_by == 7:
            prueba['pesos'] = renovaciones_pesos.values('owner__first_name', 'owner__last_name').annotate(Count('owner')).annotate(Sum('p_neta')).annotate(Sum('p_total')).annotate(Sum('comision')).annotate(Sum('recibos_poliza__comision_conciliada')).order_by('owner')
            prueba['dolares'] = renovaciones_dolares.values('owner__first_name', 'owner__last_name').annotate(Count('owner')).annotate(Sum('p_neta')).annotate(Sum('p_total')).annotate(Sum('comision')).annotate(Sum('recibos_poliza__comision_conciliada')).order_by('owner')
            tipo_reporte = tipo_reporte +" por Usuario"
            rows_pesos = prueba['pesos'].values_list('owner__first_name','p_neta__sum','p_total__sum','comision__sum','owner__count','recibos_poliza__comision_conciliada__sum','owner__last_name')
            rows_dolares = prueba['dolares'].values_list('owner__first_name','p_neta__sum','p_total__sum','comision__sum','owner__count','recibos_poliza__comision_conciliada__sum','owner__last_name')
           
            agrupacion = []
            prima = []
            total = []
            comision = []
            moneda = []
            registrosA = []
            com_conciliada = []
            dolares = 0
            p = 0
            c_pesos = 0
            cc_pesos = 0
            c_dolares = 0
            cc_dolares = 0
            neta_pesos = 0
            neta_dolares = 0
            for row in rows_pesos:
                if row[0] != None:
                    row_num += 1
                    c_pesos = c_pesos + row[3]
                    cc_pesos = cc_pesos + row[5]
                    neta_pesos = neta_pesos + row[1]
                    if row[2]:
                        p = p + row[2]
                    ag = row[0]+ ' ' + str(row[6])  
                    prn = row[1]
                    tot = row[2]
                    com = row[3]
                    mon = 'Pesos'
                    regs = row[4]
                    cc = row[5]
                    agrupacion.append(ag)
                    prima.append(prn)
                    total.append(tot)
                    comision.append(com)
                    moneda.append(mon)
                    registrosA.append(regs)
                    com_conciliada.append(cc)
            # dolares 1
            for row_2 in rows_dolares:
                if row_2[0] != None:
                    row_num += 1
                    c_dolares = c_dolares + row_2[3]
                    if row_2[6]:
                        cc_dolares = cc_dolares + int(row_2[5])
                    else:
                        cc_dolares = cc_dolares
                    neta_dolares = neta_dolares + row_2[1]
                    if row_2[2]:
                        dolares = dolares + row_2[2]
                    ag = row_2[0]+ ' ' + str(row_2[6]) 
                    prn = row_2[1]
                    tot = row_2[2]
                    com = row_2[3]
                    mon = 'Dolares'
                    regs = row_2[4]
                    cc = row_2[5]
                    agrupacion.append(ag)
                    prima.append(prn)
                    total.append(tot)
                    comision.append(com)
                    moneda.append(mon)
                    registrosA.append(regs)
                    com_conciliada.append(cc)
            obj = {                
                'agrupacion'   : str(list(agrupacion)),
                'prima'   : str(list(prima)),
                'total'   : str(list(total)),
                'comision'   : str(list(comision)),
                'moneda'   : str(list(moneda)),
                'registrosA'   : str(list(registrosA)),
                'com_conciliada'   : str(list(com_conciliada)),
                'dolares'   : '$ {:,.2f}'.format(dolares),
                'pesos'   : '$ {:,.2f}'.format(p),
                'cpesos'   : '$ {:,.2f}'.format(c_pesos),
                'cdolares'   : '$ {:,.2f}'.format(c_dolares),
                'ccpesos'   : '$ {:,.2f}'.format(cc_pesos),
                'ccdolares'   : '$ {:,.2f}'.format(cc_dolares),
                'npesos'   : '$ {:,.2f}'.format(neta_pesos),
                'ndolares'   : '$ {:,.2f}'.format(neta_dolares),
                'grupo': int(group_by),
                'tipo_reporte': tipo_reporte,
                'email_org':info_org['email'],
                'phone_org':info_org['phone'],
                'webpage_org':info_org['webpage'],
                'address_org':info_org['address'],
                'urlname_org':info_org['name'],
            }   
            obj['columns'] = columns
            obj['imagen'] = archivo_imagen
            obj['registros'] = len(agrupacion) 
            obj['typeReport'] = 2
            r = requests.post(settings.SERVICEEXCEL_URL + 'get-cobranzaAgrupadoExcelReporte/', obj,
            # headers = {
            # 'Authorization':'Bearer %s'%request.user.user_info.fi_token_refresh,
            # # 'Content-Type':'application/json' 
            # }, 
            stream=True)
            response_data= r.text

            response = HttpResponse(r.content,content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')
            return response
        # ---------report service excel----
    elif int(excel_type) == 2:
        # if si_com:
        columns = ['Tipo', 'No.Póliza', 'Contratante', 'Email', 'Teléfono', 'Proveedor', 'Subramo', 'Forma de Pago', 'Estatus', 
                   'Inicio Póliza', 'Fin Póliza', 'Moneda', 'Prima Neta', 'RPF', 'Derecho', 'IVA', 'Prima Total','Comisión',
                   'Clave', 'Asegurado', 'Observaciones', 'Referenciador', 'Fecha de creación', 'Creado por',
                    'Fecha renovación','Estatus de la Renovación','Sucursal','Póliza Anterior','Póliza Siguiente','Responsable',
                   'Paquete', 'C.P.','Identificador', 'Subgrupo','Subsubgrupo','Agrupación','Subagrupación',
                    'Subsubagrupación','Clasificación','Línea Negocio','Célula','Serie(Automovil)','Conducto de Pago']
        try:
            columns = request.data['cols1']
            fo = len(columns)
        except:
            pass
        if addsiniestrop:
            columns.append('Pérdida Total')
        if verReferenciadores==False or verReferenciadores=='False':
            if 'Referenciador' in columns:
                columns.remove('Referenciador')
        info_org = getInfoOrg(request)
        if len(info_org['logo']) != 0:
            archivo_imagen = 'https://miurabox-public.s3.amazonaws.com/cas/' + info_org['logo']
            # archivo_imagen = get_presigned_url("cas/{url}".format(url=info_org['logo']),28800) 
        else:
                archivo_imagen = 'saam.jpg'

        asegurado = []
        antiguedad = []
        referenciador = []
        creadopor = []
        dateRen = []
        otRen = []
        responsable = []
        contratante = []
        contratanteE = []
        contratanteP = []
        contratanteG = []
        clave = []
        cp = []
        paquete = []
        nivelAg = []
        grupo1 = []
        grupo2 = []
        grupo3 = []
        grupo4 = []
        clasifica = []
        businessLine = []
        celulaC =[] 
        polizas = polizas.order_by('id')

        contactos_nombre = []
        contactos_email = []
        contactos_telefono = []

        cars_serials = []
        cars_years = []
        sucursal = []
        caratulaN = []
        caratulaC = []
        sucursal = []
        poliza_siguiente = []
        poliza_anterior = []
        conductopago = []
        siniestro_perdida = []
        status_poliza = []
        # polizas = polizas.order_by('natural__full_name','juridical__j_name')
        for r in polizas:
            referenciador_=''
            statusr = checkStatusPolicy(r.status)
            valR = False
            if OldPolicies.objects.filter(base_policy__id = r.id, new_policy__status = 1).exists():
                valR = True
            if r.org_name == 'ancora':
                if r.status==13 and r.is_renewable==1 or (r.renewed_status ==2 and r.status ==13):
                    statusr = statusr+' -En Proceso de Renovación'
            anterior = OldPolicies.objects.filter(new_policy = r).exclude(new_policy__status =0)
            posterior = OldPolicies.objects.filter(base_policy = r).exclude(base_policy__status =0)
            if anterior.exists():
              anterior = anterior.last()
              poliza_anterior.append(((((((anterior.base_policy.poliza_number).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'') if anterior.base_policy.poliza_number else '')
            else:
              poliza_anterior.append(0)            
            contratCar = ''
            numCar = ''
            if r.document_type ==12:
                if r.parent.celula:
                    cel=r.parent.celula.celula_name
                else:
                    cel=''
                contratCar = r.parent.contractor.full_name
                numCar = r.parent.poliza_number if r.parent.poliza_number else r.parent.internal_number
                contratCar = ((((((contratCar).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                numCar = ((((((numCar).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
            else:
                if r.celula:
                    cel=r.celula.celula_name
                else:
                    cel=''
                contratCar = ''
                numCar = ''
            contratanG = ''
            sc = ''
            if r.address:
               pc = r.address.postal_code
            else:
               pc = ''
            if r.conducto_de_pago:
               cpago = r.conducto_de_pago
            else:
               cpago = ''
            if r.sucursal:
               sc = r.sucursal.sucursal_name
            else:
               sc = ''
            antig = get_antiguedad(r.start_of_validity)
            if r.owner:
                val_owner = r.owner.first_name + ' '+ str(r.owner.last_name)
            else:
                val_owner = ''
            if r.paquete:
                pac = r.paquete.package_name
            else:
                pac = ''
            if r.responsable:
                val_resp = r.responsable.first_name + ' '+ str(r.responsable.last_name)
            else:
                val_resp = ''
            if r.clave:
                try:
                    cve = r.clave.name + ' '+ str(r.clave.clave)
                    cve = ((((((cve).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                except Exception as ere:
                    cve = ''
            else:
                cve = ''
            if r.business_line:
                if int(r.business_line) ==1:
                    businessLine_ = 'Comercial'
                elif int(r.business_line) ==2:
                    businessLine_ = 'Personal'
                elif int(r.business_line) ==0:
                    businessLine_ = 'Otro'
                else:
                    businessLine_ = ''
            else:
                try:
                  if int(r.business_line) ==0:
                    businessLine_ = 'Otro'
                  else:
                      businessLine_ = ''
                except Exception as e:
                  businessLine_ = ''
            if r.contractor:
                contratan = ((((((r.contractor.full_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                contratanE = r.contractor.email
                contratanP = r.contractor.phone_number
                try:
                    # contratanG = r.contractor.group.group_name
                    contratanG = ((((((r.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                except Exception as dfds:
                    contratanG = ''
                try:
                    if r.contractor.group.type_group == 1:
                        contratanG = ((((((r.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        grupo1_ = ''
                        grupo2_ = ''
                    elif r.contractor.group.type_group == 2:
                        grupotype1 = Group.objects.get(pk = r.contractor.group.parent.id)
                        contratanG = ((((((grupotype1.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        grupo1_ = ((((((r.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        grupo2_ = ''
                    elif r.contractor.group.type_group == 3:
                        grupotype1 = Group.objects.get(pk = r.contractor.group.parent.parent.id)
                        contratanG = ((((((grupotype1.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        subgrupotype2 = Group.objects.get(pk = r.contractor.group.parent.id)
                        grupo1_ = ((((((subgrupotype2.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        grupo2_ = ((((((r.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                except Exception as e:
                    contratanG = ''
                    grupo1_ = ''
                    grupo2_ = ''
                try:
                    if r.document_type == 12:
                        if r.parent.groupinglevel:
                            if r.parent.groupinglevel.type_grouping == 1:
                                nivelAg_ = ((((((r.parent.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo3_ = ''
                                grupo4_ = ''
                            elif r.parent.groupinglevel.type_grouping == 2:
                                grupotype1 = GroupingLevel.objects.get(pk = r.parent.groupinglevel.parent.id)
                                nivelAg_ = ((((((grupotype1.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo3_ = ((((((r.parent.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo4_ = ''
                            elif r.parent.groupinglevel.type_grouping == 3:
                                grupotype1 = GroupingLevel.objects.get(pk = r.parent.groupinglevel.parent.parent.id)
                                nivelAg_ = ((((((grupotype1.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                subgrupotype2 = GroupingLevel.objects.get(pk = r.parent.groupinglevel.parent.id)
                                grupo3_ = ((((((subgrupotype2.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo4_ = ((((((r.parent.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        else:
                            nivelAg_ = ''
                            grupo3_ = ''
                            grupo4_ = ''  
                    else:
                        if r.groupinglevel:
                            if r.groupinglevel.type_grouping == 1:
                                nivelAg_ = ((((((r.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo3_ = ''
                                grupo4_ = ''
                            elif r.groupinglevel.type_grouping == 2:
                                grupotype1 = GroupingLevel.objects.get(pk = r.groupinglevel.parent.id)
                                nivelAg_ = ((((((grupotype1.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo3_ = ((((((r.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo4_ = ''
                            elif r.groupinglevel.type_grouping == 3:
                                grupotype1 = GroupingLevel.objects.get(pk = r.groupinglevel.parent.parent.id)
                                nivelAg_ = ((((((grupotype1.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                subgrupotype2 = GroupingLevel.objects.get(pk = r.groupinglevel.parent.id)
                                grupo3_ = ((((((subgrupotype2.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo4_ = ((((((r.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        else:
                            nivelAg_ = ''
                            grupo3_ = ''
                            grupo4_ = ''  
                except Exception as e:
                    nivelAg_ = ''
                    grupo3_ = ''
                    grupo4_ = '' 
     
                if r.contractor.classification:
                    clasifica_ = r.contractor.classification.classification_name  
                else:
                    clasifica_='-----'

                contacto = ContactInfo.objects.filter(contractor=r.contractor)

                if contacto:
                    contacto_nombre = contacto[0].name
                    contacto_telefono = contacto[0].phone_number
                    contacto_email = contacto[0].email
                else:
                    contacto_nombre = ''
                    contacto_telefono = ''
                    contacto_email = ''
            else:
                nivelAg_ = ''
                grupo3_ = ''
                grupo4_ = ''
                clasifica_='-----'
                cel='_'
                contratan = ''
                contratanE = ''
                contratanP = ''
                contratanG = ''
                contacto_nombre = ''
                contacto_telefono = ''
                contacto_email = ''

            if renovadas == 1:
                old = OldPolicies.objects.filter(base_policy__id = r.id)
                try:
                  date_renovacion = old[0].created_at.strftime("%d/%m/%Y")
                except Exception as rr:
                    date_renovacion = ''
                try:
                    ot_renovacion = old[0].new_policy.poliza_number if old[0].new_policy.poliza_number else old[0].new_policy.internal_number
                except Exception as rr:
                    ot_renovacion = ''
            else:
                date_renovacion = 'Por renovar'
                ot_renovacion = 'Por renovar'
            try:
                refs_policy = ReferenciadoresInvolved.objects.filter(policy = r.id,is_changed=False).values_list('referenciador__first_name','referenciador__last_name')
                if len(refs_policy):
                    v = []
                    try:
                        for it in refs_policy:
                            v.append(it[0] +' '+ str(it[1])+str('; '))
                        referenc = v
                    except Exception as y:
                        referenc = []
                else:
                    referenc = []
            except Exception as e:
                referenc = []

            car_serial = ''
            car_year = '' 

            if r.ramo.ramo_code == 1:
                form = Life.objects.filter(policy = r.id)
                try:
                    if form:
                        value = form[0].personal.full_name
                    else:
                        value = ''
                except Exception as rt:
                   value = ''
            elif r.ramo.ramo_code == 2:
                form = AccidentsDiseases.objects.filter(policy = r.id)
                if form:
                    value = form[0].personal.full_name
                else:
                    value = ''
            elif r.subramo.subramo_code == 9:
                form = AutomobilesDamages.objects.filter(policy = r.id)
                if form:
                    try:
                        form[0].model = ((((((form[0].model).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        form[0].version = ((((((form[0].version).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    except Exception as ers:
                        form[0].model = form[0].model
                        form[0].version =form[0].version
                    value = str(form[0].brand) + '-' + str(form[0].model) + '-' + str(form[0].version)+ '-'

                    car_serial = form[0].serial
                    car_year = form[0].year

                else:
                    value = ''
            elif r.ramo.ramo_code == 3 and not r.subramo.subramo_code == 9:
                form = Damages.objects.filter(policy = r.id)
                if form:
                    value = form[0].insured_item
                else:
                    value = ''
            try:
                if value:
                    value = ((((((value).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'') 
                else:
                    value = value
            except Exception as ee:
                value = ''
            try:
                if sc:
                    sc = ((((((sc).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'') 
                else:
                    sc = sc
            except Exception as ee:
                sc = ''

            if r and r.subramo and r.subramo.subramo_code ==9:
                if addsiniestrop:            
                    try:
                        siniestrop = Autos.objects.filter(tipo_siniestro =10,siniestro__poliza = r,org_name = r.org_name).order_by('-created_at')
                        if siniestrop:
                            estsp = checkStatusSin(siniestrop[0].siniestro.status)
                            vl = 'Si-' +str(siniestrop[0].siniestro.numero_siniestro if siniestrop[0].siniestro and siniestrop[0].siniestro.numero_siniestro else '')+'-'+str(estsp)
                            siniestro_perdida.append(vl)
                        else:
                            siniestro_perdida.append('')
                    except Exception as ds:
                        siniestro_perdida.append('')
                else:
                    siniestro_perdida.append('')
            else:
                siniestro_perdida.append('')
            status_poliza.append(statusr)
            asegurado.append(value)
            conductopago.append(cpago)
            dateRen.append(date_renovacion)
            otRen.append(ot_renovacion)
            referenciador.append(referenc)
            antiguedad.append(antig)
            creadopor.append(val_owner)
            contratante.append(contratan)
            contratanteE.append(contratanE)
            contratanteP.append(contratanP)
            contratanteG.append(contratanG)
            responsable.append(val_resp)
            paquete.append(pac)
            clave.append(cve)
            # ---
            nivelAg.append(nivelAg_)
            grupo1.append(grupo1_)
            grupo2.append(grupo2_)
            grupo3.append(grupo3_)
            grupo4.append(grupo4_)
            clasifica.append(clasifica_)
            celulaC.append(cel)
            businessLine.append(businessLine_)
            # ----
            cp.append(pc)
            sucursal.append(sc)

            contactos_nombre.append(contacto_nombre)
            contactos_email.append(contacto_email)
            contactos_telefono.append(contacto_telefono)
            caratulaN.append(numCar)
            caratulaC.append(contratCar)
            cars_serials.append(car_serial)
            cars_years.append(car_year) 
        # hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh
        asegurado2 = []
        antiguedad2 = []
        referenciador2 = []
        creadopor2 = []
        dateRen2 = []
        otRen2 = []
        responsable2 = []
        contratante2 = []
        contratanteE2 = []
        contratanteP2 = []
        contratanteG2 = []
        clave2 = []
        cp2 = []
        paquete2 = []
        nivelAg2 = []
        grupo12 = []
        grupo22 = []
        grupo32 = []
        grupo42 = []
        clasifica2 = []
        businessLine2 = []
        celulaC2 =[] 
        polizasenproceso = polizasenproceso.order_by('id')

        contactos_nombre2 = []
        contactos_email2 = []
        contactos_telefono2 = []

        cars_serials2 = []
        cars_years2 = []
        sucursal2 = []
        caratulaN2 = []
        caratulaC2 = []
        sucursal2 = []
        poliza_siguiente2 = []
        poliza_anterior2 = []
        conductopago2 = []
        siniestro_perdida2 = []
        status_poliza2 = []
        # polizas = polizas.order_by('natural__full_name','juridical__j_name')
        for r in polizasenproceso:
            referenciador_=''
            statusr = checkStatusPolicy(r.status)
            valR = False
            if OldPolicies.objects.filter(base_policy__id = r.id, new_policy__status = 1).exists():
                valR = True
            if r.org_name == 'ancora':
                if r.status==13 and r.is_renewable==1 or (r.renewed_status ==2 and r.status ==13):
                    statusr = statusr+' -En Proceso de Renovación'
            anterior = OldPolicies.objects.filter(new_policy = r).exclude(new_policy__status =0)
            posterior = OldPolicies.objects.filter(base_policy = r).exclude(base_policy__status =0)
            if anterior.exists():
              anterior = anterior.last()
              poliza_anterior2.append(((((((anterior.base_policy.poliza_number).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'') if anterior.base_policy.poliza_number else '')
            else:
              poliza_anterior2.append(0)            
            contratCar = ''
            numCar = ''
            if r.document_type ==12:
                if r.parent.celula:
                    cel=r.parent.celula.celula_name
                else:
                    cel=''
                contratCar = r.parent.contractor.full_name
                numCar = r.parent.poliza_number if r.parent.poliza_number else r.parent.internal_number
                contratCar = ((((((contratCar).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                numCar = ((((((numCar).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
            else:
                if r.celula:
                    cel=r.celula.celula_name
                else:
                    cel=''
                contratCar = ''
                numCar = ''
            contratanG = ''
            sc = ''
            if r.address:
               pc = r.address.postal_code
            else:
               pc = ''
            if r.conducto_de_pago:
               cpago = r.conducto_de_pago
            else:
               cpago = ''
            if r.sucursal:
               sc = r.sucursal.sucursal_name
            else:
               sc = ''
            antig = get_antiguedad(r.start_of_validity)
            if r.owner:
                val_owner = r.owner.first_name + ' '+ str(r.owner.last_name)
            else:
                val_owner = ''
            if r.paquete:
                pac = r.paquete.package_name
            else:
                pac = ''
            if r.responsable:
                val_resp = r.responsable.first_name + ' '+ str(r.responsable.last_name)
            else:
                val_resp = ''
            if r.clave:
                try:
                    cve = r.clave.name + ' '+ str(r.clave.clave)
                    cve = ((((((cve).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                except Exception as ere:
                    cve = ''
            else:
                cve = ''
            if r.business_line:
                if int(r.business_line) ==1:
                    businessLine_ = 'Comercial'
                elif int(r.business_line) ==2:
                    businessLine_ = 'Personal'
                elif int(r.business_line) ==0:
                    businessLine_ = 'Otro'
                else:
                    businessLine_ = ''
            else:
                try:
                  if int(r.business_line) ==0:
                    businessLine_ = 'Otro'
                  else:
                      businessLine_ = ''
                except Exception as e:
                  businessLine_ = ''
            if r.contractor:
                contratan = ((((((r.contractor.full_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                contratanE = r.contractor.email
                contratanP = r.contractor.phone_number
                try:
                    # contratanG = r.contractor.group.group_name
                    contratanG = ((((((r.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                except Exception as dfds:
                    contratanG = ''
                try:
                    if r.contractor.group.type_group == 1:
                        contratanG = ((((((r.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        grupo1_ = ''
                        grupo2_ = ''
                    elif r.contractor.group.type_group == 2:
                        grupotype1 = Group.objects.get(pk = r.contractor.group.parent.id)
                        contratanG = ((((((grupotype1.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        grupo1_ = ((((((r.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        grupo2_ = ''
                    elif r.contractor.group.type_group == 3:
                        grupotype1 = Group.objects.get(pk = r.contractor.group.parent.parent.id)
                        contratanG = ((((((grupotype1.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        subgrupotype2 = Group.objects.get(pk = r.contractor.group.parent.id)
                        grupo1_ = ((((((subgrupotype2.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        grupo2_ = ((((((r.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                except Exception as e:
                    contratanG = ''
                    grupo1_ = ''
                    grupo2_ = ''
                try:
                    if r.document_type == 12:
                        if r.parent.groupinglevel:
                            if r.parent.groupinglevel.type_grouping == 1:
                                nivelAg_ = ((((((r.parent.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo3_ = ''
                                grupo4_ = ''
                            elif r.parent.groupinglevel.type_grouping == 2:
                                grupotype1 = GroupingLevel.objects.get(pk = r.parent.groupinglevel.parent.id)
                                nivelAg_ = ((((((grupotype1.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo3_ = ((((((r.parent.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo4_ = ''
                            elif r.parent.groupinglevel.type_grouping == 3:
                                grupotype1 = GroupingLevel.objects.get(pk = r.parent.groupinglevel.parent.parent.id)
                                nivelAg_ = ((((((grupotype1.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                subgrupotype2 = GroupingLevel.objects.get(pk = r.parent.groupinglevel.parent.id)
                                grupo3_ = ((((((subgrupotype2.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo4_ = ((((((r.parent.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        else:
                            nivelAg_ = ''
                            grupo3_ = ''
                            grupo4_ = ''  
                    else:
                        if r.groupinglevel:
                            if r.groupinglevel.type_grouping == 1:
                                nivelAg_ = ((((((r.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo3_ = ''
                                grupo4_ = ''
                            elif r.groupinglevel.type_grouping == 2:
                                grupotype1 = GroupingLevel.objects.get(pk = r.groupinglevel.parent.id)
                                nivelAg_ = ((((((grupotype1.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo3_ = ((((((r.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo4_ = ''
                            elif r.groupinglevel.type_grouping == 3:
                                grupotype1 = GroupingLevel.objects.get(pk = r.groupinglevel.parent.parent.id)
                                nivelAg_ = ((((((grupotype1.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                subgrupotype2 = GroupingLevel.objects.get(pk = r.groupinglevel.parent.id)
                                grupo3_ = ((((((subgrupotype2.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo4_ = ((((((r.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        else:
                            nivelAg_ = ''
                            grupo3_ = ''
                            grupo4_ = ''  
                except Exception as e:
                    nivelAg_ = ''
                    grupo3_ = ''
                    grupo4_ = '' 
     
                if r.contractor.classification:
                    clasifica_ = r.contractor.classification.classification_name  
                else:
                    clasifica_='-----'

                contacto = ContactInfo.objects.filter(contractor=r.contractor)

                if contacto:
                    contacto_nombre = contacto[0].name
                    contacto_telefono = contacto[0].phone_number
                    contacto_email = contacto[0].email
                else:
                    contacto_nombre = ''
                    contacto_telefono = ''
                    contacto_email = ''
            else:
                nivelAg_ = ''
                grupo3_ = ''
                grupo4_ = ''
                clasifica_='-----'
                cel='_'
                contratan = ''
                contratanE = ''
                contratanP = ''
                contratanG = ''
                contacto_nombre = ''
                contacto_telefono = ''
                contacto_email = ''

            if renovadas == 1:
                old = OldPolicies.objects.filter(base_policy__id = r.id)
                try:
                  date_renovacion = old[0].created_at.strftime("%d/%m/%Y")
                except Exception as rr:
                    date_renovacion = ''
                try:
                    ot_renovacion = old[0].new_policy.poliza_number if old[0].new_policy.poliza_number else old[0].new_policy.internal_number
                except Exception as rr:
                    ot_renovacion = ''
            else:
                date_renovacion = 'Por renovar'
                ot_renovacion = 'Por renovar'
            try:
                refs_policy = ReferenciadoresInvolved.objects.filter(policy = r.id,is_changed=False).values_list('referenciador__first_name','referenciador__last_name')
                if len(refs_policy):
                    v2 = []
                    try:
                        for it in refs_policy:
                            v2.append(it[0] +' '+ str(it[1])+str('; '))
                        referenc = v
                    except Exception as y:
                        referenc = []
                else:
                    referenc = []
            except Exception as e:
                referenc = []

            car_serial = ''
            car_year = '' 

            if r.ramo.ramo_code == 1:
                form = Life.objects.filter(policy = r.id)
                try:
                    if form:
                        value = form[0].personal.full_name
                    else:
                        value = ''
                except Exception as rt:
                   value = ''
            elif r.ramo.ramo_code == 2:
                form = AccidentsDiseases.objects.filter(policy = r.id)
                if form:
                    value = form[0].personal.full_name
                else:
                    value = ''
            elif r.subramo.subramo_code == 9:
                form = AutomobilesDamages.objects.filter(policy = r.id)
                if form:
                    try:
                        form[0].model = ((((((form[0].model).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        form[0].version = ((((((form[0].version).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    except Exception as ers:
                        form[0].model = form[0].model
                        form[0].version =form[0].version
                    value = str(form[0].brand) + '-' + str(form[0].model) + '-' + str(form[0].version)+ '-'

                    car_serial = form[0].serial
                    car_year = form[0].year

                else:
                    value = ''
            elif r.ramo.ramo_code == 3 and not r.subramo.subramo_code == 9:
                form = Damages.objects.filter(policy = r.id)
                if form:
                    value = form[0].insured_item
                else:
                    value = ''
            try:
                if value:
                    value = ((((((value).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'') 
                else:
                    value = value
            except Exception as ee:
                value = ''
            try:
                if sc:
                    sc = ((((((sc).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'') 
                else:
                    sc = sc
            except Exception as ee:
                sc = ''

            if r and r.subramo and r.subramo.subramo_code ==9:
                if addsiniestrop:            
                    try:
                        siniestrop = Autos.objects.filter(tipo_siniestro =10,siniestro__poliza = r,org_name = r.org_name).order_by('-created_at')
                        if siniestrop:
                            estsp = checkStatusSin(siniestrop[0].siniestro.status)
                            vl = 'Si-' +str(siniestrop[0].siniestro.numero_siniestro if siniestrop[0].siniestro and siniestrop[0].siniestro.numero_siniestro else '')+'-'+str(estsp)
                            siniestro_perdida2.append(vl)
                        else:
                            siniestro_perdida2.append('')
                    except Exception as ds:
                        siniestro_perdida2.append('')
                else:
                    siniestro_perdida2.append('')
            else:
                siniestro_perdida2.append('')
            status_poliza2.append(statusr)
            asegurado2.append(value)
            conductopago2.append(cpago)
            dateRen2.append(date_renovacion)
            otRen2.append(ot_renovacion)
            referenciador2.append(referenc)
            antiguedad2.append(antig)
            creadopor2.append(val_owner)
            contratante2.append(contratan)
            contratanteE2.append(contratanE)
            contratanteP2.append(contratanP)
            contratanteG2.append(contratanG)
            responsable2.append(val_resp)
            paquete2.append(pac)
            clave2.append(cve)
            # ---
            nivelAg2.append(nivelAg_)
            grupo12.append(grupo1_)
            grupo22.append(grupo2_)
            grupo32.append(grupo3_)
            grupo42.append(grupo4_)
            clasifica2.append(clasifica_)
            celulaC2.append(cel)
            businessLine2.append(businessLine_)
            # ----
            cp2.append(pc)
            sucursal2.append(sc)

            contactos_nombre2.append(contacto_nombre)
            contactos_email2.append(contacto_email)
            contactos_telefono2.append(contacto_telefono)
            caratulaN2.append(numCar)
            caratulaC2.append(contratCar)
            cars_serials2.append(car_serial)
            cars_years2.append(car_year) 
        # hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh
        obj = {
            'document_type'   : str(list(polizas.values_list('document_type', flat = True))),
            'poliza_number'   : str(list([(((((((x).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')) if x else '' for x in polizas.values_list('poliza_number', flat = True)])),
            'conductopago'   : str(list(conductopago)),
            'contratante'   : str(list(contratante)),
            'contratanteE'   : str(list(contratanteE)),
            'contratanteP'   : str(list(contratanteP)),
            'contratanteG'   : str(list(contratanteG)),
            'aseguradora__compania'   : str(list(polizas.values_list('aseguradora__alias', flat = True))),
            'subramo__subramo_name'   : str(list(polizas.values_list('subramo__subramo_name', flat = True))),
            'ramo__ramoname'   : str(list(polizas.values_list('ramo__ramo_name', flat = True))),
            'forma_de_pago'   : str(list(polizas.values_list('forma_de_pago', flat = True))),
            'status'   : str(list(status_poliza)),
            'start_of_validity'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in polizas.values_list('start_of_validity', flat = True) ])) ,
            'end_of_validity'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in polizas.values_list('end_of_validity', flat = True) ])) ,
            'f_currency'   : str(list(polizas.values_list('f_currency', flat = True))),
            'p_neta'   : str(list(polizas.values_list('p_neta', flat = True))),
            'rpf'   : str(list(polizas.values_list('rpf', flat = True))),
            'derecho'   : str(list(polizas.values_list('derecho', flat = True))),
            'iva'   : str(list(polizas.values_list('iva', flat = True))),
            'p_total'   : str(list(polizas.values_list('p_total', flat = True))),
            'comision'   : str(list(polizas.values_list('comision', flat = True))),
            'clave__clave'   : str(list(clave)),
            '_id'   : str(list(polizas.values_list('id', flat = True))),
            'observations'   : str(list([(((((((x).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')) if x else '' for x in polizas.values_list('observations', flat = True)])),
            'created_at'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in polizas.values_list('created_at', flat = True) ]))  ,
            'clave__name'   : str(list(clave)),
            'sucursal__sucursal_name'   : str(list(polizas.values_list('sucursal__sucursal_name', flat = True))),
            'renewed_status': str(list(polizas.values_list('renewed_status', flat = True))),
            'paquete': str(list(paquete)),
            'identifier'   : str(list([(((((((x).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')) if x else '' for x in polizas.values_list('identifier', flat = True)])),
            'cp': str(list(cp)),
            'dateRen'   : str(list(dateRen)),
            'otRen'   : str(list(otRen)),
            'asegurado'   : str(list(asegurado)),
            'referenciador'   : str(list(referenciador)),
            'antiguedad'   : str(list(antiguedad)),
            'creadopor'   : str(list(creadopor)),
            'responsable'   : str(list(responsable)),           
            'nivelAg'   : str(list(nivelAg)) ,
            'grupo1'   : str(list(grupo1)) ,
            'grupo2'   : str(list(grupo2)) ,
            'grupo3'   : str(list(grupo3)) ,
            'grupo4'   : str(list(grupo4)) ,
            'clasifica'   : str(list(clasifica)) ,
            'celula'   : str(list(celulaC)) ,
            'businessLine'   : str(list(businessLine)) ,

            'cars_years'   : str(list(cars_years)),
            'cars_serials'   : str(list(cars_serials)),
            'sucursal'   : str(list(sucursal)),

            'contactos_nombre'   : str(list(contactos_nombre)),
            'contactos_telefono'   : str(list(contactos_telefono)),
            'contactos_email'   : str(list(contactos_email)),

            'caratulaNumero': str(list(caratulaN)),
            'caratulaContratante': str(list(caratulaC)),

            'polizaAnt': str(list(poliza_anterior)),
            'siniestro_perdida': str(list(siniestro_perdida)),

            'tipo_reporte': tipo_reporte,
            # enproceso
            'document_type2'   : str(list(polizasenproceso.values_list('document_type', flat = True))),
            'poliza_number2'   : str(list([(((((((x).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')) if x else '' for x in polizasenproceso.values_list('poliza_number', flat = True)])),
            'conductopago2'   : str(list(conductopago2)),
            'contratante2'   : str(list(contratante2)),
            'contratanteE2'   : str(list(contratanteE2)),
            'contratanteP2'   : str(list(contratanteP2)),
            'contratanteG2'   : str(list(contratanteG2)),
            'aseguradora__compania2'   : str(list(polizasenproceso.values_list('aseguradora__alias', flat = True))),
            'subramo__subramo_name2'   : str(list(polizasenproceso.values_list('subramo__subramo_name', flat = True))),
            'ramo__ramoname2'   : str(list(polizasenproceso.values_list('ramo__ramo_name', flat = True))),
            'forma_de_pago2'   : str(list(polizasenproceso.values_list('forma_de_pago', flat = True))),
            'status2'   : str(list(status_poliza)),
            'start_of_validity2'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in polizasenproceso.values_list('start_of_validity', flat = True) ])) ,
            'end_of_validity2'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in polizasenproceso.values_list('end_of_validity', flat = True) ])) ,
            'f_currency2'   : str(list(polizasenproceso.values_list('f_currency', flat = True))),
            'p_neta2'   : str(list(polizasenproceso.values_list('p_neta', flat = True))),
            'rpf2'   : str(list(polizasenproceso.values_list('rpf', flat = True))),
            'derecho2'   : str(list(polizasenproceso.values_list('derecho', flat = True))),
            'iva2'   : str(list(polizasenproceso.values_list('iva', flat = True))),
            'p_total2'   : str(list(polizasenproceso.values_list('p_total', flat = True))),
            'comision2'   : str(list(polizasenproceso.values_list('comision', flat = True))),
            'clave__clave2'   : str(list(clave)),
            '_id2'   : str(list(polizasenproceso.values_list('id', flat = True))),
            'observations2'   : str(list([(((((((x).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')) if x else '' for x in polizasenproceso.values_list('observations', flat = True)])),
            'created_at2'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in polizasenproceso.values_list('created_at', flat = True) ]))  ,
            'clave__name2'   : str(list(clave2)),
            'sucursal__sucursal_name2'   : str(list(polizasenproceso.values_list('sucursal__sucursal_name', flat = True))),
            'renewed_status2': str(list(polizasenproceso.values_list('renewed_status', flat = True))),
            'paquete2': str(list(paquete2)),
            'identifier2'   : str(list([(((((((x).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')) if x else '' for x in polizasenproceso.values_list('identifier', flat = True)])),
            'cp2': str(list(cp2)),
            'dateRen2'   : str(list(dateRen2)),
            'otRen2'   : str(list(otRen2)),
            'asegurado2'   : str(list(asegurado2)),
            'referenciador2'   : str(list(referenciador2)),
            'antiguedad2'   : str(list(antiguedad2)),
            'creadopor2'   : str(list(creadopor2)),
            'responsable2'   : str(list(responsable2)),           
            'nivelAg2'   : str(list(nivelAg2)) ,
            'grupo12'   : str(list(grupo12)) ,
            'grupo22'   : str(list(grupo22)) ,
            'grupo32'   : str(list(grupo32)) ,
            'grupo42'   : str(list(grupo42)) ,
            'clasifica2'   : str(list(clasifica2)) ,
            'celula2'   : str(list(celulaC2)) ,
            'businessLine2'   : str(list(businessLine2)) ,
            'cars_years2'   : str(list(cars_years2)),
            'cars_serials2'   : str(list(cars_serials2)),
            'sucursal2'   : str(list(sucursal2)),
            'contactos_nombre2'   : str(list(contactos_nombre2)),
            'contactos_telefono2'   : str(list(contactos_telefono2)),
            'contactos_email2'   : str(list(contactos_email2)),
            'caratulaNumero2': str(list(caratulaN2)),
            'caratulaContratante2': str(list(caratulaC2)),
            'polizaAnt2': str(list(poliza_anterior2)),
            'siniestro_perdida2': str(list(siniestro_perdida2)),

            'tipo_reporte2': tipo_reporte_2,
            # enproceso
            'email_org':info_org['email'],
            'phone_org':info_org['phone'],
            'webpage_org':info_org['webpage'],
            'address_org':info_org['address'],
            'urlname_org':info_org['name'],
            }
        print('ddddddddddd',len(polizasenproceso))
        campo_celula, campo_agrupacion, campo_lineanegocio, moduleName = getOrgInfo(request)
        obj['columns'] = str(list(columns))
        obj['imagen'] = archivo_imagen
        obj['valueCom'] = valueCom
        obj['verReferenciadores'] = verReferenciadores
        obj['registros'] = len(polizas)
        obj['registros2'] = len(polizasenproceso)
        obj['moduleName'] = moduleName

        r = requests.post(settings.SERVICEEXCEL_URL + 'get-renovacionesExcelReporte/', obj,
        # headers = {
        # 'Authorization':'Bearer %s'%request.user.user_info.fi_token_refresh,
        # # 'Content-Type':'application/json' 
        # }, 
        stream=True)
        response_data= r.text

        response = HttpResponse(r.content,content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

        return response


# Reporte Póliza OT listado
@api_view(['POST'])
@permission_classes((IsAuthenticatedV2, RenovacionesReportesPermissionsV2, IsOrgMemberV2))
def Service_ReporteEndososExcel(request):
    request = request
    type_person = request.data['type_contractor']
    contratante = request.data['contratante']
    aseguradora = int(request.data['provider']) 
    ramo = int(request.data['ramo'])
    subramo = int(request.data['subramo'])
    status = int(request.data['status'])
    order = int(request.data['order'])
    asc = int(request.data['asc'])
    ramos_sel = (request.data['ramos'])
    subramos_sel = (request.data['subramos'])
    providers_sel = (request.data['providers'])
    users_sel = (request.data['users'])
    valDolar = (request.data['valDolar'])
    valUdi = (request.data['valUdi'])
    excel_type = int(request.data['export_type'])
    bsLine = request.data['businessLine']
    celula = request.data['celula']
    grupos = Group.objects.filter(org_name = request.GET.get('org'))
    numpoliza = request.data['numpoliza']
    report_by = request.data['report_by']

    if int(report_by) == 0:
        dts = list([1,3,11,7,8,12,6,4])
        dts2 = list([1,3,11,7,8,12,6,4])
        dt1 = 12
        dt2 = 6
    elif int(report_by) == 1:
        dts = list([1,3,11,12])
        dts2 = list([1,3,11,12,6,4])
        dt1 = 12
        dt2 = 6
    elif int(report_by) == 2:
        dt1 = 0
        dt2 = 0
        dts = list([7,8])
        dts2 = list([7,8,9,10])


    if int(ramo) > 0 :
            ramo = list(Ramos.objects.filter(ramo_code = int(ramo)).values_list('pk', flat=True))
    else:
            ramo = list(Ramos.objects.filter(org_name = request.GET.get('org')).values_list('pk', flat=True))
    
    if int(subramo) > 0 :
            subramo = list(SubRamos.objects.filter(subramo_code = int(subramo)).values_list('pk', flat=True))
    else:
            subramo = list(SubRamos.objects.filter(org_name = request.GET.get('org'), ramo__in = ramo).values_list('pk', flat=True))
                    
    if aseguradora == 0:
            aseguradora = list(Provider.objects.filter(org_name = request.GET.get('org')).values_list('pk', flat=True))
    else:
            aseguradora = [aseguradora]

    # Provider sel----
    if (providers_sel):
            aseguradora = list(Provider.objects.filter(pk__in = (providers_sel)).values_list('pk', flat=True))
    else:
            aseguradora = list(Provider.objects.filter(org_name = request.GET.get('org')).values_list('pk', flat=True))
    # ramos_selected----
    if (ramos_sel):
            ramo = list(Ramos.objects.filter(org_name = request.GET.get('org'), provider__in = aseguradora,ramo_code__in=ramos_sel).values_list('pk', flat=True))
    else:
            ramo = list(Ramos.objects.filter(org_name = request.GET.get('org'), provider__in = aseguradora).values_list('pk', flat=True))

    # rsubramos_sel----
    if (subramos_sel):
            subramo = list(SubRamos.objects.filter(org_name = request.GET.get('org'), ramo__in = ramo,subramo_code__in= subramos_sel).values_list('pk', flat=True))
    else:
            subramo = list(SubRamos.objects.filter(org_name = request.GET.get('org'), ramo__in = ramo).values_list('pk', flat=True))   
    # users sel----
    if (users_sel):
            users = list(User.objects.filter(pk__in = (users_sel)).values_list('pk', flat=True))
    else:
            users = list(User.objects.values_list('pk', flat=True))

    if int(status) > 0:
            status = [int(status)]
    else:
            status = list([1,2,3,4,5,6])

    polizas = (Polizas.objects.filter(org_name=request.GET.get('org'),
                                                                                ramo__in = ramo, 
                                                                                subramo__in = subramo,
                                                                                aseguradora__in = aseguradora,
                                                                                owner__in = users,
                                                                                document_type__in = dts).exclude(status=0).values_list('pk', flat=True))   

    if int(contratante) > 0 :
        contratanten = list( Contractor.objects.filter(pk = int(contratante), group = grupos).values_list('pk', flat = True))
        polizas = polizas.filter(contractor__in = contratanten)

    else:
        contratanten = list(Contractor.objects.filter(group = grupos).values_list('pk', flat = True))
        polizas = polizas.filter(contractor__in = contratanten)

    if int(bsLine) > 0:
        if int(bsLine) == 3:
            polizas = polizas.filter(business_line = 0) 
        else:
            polizas = polizas.filter(business_line = bsLine)
    if numpoliza !=0 and numpoliza !='0':
        polizas = polizas.filter(poliza_number__icontains = str(numpoliza))
    endorsment_filters = [(Q(policy__in = polizas))]

    try:
        try:
            f = "%d/%m/%Y %H:%M:%S"        
            since = datetime.strptime(request.data['since'] , f)
            until = datetime.strptime(request.data['until'] , f)
        except:
            f = "%d/%m/%Y %H:%M:%S"        
            since = datetime.datetime.strptime(request.data['since'] , f)
            until = datetime.datetime.strptime(request.data['until'] , f)
    except:
        try:
            f = "%m/%d/%Y %H:%M:%S"        
            since = datetime.strptime(request.data['since'] , f)
            until = datetime.strptime(request.data['until'] , f)
        except:
            f = "%m/%d/%Y %H:%M:%S"        
            since = datetime.datetime.strptime(request.data['since'] , f)
            until = datetime.datetime.strptime(request.data['until'] , f)

    endorsment_filters.append(Q(init_date__gte=since))

    endo_type = request.data['type']
    try:
        if not int(endo_type) == 0:
            endorsment_filters.append(Q(endorsement_type = endo_type))
    except:
            pass


    endosos_currency = [(Q(policy__f_currency = 1))]
    endosos_currencyd = [(Q(policy__f_currency = 2))]
    endosos_currencyu = [(Q(policy__f_currency = 3))]

    group_by    = request.data['group_by']
    
    if int(celula) >0:            
        pol1 = Polizas.objects.filter(celula = celula).values_list('pk', flat = True)
        endorsment_filters.append(Q(policy__in = list(pol1)))    

    endosos = Endorsement.objects.filter(reduce(operator.and_,endorsment_filters),status__in = status, org_name = request.GET.get('org')).exclude(status=0).exclude(policy__status=0)
    try:
        dataToFilter = getDataForPerfilRestricted(request, request.GET.get('org'))
    except Exception as er:
        dataToFilter = {}
    if dataToFilter:
        # Contratantes***
        polizasCl = Polizas.objects.filter(document_type__in = dts, org_name = request.GET.get('org')).exclude(status = 0)
        polizasToF = Polizas.objects.filter(document_type__in = dts2, org_name = request.GET.get('org')).exclude(status = 0)
        if dataToFilter['ccpr']:
            polizasToF = polizasToF.filter(contractor__in = list(dataToFilter['ccpr']))
        if dataToFilter['cgpr']:
            polizasToF = polizasToF.filter(contractor__group__in = list(dataToFilter['cgpr']))
        if dataToFilter['ccepr']:
            polizasToF = polizasToF.filter(contractor__cellule__in = list(dataToFilter['ccepr']))
        if dataToFilter['crpr']:
            polizasToF = polizasToF.filter(contractor__vendor__in = list(dataToFilter['crpr']))
        if dataToFilter['cspr']:
            polizasToF = polizasToF.filter(contractor__sucursal__in = list(dataToFilter['cspr']))
        # Pólizas ****
        if dataToFilter['pppr']:
            polizasToF = polizasToF.filter(pk__in = list(dataToFilter['pppr']))
        if dataToFilter['pgpr']:
            polizasToF = polizasToF.filter(contractor__group__in = list(dataToFilter['pgpr']))
        if dataToFilter['pcepr']:
            polizasToF = polizasToF.filter(celula__in = list(dataToFilter['pcepr']))
        if dataToFilter['prpr']:
            polizasToF = polizasToF.filter(ref_policy__referenciador__in = list(dataToFilter['prpr']))
        if dataToFilter['pspr']:
            polizasToF = polizasToF.filter(sucursal__in = list(dataToFilter['pspr']))
        if dataToFilter['papr']:
            polizasToF = polizasToF.filter(groupinglevel__in = list(dataToFilter['papr']))
        if dataToFilter['pcapr']:
            polizasToF = polizasToF.filter(clave__in = list(dataToFilter['pcapr']))
        if dataToFilter['psrpr']:
            polizasToF = polizasToF.filter(subramo__subramo_code__in = list(dataToFilter['psrpr']))
        if dataToFilter['paspr']:
            polizasToF = polizasToF.filter(aseguradora__in = list(dataToFilter['paspr']))
        if dataToFilter['pstpr']:
            polizasToF = polizasToF.filter(status__in = list(dataToFilter['pstpr']))
        
        polizasCT = polizasCl.filter(document_type = dt1, parent__in = list(polizasToF))
        polizasGT = polizasCl.filter(document_type = dt2, parent__parent__parent__in = list(polizasToF))
        polizasFin = list(polizasToF.values_list('pk', flat = True)) + list(polizasCT.values_list('pk', flat = True)) + list(polizasGT.values_list('pk', flat = True))
        polizas = polizas.filter(pk__in = list(polizasFin)) 
        endosos = endosos.filter(policy__in = list(polizas))

    endosos_currency = [(Q(policy__f_currency = 1))]
    endosos_currencyd = [(Q(policy__f_currency = 2))]
    endosos_currencyu = [(Q(policy__f_currency = 3))]
    # ---------------sumas--------------
    try:
        end_polizas = endosos.filter(reduce(operator.and_,endosos_currency))
        p_neta_total_pesos = end_polizas.aggregate(Sum('p_neta'))
        comision_total_pesos = end_polizas.aggregate(Sum('comision'))
        p_total_total_pesos = end_polizas.aggregate(Sum('p_total'))

        end_pol_dolares = endosos.filter(reduce(operator.and_,endosos_currencyd))
        p_neta_total_dolares = end_pol_dolares.aggregate(Sum('p_neta'))
        comision_total_dolares = end_pol_dolares.aggregate(Sum('comision'))
        p_total_total_dolares = end_pol_dolares.aggregate(Sum('p_total'))

        end_pol_udi = endosos.filter(reduce(operator.and_,endosos_currencyu))
        p_neta_total_udi = end_pol_udi.aggregate(Sum('p_neta'))
        comision_total_udi = end_pol_udi.aggregate(Sum('comision'))
        p_total_total_udi = end_pol_udi.aggregate(Sum('p_total'))
        sumas = {
            'p_total_total_pesos': p_total_total_pesos['p_total__sum'],
            'p_neta_total_pesos': p_neta_total_pesos['p_neta__sum'],
            'comision_total_pesos': comision_total_pesos['comision__sum'],
            'p_total_total_dolares': p_total_total_dolares['p_total__sum'],
            'p_neta_total_dolares': p_neta_total_dolares['p_neta__sum'],
            'comision_total_dolares': comision_total_dolares['comision__sum'],
            'p_total_total_udi': p_total_total_udi['p_total__sum'],
            'p_neta_total_udi': p_neta_total_udi['p_neta__sum'],
            'comision_total_udi': comision_total_udi['comision__sum']
        }
        if sumas['p_total_total_dolares'] == None:
            sumas['p_total_total_dolares'] = float(0)
        if sumas['p_neta_total_dolares'] == None:
            sumas['p_neta_total_dolares'] = float(0)
        if sumas['comision_total_dolares'] == None:
            sumas['comision_total_dolares'] = float(0)

        if sumas['p_total_total_udi'] == None:
            sumas['p_total_total_udi'] = float(0)
        if sumas['p_neta_total_udi'] == None:
            sumas['p_neta_total_udi'] = float(0)
        if sumas['comision_total_udi'] == None:
            sumas['comision_total_udi'] = float(0)
    except Exception as e:
        sumas = {}
    if float(valDolar) == 0.00:
            sumas = sumas
    else:
            try:
                    if sumas['p_total_total_dolares'] != None:
                            sumas['p_total_total_dolares'] = float(sumas['p_total_total_dolares']) * float(valDolar)
                    else:
                        sumas['p_total_total_dolares'] = float(0)

                    if sumas['p_neta_total_dolares'] != None:
                            sumas['p_neta_total_dolares'] = float(sumas['p_neta_total_dolares']) * float(valDolar)
                    else:
                        sumas['p_neta_total_dolares'] = float(0)

                    if sumas['comision_total_dolares'] != None:
                            sumas['comision_total_dolares'] = float(sumas['comision_total_dolares']) * float(valDolar)
                    else:
                        sumas['comision_total_dolares'] = float(0)

            except Exception as e:
                    sumas['p_total_total_dolares'] = sumas['p_total_total_dolares']
                    sumas['p_neta_total_dolares'] = sumas['p_neta_total_dolares']
                    sumas['comision_total_dolares'] = sumas['comision_total_dolares']
    if float(valUdi) == 0.00:
            sumas = sumas
    else:
            try:
                    if sumas['p_total_total_udi'] != None:
                            sumas['p_total_total_udi'] = float(sumas['p_total_total_udi']) * float(valUdi)
                    else:
                        sumas['p_total_total_udi'] = float(0)
                    if sumas['p_neta_total_udi'] != None:
                            sumas['p_neta_total_udi'] = float(sumas['p_neta_total_udi']) * float(valUdi)
                    else:
                        sumas['p_neta_total_udi'] = float(0)
                    if sumas['comision_total_udi'] != None:
                            sumas['comision_total_udi'] = float(sumas['comision_total_udi']) * float(valUdi)
                    else:
                        sumas['comision_total_udi'] = float(0)
            except Exception as e:
                    sumas['p_total_total_udi'] = sumas['p_total_total_udi']
                    sumas['p_neta_total_udi'] = sumas['p_neta_total_udi']
                    sumas['comision_total_udi'] = sumas['comision_total_udi']


    filter_endos_aseguradora = endosos.values_list('policy__aseguradora__compania','policy__internal_number',
        'policy__contractor__full_name', 'policy__start_of_validity','policy__end_of_validity').order_by('policy__aseguradora__compania')

    # Empieza insertado de imagen
    info_org = getInfoOrg(request)
    if len(info_org['logo']) != 0:
        archivo_imagen = 'https://miurabox-public.s3.amazonaws.com/cas/' + info_org['logo']
        # archivo_imagen = get_presigned_url("cas/{url}".format(url=info_org['logo']),28800) 
    else:
        archivo_imagen = 'saam.jpg'

    tipo_reporte = "Reporte de endosos del " + str(since.strftime("%d/%m/%y")) + " al " + str(until.strftime("%d/%m/%y"))
    si_com = comisions(request)
    # Sheet header, first row
    campo_celula, campo_agrupacion, campo_lineanegocio, moduleName = getOrgInfo(request)
    if int(excel_type) == 1:
        row_num = 10
        # return response
        rows_pesos = []
        columns = ['Agrupación','Prima neta','Prima Total','Comisión','Moneda','Registros','Comisión conciliada']       
        # ---------report excel service----
        prueba = {}
        pesos_poliza = endosos.filter(Q(policy__f_currency = 1))
        dolares_poliza = endosos.filter(Q(policy__f_currency = 2))
        pesos_poliza_n = endosos.filter(Q(policy__f_currency = 1, policy__contractor__type_person =1))
        dolares_poliza_n = endosos.filter(Q(policy__f_currency = 2, policy__contractor__type_person =1))
        pesos_poliza_j = endosos.filter(Q(policy__f_currency = 1, policy__contractor__type_person =2))
        dolares_poliza_j = endosos.filter(Q(policy__f_currency = 2, policy__contractor__type_person =2))

        if group_by == 1 or group_by == 2 or group_by == 3:
            if group_by == 1:
                prueba = {}
                pesos_poliza = endosos.filter(Q(policy__f_currency = 1))
                dolares_poliza = endosos.filter(Q(policy__f_currency = 2))                
                prueba['pesos_poliza'] = pesos_poliza.values('policy__aseguradora__compania').annotate(Count('policy__aseguradora__id')).annotate(Sum('p_neta')).annotate(Sum('p_total')).annotate(Sum('comision')).annotate(Sum('endorsement_receipt__comision_conciliada')).order_by('policy__aseguradora__id')
                prueba['dolares_poliza'] = dolares_poliza.values('policy__aseguradora__compania').annotate(Count('policy__aseguradora__id')).annotate(Sum('p_neta')).annotate(Sum('p_total')).annotate(Sum('comision')).annotate(Sum('endorsement_receipt__comision_conciliada')).order_by('policy__aseguradora__id')
                rows_pesos_pr = []
                rows_dolares_pr = []
                tipo_reporte = tipo_reporte + " por Aseguradora / Afianzadora"
                rows_pesos = prueba['pesos_poliza'].values_list('policy__aseguradora__compania','p_neta__sum','p_total__sum','comision__sum','policy__aseguradora__id__count','endorsement_receipt__comision_conciliada__sum')
                rows_dolares = prueba['dolares_poliza'].values_list('policy__aseguradora__compania','p_neta__sum','p_total__sum','comision__sum','policy__aseguradora__id__count','endorsement_receipt__comision_conciliada__sum')
            elif group_by == 2:
                prueba['pesos_poliza'] = pesos_poliza.values('policy__ramo__ramo_name').annotate(Count('policy__ramo')).annotate(Sum('p_neta')).annotate(Sum('p_total')).annotate(Sum('comision')).annotate(Sum('endorsement_receipt__comision_conciliada')).order_by('policy__ramo__ramo_name')
                prueba['dolares_poliza'] = dolares_poliza.values('policy__ramo__ramo_name').annotate(Count('policy__ramo')).annotate(Sum('p_neta')).annotate(Sum('p_total')).annotate(Sum('comision')).annotate(Sum('endorsement_receipt__comision_conciliada')).order_by('policy__ramo__ramo_name')
                tipo_reporte = tipo_reporte +  " por Ramo"
                rows_pesos = prueba['pesos_poliza'].values_list('policy__ramo__ramo_name','p_neta__sum','p_total__sum','comision__sum','policy__ramo__count','endorsement_receipt__comision_conciliada__sum')
                rows_dolares = prueba['dolares_poliza'].values_list('policy__ramo__ramo_name','p_neta__sum','p_total__sum','comision__sum','policy__ramo__count','endorsement_receipt__comision_conciliada__sum')
            elif group_by == 3:
                prueba['pesos_poliza'] = pesos_poliza.values('policy__subramo__subramo_name').annotate(Count('policy__subramo')).annotate(Sum('p_neta')).annotate(Sum('p_total')).annotate(Sum('comision')).annotate(Sum('endorsement_receipt__comision_conciliada')).order_by('policy__subramo__subramo_name')
                prueba['dolares_poliza'] = dolares_poliza.values('policy__subramo__subramo_name').annotate(Count('policy__subramo')).annotate(Sum('p_neta')).annotate(Sum('p_total')).annotate(Sum('comision')).annotate(Sum('endorsement_receipt__comision_conciliada')).order_by('policy__subramo__subramo_name')
                
                tipo_reporte = tipo_reporte +  " por Subramo"
                rows_pesos = prueba['pesos_poliza'].values_list('policy__subramo__subramo_name','p_neta__sum','p_total__sum','comision__sum','policy__subramo__count','endorsement_receipt__comision_conciliada__sum')
                rows_dolares = prueba['dolares_poliza'].values_list('policy__subramo__subramo_name','p_neta__sum','p_total__sum','comision__sum','policy__subramo__count','endorsement_receipt__comision_conciliada__sum')
                
            agrupacion = []
            prima = []
            total = []
            comision = []
            moneda = []
            registrosA = []
            com_conciliada = []
            dolares = 0
            p = 0
            c_pesos = 0
            cc_pesos = 0
            c_dolares = 0
            cc_dolares = 0
            neta_pesos = 0
            neta_dolares = 0
            for row in rows_pesos:
                if row[0] != None:
                    row_num += 1
                    c_pesos = c_pesos + row[3]
                    try:
                        cc_pesos = cc_pesos + row[5]
                    except Exception as f_:
                        cc_pesos = cc_pesos 
                    neta_pesos = neta_pesos + row[1]
                    if row[2]:
                        p = p + row[2]
                    ag = ((((((row[0]).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')    
                    prn = row[1]
                    tot = row[2]
                    com = row[3]
                    mon = 'Pesos'
                    regs = row[4]
                    cc = row[5]
                    agrupacion.append(ag)
                    prima.append(prn)
                    total.append(tot)
                    comision.append(com)
                    moneda.append(mon)
                    registrosA.append(regs)
                    com_conciliada.append(cc)
            # dolares 1
            for row_2 in rows_dolares:
                if row_2[0] != None:
                    row_num += 1
                    c_dolares = c_dolares + row_2[3]
                    if row_2[5]:
                        cc_dolares = cc_dolares + int(row_2[5])
                    else:
                        cc_dolares = cc_dolares
                    neta_dolares = neta_dolares + row_2[1]
                    if row_2[2]:
                        dolares = dolares + row_2[2]
                    ag = ((((((row_2[0]).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')   
                    prn = row_2[1]
                    tot = row_2[2]
                    com = row_2[3]
                    mon = 'Dolares'
                    regs = row_2[4]
                    cc = row_2[5]
                    agrupacion.append(ag)
                    prima.append(prn)
                    total.append(tot)
                    comision.append(com)
                    moneda.append(mon)
                    registrosA.append(regs)
                    com_conciliada.append(cc)
                          
            
            obj = {                
                'agrupacion'   : str(list(agrupacion)),
                'prima'   : str(list(prima)),
                'total'   : str(list(total)),
                'comision'   : str(list(comision)),
                'moneda'   : str(list(moneda)),
                'registrosA'   : str(list(registrosA)),
                'com_conciliada'   : str(list(com_conciliada)),
                'dolares'   : '$ {:,.2f}'.format(dolares),
                'pesos'   : '$ {:,.2f}'.format(p),
                'cpesos'   : '$ {:,.2f}'.format(c_pesos),
                'cdolares'   : '$ {:,.2f}'.format(c_dolares),
                'ccpesos'   : '$ {:,.2f}'.format(cc_pesos),
                'ccdolares'   : '$ {:,.2f}'.format(cc_dolares),
                'npesos'   : '$ {:,.2f}'.format(neta_pesos),
                'ndolares'   : '$ {:,.2f}'.format(neta_dolares),
                'grupo': int(group_by),
                'tipo_reporte': tipo_reporte,
                'email_org':info_org['email'],
                'phone_org':info_org['phone'],
                'webpage_org':info_org['webpage'],
                'address_org':info_org['address'],
                'urlname_org':info_org['name'],
            }   
            obj['columns'] = columns
            obj['imagen'] = archivo_imagen
            obj['registros'] = len(agrupacion) 
            obj['typeReport'] = 2
            r = requests.post(settings.SERVICEEXCEL_URL + 'get-cobranzaAgrupadoExcelReporte/', obj,
            # headers = {
            # 'Authorization':'Bearer %s'%request.user.user_info.fi_token_refresh,
            # # 'Content-Type':'application/json' 
            # }, 
            stream=True)
            response_data= r.text

            response = HttpResponse(r.content,content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')
            return response
        elif group_by == 4:            
            prueba_n_p_pesos = pesos_poliza_n.values('policy__contractor__group__group_name').annotate(Count('policy__contractor__group')).annotate(Sum('p_neta')).annotate(Sum('p_total')).annotate(Sum('comision')).annotate(Sum('endorsement_receipt__comision_conciliada')).order_by('policy__contractor__group__group_name')
            prueba_n_p_dolares = dolares_poliza_n.values('policy__contractor__group__group_name').annotate(Count('policy__contractor__group')).annotate(Sum('p_neta')).annotate(Sum('p_total')).annotate(Sum('comision')).annotate(Sum('endorsement_receipt__comision_conciliada')).order_by('policy__contractor__group__group_name')
            prueba_j_p_pesos = pesos_poliza_j.values('policy__contractor__group__group_name').annotate(Count('policy__contractor__group')).annotate(Sum('p_neta')).annotate(Sum('p_total')).annotate(Sum('comision')).annotate(Sum('endorsement_receipt__comision_conciliada')).order_by('policy__contractor__group__group_name')
            prueba_j_p_dolares = dolares_poliza_j.values('policy__contractor__group__group_name').annotate(Count('policy__contractor__group')).annotate(Sum('p_neta')).annotate(Sum('p_total')).annotate(Sum('comision')).annotate(Sum('endorsement_receipt__comision_conciliada')).order_by('policy__contractor__group__group_name')
            
            prueba['naturals_pol_pesos'] = prueba_n_p_pesos
            prueba['juridicals_pol_pesos'] = prueba_j_p_pesos
            prueba['naturals_pol_dolares'] = prueba_n_p_dolares
            prueba['juridicals_pol_dolares'] = prueba_j_p_dolares
        
            tipo_reporte = tipo_reporte + " por Grupo"
            rows_pesos = prueba['naturals_pol_pesos'].values_list('policy__contractor__group__group_name','p_neta__sum','p_total__sum','comision__sum','policy__contractor__group__count','endorsement_receipt__comision_conciliada__sum')
            rows_dolares = prueba['naturals_pol_dolares'].values_list('policy__contractor__group__group_name','p_neta__sum','p_total__sum','comision__sum','policy__contractor__group__count','endorsement_receipt__comision_conciliada__sum')
            rows_pesosf = prueba['juridicals_pol_pesos'].values_list('policy__contractor__group__group_name','p_neta__sum','p_total__sum','comision__sum','policy__contractor__group__count','endorsement_receipt__comision_conciliada__sum')
            rows_dolaresf = prueba['juridicals_pol_dolares'].values_list('policy__contractor__group__group_name','p_neta__sum','p_total__sum','comision__sum','policy__contractor__group__count','endorsement_receipt__comision_conciliada__sum')
            columns = ['Agrupación','Tipo Contratante','Prima neta','Prima Total','Comisión','Moneda','Registros','Comisión conciliada']
            
            tipoContratante = []
            agrupacion = []
            prima = []
            total = []
            comision = []
            moneda = []
            registrosA = []
            com_conciliada = []
            dolares = 0
            p = 0
            c_pesos = 0
            cc_pesos = 0
            c_dolares = 0
            cc_dolares = 0
            neta_pesos = 0
            neta_dolares = 0
            for row in rows_pesos:
                if row[0] != None:                    # -------------------
                    row_num += 1
                    c_pesos = c_pesos + row[3]
                    cc_pesos = cc_pesos + row[5]
                    neta_pesos = neta_pesos + row[1]
                    if row[2]:
                        p = p + row[2]
                    ag = ((((((row[0]).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'') 
                    tipoc = 'Naturales'   
                    prn = row[1]
                    tot = row[2]
                    com = row[3]
                    mon = 'Pesos'
                    regs = row[4]
                    cc = row[5]
                    agrupacion.append(ag)
                    tipoContratante.append(tipoc)
                    prima.append(prn)
                    total.append(tot)
                    comision.append(com)
                    moneda.append(mon)
                    registrosA.append(regs)
                    com_conciliada.append(cc)
            # dolares 1
            for row_2 in rows_dolares:
                if row_2[0] != None:
                    row_num += 1
                    c_dolares = c_dolares + row_2[3]
                    if row_2[5]:
                        cc_dolares = cc_dolares + int(row_2[5])
                    else:
                        cc_dolares = cc_dolares
                    neta_dolares = neta_dolares + row_2[1]
                    if row_2[2]:
                        dolares = dolares + row_2[2]
                    ag = ((((((row_2[0]).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')   
                    tipoc = 'Naturales'
                    prn = row_2[1]
                    tot = row_2[2]
                    com = row_2[3]
                    mon = 'Dolares'
                    regs = row_2[4]
                    cc = row_2[5]
                    agrupacion.append(ag)
                    tipoContratante.append(tipoc)
                    prima.append(prn)
                    total.append(tot)
                    comision.append(com)
                    moneda.append(mon)
                    registrosA.append(regs)
                    com_conciliada.append(cc)
            
            obj = {                
                'agrupacion'   : str(list(agrupacion)),
                'tipoContratante': str(list(tipoContratante)),
                'prima'   : str(list(prima)),
                'total'   : str(list(total)),
                'comision'   : str(list(comision)),
                'moneda'   : str(list(moneda)),
                'registrosA'   : str(list(registrosA)),
                'com_conciliada'   : str(list(com_conciliada)),
                'dolares'   : '$ {:,.2f}'.format(dolares),
                'pesos'   : '$ {:,.2f}'.format(p),
                'cpesos'   : '$ {:,.2f}'.format(c_pesos),
                'cdolares'   : '$ {:,.2f}'.format(c_dolares),
                'ccpesos'   : '$ {:,.2f}'.format(cc_pesos),
                'ccdolares'   : '$ {:,.2f}'.format(cc_dolares),
                'npesos'   : '$ {:,.2f}'.format(neta_pesos),
                'ndolares'   : '$ {:,.2f}'.format(neta_dolares),
                'tipo_reporte': tipo_reporte,
                'grupo': int(group_by),
                'email_org':info_org['email'],
                'phone_org':info_org['phone'],
                'webpage_org':info_org['webpage'],
                'address_org':info_org['address'],
                'urlname_org':info_org['name'],
            }   
            obj['columns'] = columns
            obj['imagen'] = archivo_imagen
            obj['registros'] = len(agrupacion) 
            obj['typeReport'] = 2
            r = requests.post(settings.SERVICEEXCEL_URL + 'get-cobranzaAgrupadoExcelReporte/', obj,
            # headers = {get-polizasExcelReporte
            # 'Authorization':'Bearer %s'%request.user.user_info.fi_token_refresh,
            # # 'Content-Type':'application/json' 
            # }, 
            stream=True)
            response_data= r.text

            response = HttpResponse(r.content,content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')
            return response
        elif group_by == 5:
            prueba['pesos_poliza'] = pesos_poliza.values('policy__vendor__first_name', 'policy__vendor__last_name').annotate(Count('policy__vendor')).annotate(Sum('p_neta')).annotate(Sum('p_total')).annotate(Sum('policy__comision')).annotate(Sum('policy__recibos_poliza__comision_conciliada')).order_by('policy__vendor')
            prueba['dolares_poliza'] = dolares_poliza.values('policy__vendor__first_name', 'policy__vendor__last_name').annotate(Count('policy__vendor')).annotate(Sum('p_neta')).annotate(Sum('p_total')).annotate(Sum('policy__comision')).annotate(Sum('policy__recibos_poliza__comision_conciliada')).order_by('policy__vendor')
                    
            tipo_reporte = tipo_reporte + " por Referenciador" 
            rows_pesos = prueba['pesos_poliza'].values_list('policy__vendor__first_name','p_neta__sum','p_total__sum','policy__comision__sum','policy__vendor__count','policy__recibos_poliza__comision_conciliada__sum','policy__vendor__last_name')
            rows_dolares = prueba['dolares_poliza'].values_list('policy__vendor__first_name','p_neta__sum','p_total__sum','policy__comision__sum','policy__vendor__count','policy__recibos_poliza__comision_conciliada__sum','policy__vendor__last_name')
            
            prefs_pesos = pesos_poliza.values('policy__ref_policy__referenciador__first_name', 'policy__ref_policy__referenciador__last_name').annotate(Count('policy__ref_policy__referenciador'),Count('policy__vendor'),Count('policy__ref_policy__referenciador__id')).annotate(Sum('p_neta')).annotate(Sum('policy__comision')).annotate(Sum('policy__recibos_poliza__comision_conciliada')).annotate(Sum('p_total')).order_by('policy__vendor__id','policy__ref_policy__referenciador__id')
            prefs_dols = dolares_poliza.values('policy__ref_policy__referenciador__first_name', 'policy__ref_policy__referenciador__last_name').annotate(Count('policy__ref_policy__referenciador'),Count('policy__vendor'),Count('policy__ref_policy__referenciador__id')).annotate(Sum('p_neta')).annotate(Sum('policy__comision')).annotate(Sum('policy__recibos_poliza__comision_conciliada')).annotate(Sum('p_total')).order_by('policy__vendor__id','policy__ref_policy__referenciador__id')
            rows_pesos_pr = prefs_pesos.values_list('policy__ref_policy__referenciador__first_name','p_neta__sum','p_total__sum','policy__comision__sum','policy__ref_policy__referenciador__id__count','policy__recibos_poliza__comision_conciliada__sum','policy__ref_policy__referenciador__last_name')
            rows_dolares_pr = prefs_dols.values_list('policy__ref_policy__referenciador__first_name','p_neta__sum','p_total__sum','policy__comision__sum','policy__ref_policy__referenciador__id__count','policy__recibos_poliza__comision_conciliada__sum','policy__ref_policy__referenciador__last_name')
            # -------
            tipoContratante = []
            agrupacion = []
            prima = []
            total = []
            comision = []
            moneda = []
            registrosA = []
            com_conciliada = []
            dolares = 0
            p = 0
            c_pesos = 0
            cc_pesos = 0
            c_dolares = 0
            cc_dolares = 0
            neta_pesos = 0
            neta_dolares = 0
            for row in rows_pesos:
                if row[0] != None:                    # -------------------
                    row_num += 1
                    c_pesos = c_pesos + row[3]
                    cc_pesos = cc_pesos + row[5]
                    neta_pesos = neta_pesos + row[1]
                    if row[2]:
                        p = p + row[2]
                    ag = row[0] + ' ' + str(row[6])
                    tipoc = 'Pólizas'   
                    prn = row[1]
                    tot = row[2]
                    com = row[3]
                    mon = 'Pesos'
                    regs = row[4]
                    cc = row[5]
                    agrupacion.append(ag)
                    tipoContratante.append(tipoc)
                    prima.append(prn)
                    total.append(tot)
                    comision.append(com)
                    moneda.append(mon)
                    registrosA.append(regs)
                    com_conciliada.append(cc)
            # dolares 1
            for row_2 in rows_dolares:
                if row_2[0] != None:
                    row_num += 1
                    c_dolares = c_dolares + row_2[3]
                    if row_2[5]:
                        cc_dolares = cc_dolares + int(row_2[5])
                    else:
                        cc_dolares = cc_dolares
                    neta_dolares = neta_dolares + row_2[1]
                    if row_2[2]:
                        dolares = dolares + row_2[2]
                    ag = row_2[0] +' '+str(row_2[6])
                    tipoc = 'Pólizas'
                    prn = row_2[1]
                    tot = row_2[2]
                    com = row_2[3]
                    mon = 'Dólares'
                    regs = row_2[4]
                    cc = row_2[5]
                    agrupacion.append(ag)
                    tipoContratante.append(tipoc)
                    prima.append(prn)
                    total.append(tot)
                    comision.append(com)
                    moneda.append(mon)
                    registrosA.append(regs)
                    com_conciliada.append(cc)
            # dolares 1
            for row__2 in rows_pesos_pr:
                if row__2[0] != None:
                    row_num += 1
                    c_dolares = c_dolares + row__2[3]
                    if row__2[5]:
                        cc_dolares = cc_dolares + int(row__2[5])
                    else:
                        cc_dolares = cc_dolares
                    neta_dolares = neta_dolares + row__2[1]
                    if row__2[2]:
                        dolares = dolares + row__2[2]
                    ag = row__2[0] +' '+str(row__2[6])
                    tipoc = 'Pólizas'
                    prn = row__2[1]
                    tot = row__2[2]
                    com = row__2[3]
                    mon = 'Pesos'
                    regs = row__2[4]
                    cc = row__2[5]
                    agrupacion.append(ag)
                    tipoContratante.append(tipoc)
                    prima.append(prn)
                    total.append(tot)
                    comision.append(com)
                    moneda.append(mon)
                    registrosA.append(regs)
                    com_conciliada.append(cc)
            for r1 in rows_dolares_pr:
                if r1[0] != None:
                    row_num += 1
                    c_dolares = c_dolares + r1[3]
                    if r1[5]:
                        cc_dolares = cc_dolares + int(r1[5])
                    else:
                        cc_dolares = cc_dolares
                    neta_dolares = neta_dolares + r1[1]
                    if r1[2]:
                        dolares = dolares + r1[2]
                    ag = r1[0] +' '+str(r1[6])
                    tipoc = 'Pólizas'
                    prn = r1[1]
                    tot = r1[2]
                    com = r1[3]
                    mon = 'Dólares'
                    regs = r1[4]
                    cc = r1[5]
                    agrupacion.append(ag)
                    tipoContratante.append(tipoc)
                    prima.append(prn)
                    total.append(tot)
                    comision.append(com)
                    moneda.append(mon)
                    registrosA.append(regs)
                    com_conciliada.append(cc) 
            obj = {                
                'agrupacion'   : str(list(agrupacion)),
                'tipoContratante': str(list(tipoContratante)),
                'prima'   : str(list(prima)),
                'total'   : str(list(total)),
                'comision'   : str(list(comision)),
                'moneda'   : str(list(moneda)),
                'registrosA'   : str(list(registrosA)),
                'com_conciliada'   : str(list(com_conciliada)),
                'dolares'   : '$ {:,.2f}'.format(dolares),
                'pesos'   : '$ {:,.2f}'.format(p),
                'cpesos'   : '$ {:,.2f}'.format(c_pesos),
                'cdolares'   : '$ {:,.2f}'.format(c_dolares),
                'ccpesos'   : '$ {:,.2f}'.format(cc_pesos),
                'ccdolares'   : '$ {:,.2f}'.format(cc_dolares),
                'npesos'   : '$ {:,.2f}'.format(neta_pesos),
                'ndolares'   : '$ {:,.2f}'.format(neta_dolares),
                'tipo_reporte': tipo_reporte,
                'grupo': int(group_by),
                'email_org':info_org['email'],
                'phone_org':info_org['phone'],
                'webpage_org':info_org['webpage'],
                'address_org':info_org['address'],
                'urlname_org':info_org['name'],
            }   
            obj['columns'] = columns
            obj['imagen'] = archivo_imagen
            obj['registros'] = len(agrupacion) 
            obj['typeReport'] = 2
            r = requests.post(settings.SERVICEEXCEL_URL + 'get-cobranzaAgrupadoExcelReporte/', obj,
            # headers = {
            # 'Authorization':'Bearer %s'%request.user.user_info.fi_token_refresh,
            # # 'Content-Type':'application/json' 
            # }, 
            stream=True)
            response_data= r.text

            response = HttpResponse(r.content,content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')
            return response
        elif group_by == 6:
            prueba['pesos_poliza'] = pesos_poliza.values('status').annotate(Count('status')).annotate(Sum('p_neta')).annotate(Sum('p_total')).annotate(Sum('comision')).annotate(Sum('endorsement_receipt__comision_conciliada')).order_by('status')
            prueba['dolares_poliza'] = dolares_poliza.values('status').annotate(Count('status')).annotate(Sum('p_neta')).annotate(Sum('p_total')).annotate(Sum('comision')).annotate(Sum('endorsement_receipt__comision_conciliada')).order_by('status')
            tipo_reporte = tipo_reporte + " por Estatus"
            rows_pesos = prueba['pesos_poliza'].values_list('status','p_neta__sum','p_total__sum','comision__sum','status__count','endorsement_receipt__comision_conciliada__sum')
            rows_dolares = prueba['dolares_poliza'].values_list('status','p_neta__sum','p_total__sum','comision__sum','status__count','endorsement_receipt__comision_conciliada__sum')
            
            agrupacion = []
            prima = []
            total = []
            comision = []
            moneda = []
            registrosA = []
            com_conciliada = []
            dolares = 0
            p = 0
            c_pesos = 0
            cc_pesos = 0
            c_dolares = 0
            cc_dolares = 0
            neta_pesos = 0
            neta_dolares = 0
            for row in rows_pesos:
                if row[0] != None:
                    row_num += 1
                    c_pesos = c_pesos + row[3]
                    try:
                        cc_pesos = cc_pesos + row[5]
                    except Exception as rt:
                        cc_pesos = cc_pesos
                    neta_pesos = neta_pesos + row[1]
                    if row[2]:
                        p = p + row[2]
                    ag = checkStatusEndo(row[0])
                    prn = row[1]
                    tot = row[2]
                    com = row[3]
                    mon = 'Pesos'
                    regs = row[4]
                    cc = row[5]
                    agrupacion.append(ag)
                    prima.append(prn)
                    total.append(tot)
                    comision.append(com)
                    moneda.append(mon)
                    registrosA.append(regs)
                    com_conciliada.append(cc)
            
            # dolares 1
            for row_2 in rows_dolares:
                if row_2[0] != None:
                    row_num += 1
                    c_dolares = c_dolares + row_2[3]
                    if row_2[5]:
                        cc_dolares = cc_dolares + int(row_2[5])
                    else:
                        cc_dolares = cc_dolares
                    neta_dolares = neta_dolares + row_2[1]
                    if row_2[2]:
                        dolares = dolares + row_2[2]
                    ag = checkStatusEndo(row_2[0])
                    prn = row_2[1]
                    tot = row_2[2]
                    com = row_2[3]
                    mon = 'Dolares'
                    regs = row_2[4]
                    cc = row_2[5]
                    agrupacion.append(ag)
                    prima.append(prn)
                    total.append(tot)
                    comision.append(com)
                    moneda.append(mon)
                    registrosA.append(regs)
                    com_conciliada.append(cc)
            
            obj = {                
                'agrupacion'   : str(list(agrupacion)),
                'prima'   : str(list(prima)),
                'total'   : str(list(total)),
                'comision'   : str(list(comision)),
                'moneda'   : str(list(moneda)),
                'registrosA'   : str(list(registrosA)),
                'com_conciliada'   : str(list(com_conciliada)),
                'dolares'   : '$ {:,.2f}'.format(dolares),
                'pesos'   : '$ {:,.2f}'.format(p),
                'cpesos'   : '$ {:,.2f}'.format(c_pesos),
                'cdolares'   : '$ {:,.2f}'.format(c_dolares),
                'ccpesos'   : '$ {:,.2f}'.format(cc_pesos),
                'ccdolares'   : '$ {:,.2f}'.format(cc_dolares),
                'npesos'   : '$ {:,.2f}'.format(neta_pesos),
                'ndolares'   : '$ {:,.2f}'.format(neta_dolares),
                'grupo': int(group_by),
                'tipo_reporte': tipo_reporte,
                'email_org':info_org['email'],
                'phone_org':info_org['phone'],
                'webpage_org':info_org['webpage'],
                'address_org':info_org['address'],
                'urlname_org':info_org['name'],
            }   
            obj['columns'] = columns
            obj['imagen'] = archivo_imagen
            obj['registros'] = len(agrupacion) 
            obj['typeReport'] = 2
            r = requests.post(settings.SERVICEEXCEL_URL + 'get-cobranzaAgrupadoExcelReporte/', obj,
            # headers = {
            # 'Authorization':'Bearer %s'%request.user.user_info.fi_token_refresh,
            # # 'Content-Type':'application/json' 
            # },
            stream=True)
            response_data= r.text

            response = HttpResponse(r.content,content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')
            return response
        elif group_by == 7:
            prueba['pesos_poliza'] = pesos_poliza.values('policy__owner__first_name', 'policy__owner__last_name').annotate(Count('policy__owner')).annotate(Sum('p_neta')).annotate(Sum('p_total')).annotate(Sum('policy__comision')).annotate(Sum('policy__recibos_poliza__comision_conciliada')).order_by('policy__owner')
            prueba['dolares_poliza'] = dolares_poliza.values('policy__owner__first_name', 'policy__owner__last_name').annotate(Count('policy__owner')).annotate(Sum('p_neta')).annotate(Sum('p_total')).annotate(Sum('policy__comision')).annotate(Sum('policy__recibos_poliza__comision_conciliada')).order_by('policy__owner')
            tipo_reporte = tipo_reporte + " por Usuario"
            rows_pesos = prueba['pesos_poliza'].values_list('policy__owner__first_name','p_neta__sum','p_total__sum','policy__comision__sum','policy__owner__count','policy__recibos_poliza__comision_conciliada__sum','policy__owner__last_name')
            rows_dolares = prueba['dolares_poliza'].values_list('policy__owner__first_name','p_neta__sum','p_total__sum','policy__comision__sum','policy__owner__count','policy__recibos_poliza__comision_conciliada__sum','policy__owner__last_name')
            
            agrupacion = []
            prima = []
            total = []
            comision = []
            moneda = []
            registrosA = []
            com_conciliada = []
            dolares = 0
            p = 0
            c_pesos = 0
            cc_pesos = 0
            c_dolares = 0
            cc_dolares = 0
            neta_pesos = 0
            neta_dolares = 0
            for row in rows_pesos:
                if row[0] != None:
                    row_num += 1
                    c_pesos = c_pesos + row[3]
                    cc_pesos = cc_pesos + row[5]
                    neta_pesos = neta_pesos + row[1]
                    if row[2]:
                        p = p + row[2]
                    ag = row[0]+ ' ' + str(row[6])  
                    prn = row[1]
                    tot = row[2]
                    com = row[3]
                    mon = 'Pesos'
                    regs = row[4]
                    cc = row[5]
                    agrupacion.append(ag)
                    prima.append(prn)
                    total.append(tot)
                    comision.append(com)
                    moneda.append(mon)
                    registrosA.append(regs)
                    com_conciliada.append(cc)
            
            # dolares 1
            for row_2 in rows_dolares:
                if row_2[0] != None:
                    row_num += 1
                    c_dolares = c_dolares + row_2[3]
                    if row_2[5]:
                        cc_dolares = cc_dolares + int(row_2[5])
                    else:
                        cc_dolares = cc_dolares
                    neta_dolares = neta_dolares + row_2[1]
                    if row_2[2]:
                        dolares = dolares + row_2[2]
                    ag = row_2[0]+ ' ' + str(row_2[6]) 
                    prn = row_2[1]
                    tot = row_2[2]
                    com = row_2[3]
                    mon = 'Dolares'
                    regs = row_2[4]
                    cc = row_2[5]
                    agrupacion.append(ag)
                    prima.append(prn)
                    total.append(tot)
                    comision.append(com)
                    moneda.append(mon)
                    registrosA.append(regs)
                    com_conciliada.append(cc)
            
            obj = {                
                'agrupacion'   : str(list(agrupacion)),
                'prima'   : str(list(prima)),
                'total'   : str(list(total)),
                'comision'   : str(list(comision)),
                'moneda'   : str(list(moneda)),
                'registrosA'   : str(list(registrosA)),
                'com_conciliada'   : str(list(com_conciliada)),
                'dolares'   : '$ {:,.2f}'.format(dolares),
                'pesos'   : '$ {:,.2f}'.format(p),
                'cpesos'   : '$ {:,.2f}'.format(c_pesos),
                'cdolares'   : '$ {:,.2f}'.format(c_dolares),
                'ccpesos'   : '$ {:,.2f}'.format(cc_pesos),
                'ccdolares'   : '$ {:,.2f}'.format(cc_dolares),
                'npesos'   : '$ {:,.2f}'.format(neta_pesos),
                'ndolares'   : '$ {:,.2f}'.format(neta_dolares),
                'grupo': int(group_by),
                'tipo_reporte': tipo_reporte,
                'email_org':info_org['email'],
                'phone_org':info_org['phone'],
                'webpage_org':info_org['webpage'],
                'address_org':info_org['address'],
                'urlname_org':info_org['name'],
            }   
            obj['columns'] = columns
            obj['imagen'] = archivo_imagen
            obj['registros'] = len(agrupacion) 
            obj['typeReport'] = 2
            r = requests.post(settings.SERVICEEXCEL_URL + 'get-cobranzaAgrupadoExcelReporte/', obj,
            # headers = {
            # 'Authorization':'Bearer %s'%request.user.user_info.fi_token_refresh,
            # # 'Content-Type':'application/json' 
            # }, 
            stream=True)
            response_data= r.text

            response = HttpResponse(r.content,content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')
            return response
        # ---------report service excel----    
    elif excel_type == 2:
        verReferenciadores = is_perm_ver_referenciadores(request)  
        tipo_reporte = 'Reporte Endosos'
        columns = ['Tipo', 'No.Endoso', 'Contratante', 'Email', 'Teléfono', 'Proveedor', 'Subramo', 'Forma de Pago', 'Estatus', 
                 'Inicio Póliza', 'Fin Póliza', 'Moneda', 'Prima Neta', 'RPF', 'Derecho', 'IVA', 'Prima Total', 'Comisión',
                 'Clave', 'Asegurado', 'Descripción', 'Referenciador', 'Fecha de creación', 'Creado por','Folio Interno',
                 'Identificador Póliza/Fianza','Responsable','Ejecutivo Cobranza','Ramo','Tipo de endoso','Sucursal','Grupo',
                 'Número de Póliza','Subgrupo','Subsubgrupo','Agrupación','Subagrupación','Subsubagrupación','Clasificación',
                 'Línea de Negocio','Célula','Folio_Aseguradora','Seguimiento','Estado Póliza','Referenciador','ID_SAAM']

        # ORDEN
        try :
            columns = request.data['cols1']
        except Exception as e:
            pass
        info_org = getInfoOrg(request)
        if len(info_org['logo']) != 0:
            archivo_imagen = 'https://miurabox-public.s3.amazonaws.com/cas/' + info_org['logo']
            # archivo_imagen = get_presigned_url("cas/{url}".format(url=info_org['logo']),28800) 
        else:
                archivo_imagen = 'saam.jpg'

        columns.append('Concepto')
        columns.append('Archivos')
        columns.append('Nombre de tarea')
        columns.append('Asignado a la tarea')
        if not 'Seguimiento' in columns:
            columns.append('Seguimiento')
        if not 'Referenciador' in columns:
            columns.append('Referenciador')
        if not 'Estado Póliza' in columns:
            columns.append('Estado Póliza')
        if not 'ID_SAAM' in columns:
            columns.append('ID_SAAM')
            
        if verReferenciadores==False or verReferenciadores=='False':
            if 'Referenciador' in columns:
                columns.remove('Referenciador')
        
        asegurado = []
        antiguedad = []
        referenciador = []
        creadopor = []
        dateRen = []
        otRen = []
        responsable = []
        collection = []
        contratante = []
        contratanteE = []
        contratanteP = []
        contratanteG = []
        clave = []
        cp = []
        subramo = []
        ramo = []
        company = []
        startV = []
        endV = []
        currency = []
        grupo1 = []
        grupo2 = []
        nivelAg = []
        grupo3 = []
        grupo4 = []
        clasifica = []
        businessLine = []
        celulaC =[] 
        numeros_tarea = []
        responsables_tarea = []
        has_files= []
        fc = 1
        folioInsurance =[]
        folioendoso =[]
        estadoPoliza =[]
        # paqueteramo__ramo_name        
        # endosos = endosos.order_by('policy__document_type','policy__contractor__full_name','policy__juridical__j_name','fianza__natural__full_name','fianza__juridical__j_name')
        endosos = endosos.order_by('policy__contractor__full_name', 'id')
        concepto = []
        seguimiento=[]
        status_poliza =[]
        for r in endosos:
            tab = ''
            statusr = ''
            try:
                if r.policy.document_type in [1,3,12]:
                    if r.status ==5:
                        tablero =PromotoriaTablero.objects.filter(org_name=r.org_name,is_active=True)#config
                        if tablero:                            
                            confTab = tablero[0].polizas_ots
                            try:
                                confTab = json.loads(confTab)
                            except Exception as eee:
                                confTab = confTab
                                try:
                                    confTab = eval(confTab)
                                except Exception as e:
                                    pass
                            for ind,y in enumerate(confTab):
                                if 'endoso' in y:
                                    if r.id in y['endoso']:
                                        tab=y['tablero']
                                        break
                        else:
                            tab= ''
                    else:
                        tab= ''
                else:
                    tab= ''
            except:
                tab=''
            seguimiento.append(tab)
            concept = ''
            comment = Comments.objects.filter(model = 10, id_model = r.id).values_list('pk', flat=True)
            task = Ticket.objects.filter(associated = r.id, model = 2, comment__in = list(comment))
            if task.exists():
                task = task.latest('id')
                numeros_tarea.append(task.title.replace(',',' '))
                responsables_tarea.append("%s %s"%(task.assigned.first_name, task.assigned.last_name))
            else:
                numeros_tarea.append('')
                responsables_tarea.append('')
            
            files = EndorsementFile.objects.filter(owner = r).count()
            if files > 0:
                has_files.append('Si')
            else:
                has_files.append('No')


            value = ''
            folI=''
            fc = 1
            inc=''
            fn=''
            businessLine_ = ''
            if r.policy:
                if r.policy.document_type ==7 or r.policy.document_type ==8:
                    concept = checkConceptEndoso(int(r.concept))
                elif r.policy.document_type ==1:
                    if r.concept==3 or r.concept==29:
                        if r.other_desc:
                            od =((((((r.other_desc).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')   
                        else:
                            od=''
                        concept =  checkcEndoso(int(r.concept))+'//'+str(od)
                    else:
                        if r.policy.subramo and r.policy.subramo.subramo_code ==9:
                            if r.concept ==9:
                                concept='CAMBIO DE ADAPTACIONES'
                            else:
                                concept = checkcEndoso(int(r.concept))
                        elif r.policy.ramo==3 and r.policy.subramo.subramo_code !=9:
                            if r.concept ==9:
                                concept='CAMBIO DE RIESGO ASEGURADO'
                            else:
                                concept = checkcEndoso(int(r.concept))
                        
                        else:
                            concept = checkcEndoso(int(r.concept))
                elif r.policy.document_type ==3:
                    if r.concept==3 or r.concept==29:
                        if r.other_desc:
                            od =((((((r.other_desc).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')   
                        else:
                            od=''
                        concept =  checkcEndosoC(int(r.concept))+'//'+str(od)
                    else:
                        concept = checkcEndosoC(int(r.concept))
                else:
                    if r.concept==3 or r.concept==29:
                        if r.other_desc:
                            od =((((((r.other_desc).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')   
                        else:
                            od=''
                        concept =  checkcEndoso(int(r.concept))+'//'+str(od)
                    else:
                        concept = checkcEndoso(int(r.concept))
                if r.policy.address:
                   pc = r.policy.address.postal_code
                else:
                   pc = ''
            else:
                pc = ''
            antig = get_antiguedad(r.init_date)
            if r.owner:
                val_owner = r.owner.first_name + ' '+ str(r.owner.last_name)
            else:
                val_owner = ''
            if r.policy:                 
                statusr = checkStatusPolicy(r.policy.status)
                valR = False
                if OldPolicies.objects.filter(base_policy__id = r.policy.id, new_policy__status = 1).exists():
                    valR = True
                if r.org_name == 'ancora':
                    if r.policy.status==13 and r.policy.is_renewable==1 or (r.policy.renewed_status ==2 and r.policy.status ==13):
                        statusr = statusr+' -En Proceso de Renovación'
                if r.policy.business_line:
                    if int(r.policy.business_line) ==1:
                        businessLine_ = 'Comercial'
                    elif int(r.policy.business_line) ==2:
                        businessLine_ = 'Personal'
                    elif int(r.policy.business_line) ==0:
                        businessLine_ = 'Otro'
                    else:
                        businessLine_ = ''
                else:
                    businessLine_ = ''
                try:               
                    inc = r.policy.start_of_validity.strftime("%d/%m/%Y")
                    fn =r.policy.end_of_validity.strftime("%d/%m/%Y")
                except Exception as f:
                    inc =''
                    fn = ''
                if r.policy.responsable:
                    val_resp = r.policy.responsable.first_name + ' '+ str(r.policy.responsable.last_name)
                else:
                    val_resp = ''
                if r.policy.aseguradora:
                    cmpa = r.policy.aseguradora.alias
                else:
                    cmpa = ''
                if r.policy.subramo:
                    sra = r.policy.subramo.subramo_name
                else:
                    sra = ''
                if r.policy.ramo:
                    ra = r.policy.ramo.ramo_name
                else:
                    ra = ''
                if r.policy.collection_executive:
                    cllection = r.policy.collection_executive.first_name +' '+str(r.policy.collection_executive.last_name)
                else:
                    cllection = ''
                fc = r.policy.f_currency
                if r.policy.clave:
                    try:
                        cve = r.policy.clave.name + ' '+ str(r.policy.clave.clave)
                        cve = ((((((cve).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    except Exception as er:
                        cve =''
                else:
                    cve = ''
                if r.policy.contractor:
                    contratan = ((((((r.policy.contractor.full_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    contratanE = r.policy.contractor.email
                    contratanP = r.policy.contractor.phone_number
                    # contratanG = r.policy.contractor.group.group_name
                    # contratanG = ((((((r.policy.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    # --------
                    if r.policy.contractor.classification:
                        clasifica_ = r.policy.contractor.classification.classification_name  
                    else:
                        clasifica_='-----'
                    if r.policy.celula:
                        cel = r.policy.celula.celula_name  
                    else:
                        cel='-----'
                    try:
                        if r.policy.contractor.group.type_group == 1:
                            contratanG = ((((((r.policy.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                            grupo1_ = ''
                            grupo2_ = ''
                        elif r.policy.contractor.group.type_group == 2:
                            grupotype1 = Group.objects.get(pk = r.policy.contractor.group.parent.id)
                            contratanG = ((((((grupotype1.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                            grupo1_ = ((((((r.policy.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                            grupo2_ = ''
                        elif r.policy.contractor.group.type_group == 3:
                            grupotype1 = Group.objects.get(pk = r.policy.contractor.group.parent.parent.id)
                            contratanG = ((((((grupotype1.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                            subgrupotype2 = Group.objects.get(pk = r.policy.contractor.group.parent.id)
                            grupo1_ = ((((((subgrupotype2.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                            grupo2_ = ((((((r.policy.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    except Exception as e:
                        contratanG = ''
                        grupo1_ = ''
                        grupo2_ = ''
                    try:
                        nivelAg_ = ''
                        grupo3_ = ''
                        grupo4_ = ''  
                        if r.policy.document_type==12:
                            if r.policy.parent.groupinglevel:
                                if r.policy.parent.groupinglevel.type_grouping == 1:
                                    nivelAg_ = ((((((r.policy.parent.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                    grupo3_ = ''
                                    grupo4_ = ''
                                elif r.policy.parent.groupinglevel.type_grouping == 2:
                                    grupotype1 = GroupingLevel.objects.get(pk = r.policy.parent.groupinglevel.parent.id)
                                    nivelAg_ = ((((((grupotype1.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                    grupo3_ = ((((((r.policy.parent.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                    grupo4_ = ''
                                elif r.policy.parent.groupinglevel.type_grouping == 3:
                                    grupotype1 = GroupingLevel.objects.get(pk = r.policy.parent.groupinglevel.parent.parent.id)
                                    nivelAg_ = ((((((grupotype1.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                    subgrupotype2 = GroupingLevel.objects.get(pk = r.policy.parent.groupinglevel.parent.id)
                                    grupo3_ = ((((((subgrupotype2.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                    grupo4_ = ((((((r.policy.parent.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                            else:
                                nivelAg_ = ''
                                grupo3_ = ''
                                grupo4_ = ''  
                        else:
                            if r.policy.groupinglevel:
                                if r.policy.groupinglevel.type_grouping == 1:
                                    nivelAg_ = ((((((r.policy.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                    grupo3_ = ''
                                    grupo4_ = ''
                                elif r.policy.groupinglevel.type_grouping == 2:
                                    grupotype1 = GroupingLevel.objects.get(pk = r.policy.groupinglevel.parent.id)
                                    nivelAg_ = ((((((grupotype1.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                    grupo3_ = ((((((r.policy.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                    grupo4_ = ''
                                elif r.policy.groupinglevel.type_grouping == 3:
                                    grupotype1 = GroupingLevel.objects.get(pk = r.policy.groupinglevel.parent.parent.id)
                                    nivelAg_ = ((((((grupotype1.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                    subgrupotype2 = GroupingLevel.objects.get(pk = r.policy.groupinglevel.parent.id)
                                    grupo3_ = ((((((subgrupotype2.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                    grupo4_ = ((((((r.policy.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                            else:
                                nivelAg_ = ''
                                grupo3_ = ''
                                grupo4_ = ''  
                    except Exception as e:
                        print('errorr',e)
                        nivelAg_ = ''
                        grupo3_ = ''
                        grupo4_ = ''
                        # ------------
                else:
                    contratan = ''
                    contratanE = ''
                    contratanP = ''
                    clasifica_='-----'
                    cel='-----'
                    contratanG = ''
                    grupo1_ = ''
                    grupo2_ = ''
                    nivelAg_ = ''
                    grupo3_ = ''
                    grupo4_ = ''
                    # ------------
                if r.policy.ramo.ramo_code == 1:
                    form = Life.objects.filter(policy = r.policy.id)
                    try:
                        if form:
                            value = form[0].personal.full_name
                        else:
                            value = ''
                    except Exception as rt:
                       value = ''
                elif r.policy.ramo.ramo_code == 2:
                    form = AccidentsDiseases.objects.filter(policy = r.policy.id)
                    if form:
                        value = form[0].personal.full_name
                    else:
                        value = ''
                elif r.policy.subramo.subramo_code == 9:
                    form = AutomobilesDamages.objects.filter(policy = r.policy.id)
                    if form:
                        try:
                            form[0].model = ((((((form[0].model).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                            form[0].version = ((((((form[0].version).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        except Exception as ers:
                            form[0].model = form[0].model
                            form[0].version = form[0].version
                        value = str(form[0].brand) + '-' + str(form[0].model) + '-' + str(form[0].version)+ '-' + str(form[0].serial)
                    else:
                        value = ''
                elif r.policy.ramo.ramo_code == 3 and not r.policy.subramo.subramo_code == 9:
                    form = Damages.objects.filter(policy = r.policy.id)
                    if form:
                        value = form[0].insured_item
                    else:
                        value = ''
            else:
                val_resp = ''
                contratan =''
                contratanE =''
                contratanP = ''
                contratanG = ''
            try:
                refs_policy = ReferenciadoresInvolved.objects.filter(policy = r.policy.id,is_changed=False).values_list('referenciador__first_name','referenciador__last_name')
                if len(refs_policy):
                    v = []
                    try:
                        for it in refs_policy:
                            v.append(it[0] +' '+ str(it[1])+str('; '))
                        referenc = v
                    except Exception as y:
                        referenc = []
                else:
                    referenc = []
            except Exception as e:
                referenc = []
            if value:
                value = ((((((value).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'') 
            else:
                value = value
            folI = r.insurancefolio
            if folI:
                folI = ((((((folI).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'') 
            else:
                folI = folI
            folend = r.internal_number
            if folend:
                folend = ((((((folend).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'') 
            else:
                folend = folend


            asegurado.append(value)
            referenciador.append(referenc)
            antiguedad.append(antig)
            creadopor.append(val_owner)
            contratante.append(contratan)
            contratanteE.append(contratanE)
            contratanteP.append(contratanP)
            contratanteG.append(contratanG)
            responsable.append(val_resp)
            clave.append(cve)
            company.append(cmpa)
            subramo.append(sra)
            ramo.append(ra)
            collection.append(cllection)
            startV.append(inc)
            endV.append(fn)
            currency.append(fc)
            # ---
            grupo1.append(grupo1_)
            grupo2.append(grupo2_)
            nivelAg.append(nivelAg_)
            grupo3.append(grupo3_)
            grupo4.append(grupo4_)
            clasifica.append(clasifica_)
            celulaC.append(cel)
            businessLine.append(businessLine_)
            folioInsurance.append(folI)
            folioendoso.append(folend)
            concepto.append(concept)
            status_poliza.append(statusr)

        obj = {
            'document_type'   : str(list(endosos.values_list('policy__document_type', flat = True))),
            'poliza_number'   : str(list(endosos.values_list('policy__poliza_number', flat = True))),
            'contratante'   : str(list(contratante)),
            'collection'   : str(list(collection)),
            'contratanteE'   : str(list(contratanteE)),
            'contratanteP'   : str(list(contratanteP)),
            'seguimiento'   : str(list(seguimiento)),
            'hasFiles'   : str(list(has_files)),
            'contratanteG'   : str(list(contratanteG)),
            'aseguradora'   : str(list(company)),
            'subramo'   : str(list(subramo)),
            'ramo'   : str(list(ramo)),
            'concepto'   : str(list(concepto)),
            'numeros_tarea'   : str(list(numeros_tarea)),
            'responsables_tarea'   : str(list(responsables_tarea)),
            'forma_de_pago'   : str(list(endosos.values_list('policy__forma_de_pago', flat = True))),
            'identificador'   : str(list([(((((((x).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')) if x else '' for x in endosos.values_list('policy__identifier', flat = True)])),    
            'numEndoso'   : str(list([(((((((x).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')) if x else '' for x in endosos.values_list('number_endorsement', flat = True)])),    
            'observations'   : str(list(endosos.values_list('observations', flat = True))),
            'internal_number'   : str(list(endosos.values_list('internal_number', flat = True))),
            'status'   : str(list(status_poliza)),
            'status_e'   : str(list(endosos.values_list('status', flat = True))),
            'start_of_validity'   : str(list(startV)) ,
            'end_of_validity'   : str(list(endV)),
            'f_currency'   : str(list(currency)),
            'p_neta'   : str(list(endosos.values_list('p_neta', flat = True))),
            'rpf'   : str(list(endosos.values_list('rpf', flat = True))),
            'derecho'   : str(list(endosos.values_list('derecho', flat = True))),
            'iva'   : str(list(endosos.values_list('iva', flat = True))),
            'p_total'   : str(list(endosos.values_list('p_total', flat = True))),
            'comision'   : str(list(endosos.values_list('comision', flat = True))),
            'endorsement_type'   : str(list(endosos.values_list('endorsement_type', flat = True))),
            'clave'   : str(list(clave)),
            '_id'   : str(list(endosos.values_list('id', flat = True))),
            'descripcion'   : str(list([(((((((x).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')) if x else '' for x in endosos.values_list('observations', flat = True)])),
            'created_at'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in endosos.values_list('created_at', flat = True) ]))  ,
            'initdate'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in endosos.values_list('init_date', flat = True) ]))  ,
            'sucursal__sucursal_name'   : str(list(endosos.values_list('policy__sucursal__sucursal_name', flat = True))),
            'ramo': str(list(ramo)),
            'cp': str(list(cp)),
            'dateRen'   : str(list(dateRen)),
            'otRen'   : str(list(otRen)),
            'asegurado'   : str(list(asegurado)),
            'referenciador'   : str(list(referenciador)),
            'antiguedad'   : str(list(antiguedad)),
            'creadopor'   : str(list(creadopor)),
            'responsable'   : str(list(responsable)),        
            'grupo1'   : str(list(grupo1)) ,
            'grupo2'   : str(list(grupo2)) ,
            'nivelAg'   : str(list(nivelAg)) ,
            'grupo3'   : str(list(grupo3)) ,
            'grupo4'   : str(list(grupo4)) ,
            'clasifica'   : str(list(clasifica)) ,
            'celula'   : str(list(celulaC)) ,
            'businessLine'   : str(list(businessLine)) ,
            'insuranceFolio'   : str(list(folioInsurance)) ,
            'folioendoso'   : str(list(folioendoso)) ,
            'tipo_reporte': tipo_reporte,
            'email_org':info_org['email'],
            'phone_org':info_org['phone'],
            'webpage_org':info_org['webpage'],
            'address_org':info_org['address'],
            'urlname_org':info_org['name'],
            'campo_celula':campo_celula,
            'campo_agrupacion':campo_agrupacion,
            'campo_lineanegocio':campo_lineanegocio
            } 
        obj['columns'] = str(list(columns))
        obj['imagen'] = archivo_imagen
        obj['registros'] = len(endosos)
        obj['moduleName']=moduleName
        if campo_lineanegocio == 'False' or campo_lineanegocio == False:
            if 'businessLine' in obj:
                del obj['businessLine'] 
        if campo_celula == 'False' or campo_celula == False:
            if 'celula' in obj:
                del obj['celula'] 
        if campo_agrupacion == 'False' or campo_agrupacion == False:
            if 'nivelAg' in obj:
                del obj['nivelAg'] 
            if 'grupo3' in obj:
                del obj['grupo3'] 
            if 'grupo4' in obj:
                del obj['grupo4'] 
        r = requests.post(settings.SERVICEEXCEL_URL + 'get-endososExcelReporte/', obj,
        # headers = {
        # 'Authorization':'Bearer %s'%request.user.user_info.fi_token_refresh,
        # # 'Content-Type':'application/json' 
        # }, 
        stream=True)
        response_data= r.text

        response = HttpResponse(r.content,content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

        return response

# Reporte Pólizas Reporte
@api_view(['POST'])
@permission_classes((IsAuthenticatedV2, RenovacionesReportesPermissionsV2, IsOrgMemberV2))
def Service_ReportePolizasExcel(request): 
    request.query_params._mutable = True
    post = request.data.copy() # to make it mutable
    post['org'] = request.GET.get('org')
    post['token'] = request.META['HTTP_AUTHORIZATION'].replace('Bearer ', '')
    post['cols1'] = str(request.data['cols1'] if 'cols1' in request.data else [])
    post['cols'] = str(request.data['cols1'] if 'cols1' in request.data else [])
    post['ramos'] = str(request.data['ramos'])
    post['subramos'] = str(request.data['subramos'])
    post['providers'] = str(request.data['providers'])
    post['status'] = str(request.data['status'])
    post['users'] = str(request.data['users'])
    try:
        ui = UserInfo.objects.get(user= request.user)
        perfil = None
        try:
            if ui.perfil_restringido:
                perfil = PerfilUsuarioRestringido.objects.get(pk = ui.perfil_restringido.id)
            else:
                perfil = None
        except Exception as ert:
            perfil = None
    except Exception as er:
        perfil = None
    post['user_req'] = request.user   
    post['user'] = perfil.id if perfil else None
    verReferenciadores = is_perm_ver_referenciadores(request)  
    post['verReferenciadores'] = verReferenciadores 

    if request.GET.get('org') == 'ancora':
        url = settings.SERVICEEXCEL_ANCORA_URL
    else:
        url = settings.SERVICEEXCEL_2_URL
    r = requests.post(
        url + 'reporte-polizas-asincrono/', 
        headers={'Authorization': request.META['HTTP_AUTHORIZATION']}, 
        data = post, 
        stream=True)
    

    return Response(r.text, status = r.status_code)

# Reporte Siniestros Reporte

@api_view(['POST'])
@permission_classes((IsAuthenticatedV2, RenovacionesReportesPermissionsV2, IsOrgMemberV2))
def Service_ReporteSiniestrosExcel(request):
    # import time
    # start_time = time.time()
    # --------Parámetros----
    contratante = request.data['contratante']
    type_contractor = request.data['type_contractor']
    aseguradora = int(request.data['provider']) 
    ramo = int(request.data['ramo'])
    subramo = int(request.data['subramo'])
    status = int(request.data['status'])
    order = int(request.data['order'])
    asc = int(request.data['asc'])
    report = int(request.data['report'])
    since = request.data['since']
    until = request.data['until']
    ramos_sel = (request.data['ramos'])
    subramos_sel = (request.data['subramos'])
    providers_sel = (request.data['providers'])
    users_sel = (request.data['users'])
    group_by = request.data['group_by']
    num_poliza = request.data['num_poliza']
    bsLine = request.data['businessLine']
    celula = request.data['celula']
    excel_type = request.data['export_type'] if 'export_type' in request.data else 2
    try:
        onlyCaratula = request.data['only_caratula']
    except:
        onlyCaratula = 0

    if int(ramo) > 0 :
        ramo = list(Ramos.objects.filter(pk = int(ramo)).values_list('pk', flat=True))
    else:
        ramo = list(Ramos.objects.filter(org_name = request.GET.get('org')).values_list('pk', flat=True))
    
    if int(subramo) > 0 :
        subramo = list(SubRamos.objects.filter(pk = int(subramo)).values_list('pk', flat=True))
    else:
        subramo = list(SubRamos.objects.filter(org_name = request.GET.get('org'), ramo__in = ramo).values_list('pk', flat=True))
            
    if aseguradora == 0:
        aseguradora = list(Provider.objects.filter(org_name = request.GET.get('org')).values_list('pk', flat=True))
    else:
        aseguradora = [aseguradora]

    # Provider sel----
    if (providers_sel):
        aseguradora = list(Provider.objects.filter(pk__in = (providers_sel)).values_list('pk', flat=True))
    else:
        aseguradora = list(Provider.objects.filter(org_name = request.GET.get('org')).values_list('pk', flat=True))
    # ramos_selected----
    if (ramos_sel):
        ramo = list(Ramos.objects.filter(org_name = request.GET.get('org'), provider__in = aseguradora,ramo_code__in=ramos_sel).values_list('pk', flat=True))
    else:
        ramo = list(Ramos.objects.filter(org_name = request.GET.get('org'), provider__in = aseguradora).values_list('pk', flat=True))

    # rsubramos_sel----
    if (subramos_sel):
        subramo = list(SubRamos.objects.filter(org_name = request.GET.get('org'), ramo__in = ramo,subramo_code__in= subramos_sel).values_list('pk', flat=True))
    else:
        subramo = list(SubRamos.objects.filter(org_name = request.GET.get('org'), ramo__in = ramo).values_list('pk', flat=True))   
    # users sel----
    if (users_sel):
        users = list(User.objects.filter(pk__in = (users_sel)).values_list('pk', flat=True))
    else:
        users = list(User.objects.values_list('pk', flat=True))

    
    try:
      f = "%d/%m/%Y %H:%M:%S"        
      since = datetime.strptime(since , f)
      until = datetime.strptime(until , f)
    except:
      f = "%m/%d/%Y %H:%M:%S"        
      since = datetime.strptime(since , f)
      until = datetime.strptime(until , f)

    if report == 2:
        date_filters = [Q(updated_at__gte=since),Q(updated_at__lte = until)]
    else:
        date_filters = [Q(fecha_siniestro__gte=since),Q(fecha_siniestro__lte = until)]

    if status != 0:
        sinisters = Siniestros.objects.filter(reduce(operator.and_, date_filters)).filter(status = status, org_name=request.GET.get('org'))
    else:
        sinisters = Siniestros.objects.filter(reduce(operator.and_, date_filters)).filter(org_name=request.GET.get('org'))

        
    siniestros_polizas = list(sinisters.values_list('poliza__id', flat = True))
    polizas = Polizas.objects.filter(id__in = siniestros_polizas).filter((Q(ramo__in = ramo) | Q(parent__parent__parent__ramo__in = ramo)),
                                    (Q(subramo__in = subramo) | Q(parent__parent__parent__subramo__in = subramo)), 
                                    (Q(aseguradora__in = aseguradora) | Q(parent__parent__parent__aseguradora__in = aseguradora)), 
                                    document_type__in = list([1,3,6,11,12]), org_name = request.GET.get('org'))

    if num_poliza:
        polizas = polizas.filter((Q(poliza_number__icontains = num_poliza) | Q(certificate_number__icontains = num_poliza)))

    if int(contratante) > 0 :
        contratanten = list( Contractor.objects.filter(pk = int(contratante)).values_list('pk', flat = True))
        polizas = polizas.filter(contractor__in = contratanten)

    if int(celula) > 0:
        polizas = polizas.filter(celula = celula)
    if int(onlyCaratula) != 0:
        polizas = polizas.filter(Q(id=onlyCaratula) | Q(parent__id=onlyCaratula), document_type__in = list([11,12]))
    else:
        polizas = polizas
    try:
        dataToFilter = getDataForPerfilRestricted(request, request.GET.get('org'))
    except Exception as er:
        dataToFilter = {}
    if dataToFilter:
        # Contratantes***
        polizasCl = Polizas.objects.filter(document_type__in = [1,3,11,7,8,12,6,4], org_name = request.GET.get('org'))
        polizasToF = Polizas.objects.filter(document_type__in = [1,3,11,7,8], org_name = request.GET.get('org'))
        if dataToFilter['ccpr']:
            polizasToF = polizasToF.filter(contractor__in = list(dataToFilter['ccpr']))
        if dataToFilter['cgpr']:
            polizasToF = polizasToF.filter(contractor__group__in = list(dataToFilter['cgpr']))
        if dataToFilter['ccepr']:
            polizasToF = polizasToF.filter(contractor__cellule__in = list(dataToFilter['ccepr']))
        if dataToFilter['crpr']:
            polizasToF = polizasToF.filter(contractor__vendor__in = list(dataToFilter['crpr']))
        if dataToFilter['cspr']:
            polizasToF = polizasToF.filter(contractor__sucursal__in = list(dataToFilter['cspr']))
        # Pólizas ****
        if dataToFilter['pppr']:
            polizasToF = polizasToF.filter(pk__in = list(dataToFilter['pppr']))
        if dataToFilter['pgpr']:
            polizasToF = polizasToF.filter(contractor__group__in = list(dataToFilter['pgpr']))
        if dataToFilter['pcepr']:
            polizasToF = polizasToF.filter(celula__in = list(dataToFilter['pcepr']))
        if dataToFilter['prpr']:
            polizasToF = polizasToF.filter(ref_policy__referenciador__in = list(dataToFilter['prpr']))
        if dataToFilter['pspr']:
            polizasToF = polizasToF.filter(sucursal__in = list(dataToFilter['pspr']))
        if dataToFilter['papr']:
            polizasToF = polizasToF.filter(groupinglevel__in = list(dataToFilter['papr']))
        if dataToFilter['pcapr']:
            polizasToF = polizasToF.filter(clave__in = list(dataToFilter['pcapr']))
        if dataToFilter['psrpr']:
            polizasToF = polizasToF.filter(subramo__subramo_code__in = list(dataToFilter['psrpr']))
        if dataToFilter['paspr']:
            polizasToF = polizasToF.filter(aseguradora__in = list(dataToFilter['paspr']))
        if dataToFilter['pstpr']:
            polizasToF = polizasToF.filter(status__in = list(dataToFilter['pstpr']))
        
        polizasCT = polizasCl.filter(document_type = 12, parent__in = list(polizasToF))
        polizasGT = polizasCl.filter(document_type = 6, parent__parent__parent__in = list(polizasToF))
        polizasFin = list(polizasToF.values_list('pk', flat = True)) + list(polizasCT.values_list('pk', flat = True)) + list(polizasGT.values_list('pk', flat = True))
        polizas = polizas.filter(pk__in = list(polizasFin))
    # Certs fin
    if order == 1:
        if asc == 1:
            sinisters = Siniestros.objects.filter(owner__in = users,poliza__in = list(polizas),org_name=request.GET.get('org')).order_by('numero_siniestro')
        else:
            sinisters = Siniestros.objects.filter(owner__in = users,poliza__in = list(polizas),org_name=request.GET.get('org')).order_by('-numero_siniestro')

    elif order == 2:
        if asc == 1:
            sinisters = Siniestros.objects.filter(owner__in = users,poliza__in = list(polizas),org_name=request.GET.get('org')).order_by('status')
        else:
            sinisters = Siniestros.objects.filter(owner__in = users,poliza__in = list(polizas),org_name=request.GET.get('org')).order_by('-status')
      
    elif order == 3:
        if asc == 1:
            sinisters = Siniestros.objects.filter(owner__in = users,poliza__in = list(polizas),org_name=request.GET.get('org')).order_by('fecha_siniestro')
        else:
            sinisters = Siniestros.objects.filter(owner__in = users,poliza__in = list(polizas),org_name=request.GET.get('org')).order_by('-fecha_siniestro')
  
    elif order == 4:
        if asc == 1:
            sinisters = Siniestros.objects.filter(owner__in = users,poliza__in = list(polizas),org_name=request.GET.get('org')).order_by('fecha_ingreso')
        else:
            sinisters = Siniestros.objects.filter(owner__in = users,poliza__in = list(polizas),org_name=request.GET.get('org')).order_by('-fecha_ingreso')
  
    elif order == 5:
        if asc == 1:
            sinisters = Siniestros.objects.filter(owner__in = users,poliza__in = list(polizas),org_name=request.GET.get('org')).order_by('poliza__poliza_number')
        else:
            sinisters = Siniestros.objects.filter(owner__in = users,poliza__in = list(polizas),org_name=request.GET.get('org')).order_by('-poliza__poliza_number')

    elif order == 6:
        if asc == 1:
            sinisters = Siniestros.objects.filter(owner__in = users,poliza__in = list(polizas),org_name=request.GET.get('org')).order_by('poliza__contractor__full_name')
        else:
            sinisters = Siniestros.objects.filter(owner__in = users,poliza__in = list(polizas),org_name=request.GET.get('org')).order_by('-poliza__contractor__full_name')
  
    elif order == 7:
        if asc == 1:
            sinisters = Siniestros.objects.filter(owner__in = users,poliza__in = list(polizas),org_name=request.GET.get('org')).order_by('poliza__aseguradora__compania')
        else:
            sinisters = Siniestros.objects.filter(owner__in = users,poliza__in = list(polizas),org_name=request.GET.get('org')).order_by('-poliza__aseguradora__compania')

    elif order == 8:
        if asc == 1:
            sinisters = Siniestros.objects.filter(owner__in = users,poliza__in = list(polizas),org_name=request.GET.get('org')).order_by('poliza__ramo__ramo_name')
        else:
            sinisters = Siniestros.objects.filter(owner__in = users,poliza__in = list(polizas),org_name=request.GET.get('org')).order_by('-poliza__ramo__ramo_name')

    elif order == 9:
        if asc == 1:
            sinisters = Siniestros.objects.filter(owner__in = users,poliza__in = list(polizas),org_name=request.GET.get('org')).order_by('poliza__subramo__subramo_name')
        else:
            sinisters = Siniestros.objects.filter(owner__in = users,poliza__in = list(polizas),org_name=request.GET.get('org')).order_by('-poliza__subramo__subramo_name')

    elif order == 10:
        if asc == 1:
            sinisters = Siniestros.objects.filter(owner__in = users,poliza__in = list(polizas),org_name=request.GET.get('org')).order_by('observations')
        else:
            sinisters = Siniestros.objects.filter(owner__in = users,poliza__in = list(polizas),org_name=request.GET.get('org')).order_by('-observations')

    elif order == 11:
        if asc == 1:
            sinisters = Siniestros.objects.filter(owner__in = users,poliza__in = list(polizas),org_name=request.GET.get('org')).order_by('folio_interno')
        else:
            sinisters = Siniestros.objects.filter(owner__in = users,poliza__in = list(polizas),org_name=request.GET.get('org')).order_by('-folio_interno')
    elif order == 12:
        if asc == 1:
            sinisters = Siniestros.objects.filter(owner__in = users,poliza__in = list(polizas),org_name=request.GET.get('org')).order_by('accidente_sinister__total_reclamado')
        else:
            sinisters = Siniestros.objects.filter(owner__in = users,poliza__in = list(polizas),org_name=request.GET.get('org')).order_by('-accidente_sinister__total_reclamado')

    else:
        sinisters = Siniestros.objects.filter(owner__in = users,poliza__in = list(polizas),org_name=request.GET.get('org'))
    
    if int(bsLine) > 0:
        if int(bsLine) == 3:
            sinisters = sinisters.filter(poliza__business_line = 0) 
        else:
            sinisters = sinisters.filter(poliza__business_line = bsLine)


    if report == 2:
        date_filters = [Q(updated_at__gte=since),Q(updated_at__lte = until)]
    else:
        date_filters = [Q(fecha_siniestro__gte=since),Q(fecha_siniestro__lte = until)]

    if status != 0:
        sinisters = sinisters.filter(reduce(operator.and_, date_filters)).filter(status = status)
    else:
        sinisters = sinisters.filter(reduce(operator.and_, date_filters))


    if int(group_by) == 0:
        sinisters = sinisters
    else:
        try:
            sinisters_n = sinisters.filter(poliza__contractor__type_person =1)
            sinisters_j =  sinisters.filter(poliza__contractor__type_person =2)
            if group_by == 1:
                prueba = sinisters.values('poliza__aseguradora__compania').annotate(Count('poliza__aseguradora__id')).order_by('poliza__aseguradora__id')
            elif group_by == 2:
                prueba = sinisters.values('poliza__ramo__ramo_name').annotate(Count('poliza__ramo')).order_by('poliza__ramo__ramo_name')
            elif group_by == 3:
                prueba = sinisters.values('poliza__subramo__subramo_name').annotate(Count('poliza__subramo')).order_by('poliza__subramo__subramo_name')
            elif group_by == 4:
                prueba = {}
                prueba_n = sinisters_n.values('poliza__contractor__group__group_name').annotate(Count('poliza__contractor__group')).order_by('poliza__contractor__group__group_name')
                prueba_j = sinisters_j.values('poliza__contractor__group__group_name').annotate(Count('poliza__contractor__group')).order_by('poliza__contractor__group__group_name')
                prueba['naturals'] = prueba_n
                prueba['juridicals'] = prueba_j
            elif group_by == 5:
                prueba = sinisters.values('poliza__vendor__first_name', 'poliza__vendor__last_name').annotate(Count('poliza__vendor')).order_by('poliza__vendor')
                prueba_x = sinisters.values('poliza__vendor__first_name', 'poliza__vendor__last_name','poliza__ref_policy__referenciador__first_name','poliza__ref_policy__referenciador__last_name').annotate(Count('poliza__vendor'),Count('poliza__ref_policy__referenciador__id')).order_by('poliza__vendor','poliza__ref_policy__id')
                try:
                    z = 0
                    for x in prueba_x:
                        if x['poliza__vendor__first_name'] == None:
                            x['poliza__vendor__first_name'] = x['poliza__ref_policy__referenciador__first_name']
                            x['poliza__vendor__last_name'] = x['poliza__ref_policy__referenciador__last_name']
                            x['poliza__vendor__count'] = x['poliza__ref_policy__referenciador__id__count']            
                    
                except Exception as e:
                    pass

                prueba = prueba_x
            elif group_by == 7:
                prueba = sinisters.values('owner__first_name', 'owner__last_name').annotate(Count('owner')).order_by('owner')
            elif group_by == 6:
                prueba = sinisters.values('status').annotate(Count('status')).order_by('status')
        except Exception as e:
            pass

    # Empieza insertado de imagen
    info_org = getInfoOrg(request)
    if len(info_org['logo']) != 0:
      archivo_imagen = 'https://miurabox-public.s3.amazonaws.com/cas/' + info_org['logo']
        # archivo_imagen = get_presigned_url("cas/{url}".format(url=info_org['logo']),28800) 
    else:
      archivo_imagen = 'saam.jpg'

    tipo_reporte = "Reporte de siniestros del " + str(since.strftime("%d/%m/%y")) + " al " + str(until.strftime("%d/%m/%y"))
    
    campo_celula, campo_agrupacion, campo_lineanegocio, moduleName = getOrgInfo(request)
    if excel_type == 1:
        # Excel Servicio·····································································3
        prueba = {}
        row_num = 10
        rows = []
        rows_1 = []
        sinisters_n = sinisters.filter(poliza__contractor__type_person =1)
        sinisters_j = sinisters.filter(poliza__contractor__type_person =2)
        if group_by == 4:
            columns = ['Agrupación','Tipo Contratante', 'Registros']
        else:            
            columns = ['Agrupación', 'Registros']

        if group_by == 1 or group_by == 2 or group_by == 3 or group_by == 6:
            if group_by == 1:
                prueba = sinisters.values('poliza__aseguradora__compania').annotate(Count('poliza__aseguradora__id')).order_by('poliza__aseguradora__id')
                rows = prueba.values_list('poliza__aseguradora__compania', 'poliza__aseguradora__id__count')
                tipo_reporte = tipo_reporte + " por Aseguradora"
            elif group_by == 2:
                tipo_reporte = tipo_reporte + " por Ramo"
                prueba = sinisters.values('poliza__ramo__ramo_name').annotate(Count('poliza__ramo')).order_by('poliza__ramo__ramo_name')
                rows = prueba.values_list('poliza__ramo__ramo_name', 'poliza__ramo__count')
            elif group_by == 3:
                prueba = sinisters.values('poliza__subramo__subramo_name').annotate(Count('poliza__subramo')).order_by('poliza__subramo__subramo_name')            
                rows = prueba.values_list('poliza__subramo__subramo_name', 'poliza__subramo__count')
                tipo_reporte = tipo_reporte +  " por Subramo"
            elif group_by == 6:
                tipo_reporte = tipo_reporte + " por Estatus"
                prueba = sinisters.values('status').annotate(Count('status')).order_by('status')
                rows = prueba.values_list('status', 'status__count')
                rows1 = []
            agrupacion = []
            prima = []
            total = []
            comision = []
            moneda = []
            registrosA = []
            com_conciliada = []
            dolares = 0
            p = 0
            c_pesos = 0
            cc_pesos = 0
            c_dolares = 0
            cc_dolares = 0
            neta_pesos = 0
            neta_dolares = 0
            for row in rows:
                if row[0] != None:
                    row_num += 1
                    try:
                        ag = ((((((row[0]).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'') 
                    except Exception as dfg:
                        if group_by == 6:
                            ag = checkStatusSin(int(row[0]))
                        else:
                            ag = row[0]
                    regs = row[1]
                    # cc = row[5]
                    agrupacion.append(ag)
                    # prima.append(prn)
                    # total.append(tot)
                    # comision.append(com)
                    # moneda.append(mon)
                    registrosA.append(regs)
                    # com_conciliada.append(cc)
            obj = {                
                'agrupacion'   : str(list(agrupacion)),
                'prima'   : str(list(prima)),
                'total'   : str(list(total)),
                'comision'   : str(list(comision)),
                'moneda'   : str(list(moneda)),
                'registrosA'   : str(list(registrosA)),
                'com_conciliada'   : str(list(com_conciliada)),
                'dolares'   : '$ {:,.2f}'.format(dolares),
                'pesos'   : '$ {:,.2f}'.format(p),
                'cpesos'   : '$ {:,.2f}'.format(c_pesos),
                'cdolares'   : '$ {:,.2f}'.format(c_dolares),
                'ccpesos'   : '$ {:,.2f}'.format(cc_pesos),
                'ccdolares'   : '$ {:,.2f}'.format(cc_dolares),
                'npesos'   : '$ {:,.2f}'.format(neta_pesos),
                'ndolares'   : '$ {:,.2f}'.format(neta_dolares),
                'grupo': int(group_by),
                'tipo_reporte': tipo_reporte,
                'email_org':info_org['email'],
                'phone_org':info_org['phone'],
                'webpage_org':info_org['webpage'],
                'address_org':info_org['address'],
                'urlname_org':info_org['name'],
            }   
            obj['columns'] = columns
            obj['imagen'] = archivo_imagen
            obj['registros'] = len(agrupacion) 
            obj['typeReport'] = 2
            r = requests.post(settings.SERVICEEXCEL_URL + 'get-siniestroAgrupadoExcelReporte/', obj,
            # headers = {
            # 'Authorization':'Bearer %s'%request.user.user_info.fi_token_refresh,
            # # 'Content-Type':'application/json' 
            # }, 
            stream=True)
            response_data= r.text

            response = HttpResponse(r.content,content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')
            return response
        elif group_by == 4:           
            prueba = {}
            prueba_n = sinisters_n.values('poliza__contractor__group__group_name').annotate(Count('poliza__contractor__group')).order_by('poliza__contractor__group__group_name')
            prueba_j = sinisters_j.values('poliza__contractor__group__group_name').annotate(Count('poliza__contractor__group')).order_by('poliza__contractor__group__group_name')
            prueba['naturals'] = prueba_n
            prueba['juridicals'] = prueba_j
            rows = prueba['naturals'].values_list('poliza__contractor__group__group_name', 'poliza__contractor__group__count')
            rows_1 = prueba['juridicals'].values_list('poliza__contractor__group__group_name', 'poliza__contractor__group__count')
            tipo_reporte = tipo_reporte + " por Grupo"
            
            tipoContratante = []
            agrupacion = []
            prima = []
            total = []
            comision = []
            moneda = []
            registrosA = []
            com_conciliada = []
            for row in rows:
                if row[0] != None:                    
                    row_num += 1
                    try:
                        ag = ((((((row[0]).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'') 
                    except Exception as dfg:
                        ag = row[0]
                    tipoc = 'Naturales'                      
                    regs = row[1]
                    agrupacion.append(ag)
                    tipoContratante.append(tipoc)
                    # prima.append(prn)
                    # total.append(tot)
                    # comision.append(com)
                    # moneda.append(mon)
                    registrosA.append(regs)
                    # com_conciliada.append(cc)
            for row in rows_1:
                if row[0] != None:                    
                    row_num += 1
                    try:
                        ag = ((((((row[0]).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'') 
                    except Exception as dfg:
                        ag = row[0]
                    tipoc = 'Morales'                      
                    regs = row[1]
                    agrupacion.append(ag)
                    tipoContratante.append(tipoc)
                    # prima.append(prn)
                    # total.append(tot)
                    # comision.append(com)
                    # moneda.append(mon)
                    registrosA.append(regs)
                    # com_conciliada.append(cc)
            obj = {                
                'agrupacion'   : str(list(agrupacion)),
                'tipoContratante': str(list(tipoContratante)),
                'prima'   : str(list(prima)),
                'total'   : str(list(total)),
                'comision'   : str(list(comision)),
                'moneda'   : str(list(moneda)),
                'registrosA'   : str(list(registrosA)),
                'com_conciliada'   : str(list(com_conciliada)),                
                'tipo_reporte': tipo_reporte,
                'grupo': int(group_by),
                'email_org':info_org['email'],
                'phone_org':info_org['phone'],
                'webpage_org':info_org['webpage'],
                'address_org':info_org['address'],
                'urlname_org':info_org['name'],
            }   
            obj['columns'] = columns
            obj['imagen'] = archivo_imagen
            obj['registros'] = len(agrupacion) 
            obj['typeReport'] = 2
            r = requests.post(settings.SERVICEEXCEL_URL + 'get-siniestroAgrupadoExcelReporte/', obj,
            # headers = {
            # 'Authorization':'Bearer %s'%request.user.user_info.fi_token_refresh,
            # # 'Content-Type':'application/json' 
            # }, 
            stream=True)
            response_data= r.text

            response = HttpResponse(r.content,content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')
            return response
        elif group_by == 5:
            prueba = sinisters.values('poliza__vendor__first_name', 'poliza__vendor__last_name').annotate(Count('poliza__vendor')).order_by('poliza__vendor')
            rows = prueba.values_list('poliza__vendor__first_name', 'poliza__vendor__count','poliza__vendor__last_name')
            rows1 = []
            prueba_x = sinisters.values('poliza__ref_policy__referenciador__first_name','poliza__ref_policy__referenciador__last_name').annotate(Count('poliza__ref_policy__referenciador__id')).order_by('poliza__vendor','poliza__ref_policy__id')
            rows_pr = prueba_x.values_list('poliza__ref_policy__referenciador__first_name', 'poliza__ref_policy__referenciador__id__count','poliza__ref_policy__referenciador__last_name')
            tipo_reporte = tipo_reporte + " por Referenciador" 
            # -------
            tipoContratante = []
            agrupacion = []
            prima = []
            total = []
            comision = []
            moneda = []
            registrosA = []
            com_conciliada = []
            dolares = 0
            p = 0
            c_pesos = 0
            cc_pesos = 0
            c_dolares = 0
            cc_dolares = 0
            neta_pesos = 0
            neta_dolares = 0
            for row in rows:
                if row[0] != None:
                    row_num += 1
                    ag = row[0] + ' ' + str(row[2])
                    regs = row[1]
                    agrupacion.append(ag)
                    tipoContratante.append(tipoc)
                    registrosA.append(regs)
            for row_2 in rows_pr:
                if row_2[0] != None:
                    row_num += 1                    
                    ag = row_2[0] +' '+str(row_2[2])
                    regs = row_2[1]
                    agrupacion.append(ag)
                    registrosA.append(regs)
            
            obj = {                
                'agrupacion'   : str(list(agrupacion)),
                'tipoContratante': str(list(tipoContratante)),
                'prima'   : str(list(prima)),
                'total'   : str(list(total)),
                'comision'   : str(list(comision)),
                'moneda'   : str(list(moneda)),
                'registrosA'   : str(list(registrosA)),
                'tipo_reporte': tipo_reporte,
                'grupo': int(group_by),
                'email_org':info_org['email'],
                'phone_org':info_org['phone'],
                'webpage_org':info_org['webpage'],
                'address_org':info_org['address'],
                'urlname_org':info_org['name'],
            }   
            obj['columns'] = columns
            obj['imagen'] = archivo_imagen
            obj['registros'] = len(agrupacion) 
            obj['typeReport'] = 2
            r = requests.post(settings.SERVICEEXCEL_URL + 'get-siniestroAgrupadoExcelReporte/', obj,
            # headers = {
            # 'Authorization':'Bearer %s'%request.user.user_info.fi_token_refresh,
            # # 'Content-Type':'application/json' 
            # }, 
            stream=True)
            response_data= r.text

            response = HttpResponse(r.content,content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')
            return response
        elif group_by == 7:
            tipo_reporte = tipo_reporte + " por Usuario"
            prueba = sinisters.values('poliza__owner__first_name', 'poliza__owner__last_name').annotate(Count('poliza__owner')).order_by('poliza__owner')
            rows = prueba.values_list('poliza__owner__first_name', 'poliza__owner__count','poliza__owner__last_name')
            rows1 = []
           
            agrupacion = []
            prima = []
            total = []
            comision = []
            moneda = []
            registrosA = []
            com_conciliada = []
            dolares = 0
            p = 0
            c_pesos = 0
            cc_pesos = 0
            c_dolares = 0
            cc_dolares = 0
            neta_pesos = 0
            neta_dolares = 0
            for row in rows:
                if row[0] != None:
                    row_num += 1
                    ag = row[0]+ ' ' + str(row[2])  
                    regs = row[1]
                    agrupacion.append(ag)
                    registrosA.append(regs)       
            obj = {                
                'agrupacion'   : str(list(agrupacion)),
                'prima'   : str(list(prima)),
                'total'   : str(list(total)),
                'comision'   : str(list(comision)),
                'moneda'   : str(list(moneda)),
                'registrosA'   : str(list(registrosA)),
                'grupo': int(group_by),
                'tipo_reporte': tipo_reporte,
                'email_org':info_org['email'],
                'phone_org':info_org['phone'],
                'webpage_org':info_org['webpage'],
                'address_org':info_org['address'],
                'urlname_org':info_org['name'],
            }   
            obj['columns'] = columns
            obj['imagen'] = archivo_imagen
            obj['registros'] = len(agrupacion) 
            obj['typeReport'] = 2
            r = requests.post(settings.SERVICEEXCEL_URL + 'get-siniestroAgrupadoExcelReporte/', obj,
            # headers = {
            # 'Authorization':'Bearer %s'%request.user.user_info.fi_token_refresh,
            # # 'Content-Type':'application/json' 
            # }, 
            stream=True)
            response_data= r.text

            response = HttpResponse(r.content,content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')
            return response
        # ---------report service excel----
    elif excel_type == 2:
        columns = ['Afectado', 'No Siniestro', 'Folio', 'Estatus', 'No.Póliza', 'Tipo', 'Contratante', 
                   'Proveedor', 'Subramo', 'Ramo', 'Inicio Póliza', 'Fin Póliza', 'Fecha de creación', 
                   'Creado por', 'Versión','Marca','Modelo', 'Número de Serie', 
                   'Reclamado','Procedente','Deducible','Coaseguro','Total Final','Fecha de Ingreso','Fecha en que Ocurrio','Fecha Compromiso',
                   'Observaciones','Padecimiento','Tipo de Pago','Folio de la Aseguradora','Inicial / Complemento',
                   'Tipo de trámite','Referenciador','Grupo','Bitácora', 'Bitácora + Fecha','Subgrupo','Subsubgrupo','Agrupación',
                   'Subagrupación','Subsubagrupación','Clasificación','Línea de Negocio','Célula','Creado Por']
        try:
            columns = request.data['cols1']
        except:
            pass

        if 'Fecha Bitácora' in columns:
            columns.remove('Fecha Bitácora')
            columns.insert(25,'Fecha Bitácora')
        
        if not 'Bitácora + Fecha' in columns:
            columns.insert(26,'Bitácora + Fecha')
        if not 'Padecimiento' in columns:
            columns.insert(len(columns)+1,'Padecimiento')
        if 'Contratante' in columns:
            index = columns.index('Contratante')  # Find index
            columns.insert(index - 1, 'Tipo de Pago') 
        elif not 'Tipo de Pago' in columns:
            columns.insert(len(columns)+1,'Tipo de Pago')
        # Empieza insertado de imagen
        info_org = getInfoOrg(request)        
        verReferenciadores = is_perm_ver_referenciadores(request)
        if len(info_org['logo']) != 0:
          archivo_imagen = 'https://miurabox-public.s3.amazonaws.com/cas/' + info_org['logo']
            # archivo_imagen = get_presigned_url("cas/{url}".format(url=info_org['logo']),28800) 
        else:
          archivo_imagen = 'saam.jpg'
        tipo_reporte = "Reporte de Siniestros del " + str(since.strftime("%d/%m/%y")) + " al " + str(until.strftime("%d/%m/%y"))
           
        asegurado = []
        antiguedad = []
        referenciador = []
        creadopor = []
        dateRen = []
        otRen = []
        responsable = []
        contratante = []
        contratanteE = []
        contratanteP = []
        contratanteG = []
        collection = []
        clave = []
        version = []
        numero_serie = []
        padecimiento = []
        modelo = []
        marca = []
        cp = []
        paquete = []
        procedente = []
        comentario = []
        comentario_fecha = []
        comentario_mas_fecha = []
        reclamado = []
        pago = []
        tipoSiniestro = []
        valTipo = []  
        ti = ''
        vrs = ''
        mrc = ''
        mdl = ''
        pdc = ''
        total = ''
        recla = ''
        tipopago = ''
        tipo_siniestro = ''
        razon =[]
        currency = []
        fc = 1
        prov = []
        subr = []
        rm = []        
        grupo1 = []
        grupo2 = []
        nivelAg = []
        grupo3 = []
        grupo4 = []
        clasifica = []
        businessLine = []
        celulaC =[]
        deducible = []
        coaseguro = []
        totalfinal = []
        status_poliza = []
        tipopagosin=[]
        # sinisters = sinisters.order_by('poliza__contractor__full_name','poliza__juridical__j_name')
        sinisters = sinisters.order_by('id')
        # start_time = time.time()
        pnumber=[]
        for r in sinisters:
            tipop_sin=''
            aseg = ''
            subramo = ''
            ramo = ''
            ti = ''
            fc =1 
            vrs = ''
            mrc = ''
            mdl = ''
            pdc = ''
            total = ''
            recla = ''
            deduc = 0
            deduc = 0
            coaseg = 0
            totf = 0
            pnumb=''
            tipo_siniestro = ''
            try:
                comment_ = Comments.objects.filter(org_name=request.GET.get('org'), model = 5, id_model = r.id).exclude(content = None).order_by('created_at')
                if comment_.exists():
                    comment = comment_.last().content
                    comment = ((((((comment).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    comment_date = comment_.last().created_at
                    try:
                        xcdate = comment_date.strftime("%d/%m/%Y")
                    except:
                        xcdate = comment_date
                    comment2 = "%s - %s"%(comment, str(xcdate))
                else:
                    comment = 'Sin comentario'
                    comment_date = ''
                    comment2 = ''
            except Exception as errorr:
                comment = 'Sin comentario'
                comment_date = ''
                comment2 = ''
            if r.poliza.address:
               pc = r.poliza.address.postal_code
            else:
               pc = ''
            antig = get_antiguedad(r.fecha_siniestro)
            if r.owner:
                val_owner = r.owner.first_name + ' '+ str(r.owner.last_name)
            else:
                val_owner = ''
            if r.poliza.paquete:
                pac = r.poliza.paquete.package_name
            else:
                pac = ''
            if r.poliza.responsable:
                val_resp = r.poliza.responsable.first_name + ' '+ str(r.poliza.responsable.last_name)
            else:
                val_resp = ''
            if r.poliza.collection_executive:
                val_col = r.poliza.collection_executive.first_name + ' '+ str(r.poliza.collection_executive.last_name)
            else:
                val_col = ''
            if r.poliza.clave:
                try:
                    cve = r.poliza.clave.name + ' '+ str(r.poliza.clave.clave)
                    cve = ((((((cve).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                except Exception as er:
                    cve = ''
            else:
                cve = ''
            if r.poliza and r.poliza.poliza_number:
                pnumb=r.poliza.poliza_number
            else:
                pnumb=''
            if r.poliza.document_type == 6:
                if r.poliza.certificate_number:
                    pnumb=str(r.poliza.parent.parent.parent.poliza_number)+ ' - INC. ' + str(r.poliza.certificate_number)
                if r.poliza.parent.parent.parent.business_line:
                    if int(r.poliza.parent.parent.parent.business_line) ==1:
                        businessLine_ = 'Comercial'
                    elif int(r.poliza.parent.parent.parent.business_line) ==2:
                        businessLine_ = 'Personal'
                    elif int(r.poliza.parent.parent.parent.business_line) ==0:
                        businessLine_ = 'Otro'
                    else:
                        businessLine_ = ''
                else:
                    if int(r.poliza.parent.parent.parent.business_line) ==0:
                        businessLine_ = 'Otro'
                    else:
                        businessLine_ = ''
                try:
                    aseg = r.poliza.parent.parent.parent.aseguradora.alias
                    subramo = r.poliza.parent.parent.parent.subramo.subramo_name
                    ramo = r.poliza.parent.parent.parent.ramo.ramo_name
                except Exception as e:
                    aseg = ''
                    subramo = ''
                    ramo = ''
                fc =r.poliza.parent.parent.parent.f_currency 
                if r.poliza.parent.parent.parent.contractor:
                    contratan = ((((((r.poliza.parent.parent.parent.contractor.full_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    contratanE = r.poliza.parent.parent.parent.contractor.email
                    contratanP = r.poliza.parent.parent.parent.contractor.phone_number
                    # contratanG = r.poliza.parent.parent.parent.contractor.group.group_name
                    contratanG = ((((((r.poliza.parent.parent.parent.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    if r.poliza.parent.parent.parent.contractor.classification:
                        clasifica_ = r.poliza.parent.parent.parent.contractor.classification.classification_name  
                    else:
                        clasifica_='-----'
                    if r.poliza.parent.parent.parent.celula:
                        cel = r.poliza.parent.parent.parent.celula.celula_name  
                    else:
                        cel='-----'
                    try:
                        if r.poliza.parent.parent.parent.contractor.group.type_group == 1:
                            contratanG = ((((((r.poliza.parent.parent.parent.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                            grupo1_ = ''
                            grupo2_ = ''
                        elif r.poliza.parent.parent.parent.contractor.group.type_group == 2:
                            grupotype1 = Group.objects.get(pk = r.poliza.parent.parent.parent.contractor.group.parent.id)
                            contratanG = ((((((grupotype1.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                            grupo1_ = ((((((r.poliza.parent.parent.parent.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                            grupo2_ = ''
                        elif r.poliza.parent.parent.parent.contractor.group.type_group == 3:
                            grupotype1 = Group.objects.get(pk = r.poliza.parent.parent.parent.contractor.group.parent.parent.id)
                            contratanG = ((((((grupotype1.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                            subgrupotype2 = Group.objects.get(pk = r.poliza.parent.parent.parent.contractor.group.parent.id)
                            grupo1_ = ((((((subgrupotype2.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                            grupo2_ = ((((((r.poliza.parent.parent.parent.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    except Exception as e:
                        contratanG = ''
                        grupo1_ = ''
                        grupo2_ = ''
                    try:
                        if r.poliza.parent.parent.parent.groupinglevel:
                            if r.poliza.parent.parent.parent.groupinglevel.type_grouping == 1:
                                nivelAg_ = ((((((r.poliza.parent.parent.parent.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo3_ = ''
                                grupo4_ = ''
                            elif r.poliza.parent.parent.parent.groupinglevel.type_grouping == 2:
                                grupotype1 = GroupingLevel.objects.get(pk = r.poliza.parent.parent.parent.groupinglevel.parent.id)
                                nivelAg_ = ((((((grupotype1.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo3_ = ((((((r.poliza.parent.parent.parent.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo4_ = ''
                            elif r.poliza.parent.parent.parent.groupinglevel.type_grouping == 3:
                                grupotype1 = GroupingLevel.objects.get(pk = r.poliza.parent.parent.parent.groupinglevel.parent.parent.id)
                                nivelAg_ = ((((((grupotype1.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                subgrupotype2 = GroupingLevel.objects.get(pk = r.poliza.parent.parent.parent.groupinglevel.parent.id)
                                grupo3_ = ((((((subgrupotype2.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo4_ = ((((((r.poliza.parent.parent.parent.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        else:
                            nivelAg_ = ''
                            grupo3_ = ''
                            grupo4_ = ''  
                    except Exception as e:
                        nivelAg_ = ''
                        grupo3_ = ''
                        grupo4_ = ''
                        # ------------
                else:
                    contratan = ''
                    contratanE = ''
                    contratanP = ''
                    contratanG = ''
                    clasifica_='-----'
                    cel='-----'
                    contratanG = ''
                    grupo1_ = ''
                    grupo2_ = ''
                    nivelAg_ = ''
                    grupo3_ = ''
                    grupo4_ = ''                       
            else:
                try:
                    aseg = r.poliza.aseguradora.alias
                    subramo = r.poliza.subramo.subramo_name
                    ramo = r.poliza.ramo.ramo_name
                except Exception as e:
                    aseg = ''
                    subramo = ''
                    ramo = ''
                fc  = r.poliza.f_currency
                if r.poliza.business_line:
                    if int(r.poliza.business_line) ==1:
                        businessLine_ = 'Comercial'
                    elif int(r.poliza.business_line) ==2:
                        businessLine_ = 'Personal'
                    elif int(r.poliza.business_line) ==0:
                        businessLine_ = 'Otro'
                    else:
                        businessLine_ = ''
                else:
                    if r.poliza.business_line in [0, '0', None]:
                      businessLine_ = 'Otro'
                    else:
                      businessLine_ = ''
                if r.poliza.contractor:
                    contratan = ((((((r.poliza.contractor.full_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    contratanE = r.poliza.contractor.email
                    contratanP = r.poliza.contractor.phone_number
                    # contratanG = r.poliza.contractor.group.group_name
                    contratanG = ((((((r.poliza.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    if r.poliza.contractor.classification:
                        clasifica_ = r.poliza.contractor.classification.classification_name  
                    else:
                        clasifica_='-----'
                    if r.poliza.celula:
                        cel = r.poliza.celula.celula_name  
                    else:
                        cel='-----'
                    try:
                        if r.poliza.contractor.group.type_group == 1:
                            contratanG = ((((((r.poliza.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                            grupo1_ = ''
                            grupo2_ = ''
                        elif r.poliza.contractor.group.type_group == 2:
                            grupotype1 = Group.objects.get(pk = r.poliza.contractor.group.parent.id)
                            contratanG = ((((((grupotype1.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                            grupo1_ = ((((((r.poliza.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                            grupo2_ = ''
                        elif r.poliza.contractor.group.type_group == 3:
                            grupotype1 = Group.objects.get(pk = r.poliza.contractor.group.parent.parent.id)
                            contratanG = ((((((grupotype1.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                            subgrupotype2 = Group.objects.get(pk = r.poliza.contractor.group.parent.id)
                            grupo1_ = ((((((subgrupotype2.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                            grupo2_ = ((((((r.poliza.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    except Exception as e:
                        contratanG = ''
                        grupo1_ = ''
                        grupo2_ = ''
                    try:
                        if r.poliza.groupinglevel:
                            if r.poliza.groupinglevel.type_grouping == 1:
                                nivelAg_ = ((((((r.poliza.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo3_ = ''
                                grupo4_ = ''
                            elif r.poliza.groupinglevel.type_grouping == 2:
                                grupotype1 = GroupingLevel.objects.get(pk = r.poliza.groupinglevel.parent.id)
                                nivelAg_ = ((((((grupotype1.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo3_ = ((((((r.poliza.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo4_ = ''
                            elif r.poliza.groupinglevel.type_grouping == 3:
                                grupotype1 = GroupingLevel.objects.get(pk = r.poliza.groupinglevel.parent.parent.id)
                                nivelAg_ = ((((((grupotype1.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                subgrupotype2 = GroupingLevel.objects.get(pk = r.poliza.groupinglevel.parent.id)
                                grupo3_ = ((((((subgrupotype2.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo4_ = ((((((r.poliza.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        else:
                            nivelAg_ = ''
                            grupo3_ = ''
                            grupo4_ = ''  
                    except Exception as e:
                        nivelAg_ = ''
                        grupo3_ = ''
                        grupo4_ = ''
                        # ------------
                else:
                    contratan = ''
                    contratanE = ''
                    contratanP = ''
                    contratanG = ''
                    clasifica_='-----'
                    cel='-----'
                    contratanG = ''
                    grupo1_ = ''
                    grupo2_ = ''
                    nivelAg_ = ''
                    grupo3_ = ''
                    grupo4_ = ''
            try:
                old = OldPolicies.objects.filter(base_policy__id = r.poliza.id)
                try:
                  date_renovacion = old[0].created_at.strftime("%d/%m/%Y")
                except Exception as rr:
                    date_renovacion = 'Por renovar'
                try:
                    ot_renovacion = old[0].new_policy.poliza_number if old[0].new_policy.poliza_number else old[0].new_policy.internal_number
                except Exception as rr:
                    ot_renovacion = 'Por renovar'
            except Exception as dwe:
                date_renovacion = 'Por renovar'
                ot_renovacion = 'Por renovar'
            try:
                refs_policy = ReferenciadoresInvolved.objects.filter(policy = r.poliza.id,is_changed=False).values_list('referenciador__first_name','referenciador__last_name')
                if len(refs_policy):
                    v = []
                    try:
                        for it in refs_policy:
                            v.append(it[0] +' '+ str(it[1])+str('; '))
                        referenc = v
                    except Exception as y:
                        referenc = []
                else:
                    referenc = []
            except Exception as e:
                referenc = []
            
            ns = ''
            if r.poliza.ramo.ramo_code == 1:
                form = Vida.objects.filter(siniestro = r.id)
                if form:
                    value = form[0].nombre_afectado                   
                    tipopago = checkRazonVida(form[0].razon_siniestro)
                else:
                    form = Life.objects.filter(policy = r.poliza.id)
                    try:
                        if form:
                            value = form[0].personal.full_name
                            if r.poliza.document_type == 6:
                                if form[0].personal.certificate:
                                    pnumb=str(r.poliza.parent.parent.parent.poliza_number)+ ' - INC. ' + str(form[0].personal.certificate)
                        else:
                            value = ''
                    except Exception as rt:
                       value = ''
            elif r.poliza.ramo.ramo_code == 2:
                form = Accidentes.objects.filter(siniestro = r.id)
                if form:
                    ti = form[0].tipo_siniestro
                    tipopago = checkRazonGMM(form[0].razon_siniestro)
                    try:
                        tipop_sin = checkPaySin(int(form[0].tipo_pago))
                    except Exception as df:
                        tipop_sin = ''
                    if form[0].padecimiento:
                        pdc = ((((((form[0].padecimiento.descr).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')   
                    else:
                        pdc = ''
                    recla = form[0].total_reclamado
                    total = form[0].total_procedente
                    deduc = form[0].total_deducible
                    coaseg = form[0].total_coaseguro
                    if float(form[0].total_final) != 0.00:
                        totf = form[0].total_final
                    else:
                        totf = float(total if total else 0)-float(deduc if deduc else 0)-float(coaseg if coaseg else 0)
                    if form[0].titular:
                        value = form[0].titular.full_name
                    elif form[0].dependiente:
                        value = form[0].dependiente.full_name
                    elif form[0].affected_full_name:
                        value = form[0].affected_full_name
                    elif r.aux_affected:
                        value = r.aux_affected
                    else:
                        value = ''
                else:
                    form = AccidentsDiseases.objects.filter(policy = r.poliza.id)
                    if form:
                        value = form[0].personal.full_name
                        if r.poliza.document_type == 6:
                            if form[0].personal.certificate:
                                pnumb=str(r.poliza.parent.parent.parent.poliza_number)+ ' - INC. ' + str(form[0].personal.certificate)
                    else:
                        value = ''
            elif r.poliza.subramo.subramo_code == 9:
                form = AutomobilesDamages.objects.filter(policy = r.poliza.id)
                formA = Autos.objects.filter(siniestro = r.id).first()
                if formA:
                    tipopago = checkRazonAutos(formA.tipo_siniestro)
                else:
                    tipopago = ''
                if form:
                    try:
                        form[0].model = ((((((form[0].model).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        form[0].version = ((((((form[0].version).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    except Exception as ers:
                        form[0].model = form[0].model
                        form[0].version = form[0].version
                    value =str(form[0].brand) + '-' + str(form[0].model )+ '-' +str(form[0].version)+ '-' +str(form[0].serial)
                    mrc = form[0].brand 
                    vrs = form[0].version 
                    mdl = form[0].model
                    ns = form[0].serial

                elif r.aux_affected:
                    value = r.aux_affected
                else:
                    value = ''
            elif r.poliza.ramo.ramo_code == 3 and not r.poliza.subramo.subramo_code == 9:
                # form = Damages.objects.filter(policy = r.poliza.id) 
                form = Danios.objects.filter(siniestro = r.id)    
                tipopago = ''
                if form:
                    value = form[0].bien_asegurado           
                else:
                    if form:
                        value = form[0].insured_item
                    else:
                        value = ''
            else:
                value = 'Sin asegurado'
                val_resp = 'Sin responsable'
                val_cexe = 'Sin ejecutivo'
            if value:
                value = ((((((value).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'') 
            else:
                value = value
            if r.poliza:
                statusr = checkStatusPolicy(r.poliza.status)
                valR = False
                if OldPolicies.objects.filter(base_policy__id = r.poliza.id, new_policy__status = 1).exists():
                    valR = True
                if r.org_name == 'ancora':
                    if r.poliza.status==13 and r.poliza.is_renewable==1 or (r.poliza.renewed_status ==2 and r.poliza.status ==13):
                        statusr = statusr+' -En Proceso de Renovación'
            else:
                statusr = checkStatusPolicy(r.poliza.status)
            status_poliza.append(statusr)
            prov.append(aseg)
            subr.append(subramo)
            rm.append(ramo)
            asegurado.append(value)
            currency.append(fc)
            dateRen.append(date_renovacion)
            otRen.append(ot_renovacion)
            referenciador.append(referenc)
            antiguedad.append(antig)
            creadopor.append(val_owner)
            contratante.append(contratan)
            contratanteE.append(contratanE)
            contratanteP.append(contratanP)
            contratanteG.append(contratanG)
            responsable.append(val_resp)
            collection.append(val_col)
            paquete.append(pac)
            clave.append(cve)
            cp.append(pc) 
            valTipo.append(ti) 
            padecimiento.append(pdc) 
            marca.append(mrc) 
            version.append(vrs)
            modelo.append(mdl)
            numero_serie.append(ns) 
            reclamado.append(recla) 
            procedente.append(total)             
            deducible.append(deduc)
            coaseguro.append(coaseg)
            totalfinal.append(totf)

            pago.append(tipopago) 
            comentario.append(comment) 
            comentario_mas_fecha.append(comment2) 
            comentario_fecha.append(comment_date) 
            # ---
            grupo1.append(grupo1_)
            grupo2.append(grupo2_)
            nivelAg.append(nivelAg_)
            grupo3.append(grupo3_)
            grupo4.append(grupo4_)
            clasifica.append(clasifica_)
            celulaC.append(cel)
            businessLine.append(businessLine_)
            tipopagosin.append(tipop_sin)
            pnumber.append(pnumb)

        statuses = {
          3:'Completada/Procedente',
          5:'Rechazada/ No Procedente',
          6:'En espera/ Solicitud de Información',
          1: 'Pendiente', 
          2:  'En Trámite', 
          4: 'Cancelada', 
          7: 'Reproceso', 
          8: 'Inconformidad'
        }
        obj = {
            'numSiniestro'   : str(list(sinisters.values_list('numero_siniestro', flat = True))), 
            'folio_interno'   : str(list(sinisters.values_list('folio_interno', flat = True))),
            'status'   : str([ statuses[sin.status] if sin.poliza and sin.poliza.ramo.ramo_code in [1,2] else sin.get_status_display() for sin in sinisters]),
            'document_type'   : str(list(sinisters.values_list('poliza__document_type', flat = True))),
            'poliza_number'   : str(list(pnumber)) if pnumber else str(list(sinisters.values_list('poliza__poliza_number', flat = True))),
            'reclamado'   : str(list(reclamado)),
            'procedente'   : str(list(procedente)),
            'pago'   : str(list(pago)),
            'tipo'   : str(list(valTipo)),
            'marca'   : str(list(marca)),
            'version'   : str(list(version)),
            'modelo'   : str(list(modelo)),
            'numero_serie'   : str(list(numero_serie)),
            'comentario'   : str(list(comentario)),
            'comentario_mas_fecha'   : str(list(comentario_mas_fecha)),
            # 'comentario_fecha'   : list(comentario_fecha),
            'comentario_fecha'   : [date.strftime("%d/%m/%Y") if date else '' for date in list(comentario_fecha) ] ,
            'padecimiento'   : str(list(padecimiento)),
            'contratante'   : str(list(contratante)),
            'contratanteE'   : str(list(contratanteE)),
            'contratanteP'   : str(list(contratanteP)),
            'contratanteG'   : str(list(contratanteG)),
            'aseguradora__compania'   : str(list(prov)),
            # 'aseguradora__compania'   : list(sinisters.values_list('poliza__aseguradora__alias', flat = True)),
            'subramo__subramo_name'   : str(list(subr)),
            'ramo'   : str(list(rm)),
            'forma_de_pago'   : str(list(sinisters.values_list('poliza__forma_de_pago', flat = True))),
            'statusp'   : str(list(status_poliza)),
            'created_at'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in sinisters.values_list('created_at', flat = True) ])) ,
            'start_of_validity'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in sinisters.values_list('poliza__start_of_validity', flat = True) ])) ,
            'end_of_validity'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in sinisters.values_list('poliza__end_of_validity', flat = True) ])) ,
            'fecha_siniestro'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in sinisters.values_list('fecha_siniestro', flat = True) ])) ,
            'fecha_compromiso'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in sinisters.values_list('fecha_compromiso', flat = True) ])) ,
            'fecha_terminacion'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in sinisters.values_list('fecha_terminacion', flat = True) ])) ,
            'fecha'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in sinisters.values_list('fecha', flat = True) ])) ,
            'fecha_ingreso'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in sinisters.values_list('fecha_ingreso', flat = True) ])) ,
            'f_currency'   : str(list(currency)),
            'p_neta'   : str(list(sinisters.values_list('poliza__p_neta', flat = True))),
            'rpf'   : str(list(sinisters.values_list('poliza__rpf', flat = True))),
            'derecho'   : str(list(sinisters.values_list('poliza__derecho', flat = True))),
            'iva'   : str(list(sinisters.values_list('poliza__iva', flat = True))),
            'p_total'   : str(list(sinisters.values_list('poliza__p_total', flat = True))),
            'comision'   : str(list(sinisters.values_list('poliza__comision', flat = True))),
            '_id'   : str(list(sinisters.values_list('id', flat = True))),
            'observationsp'   : str(list([(((((((x).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')) if x else '' for x in sinisters.values_list('poliza__observations', flat = True)])),
            'observations'   : str(list([(((((((x).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')) if x else '' for x in sinisters.values_list('observations', flat = True)])),
            'folio_compania'   : str(list([x if x else '' for x in sinisters.values_list('folio_compania', flat = True)])),
            'created_at'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in sinisters.values_list('created_at', flat = True) ]))  ,
            'clave'   : str(list(clave)),
            'sucursal__sucursal_name'   : str(list(sinisters.values_list('poliza__sucursal__sucursal_name', flat = True))),
            'renewed_status': str(list(sinisters.values_list('poliza__renewed_status', flat = True))),
            'paquete': str(list(paquete)),
            # 'identifier': str(list(sinisters.values_list('poliza__identifier', flat = True))),
            'identifier'   : str(list([(((((((x).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')) if x else '' for x in sinisters.values_list('poliza__identifier', flat = True)])),            
            'address': str(list(sinisters.values_list('poliza__address__administrative_area_level_1', flat = True))),
            'cp': str(list(cp)),
            'dateRen'   : str(list(dateRen)),
            'collection'   : str(list(collection)),
            'otRen'   : str(list(otRen)),
            'asegurado'   : str(list(asegurado)),
            'referenciador'   : str(list(referenciador)),
            'antiguedad'   : str(list(antiguedad)),
            'creadopor'   : str(list(creadopor)),
            'deducible'   : str(list(deducible)),
            'coaseguro'   : str(list(coaseguro)),
            'totalfinal'   : str(list(totalfinal)),                       
            'responsable'   : str(list(responsable)),   
            'grupo1'   : str(list(grupo1)) ,
            'grupo2'   : str(list(grupo2)) ,
            'nivelAg'   : str(list(nivelAg)) ,
            'grupo3'   : str(list(grupo3)) ,
            'grupo4'   : str(list(grupo4)) ,
            'clasifica'   : str(list(clasifica)) ,
            'celula'   : str(list(celulaC)) ,
            'businessLine'   : str(list(businessLine)) ,
            'tipopagosin'   : str(list(tipopagosin)) ,
            'tipo_reporte': tipo_reporte,
            'email_org':info_org['email'],
            'phone_org':info_org['phone'],
            'webpage_org':info_org['webpage'],
            'address_org':info_org['address'],
            'urlname_org':info_org['urlname'] if info_org['urlname'] else 'ancora',
            'campo_celula':campo_celula,
            'campo_agrupacion':campo_agrupacion,
            'campo_lineanegocio':campo_lineanegocio
            }  

        obj['columns'] = str(list(columns))
        obj['imagen'] = archivo_imagen
        obj['registros'] = len(sinisters)
        obj['verReferenciadores'] = verReferenciadores
        obj['moduleName'] = moduleName

        if campo_lineanegocio == 'False' or campo_lineanegocio == False:
            if 'businessLine' in obj:
                del obj['businessLine'] 
        if campo_celula == 'False' or campo_celula == False:
            if 'celula' in obj:
                del obj['celula'] 
        if campo_agrupacion == 'False' or campo_agrupacion == False:
            if 'nivelAg' in obj:
                del obj['nivelAg'] 
            if 'grupo3' in obj:
                del obj['grupo3'] 
            if 'grupo4' in obj:
                del obj['grupo4'] 
        if not 'urlname_org' in obj:
            obj['urlname_org'] = info_org['urlname'] if 'urlname' in info_org else 'ancora',

        r = requests.post(settings.SERVICEEXCEL_URL + 'get-siniestrosExcelReporte/', obj, stream=True)
        response_data= r.text
        response = HttpResponse(r.content,content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')
        return response



@api_view(['GET'])
@permission_classes((IsAuthenticatedV2, IsOrgMemberV2))
def PortalSiniestrosReporte(request):
    from datetime import time as timeBiz
    
    #autos = Autos.objects.filter(tipo_siniestro__in =[10,20,19], org_name = request.GET.get('org')).values_list('siniestro', flat = True)
    autos = Autos.objects.filter(org_name = request.GET.get('org')).values_list('siniestro', flat = True)
    siniestro = Siniestros.objects.filter(id__in = list(autos), tipo_siniestro_general = 3, org_name = request.GET.get('org'))
    try:
        if 'number' in request.GET:
            numero = request.GET.get('number')
            if numero:
                if numero:
                    tipo = getTipoSiniestro(numero)
                    try:
                        if tipo:
                            autos = Autos.objects.filter(tipo_siniestro__in = tipo,org_name = request.GET.get('org')).values_list('siniestro', flat = True)
                            siniestro = Siniestros.objects.filter(id__in = list(autos), tipo_siniestro_general = 3, org_name = request.GET.get('org'))
                            siniestro2 = Siniestros.objects.filter(id__in = list(autos), tipo_siniestro_general = 3, org_name = request.GET.get('org'))
                    except Exception as e:
                        pass
                    auto = AutomobilesDamages.objects.filter(serial__icontains= str(numero), org_name = request.GET.get('org')).values_list('policy', flat = True)
                    policies = Polizas.objects.filter(pk__in = auto)
                    datafilter = [Q(owner__first_name__icontains=str(numero)), Q(owner__last_name__icontains=str(numero)),
                    Q(poliza__owner__first_name__icontains=str(numero)), Q(poliza__owner__last_name__icontains=str(numero)),
                    Q(poliza__poliza_number__icontains=str(numero)), Q(poliza__contractor__full_name__icontains=str(numero)),
                    Q(numero_siniestro__icontains = str(numero)), Q(folio_compania__icontains=str(numero)), 
                    Q(folio_interno__icontains=str(numero)),Q(tipo_siniestro_general__icontains =str(numero)), Q(poliza__in = policies)]
                    siniestro = siniestro.filter(reduce(OR, datafilter))
                    if len(siniestro)==0 and tipo:
                        siniestro = siniestro2
    except Exception as e:
        siniestro = siniestro
    # Empieza insertado de imagen
    info_org = getInfoOrg(request)
    if len(info_org['logo']) != 0:
        archivo_imagen = 'https://miurabox-public.s3.amazonaws.com/cas/' + info_org['logo']
        # archivo_imagen = get_presigned_url("cas/{url}".format(url=info_org['logo']),28800) 
    else:
      archivo_imagen = 'saam.jpg'

    tipo_reporte = "Reporte de siniestros"

    columns = ['Tipo Registro','Afectado', 'No Siniestro', 'Folio', 'Estatus', 'No.Póliza', 'Tipo', 'Contratante', 
                   'Proveedor', 'Subramo', 'Ramo', 'Inicio Póliza', 'Fin Póliza', 'Fecha de creación', 
                   'Creado por', 'Versión','Marca','Modelo', 'Número de Serie', 
                   'Reclamado','Procedente','Fecha de Ingreso','Fecha en que Ocurrio','Fecha Compromiso',
                   'Observaciones','Padecimiento','Tipo de Siniestro','Folio de la Aseguradora','Inicial / Complemento',
                   'Tipo de trámite','Referenciador','Grupo','Bitácora','Fecha Bitácora','Bitácora + Fecha','Subgrupo','Subsubgrupo','Agrupación',
                   'Subagrupación','Subsubagrupación','Clasificación','Línea de Negocio','Célula','Subtipo Nivel1']
    try:
        columns = request.data['cols1']
        if not 'Número de Serie' in columns:
            columns.insert(12, 'Número de Serie')
        if not 'Subgrupo' in columns:
            columns.append('Subgrupo')
        if not 'Subsubgrupo' in columns:
            columns.append('Subsubgrupo')
        if not 'Agrupación' in columns:
            columns.append('Agrupación')
        if not 'Subagrupación' in columns:
            columns.append('Subagrupación')
        if not 'Subsubagrupación' in columns:
            columns.append('Subsubagrupación')
        if not 'Clasificación' in columns:
            columns.append('Clasificación')
        if not 'Línea de Negocio' in columns:
            columns.append('Línea de Negocio')
        if not 'Célula' in columns:
            columns.append('Célula') 
        if not 'Bitácora + Fecha' in columns:
            columns.append('Bitácora + Fecha')
        
        
    except:
        pass

    columns.append('Fecha Terminación')
    # columns.append('Fecha Bitácora')
    columns.append('Semáforo') 
    columns.append('Días transcurridos del Semáforo')
    # Empieza insertado de imagen
    info_org = getInfoOrg(request)

    if len(info_org['logo']) != 0:
        archivo_imagen = 'https://miurabox-public.s3.amazonaws.com/cas/' + info_org['logo']
        # archivo_imagen = get_presigned_url("cas/{url}".format(url=info_org['logo']),28800) 
    else:
        archivo_imagen = 'saam.jpg'
    tipo_reporte = "Reporte de Siniestros"
        
    asegurado = []
    antiguedad = []
    referenciador = []
    creadopor = []
    dateRen = []
    otRen = []
    responsable = []
    semaforo = []
    contratante = []
    contratanteE = []
    contratanteP = []
    contratanteG = []
    collection = []
    clave = []
    version = []
    numero_serie = []
    padecimiento = []
    modelo = []
    marca = []
    cp = []
    paquete = []
    procedente = []
    comentario = []
    comentario_mas_fecha = []
    comentario_fecha = []
    reclamado = []
    pago = []
    tipoSiniestro = []
    valTipo = []  
    ti = ''
    vrs = ''
    mrc = ''
    mdl = ''
    pdc = ''
    total = ''
    recla = ''
    tipopago = ''
    tipo_siniestro = ''
    razon =[]
    currency = []
    fc = 1
    prov = []
    subr = []
    rm = []        
    grupo1 = []
    grupo2 = []
    nivelAg = []
    grupo3 = []
    grupo4 = []
    clasifica = []
    businessLine = []
    celulaC =[]
    diastrans = []
    fechapromesa = []
    subtipo = []
    creadopor = []
    # sinisters = sinisters.order_by('poliza__contractor__full_name','poliza__juridical__j_name')
    sinisters = siniestro.order_by('id')
    # start_time = time.time()
    numSiniestro =[]
    folio_interno =[]
    status =[]
    document_type =[]
    poliza_number =[]
    forma_de_pago =[]
    statusp = []
    created_at = []
    start_of_validity = []
    end_of_validity = []
    fecha_siniestro = []
    fecha_terminacion = []
    fecha = []
    fecha_ingreso = []
    p_neta = []
    rpf = []
    derecho = []
    iva = []
    p_total = []
    comision = []
    _id = []
    observationsp = []
    observations = []
    folio_compania = []
    created_ata      = []
    sucursal__sucursal_name = []
    renewed_status = []
    identifier = []
    tipoReg = []
    address = []
    fecha_compromiso = []
    lenbit = 0
    # sinisters = sinisters.filter(id__in=[39022,37281,37728,39041,39127])
    for r in sinisters:
        aseg = ''
        dias = 0
        subramo = ''
        ramo = ''
        ti = ''
        fc =1 
        vrs = ''
        mrc = ''
        mdl = ''
        pdc = ''
        total = ''
        recla = ''
        tipopago = ''
        tipo_siniestro = ''
        subt = ''
        if r.owner:
            own = r.owner.first_name+' '+str(r.owner.last_name)
        else: 
            own=''
        
        if r.poliza.address:
            pc = r.poliza.address.postal_code
        else:
            pc = ''
        if r and r.fecha_siniestro:
            antig = get_antiguedad(r.fecha_siniestro)
        else:
            antig = ''

        if r.owner:
            val_owner = r.owner.first_name + ' '+ str(r.owner.last_name)
        else:
            val_owner = ''
        if r.poliza.paquete:
            pac = r.poliza.paquete.package_name
        else:
            pac = ''
        
        color = 'Blanco'
        start_date = r.fecha_archivos_cargados
        if not start_date:
            color = 'Blanco'
        else:
            # original codea
            auto_siniester = Autos.objects.filter(siniestro = r, org_name = r.org_name)
            if auto_siniester.exists():
                auto_siniester = auto_siniester.first()
            if r.status not in [3,5,4]:
                if auto_siniester:
                    if auto_siniester.subtipo_siniestro_1==4:
                        try:
                            val_semaforo,dias = antiguedad_dias_promesa(r)
                        except:
                            val_semaforo=0
                            dias = 0
                    else:
                        val_semaforo,dias = antiguedad_dias_habiles(r)
                else:
                    val_semaforo,dias = antiguedad_dias_habiles(r)
            else:
                # val_semaforo,dias = dias_horas_final(r)
                if auto_siniester.subtipo_siniestro_1==4:
                    try:
                        val_semaforo,dias = dias_horas_final_promesa(r)
                    except:
                        val_semaforo=0
                        dias = 0
                else:
                    val_semaforo,dias = dias_horas_final(r)
            # val_semaforo = businessDuration(startdate=start_date,enddate=end_date,starttime=biz_open_time,endtime=biz_close_time,holidaylist=MX_holiday_list,unit=unit_hour)
            # original code
            # val_semaforo = businessDuration(startdate=start_date,enddate=end_date,holidaylist=MX_holiday_list,unit=unit_hour)
            # if val_semaforo:
            #     try:
            #         dias = "{0:.3f}".format(val_semaforo)
            #     except:
            #         dias =val_semaforo
            # unit_hour1='hour'
            # try:
            #     horass_ant = businessDuration(startdate=start_date,enddate=end_date,starttime=biz_open_time,endtime=biz_close_time,holidaylist=MX_holiday_list,unit=unit_hour1)
            #     try:
            #         multiples = []
            #         numero = int(horass_ant)
            #         newCountHours = 0
            #         for n in range(1, numero+1):
            #             if n % 45 == 0:
            #                 multiples.append(n)
            #                 newCountHours = numero-2
            #         if len(multiples) >0:
            #             newCountHours = horass_ant - (len(multiples) *2)
            #         horass_ant =newCountHours                        
            #     except:
            #         horass_ant =horass_ant
            #     # convertir a dias con horas
            #     dias_ = timedelta(hours=horass_ant)
            #     dias = str(dias_.days)+' días con '+str(dias_.seconds//3600)+':'+str((dias_.seconds//60)%60)+' horas'
            # except Exception as ersa:
            #     print('errordddd',ersa)
            #     pass
            # fin original code
            auto = Autos.objects.filter(siniestro = r)
            if auto.exists():
                auto = auto.first()
            else:
                auto  = None
            if auto and auto.tipo_siniestro == 20:
                if val_semaforo <= 24: 
                    color = 'Verde'
                if val_semaforo > 24 and val_semaforo <= 48: 
                    color = 'Amarillo'
                if val_semaforo > 48 :
                    color = 'Rojo'
                if auto and auto.subtipo_siniestro_1 == 3:#valuacion
                    if val_semaforo <= 48: 
                        color = 'Verde'
                    if val_semaforo > 48 and val_semaforo <= 72: 
                        color = 'Amarillo'
                    if val_semaforo > 72 :
                        color = 'Rojo'
                if auto and auto.subtipo_siniestro_1 == 4:#Reparación
                    # if r.status in [3,5,4]:
                    #     dias_hasta_promesa = r.fecha_termino_conteo-r.promise_date
                    # else:
                    #     dias_hasta_promesa =get_antiguedad(r.promise_date)
                    #     print('------no compl---------',r.promise_date,datetime.now(),r.fecha_termino_conteo)
                    # print('------final---------',r.promise_date,r.fecha_termino_conteo,'........',datetime.now(),dias_hasta_promesa)
                    if val_semaforo <=-2:
                        color = 'Verde'
                    if val_semaforo >-2 and val_semaforo<=0: 
                        color = 'Amarillo'
                    if val_semaforo > 0:
                        color = 'Rojo'
                    # if val_semaforo <= 48: 
                    #     color = 'Verde'
                    # if val_semaforo > 48 and val_semaforo <= 72: 
                    #     color = 'Amarillo'
                    # if val_semaforo > 72 :
                    #     color = 'Rojo'
                # if auto and auto.subtipo_siniestro_1 == 3:#reparación
                #     if val_semaforo <= 2: 
                #         color = 'Verde'
                #     if val_semaforo > 2: 
                #         color = 'Amarillo'
                #     if val_semaforo > :
                #         color = 'Rojo'

            if auto and  auto.tipo_siniestro == 10:
                if auto.subtipo_siniestro_2 == 1:
                    if val_semaforo <= 24: 
                        color = 'Verde'
                    if val_semaforo > 24 and val_semaforo <= 48:  
                        color = 'Amarillo'
                    if val_semaforo > 48:
                        color = 'Rojo'


                if auto.subtipo_siniestro_2 == 2:
                    # if val_semaforo <= 48: 
                    #     color = 'Verde'
                    # if val_semaforo > 48 and val_semaforo <= 72:
                    #     color = 'Amarillo' 
                    # if val_semaforo > 72 and val_semaforo <= 120:
                    #     color = 'Naranja'
                    # if  val_semaforo > 120:
                    #     color = 'Rojo'
                    if val_semaforo <= 2: 
                        color = 'Verde'
                    if val_semaforo > 2 and val_semaforo <= 3:
                        color = 'Amarillo' 
                    if val_semaforo > 3 and val_semaforo <= 5:
                        color = 'Naranja'
                    if  val_semaforo > 5:
                        color = 'Rojo' 
                

                if auto and  not auto.subtipo_siniestro_2:
                    color = 'Blanco'



            if auto and auto.tipo_siniestro == 19:
                if auto.subtipo_siniestro_2 == 1:
                    if val_semaforo <= 24: 
                        color = 'Verde'
                    if val_semaforo > 24 and val_semaforo <= 48: 
                        color = 'Amarillo'
                    if val_semaforo > 48: 
                        color = 'Rojo'
                
                if auto.subtipo_siniestro_2 == 2:
                    if val_semaforo <= 3:
                        color = 'Verde'
                    if val_semaforo > 3 and val_semaforo <= 5: 
                        color = 'Amarillo'
                    # if val_semaforo > 72 and val_semaforo <= 120: 
                    #     color = 'Naranja'
                    if val_semaforo > 5:
                        color = 'Rojo'

                if auto and not auto.subtipo_siniestro_2:
                    if val_semaforo <= 24:
                        color = 'Blanco'

        if r.poliza.responsable:
            val_resp = r.poliza.responsable.first_name + ' '+ str(r.poliza.responsable.last_name)
        else:
            val_resp = ''
        if r.poliza.collection_executive:
            val_col = r.poliza.collection_executive.first_name + ' '+ str(r.poliza.collection_executive.last_name)
        else:
            val_col = ''
        if r.poliza.clave:
            try:
                cve = r.poliza.clave.name + ' '+ str(r.poliza.clave.clave)
                cve = ((((((cve).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
            except Exception as er:
                cve = ''
        else:
            cve = ''
        if r.poliza.document_type == 6:
            if r.poliza.parent.parent.parent.business_line:
                if int(r.poliza.parent.parent.parent.business_line) ==1:
                    businessLine_ = 'Comercial'
                elif int(r.poliza.parent.parent.parent.business_line) ==2:
                    businessLine_ = 'Personal'
                elif int(r.poliza.parent.parent.parent.business_line) ==0:
                    businessLine_ = 'Otro'
                else:
                    businessLine_ = ''
            else:
                if int(r.poliza.parent.parent.parent.business_line) ==0:
                    businessLine_ = 'Otro'
                else:
                    businessLine_ = ''
            try:
                aseg = r.poliza.parent.parent.parent.aseguradora.alias
                subramo = r.poliza.parent.parent.parent.subramo.subramo_name
                ramo = r.poliza.parent.parent.parent.ramo.ramo_name
            except Exception as e:
                aseg = ''
                subramo = ''
                ramo = ''
            fc =r.poliza.parent.parent.parent.f_currency 
            if r.poliza.parent.parent.parent.contractor:
                contratan = ((((((r.poliza.parent.parent.parent.contractor.full_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                contratanE = r.poliza.parent.parent.parent.contractor.email
                contratanP = r.poliza.parent.parent.parent.contractor.phone_number
                # contratanG = r.poliza.parent.parent.parent.contractor.group.group_name
                contratanG = ((((((r.poliza.parent.parent.parent.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                if r.poliza.parent.parent.parent.contractor.classification:
                    clasifica_ = r.poliza.parent.parent.parent.contractor.classification.classification_name  
                else:
                    clasifica_='-----'
                if r.poliza.parent.parent.parent.celula:
                    cel = r.poliza.parent.parent.parent.celula.celula_name  
                else:
                    cel='-----'
                try:
                    if r.poliza.parent.parent.parent.contractor.group.type_group == 1:
                        contratanG = ((((((r.poliza.parent.parent.parent.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        grupo1_ = ''
                        grupo2_ = ''
                    elif r.poliza.parent.parent.parent.contractor.group.type_group == 2:
                        grupotype1 = Group.objects.get(pk = r.poliza.parent.parent.parent.contractor.group.parent.id)
                        contratanG = ((((((grupotype1.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        grupo1_ = ((((((r.poliza.parent.parent.parent.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        grupo2_ = ''
                    elif r.poliza.parent.parent.parent.contractor.group.type_group == 3:
                        grupotype1 = Group.objects.get(pk = r.poliza.parent.parent.parent.contractor.group.parent.parent.id)
                        contratanG = ((((((grupotype1.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        subgrupotype2 = Group.objects.get(pk = r.poliza.parent.parent.parent.contractor.group.parent.id)
                        grupo1_ = ((((((subgrupotype2.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        grupo2_ = ((((((r.poliza.parent.parent.parent.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                except Exception as e:
                    contratanG = ''
                    grupo1_ = ''
                    grupo2_ = ''
                try:
                    if r.poliza.parent.parent.parent.groupinglevel:
                        if r.poliza.parent.parent.parent.groupinglevel.type_grouping == 1:
                            nivelAg_ = ((((((r.poliza.parent.parent.parent.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                            grupo3_ = ''
                            grupo4_ = ''
                        elif r.poliza.parent.parent.parent.groupinglevel.type_grouping == 2:
                            grupotype1 = GroupingLevel.objects.get(pk = r.poliza.parent.parent.parent.groupinglevel.parent.id)
                            nivelAg_ = ((((((grupotype1.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                            grupo3_ = ((((((r.poliza.parent.parent.parent.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                            grupo4_ = ''
                        elif r.poliza.parent.parent.parent.groupinglevel.type_grouping == 3:
                            grupotype1 = GroupingLevel.objects.get(pk = r.poliza.parent.parent.parent.groupinglevel.parent.parent.id)
                            nivelAg_ = ((((((grupotype1.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                            subgrupotype2 = GroupingLevel.objects.get(pk = r.poliza.parent.parent.parent.groupinglevel.parent.id)
                            grupo3_ = ((((((subgrupotype2.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                            grupo4_ = ((((((r.poliza.parent.parent.parent.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    else:
                        nivelAg_ = ''
                        grupo3_ = ''
                        grupo4_ = ''  
                except Exception as e:
                    nivelAg_ = ''
                    grupo3_ = ''
                    grupo4_ = ''
                    # ------------
            else:
                contratan = ''
                contratanE = ''
                contratanP = ''
                contratanG = ''
                clasifica_='-----'
                cel='-----'
                contratanG = ''
                grupo1_ = ''
                grupo2_ = ''
                nivelAg_ = ''
                grupo3_ = ''
                grupo4_ = ''                       
        else:
            try:
                aseg = r.poliza.aseguradora.alias
                subramo = r.poliza.subramo.subramo_name
                ramo = r.poliza.ramo.ramo_name
            except Exception as e:
                aseg = ''
                subramo = ''
                ramo = ''
            fc  = r.poliza.f_currency
            if r.poliza.business_line:
                if int(r.poliza.business_line) ==1:
                    businessLine_ = 'Comercial'
                elif int(r.poliza.business_line) ==2:
                    businessLine_ = 'Personal'
                elif int(r.poliza.business_line) ==0:
                    businessLine_ = 'Otro'
                else:
                    businessLine_ = ''
            else:
                if r.poliza.business_line in [0, '0', None]:
                    businessLine_ = 'Otro'
                else:
                    businessLine_ = ''
            if r.poliza.contractor:
                contratan = ((((((r.poliza.contractor.full_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                contratanE = r.poliza.contractor.email
                contratanP = r.poliza.contractor.phone_number
                # contratanG = r.poliza.contractor.group.group_name
                contratanG = ((((((r.poliza.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                if r.poliza.contractor.classification:
                    clasifica_ = r.poliza.contractor.classification.classification_name  
                else:
                    clasifica_='-----'
                if r.poliza.celula:
                    cel = r.poliza.celula.celula_name  
                else:
                    cel='-----'
                try:
                    if r.poliza.contractor.group.type_group == 1:
                        contratanG = ((((((r.poliza.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        grupo1_ = ''
                        grupo2_ = ''
                    elif r.poliza.contractor.group.type_group == 2:
                        grupotype1 = Group.objects.get(pk = r.poliza.contractor.group.parent.id)
                        contratanG = ((((((grupotype1.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        grupo1_ = ((((((r.poliza.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        grupo2_ = ''
                    elif r.poliza.contractor.group.type_group == 3:
                        grupotype1 = Group.objects.get(pk = r.poliza.contractor.group.parent.parent.id)
                        contratanG = ((((((grupotype1.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        subgrupotype2 = Group.objects.get(pk = r.poliza.contractor.group.parent.id)
                        grupo1_ = ((((((subgrupotype2.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        grupo2_ = ((((((r.poliza.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                except Exception as e:
                    contratanG = ''
                    grupo1_ = ''
                    grupo2_ = ''
                try:
                    if r.poliza.groupinglevel:
                        if r.poliza.groupinglevel.type_grouping == 1:
                            nivelAg_ = ((((((r.poliza.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                            grupo3_ = ''
                            grupo4_ = ''
                        elif r.poliza.groupinglevel.type_grouping == 2:
                            grupotype1 = GroupingLevel.objects.get(pk = r.poliza.groupinglevel.parent.id)
                            nivelAg_ = ((((((grupotype1.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                            grupo3_ = ((((((r.poliza.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                            grupo4_ = ''
                        elif r.poliza.groupinglevel.type_grouping == 3:
                            grupotype1 = GroupingLevel.objects.get(pk = r.poliza.groupinglevel.parent.parent.id)
                            nivelAg_ = ((((((grupotype1.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                            subgrupotype2 = GroupingLevel.objects.get(pk = r.poliza.groupinglevel.parent.id)
                            grupo3_ = ((((((subgrupotype2.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                            grupo4_ = ((((((r.poliza.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    else:
                        nivelAg_ = ''
                        grupo3_ = ''
                        grupo4_ = ''  
                except Exception as e:
                    nivelAg_ = ''
                    grupo3_ = ''
                    grupo4_ = ''
                    # ------------
            else:
                contratan = ''
                contratanE = ''
                contratanP = ''
                contratanG = ''
                clasifica_='-----'
                cel='-----'
                contratanG = ''
                grupo1_ = ''
                grupo2_ = ''
                nivelAg_ = ''
                grupo3_ = ''
                grupo4_ = ''
        try:
            old = OldPolicies.objects.filter(base_policy__id = r.poliza.id)
            try:
                date_renovacion = old[0].created_at.strftime("%d/%m/%Y")
            except Exception as rr:
                date_renovacion = 'Por renovar'
            try:
                ot_renovacion = old[0].new_policy.poliza_number if old[0].new_policy.poliza_number else old[0].new_policy.internal_number
            except Exception as rr:
                ot_renovacion = 'Por renovar'
        except Exception as dwe:
            date_renovacion = 'Por renovar'
            ot_renovacion = 'Por renovar'
        try:
            refs_policy = ReferenciadoresInvolved.objects.filter(policy = r.poliza.id,is_changed=False).values_list('referenciador__first_name','referenciador__last_name')
            if len(refs_policy):
                v = []
                try:
                    for it in refs_policy:
                        v.append(it[0] +' '+ str(it[1])+str('; '))
                    referenc = v
                except Exception as y:
                    referenc = []
            else:
                referenc = []
        except Exception as e:
            referenc = []
        
        ns = ''
        if r.poliza.ramo.ramo_code == 1:
            form = Vida.objects.filter(siniestro = r.id)
            if form:
                value = form[0].nombre_afectado                   
                tipopago = checkRazonVida(form[0].razon_siniestro)
            else:
                form = Life.objects.filter(policy = r.poliza.id)
                try:
                    if form:
                        value = form[0].personal.full_name
                    else:
                        value = ''
                except Exception as rt:
                    value = ''
        elif r.poliza.ramo.ramo_code == 2:
            form = Accidentes.objects.filter(siniestro = r.id)
            if form:
                ti = form[0].tipo_siniestro
                tipopago = checkRazonGMM(form[0].razon_siniestro)

                if form[0].padecimiento:
                    pdc = ((((((form[0].padecimiento.descr).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')   
                else:
                    pdc = ''
                recla = form[0].total_reclamado
                total = form[0].total_procedente
                if form[0].titular:
                    value = form[0].titular.full_name
                elif form[0].dependiente:
                    value = form[0].dependiente.full_name
                elif form[0].affected_full_name:
                    value = form[0].affected_full_name
                elif r.aux_affected:
                    value = r.aux_affected
                else:
                    value = ''
            else:
                form = AccidentsDiseases.objects.filter(policy = r.poliza.id)
                if form:
                    value = form[0].personal.full_name
                else:
                    value = ''
        elif r.poliza.subramo.subramo_code == 9:
            form = AutomobilesDamages.objects.filter(policy = r.poliza.id)
            formA = Autos.objects.filter(siniestro = r.id).first()
            if formA:
                tipopago = checkRazonAutos(formA.tipo_siniestro)
            else:
                tipopago = ''
            if formA:
                subt = checkAutosSub1(formA.subtipo_siniestro_1)
            else:
                subt = ''
            if form:
                try:
                    form[0].model = ((((((form[0].model).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    form[0].version = ((((((form[0].version).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                except Exception as ers:
                    form[0].model = form[0].model
                    form[0].version = form[0].version
                value =str(form[0].brand) + '-' + str(form[0].model )+ '-' +str(form[0].version)+ '-' +str(form[0].serial)
                mrc = form[0].brand 
                vrs = form[0].version 
                mdl = form[0].model
                ns = form[0].serial

            elif r.aux_affected:
                value = r.aux_affected
            else:
                value = ''
        elif r.poliza.ramo.ramo_code == 3 and not r.poliza.subramo.subramo_code == 9:
            form = Damages.objects.filter(policy = r.poliza.id)                
            tipopago = ''
            if form:
                value = form[0].insured_item
            else:
                value = ''
        else:
            value = 'Sin asegurado'
            val_resp = 'Sin responsable'
            val_cexe = 'Sin ejecutivo'
        if value:
            value = ((((((value).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'') 
        else:
            value = value
        if r.fecha_compromiso:
            fechac = r.fecha_compromiso.strftime("%d/%m/%Y") if r.fecha_compromiso else '' 
        else:
            fechac = r.promise_date.strftime("%d/%m/%Y") if r.promise_date else '' 
        #--------------------
        statuses = {
            3:'Completada/Procedente',
            5:'Rechazada/ No Procedente',
            6:'En espera/ Solicitud de Información',
            1: 'Pendiente', 
            2:  'En Trámite', 
            4: 'Cancelada', 
            7: 'Reproceso', 
            8: 'Inconformidad'
        }
        tipoReg.append('Siniestro')
        fecha_compromiso.append(fechac)
        numSiniestro.append(r.numero_siniestro) 
        folio_interno.append(r.folio_interno)
        status.append(statuses[r.status])
        document_type.append(r.poliza.document_type)
        poliza_number.append(r.poliza.poliza_number)
        forma_de_pago.append(r.poliza.forma_de_pago)
        statusp.append(r.poliza.status)
        created_at.append(r.created_at)
        start_of_validity.append(r.poliza.start_of_validity)
        end_of_validity.append(r.poliza.end_of_validity)
        fecha_siniestro.append(r.fecha_siniestro)
        fecha_terminacion.append(r.fecha_terminacion)
        fecha.append(r.fecha)
        fecha_ingreso.append(r.fecha_ingreso)
        p_neta.append(r.poliza.p_neta)
        rpf.append(r.poliza.rpf)
        derecho.append(r.poliza.derecho)
        iva.append(r.poliza.iva)
        p_total.append(r.poliza.p_total)
        comision.append(r.poliza.comision)
        _id.append(r.id)
        observationsp.append(str((((((r.poliza.observations if r.poliza.observations else '').replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",''))
        observations.append(str((((((r.observations if r.observations else '').replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",''))
        folio_compania.append(r.folio_compania if r.folio_compania else '')
        created_ata.append(r.created_at)        
        sucursal__sucursal_name.append(r.poliza.sucursal.sucursal_name if r.poliza.sucursal else '')
        renewed_status.append(r.poliza.renewed_status)
        identifier.append(str((((((r.poliza.identifier if r.poliza.identifier else '').replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",''))          
        address.append(r.poliza.address.administrative_area_level_1 if r.poliza.address else '')        
        #***************************+
        prov.append(aseg)
        subr.append(subramo)
        rm.append(ramo)
        asegurado.append(value)
        currency.append(fc)
        dateRen.append(date_renovacion)
        otRen.append(ot_renovacion)
        referenciador.append(referenc)
        antiguedad.append(antig)
        creadopor.append(val_owner)
        contratante.append(contratan)
        contratanteE.append(contratanE)
        contratanteP.append(contratanP)
        contratanteG.append(contratanG)
        responsable.append(val_resp)
        semaforo.append(color)
        collection.append(val_col)
        paquete.append(pac)
        clave.append(cve)
        cp.append(pc) 
        valTipo.append(ti) 
        padecimiento.append(pdc) 
        marca.append(mrc) 
        version.append(vrs)
        modelo.append(mdl)
        numero_serie.append(ns) 
        reclamado.append(recla) 
        procedente.append(total) 
        pago.append(tipopago) 
        comentario.append('') 
        comentario_fecha.append('') 
        comentario_mas_fecha.append('') 
        # ---
        grupo1.append(grupo1_)
        grupo2.append(grupo2_)
        nivelAg.append(nivelAg_)
        grupo3.append(grupo3_)
        grupo4.append(grupo4_)
        clasifica.append(clasifica_)
        celulaC.append(cel)
        businessLine.append(businessLine_)
        diastrans.append(dias)
        fechapromesa.append(fechac)
        subtipo.append(subt)
        # creadopor.append(own)
        #bitacora
        try:
            comment_ = Comments.objects.filter(org_name=request.GET.get('org'), model = 5, id_model = r.id).exclude(content = None).order_by('created_at')
            for c in comment_:
                if c and c.content:
                    comm = c.content
                    comm = ((((((comm).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'') 
                    cdate = c.created_at
                    try:
                        xcdate = cdate.strftime("%d/%m/%Y")
                    except:
                        xcdate = cdate
                    comm2 = "%s - %s"%(comm, str(xcdate))
                    # cdate = c.created_at.strftime("%d/%m/%Y") if r.created_at else ''
                else:
                    comm = ''
                    cdate = ''
                lenbit = lenbit+1
                tipoReg.append('Bitácora')
                fecha_compromiso.append(fechac)
                numSiniestro.append(r.numero_siniestro) 
                folio_interno.append(r.folio_interno)
                status.append(statuses[r.status])
                document_type.append(r.poliza.document_type)
                poliza_number.append(r.poliza.poliza_number)
                forma_de_pago.append(r.poliza.forma_de_pago)
                statusp.append(r.poliza.status)
                created_at.append(r.created_at)
                start_of_validity.append(r.poliza.start_of_validity)
                end_of_validity.append(r.poliza.end_of_validity)
                fecha_siniestro.append(r.fecha_siniestro)
                fecha_terminacion.append(r.fecha_terminacion)
                fecha.append(r.fecha)
                fecha_ingreso.append(r.fecha_ingreso)
                p_neta.append(r.poliza.p_neta)
                rpf.append(r.poliza.rpf)
                derecho.append(r.poliza.derecho)
                iva.append(r.poliza.iva)
                p_total.append(r.poliza.p_total)
                comision.append(r.poliza.comision)
                _id.append(r.id)
                observationsp.append(str((((((r.poliza.observations if r.poliza.observations else '').replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",''))
                observations.append(str((((((r.observations if r.observations else '').replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",''))
                folio_compania.append(r.folio_compania if r.folio_compania else '')
                created_ata.append(r.created_at)        
                sucursal__sucursal_name.append(r.poliza.sucursal.sucursal_name if r.poliza.sucursal else '')
                renewed_status.append(r.poliza.renewed_status)
                identifier.append(str((((((r.poliza.identifier if r.poliza.identifier else '').replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",''))          
                address.append(r.poliza.address.administrative_area_level_1 if r.poliza.address else '')   
                if c.user:
                    val_user = c.user.first_name + ' '+ str(c.user.last_name)
                else:
                    val_user = ''     
                #***************************+
                prov.append(aseg)
                subr.append(subramo)
                rm.append(ramo)
                asegurado.append(value)
                currency.append(fc)
                dateRen.append(date_renovacion)
                otRen.append(ot_renovacion)
                referenciador.append(referenc)
                antiguedad.append(antig)
                creadopor.append(val_user)
                contratante.append(contratan)
                contratanteE.append(contratanE)
                contratanteP.append(contratanP)
                contratanteG.append(contratanG)
                responsable.append(val_resp)
                semaforo.append(color)
                collection.append(val_col)
                paquete.append(pac)
                clave.append(cve)
                cp.append(pc) 
                valTipo.append(ti) 
                padecimiento.append(pdc) 
                marca.append(mrc) 
                version.append(vrs)
                modelo.append(mdl)
                numero_serie.append(ns) 
                reclamado.append(recla) 
                procedente.append(total) 
                pago.append(tipopago) 
                comentario.append(comm) 
                comentario_mas_fecha.append(comm2) 
                comentario_fecha.append(cdate) 
                # ---
                grupo1.append(grupo1_)
                grupo2.append(grupo2_)
                nivelAg.append(nivelAg_)
                grupo3.append(grupo3_)
                grupo4.append(grupo4_)
                clasifica.append(clasifica_)
                celulaC.append(cel)
                businessLine.append(businessLine_)
                diastrans.append(dias)
                fechapromesa.append(fechac)
                subtipo.append(subt)
                # creadopor.append(own)
        except Exception as errorr:
            print('eeee',errorr)
            comm = 'Sin comentario'
            cdate = ''
        #-----------------

    obj = {
        'tipoReg'   : str(list(tipoReg)), 
        'asegurado'   : str(list(asegurado)), 
        'numSiniestro'   : str(list(numSiniestro)), 
        'folio_interno'   : str(list(folio_interno)),
        'status'   : str(list(status)),
        'document_type'   : str(list(document_type)),
        'poliza_number'   : str(list(poliza_number)),
        'reclamado'   : str(list(reclamado)),
        'diastrans'   : str(list(diastrans)),
        'creadopor'   : str(list(creadopor)),
        'procedente'   : str(list(procedente)),
        'pago'   : str(list(pago)),
        'tipo'   : str(list(valTipo)),
        'subtipo': str(list(subtipo)),
        'tipopagosin': str(list(tipopagosin)),
        'marca'   : str(list(marca)),
        'version'   : str(list(version)),
        'modelo'   : str(list(modelo)),
        'numero_serie'   : str(list(numero_serie)),
        'comentario'   : str(list(comentario)),
        'comentario_mas_fecha'   : str(list(comentario_mas_fecha)),
        'comentario_fecha'   : str(list(date.strftime("%d/%m/%Y") if date else '' for date in list(comentario_fecha))),
        'padecimiento'   : str(list(padecimiento)),
        'contratante'   : str(list(contratante)),
        'contratanteE'   : str(list(contratanteE)),
        'contratanteP'   : str(list(contratanteP)),
        'contratanteG'   : str(list(contratanteG)),
        'aseguradora__compania'   : str(list(prov)),
        'subramo__subramo_name'   : str(list(subr)),
        'ramo'   : str(list(rm)),
        'forma_de_pago'   : str(list(forma_de_pago)),
        'statusp'   : str(list(statusp)),
        'created_at'   : str(list(date.strftime("%d/%m/%Y") if date else '' for date in list(created_at))) ,
        'start_of_validity'   : str(list(date.strftime("%d/%m/%Y") if date else '' for date in list(start_of_validity))) ,
        'end_of_validity'   : str(list(date.strftime("%d/%m/%Y") if date else '' for date in list(end_of_validity))) ,
        'fecha_siniestro'   : str(list(date.strftime("%d/%m/%Y") if date else '' for date in list(fecha_siniestro))),
        'fecha_compromiso'   :str(list(fecha_compromiso)) ,
        'fecha_terminacion'   : str(list(date.strftime("%d/%m/%Y") if date else '' for date in list(fecha_terminacion))) ,
        'fecha'   : str(list(date.strftime("%d/%m/%Y") if date else '' for date in list(fecha))),
        'fecha_ingreso'   : str(list(date.strftime("%d/%m/%Y") if date else '' for date in list(fecha_ingreso))),
        'f_currency'   : str(list(currency)),
        'p_neta'   : str(list(p_neta)),
        'rpf'   : str(list(rpf)),
        'derecho'   : str(list(derecho)),
        'iva'   : str(list(iva)),
        'p_total'   : str(list(p_total)),
        'comision'   : str(list(comision)),
        '_id'   : str(list(_id)),
        'observationsp'   : str(list(observationsp)),
        'observations'   : str(list(observations)),
        'folio_compania'   : str(list(folio_compania)),
        'clave'   : str(list(clave)),
        'sucursal__sucursal_name'   : str(list(sucursal__sucursal_name)),
        'renewed_status': str(list(renewed_status)),
        'paquete': str(list(paquete)),
        'identifier'   : str(list(identifier)),            
        'address': str(list(address)),
        'cp': str(list(cp)),
        'dateRen'   : str(list(dateRen)),
        'collection'   : str(list(collection)),
        'otRen'   : str(list(otRen)),
        'asegurado'   : str(list(asegurado)),
        'referenciador'   : str(list(referenciador)),
        'antiguedad'   : str(list(antiguedad)),
        'creadopor'   : str(list(creadopor)),
        'responsable'   : str(list(responsable)),   
        'semaforo': str(list(semaforo)),
        'grupo1'   : str(list(grupo1)) ,
        'grupo2'   : str(list(grupo2)) ,
        'nivelAg'   : str(list(nivelAg)) ,
        'grupo3'   : str(list(grupo3)) ,
        'grupo4'   : str(list(grupo4)) ,
        'clasifica'   : str(list(clasifica)) ,
        'celula'   : str(list(celulaC)) ,
        'businessLine'   : str(list(businessLine)) ,
        'tipo_reporte': tipo_reporte,
        'email_org':info_org['email'],
        'phone_org':info_org['phone'],
        'webpage_org':info_org['webpage'],
        'address_org':info_org['address'],
        'urlname_org':info_org['urlname'] if info_org['urlname'] else 'ancora',

        }  

    obj['columns'] = str(list(columns))
    obj['imagen'] = archivo_imagen
    obj['registros'] = len(sinisters)+lenbit
    if not 'urlname_org' in obj:
        obj['urlname_org'] = info_org['urlname'] if 'urlname' in info_org else 'ancora',

    r = requests.post(settings.SERVICEEXCEL_URL + 'get-siniestrosExcelReportePortal/', obj, stream=True)
    response = HttpResponse(r.content,content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')
    return response

def getTipoSiniestro(string):
    TIPO_SINIESTRO_AUTOS = ((1,'Colision'),(2, 'Incendio'),(3, 'Vuelco'),(4, 'Robo total'),(5, 'Robo parcial'),
                        (6, 'Cristales'),(7, 'Inundaciones'),(8, 'Volcadura'),(9, 'Servicio de grua'),
                        (10, 'Pérdida Total'),(11, 'Vandalismo'),(12, 'Alcance y proyección'),(13, 'Daños'),
                        (14, 'Fenomenos Naturales'),(15,'Colisión (Afectados)'),(16, 'Daños en neumatico'),
                        (17, 'Asistencia Vial'),(18, 'Atropello'),(19, 'Trámites Administrativos'),
                        (20, 'Pérdida Parcial'))
    def get_containing(choices, needle):
        containing = []
        for k, v in choices:
            if needle in v:
                containing.append(k)
        return containing
    query = string  
    return get_containing(TIPO_SINIESTRO_AUTOS, query)


# Reporte fianzas Reporte
@api_view(['POST'])
@permission_classes((IsAuthenticatedV2, RenovacionesReportesPermissionsV2, IsOrgMemberV2))
def Service_ReporteFianzasExcel(request):
    provider = request.data['provider']
    ramo = request.data['ramo']
    subramo = request.data['subramo'] 
    report_by = request.data['report_by']   
    since = request.data['since']
    until = request.data['until']
    status = request.data['status']
    payment = request.data['payment']
    contratante = request.data['contratante']
    group = request.data['grupo']
    cve = request.data['cve']
    type_person = request.data['type_contractor']
    ot_rep = request.data['ot']
    order = int(request.data['order'])
    group_by = int(request.data['group_by'])
    excel_type = int(request.data['excel_type'])
    asc = int(request.data['asc'])
    ramos_sel = (request.data['ramos'])
    subramos_sel = (request.data['subramos'])
    providers_sel = (request.data['providers'])
    users_sel = (request.data['users'])
    identifier = request.data['identifier']
    poliza_n = request.data['poliza']
    # --------****
    subgrupo = request.data['subgrupo']
    subsubgrupo = request.data['subsubgrupo']
    nivelagrupacion = request.data['groupinglevel']
    subnivel = request.data['subgrupinglevel']
    subsubnivel = request.data['subsubgrupinglevel']    
    month_factura = request.data['month_factura']
    year_factura = request.data['year_factura']
    clasificacion = request.data['classification']
    celula = request.data['celula']
    addBitacora = request.data['addBitacora']
    try:
        ben = request.data['beneficiary']
    except:
        ben = 0
    programap = request.data['programap']
    # --------****
    try:
        if int(status) > 0:
            if(int(status)) ==12:
                st = [12,17]
            else:
                st = [int(status)]
        else:
            st = [1,2,10,11,12,13,14,15,16,17]
    except Exception as e:
        st = [1,2,10,11,12,13,14,15,16,17]

    if int(group) > 0:
            grupos1 = Group.objects.get(pk = int(group))
            subg = Group.objects.filter(parent__id = int(group), type_group = 2, org_name=request.GET.get('org')).values_list('pk', flat=True)
            subsubg = Group.objects.filter(parent__id__in = subg, type_group = 3, org_name=request.GET.get('org')).values_list('pk', flat=True)
            allgrupos = list(subg) + list(subsubg)
            allgrupos.append(grupos1.id)
            grupos = Group.objects.filter(pk__in = allgrupos, org_name=request.GET.get('org'))
    else:
        grupos = Group.objects.filter(org_name=request.GET.get('org'))

    if int(subgrupo) > 0:
            subg = Group.objects.get(pk = int(subgrupo), org_name=request.GET.get('org'))
            subsubg = Group.objects.filter(parent__id = int(subgrupo), type_group = 3, org_name=request.GET.get('org')).values_list('pk', flat=True)
            allgrupos =list(subsubg)
            allgrupos.append(subg.id)
            grupos = Group.objects.filter(pk__in = allgrupos, org_name=request.GET.get('org'))
    # else:
    #       grupos = Group.objects.filter(org_name=request.GET.get('org'))
    if int(subsubgrupo) > 0:
            grupos = Group.objects.get(pk = int(subsubgrupo), org_name=request.GET.get('org'))
    # else:
    #       grupos = Group.objects.filter(org_name=request.GET.get('org'))
    # -----GRUPOS-----
    if int(nivelagrupacion) > 0:
        levels1 = GroupingLevel.objects.get(pk = int(nivelagrupacion))
        levels2 = GroupingLevel.objects.filter(parent__id = int(nivelagrupacion), type_grouping = 2, org_name=request.GET.get('org')).values_list('pk', flat=True)
        levels3 = GroupingLevel.objects.filter(parent__id__in = levels2, type_grouping = 3, org_name=request.GET.get('org')).values_list('pk', flat=True)
        levelgropings = list(levels2) + list(levels3)
        levelgropings.append(levels1.id)
        levelGrouping = GroupingLevel.objects.filter(pk__in = levelgropings, org_name=request.GET.get('org'))
    else:
        levelGrouping = GroupingLevel.objects.filter(org_name=request.GET.get('org'))

    if int(subnivel) > 0:
        levels2 = GroupingLevel.objects.get(pk = int(subnivel), org_name=request.GET.get('org'))
        levels3 = GroupingLevel.objects.filter(parent__id = int(subnivel), type_grouping = 3, org_name=request.GET.get('org')).values_list('pk', flat=True)
        levelgropings =list(levels3)
        levelgropings.append(levels2.id)
        levelGrouping = GroupingLevel.objects.filter(pk__in = levelgropings, org_name=request.GET.get('org'))
    # else:
    #   levelGrouping = GroupingLevel.objects.filter(org_name=request.GET.get('org'))
    if int(subsubnivel) > 0:
        levelGrouping = GroupingLevel.objects.get(pk = int(subsubnivel), org_name=request.GET.get('org'))
    # else:
    #   levelGrouping = GroupingLevel.objects.filter(org_name=request.GET.get('org'))
    # --------------
    if int(clasificacion) > 0:
        clasifics = Classification.objects.get(pk = int(clasificacion), org_name=request.GET.get('org'))
    else:
        clasifics = Classification.objects.filter(org_name=request.GET.get('org'))


    if (poliza_n) != '0':
        npolicy = poliza_n
    else:
        npolicy = ''

    if (identifier) != '0':
        identif = identifier
    else:
        identif = ''

    if int(provider) > 0 :
        providers = list(Provider.objects.filter(pk = int(provider),provider_type = 2).values_list('pk', flat=True))
    else:
        providers = list(Provider.objects.filter(org_name = request.GET.get('org'),provider_type = 2).values_list('pk', flat=True))

    if int(ramo) > 0 :
        ramos = list(Ramos.objects.filter(pk = int(ramo)).values_list('pk', flat=True))
    else:
        ramos = list(Ramos.objects.filter(org_name = request.GET.get('org'), provider__in = providers).values_list('pk', flat=True))

    if int(subramo) > 0 :
        subramos = list(SubRamos.objects.filter(pk = int(subramo)).values_list('pk', flat=True))
    else:
        subramos = list(SubRamos.objects.filter(org_name = request.GET.get('org'), ramo__in = ramos).values_list('pk', flat=True))

    # Provider sel----
    if (providers_sel):
        providers = list(Provider.objects.filter(pk__in = (providers_sel),provider_type = 2).values_list('pk', flat=True))
    else:
        providers = list(Provider.objects.filter(org_name = request.GET.get('org'),provider_type = 2).values_list('pk', flat=True))
    # ramos_selected----
    if (ramos_sel):
        ramos = list(Ramos.objects.filter(org_name = request.GET.get('org'), provider__in = providers,id__in=ramos_sel).values_list('pk', flat=True))
    else:
        ramos = list(Ramos.objects.filter(org_name = request.GET.get('org'), provider__in = providers).values_list('pk', flat=True))

    # rsubramos_sel----
    if (subramos_sel):
        subramos = list(SubRamos.objects.filter(org_name = request.GET.get('org'), ramo_id__in = ramos,id__in= subramos_sel).values_list('pk', flat=True))
    else:
        subramos = list(SubRamos.objects.filter(org_name = request.GET.get('org'), ramo_id__in = ramos).values_list('pk', flat=True))   

    # users sel----
    if (users_sel):
        users = list(User.objects.filter(pk__in = (users_sel)).values_list('pk', flat=True))
    else:
        users = list(User.objects.values_list('pk', flat=True))
    try:
        clave = int(cve)
        if clave > 0:
          cves = list(Claves.objects.filter(clave__icontains = cve, org_name = request.GET.get('org')).values_list('pk', flat=True))
        else:
          cves = list(Claves.objects.filter(org_name = request.GET.get('org')).values_list('pk', flat=True))
    except:
        cves = list(Claves.objects.filter(clave__icontains = cve, org_name = request.GET.get('org')).values_list('pk', flat=True))
    fianza = []  
    if npolicy:
        fianza = Polizas.objects.filter(status__in = st,
                                   org_name = request.GET.get('org'),
                                   ramo__in = ramos, 
                                   subramo__in = subramos,
                                   document_type__in = [7,8], 
                                   aseguradora__in = providers,
                                   clave__in = cves,
                                   owner__in = users,
                                   poliza_number__icontains = npolicy).exclude(status =0)

    else:
        fianza = Polizas.objects.filter(status__in = st, 
                                   org_name = request.GET.get('org'),
                                   ramo__in = ramos, 
                                   subramo__in = subramos, 
                                   document_type__in = [7,8],
                                   aseguradora__in = providers,
                                   clave__in = cves,
                                   owner__in = users,).exclude(status =0)

    if identif:
        fianza = fianza.filter(identifier__icontains = identif)

    fianza_n = []
    fianza_j = []
    fianza_total = []
    contratanten = []
    contratantej = []
    endososGral = Endorsement.objects.filter(org_name = request.GET.get('org'), policy__document_type__in = [7,8]).exclude(status =0).exclude(policy__status =0)
    if npolicy:
        endososGral = endososGral.filter(policy__poliza_number__icontains = npolicy).exclude(status =0)
    if int(contratante) > 0 :
        contratanten = list( Contractor.objects.filter(pk = int(contratante), group = grupos).values_list('pk', flat = True))
        fianza = fianza.filter(contractor__in = contratanten)
        endososGral = endososGral.filter(policy__contractor__in = contratanten)
    else:
        contratanten = list(Contractor.objects.filter(group = grupos).values_list('pk', flat = True))
        if len(contratanten):
            fianza = fianza.filter(contractor__in = contratanten)
            endososGral = endososGral.filter(policy__contractor__in = contratanten)

        # ----------------------******************************---------------------------------------------------
    if int(group) > 0 :
        fianza = fianza.filter(contractor__group = grupos)
        endososGral = endososGral.filter(policy__contractor__group = grupos)
    if int(nivelagrupacion) > 0 :
        fianza = fianza.filter(groupinglevel = levelGrouping)
        endososGral = endososGral.filter(policy__groupinglevel = levelGrouping)
    # -----------------------------***********************************************-----------------------------------   
    if int(clasificacion) > 0 :
        fianza = fianza.filter(contractor__classification = clasifics)
        endososGral = endososGral.filter(policy__contractor__classification = clasifics)
    if int(celula) > 0 :
        fianza = fianza.filter(celula = celula)
        endososGral = endososGral.filter(policy__celula = celula)
    # -----------------------------***********************************************-----------------------------------
    if (programap):
        fianza = fianza.filter(programa_de_proveedores_contractor__pk__in = programap)
        endososGral = endososGral.filter(policy__programa_de_proveedores_contractor__pk__in = programap)
    try:
        f = "%d/%m/%Y %H:%M:%S"        
        since = datetime.strptime(since , f)
        until = datetime.strptime(until , f)

    except:
        f = "%m/%d/%Y %H:%M:%S"        
        since = datetime.strptime(since , f)
        until = datetime.strptime(until , f)
    # Vigencia
    if int(report_by) == 2:
        date_filters = [Q(start_of_validity__gte=since),Q(start_of_validity__lte = until)]
    elif int(report_by) == 1:
        date_filters = [Q(created_at__gte=since), Q(created_at__lte=until), Q(migrated = False)]
    elif int(report_by) == 3:
        date_filters = [Q(emision_date__gte=since),Q(emision_date__lte = until)]
    elif int(report_by) == 4:
        date_filters = []
        if int(month_factura) !=0:
            fianza = fianza.filter(month_factura = int(month_factura))
            endososGral = endososGral.filter(month_factura = int(month_factura))
        if int(year_factura) !=0:
            fianza = fianza.filter(year_factura = int(year_factura))
            endososGral = endososGral.filter(year_factura = int(year_factura))


    if int(month_factura) !=0:
        fianza = fianza.filter(month_factura = int(month_factura))
    if int(year_factura) !=0:
        fianza = fianza.filter(year_factura = int(year_factura))
    if date_filters:
        if ot_rep:
            if order == 1:
                if asc == 1:
                    fianza = fianza.filter(reduce(operator.and_, date_filters),org_name = request.GET.get('org')).order_by('poliza_number')
                else:
                    fianza = fianza.filter(reduce(operator.and_, date_filters),  org_name = request.GET.get('org')).order_by('-poliza_number')
              
            elif order == 2:
                if asc == 1:
                    fianza = fianza.filter(reduce(operator.and_, date_filters),  org_name = request.GET.get('org')).order_by('-created_at')
                else:
                    fianza = fianza.filter(reduce(operator.and_, date_filters),  org_name = request.GET.get('org')).order_by('created_at')

            elif order == 3:
                if asc == 1:
                    fianza = fianza.filter(reduce(operator.and_, date_filters),  org_name = request.GET.get('org')).order_by('contractor__full_name')
                else:
                    fianza = fianza.filter(reduce(operator.and_, date_filters),  org_name = request.GET.get('org')).order_by('-contractor__full_name')

            elif order == 4:
                if asc == 1:
                    fianza = fianza.filter(reduce(operator.and_, date_filters),  org_name = request.GET.get('org')).order_by('aseguradora__compania')
                else:
                    fianza = fianza.filter(reduce(operator.and_, date_filters),  org_name = request.GET.get('org')).order_by('-aseguradora__compania')

            elif order == 5:
                if asc == 1:
                    fianza = fianza.filter(reduce(operator.and_, date_filters),  org_name = request.GET.get('org')).order_by('ramo__ramo_name')
                else:
                    fianza = fianza.filter(reduce(operator.and_, date_filters),  org_name = request.GET.get('org')).order_by('-ramo__ramo_name')

            elif order == 6:
                if asc == 1:
                    fianza = fianza.filter(reduce(operator.and_, date_filters),  org_name = request.GET.get('org')).order_by('subramo__subramo_name')
                else:
                    fianza = fianza.filter(reduce(operator.and_, date_filters),  org_name = request.GET.get('org')).order_by('-subramo__subramo_name')

            elif order == 7:
                if asc == 1:
                    fianza = fianza.filter(reduce(operator.and_, date_filters),  org_name = request.GET.get('org')).order_by('fianza_type')
                else:
                    fianza = fianza.filter(reduce(operator.and_, date_filters),  org_name = request.GET.get('org')).order_by('-fianza_type')

            elif order == 8:
                if asc == 1:
                    fianza = fianza.filter(reduce(operator.and_, date_filters),  org_name = request.GET.get('org')).order_by('start_of_validity')
                else:
                    fianza = fianza.filter(reduce(operator.and_, date_filters),  org_name = request.GET.get('org')).order_by('-start_of_validity')

            elif order == 9:
                if asc == 1:
                    fianza = fianza.filter(reduce(operator.and_, date_filters),  org_name = request.GET.get('org')).order_by('folio')
                else:
                    fianza = fianza.filter(reduce(operator.and_, date_filters),  org_name = request.GET.get('org')).order_by('-folio')

            elif order == 10:
                if asc == 1:
                    fianza = fianza.filter(reduce(operator.and_, date_filters),  org_name = request.GET.get('org')).order_by('f_currency')
                else:
                    fianza = fianza.filter(reduce(operator.and_, date_filters),  org_name = request.GET.get('org')).order_by('-f_currency')

            elif order == 11:
                if asc == 1:
                    fianza = fianza.filter(reduce(operator.and_, date_filters),  org_name = request.GET.get('org')).order_by('p_neta')
                else:
                    fianza = fianza.filter(reduce(operator.and_, date_filters),  org_name = request.GET.get('org')).order_by('-p_neta')

            elif order == 12:
                if asc == 1:
                    fianza = fianza.filter(reduce(operator.and_, date_filters),  org_name = request.GET.get('org')).order_by('derecho')
                else:
                    fianza = fianza.filter(reduce(operator.and_, date_filters),  org_name = request.GET.get('org')).order_by('-derecho')

            elif order == 13:
                if asc == 1:
                    fianza = fianza.filter(reduce(operator.and_, date_filters),  org_name = request.GET.get('org')).order_by('iva')
                else: 
                    fianza = fianza.filter(reduce(operator.and_, date_filters),  org_name = request.GET.get('org')).order_by('-iva')

            elif order == 14:
                if asc == 1:
                    fianza = fianza.filter(reduce(operator.and_, date_filters),  org_name = request.GET.get('org')).order_by('p_total')
                else:
                    fianza = fianza.filter(reduce(operator.and_, date_filters),  org_name = request.GET.get('org')).order_by('-p_total')

            elif order == 15:
                if asc == 1:
                    fianza = fianza.filter(reduce(operator.and_, date_filters),  org_name = request.GET.get('org')).order_by('comision')
                else:
                    fianza = fianza.filter(reduce(operator.and_, date_filters),  org_name = request.GET.get('org')).order_by('-comision')

            elif order == 16:
                if asc == 1:
                    fianza = fianza.filter(reduce(operator.and_, date_filters),  org_name = request.GET.get('org')).order_by('owner')
                else:
                    fianza = fianza.filter(reduce(operator.and_, date_filters),  org_name = request.GET.get('org')).order_by('-owner')

            elif order == 17:
                if asc == 1:
                    fianza = fianza.filter(reduce(operator.and_, date_filters),  org_name = request.GET.get('org')).order_by('clave__clave')
                else:
                    fianza = fianza.filter(reduce(operator.and_, date_filters),  org_name = request.GET.get('org')).order_by('-clave__clave')

            elif order == 18:
                if asc == 1:
                    fianza = fianza.filter(reduce(operator.and_, date_filters),  org_name = request.GET.get('org')).order_by('tarifa_afianzada')
                else:
                    fianza = fianza.filter(reduce(operator.and_, date_filters),  org_name = request.GET.get('org')).order_by('-tarifa_afianzada')
            else:
                fianza = fianza.filter(reduce(operator.and_, date_filters),  org_name = request.GET.get('org'))
        else:
            if order == 1:
                if asc == 1:
                    fianza = fianza.filter(reduce(operator.and_, date_filters),org_name = request.GET.get('org'),status__gte = 10).order_by('poliza_number')
                else:
                    fianza = fianza.filter(reduce(operator.and_, date_filters),  org_name = request.GET.get('org'),status__gte = 10).order_by('-poliza_number')
              
            elif order == 2:
                if asc == 1:
                    fianza = fianza.filter(reduce(operator.and_, date_filters),  org_name = request.GET.get('org'),status__gte = 10).order_by('-created_at')
                else:
                    fianza = fianza.filter(reduce(operator.and_, date_filters),  org_name = request.GET.get('org'),status__gte = 10).order_by('created_at')

            elif order == 3:
                if asc == 1:
                    fianza = fianza.filter(reduce(operator.and_, date_filters),  org_name = request.GET.get('org'),status__gte = 10).order_by('contractor__full_name')
                else:
                    fianza = fianza.filter(reduce(operator.and_, date_filters),  org_name = request.GET.get('org'),status__gte = 10).order_by('-contractor__full_name')

            elif order == 4:
                if asc == 1:
                    fianza = fianza.filter(reduce(operator.and_, date_filters),  org_name = request.GET.get('org'),status__gte = 10).order_by('aseguradora__compania')
                else:
                    fianza = fianza.filter(reduce(operator.and_, date_filters),  org_name = request.GET.get('org'),status__gte = 10).order_by('-aseguuradora__compania')

            elif order == 5:
                if asc == 1:
                    fianza = fianza.filter(reduce(operator.and_, date_filters),  org_name = request.GET.get('org'),status__gte = 10).order_by('ramo__ramo_name')
                else:
                    fianza = fianza.filter(reduce(operator.and_, date_filters),  org_name = request.GET.get('org'),status__gte = 10).order_by('-ramo__ramo_name')

            elif order == 6:
                if asc == 1:
                    fianza = fianza.filter(reduce(operator.and_, date_filters),  org_name = request.GET.get('org'),status__gte = 10).order_by('subramo__subramo_name')
                else:
                    fianza = fianza.filter(reduce(operator.and_, date_filters),  org_name = request.GET.get('org'),status__gte = 10).order_by('-subramo__subramo_name')

            elif order == 7:
                if asc == 1:
                    fianza = fianza.filter(reduce(operator.and_, date_filters),  org_name = request.GET.get('org'),status__gte = 10).order_by('fianza_type')
                else:
                    fianza = fianza.filter(reduce(operator.and_, date_filters),  org_name = request.GET.get('org'),status__gte = 10).order_by('-fianza_type')

            elif order == 8:
                if asc == 1:
                    fianza = fianza.filter(reduce(operator.and_, date_filters),  org_name = request.GET.get('org'),status__gte = 10).order_by('start_of_validity')
                else:
                    fianza = fianza.filter(reduce(operator.and_, date_filters),  org_name = request.GET.get('org'),status__gte = 10).order_by('-start_of_validity')

            elif order == 9:
                if asc == 1:
                    fianza = fianza.filter(reduce(operator.and_, date_filters),  org_name = request.GET.get('org'),status__gte = 10).order_by('folio')
                else:
                    fianza = fianza.filter(reduce(operator.and_, date_filters),  org_name = request.GET.get('org'),status__gte = 10).order_by('-folio')

            elif order == 10:
                if asc == 1:
                    fianza = fianza.filter(reduce(operator.and_, date_filters),  org_name = request.GET.get('org'),status__gte = 10).order_by('f_currency')
                else:
                    fianza = fianza.filter(reduce(operator.and_, date_filters),  org_name = request.GET.get('org'),status__gte = 10).order_by('-f_currency')

            elif order == 11:
                if asc == 1:
                    fianza = fianza.filter(reduce(operator.and_, date_filters),  org_name = request.GET.get('org'),status__gte = 10).order_by('p_neta')
                else:
                    fianza = fianza.filter(reduce(operator.and_, date_filters),  org_name = request.GET.get('org'),status__gte = 10).order_by('-p_neta')

            elif order == 12:
                if asc == 1:
                    fianza = fianza.filter(reduce(operator.and_, date_filters),  org_name = request.GET.get('org'),status__gte = 10).order_by('derecho')
                else:
                    fianza = fianza.filter(reduce(operator.and_, date_filters),  org_name = request.GET.get('org'),status__gte = 10).order_by('-derecho')

            elif order == 13:
                if asc == 1:
                    fianza = fianza.filter(reduce(operator.and_, date_filters),  org_name = request.GET.get('org'),status__gte = 10).order_by('iva')
                else: 
                    fianza = fianza.filter(reduce(operator.and_, date_filters),  org_name = request.GET.get('org'),status__gte = 10).order_by('-iva')

            elif order == 14:
                if asc == 1:
                    fianza = fianza.filter(reduce(operator.and_, date_filters),  org_name = request.GET.get('org'),status__gte = 10).order_by('p_total')
                else:
                    fianza = fianza.filter(reduce(operator.and_, date_filters),  org_name = request.GET.get('org'),status__gte = 10).order_by('-p_total')

            elif order == 15:
                if asc == 1:
                    fianza = fianza.filter(reduce(operator.and_, date_filters),  org_name = request.GET.get('org'),status__gte = 10).order_by('comision')
                else:
                    fianza = fianza.filter(reduce(operator.and_, date_filters),  org_name = request.GET.get('org'),status__gte = 10).order_by('-comision')

            elif order == 16:
                if asc == 1:
                    fianza = fianza.filter(reduce(operator.and_, date_filters),  org_name = request.GET.get('org'),status__gte = 10).order_by('owner')
                else:
                    fianza = fianza.filter(reduce(operator.and_, date_filters),  org_name = request.GET.get('org'),status__gte = 10).order_by('-owner')

            elif order == 17:
                if asc == 1:
                    fianza = fianza.filter(reduce(operator.and_, date_filters),  org_name = request.GET.get('org'),status__gte = 10).order_by('clave__clave')
                else:
                    fianza = fianza.filter(reduce(operator.and_, date_filters),  org_name = request.GET.get('org'),status__gte = 10).order_by('-clave__clave')

            elif order == 18:
                if asc == 1:
                    fianza = fianza.filter(reduce(operator.and_, date_filters),  org_name = request.GET.get('org'),status__gte = 10).order_by('tarifa_afianzada')
                else:
                    fianza = fianza.filter(reduce(operator.and_, date_filters),  org_name = request.GET.get('org'),status__gte = 10).order_by('-tarifa_afianzada')
            else:
                fianza = fianza.filter(reduce(operator.and_, date_filters),  org_name = request.GET.get('org'),status__gte = 10)
    else:
        if ot_rep:
            fianza = fianza.filter(org_name = request.GET.get('org')).order_by('poliza_number')
        else:
            fianza = fianza.filter(org_name = request.GET.get('org'),status__gte = 10).order_by('poliza_number')

    try:
        dataToFilter = getDataForPerfilRestricted(request, request.GET.get('org'))
    except Exception as er:
        dataToFilter = {}
    if dataToFilter:
        # Contratantes***
        polizasCl = Polizas.objects.filter(document_type__in = [1,3,11,7,8,12,6,4], org_name = request.GET.get('org'))
        polizasToF = Polizas.objects.filter(document_type__in = [1,3,11,7,8], org_name = request.GET.get('org'))
        if dataToFilter['ccpr']:
            polizasToF = polizasToF.filter(contractor__in = list(dataToFilter['ccpr']))
        if dataToFilter['cgpr']:
            polizasToF = polizasToF.filter(contractor__group__in = list(dataToFilter['cgpr']))
        if dataToFilter['ccepr']:
            polizasToF = polizasToF.filter(contractor__cellule__in = list(dataToFilter['ccepr']))
        if dataToFilter['crpr']:
            polizasToF = polizasToF.filter(contractor__vendor__in = list(dataToFilter['crpr']))
        if dataToFilter['cspr']:
            polizasToF = polizasToF.filter(contractor__sucursal__in = list(dataToFilter['cspr']))
        # Pólizas ****
        if dataToFilter['pppr']:
            polizasToF = polizasToF.filter(pk__in = list(dataToFilter['pppr']))
        if dataToFilter['pgpr']:
            polizasToF = polizasToF.filter(contractor__group__in = list(dataToFilter['pgpr']))
        if dataToFilter['prpr']:
            polizasToF = polizasToF.filter(ref_policy__referenciador__in = list(dataToFilter['prpr']))
        if dataToFilter['pcapr']:
            polizasToF = polizasToF.filter(clave__in = list(dataToFilter['pcapr']))
        if dataToFilter['psrpr']:
            polizasToF = polizasToF.filter(subramo__subramo_code__in = list(dataToFilter['psrpr']))
        if dataToFilter['paspr']:
            polizasToF = polizasToF.filter(aseguradora__in = list(dataToFilter['paspr']))
        if dataToFilter['pstpr']:
            polizasToF = polizasToF.filter(status__in = list(dataToFilter['pstpr']))
        
        polizasCT = polizasCl.filter(document_type = 12, parent__in = list(polizasToF))
        polizasGT = polizasCl.filter(document_type = 6, parent__parent__parent__in = list(polizasToF))
        polizasFin = list(polizasToF.values_list('pk', flat = True)) + list(polizasCT.values_list('pk', flat = True)) + list(polizasGT.values_list('pk', flat = True))
        fianza = fianza.filter(pk__in = list(polizasFin))
    

    if int(ben) !=0:
        x = BeneficiariesContract.objects.filter(poliza_many__in = list(fianza),org_name = request.GET.get('org'), pk = ben)
        d = x.values_list('poliza_many')
        fianza = fianza.filter(pk__in = d)
    # Empieza insertado de imagen
    info_org = getInfoOrg(request)
    if len(info_org['logo']) != 0:
        archivo_imagen = 'https://miurabox-public.s3.amazonaws.com/cas/' + info_org['logo']
        # archivo_imagen = get_presigned_url("cas/{url}".format(url=info_org['logo']),28800) 
    else:
      archivo_imagen = 'saam.jpg'

    tipo_reporte = "Reporte de fianzas del " + str(since.strftime("%d/%m/%y")) + " al " + str(until.strftime("%d/%m/%y"))


    si_com = comisions(request)
    campo_celula, campo_agrupacion, campo_lineanegocio, moduleName = getOrgInfo(request)
    if excel_type == 1:
        row_num = 10
        rows_pesos = []
        rows1_pesos = []
        rows1_dolares = []
        prueba = {}
        pesos_fianza = fianza.filter(Q(f_currency = 1))        
        dolares_fianza = fianza.filter(Q(f_currency = 2)) 
        pesos_fianza_n = fianza.filter(Q(f_currency = 1, contractor__type_person =1))        
        dolares_fianza_n = fianza.filter(Q(f_currency = 2, contractor__type_person =1)) 
        pesos_fianza_j = fianza.filter(Q(f_currency = 1, contractor__type_person =2))        
        dolares_fianza_j = fianza.filter(Q(f_currency = 2, contractor__type_person =2))  
        if group_by == 4:
            columns = ['Agrupación', 'Tipo Contratante','Prima Neta', 'Prima Total', 'Comisión', 'Registros','Moneda']
        else:
            columns = ['Agrupación', 'Prima Neta', 'Prima Total', 'Comisión', 'Registros','Moneda']

        if group_by == 1 or group_by == 2 or group_by == 3:
            if group_by == 1:
                tipo_reporte = tipo_reporte + " por Afianzadora"     
                prueba['pesos'] = pesos_fianza.values('aseguradora__compania').annotate(Count('aseguradora__id')).annotate(Sum('p_neta')).annotate(Sum('p_total')).annotate(Sum('comision')).order_by('aseguradora__id')
                prueba['dolares'] = dolares_fianza.values('aseguradora__compania').annotate(Count('aseguradora__id')).annotate(Sum('p_neta')).annotate(Sum('p_total')).annotate(Sum('comision')).order_by('aseguradora__id')
                rows_pesos = prueba['pesos'].values_list('aseguradora__compania','p_neta__sum','p_total__sum','comision__sum','aseguradora__id__count')
                rows_dolares = prueba['dolares'].values_list('aseguradora__compania','p_neta__sum','p_total__sum','comision__sum','aseguradora__id__count')
                rows1_pesos = []
                rows1_dolares = []
            elif group_by == 2:
                tipo_reporte = tipo_reporte + "por Ramo"
                prueba['pesos'] = pesos_fianza.values('ramo__ramo_name').annotate(Count('ramo')).annotate(Sum('p_neta')).annotate(Sum('p_total')).annotate(Sum('comision')).order_by('ramo__ramo_name')
                prueba['dolares'] = dolares_fianza.values('ramo__ramo_name').annotate(Count('ramo')).annotate(Sum('p_neta')).annotate(Sum('p_total')).annotate(Sum('comision')).order_by('ramo__ramo_name')
                rows_pesos = prueba['pesos'].values_list('ramo__ramo_name','p_neta__sum','p_total__sum','comision__sum','ramo__count')
                rows_dolares = prueba['dolares'].values_list('ramo__ramo_name','p_neta__sum','p_total__sum','comision__sum','ramo__count')
                rows1_pesos = []
                rows1_dolares = []
            elif group_by == 3:
                tipo_reporte = tipo_reporte +  " por Subramo"
                prueba['pesos'] = pesos_fianza.values('subramo__subramo_name').annotate(Count('subramo')).annotate(Sum('p_neta')).annotate(Sum('p_total')).annotate(Sum('comision')).order_by('subramo__subramo_name')
                prueba['dolares'] = dolares_fianza.values('subramo__subramo_name').annotate(Count('subramo')).annotate(Sum('p_neta')).annotate(Sum('p_total')).annotate(Sum('comision')).order_by('subramo__subramo_name')
                rows_pesos = prueba['pesos'].values_list('subramo__subramo_name','p_neta__sum','p_total__sum','comision__sum','subramo__count')
                rows_dolares = prueba['dolares'].values_list('subramo__subramo_name','p_neta__sum','p_total__sum','comision__sum','subramo__count')
                rows1_pesos = []
                rows1_dolares = []                
            agrupacion = []
            prima = []
            total = []
            comision = []
            moneda = []
            registrosA = []
            com_conciliada = []
            dolares = 0
            p = 0
            c_pesos = 0
            cc_pesos = 0
            c_dolares = 0
            cc_dolares = 0
            neta_pesos = 0
            neta_dolares = 0
            for row in rows_pesos:
                if row[0] != None:
                    row_num += 1
                    c_pesos = c_pesos + row[3]
                    cc_pesos = cc_pesos 
                    neta_pesos = neta_pesos + row[1]
                    if row[2]:
                        p = p + row[2]
                    ag = ((((((row[0]).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')    
                    prn = row[1]
                    tot = row[2]
                    com = row[3]
                    mon = 'Pesos'
                    regs = row[4]
                    # cc = row[5]
                    agrupacion.append(ag)
                    prima.append(prn)
                    total.append(tot)
                    comision.append(com)
                    moneda.append(mon)
                    registrosA.append(regs)
                    # com_conciliada.append(cc)
            # dolares 1
            for row_2 in rows_dolares:
                if row_2[0] != None:
                    row_num += 1
                    c_dolares = c_dolares + row_2[3]
                    cc_dolares
                    neta_dolares = neta_dolares + row_2[1]
                    if row_2[2]:
                        dolares = dolares + row_2[2]
                    ag = ((((((row_2[0]).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')   
                    prn = row_2[1]
                    tot = row_2[2]
                    com = row_2[3]
                    mon = 'Dolares'
                    regs = row_2[4]
                    agrupacion.append(ag)
                    prima.append(prn)
                    total.append(tot)
                    comision.append(com)
                    moneda.append(mon)
                    registrosA.append(regs)
                    # com_conciliada.append(cc)
            obj = {                
                'agrupacion'   : str(list(agrupacion)),
                'prima'   : str(list(prima)),
                'total'   : str(list(total)),
                'comision'   : str(list(comision)),
                'moneda'   : str(list(moneda)),
                'registrosA'   : str(list(registrosA)),
                'com_conciliada'   : str(list(com_conciliada)),
                'dolares'   : '$ {:,.2f}'.format(dolares),
                'pesos'   : '$ {:,.2f}'.format(p),
                'cpesos'   : '$ {:,.2f}'.format(c_pesos),
                'cdolares'   : '$ {:,.2f}'.format(c_dolares),
                'ccpesos'   : '$ {:,.2f}'.format(cc_pesos),
                'ccdolares'   : '$ {:,.2f}'.format(cc_dolares),
                'npesos'   : '$ {:,.2f}'.format(neta_pesos),
                'ndolares'   : '$ {:,.2f}'.format(neta_dolares),
                'grupo': int(group_by),
                'tipo_reporte': tipo_reporte,
                'email_org':info_org['email'],
                'phone_org':info_org['phone'],
                'webpage_org':info_org['webpage'],
                'address_org':info_org['address'],
                'urlname_org':info_org['name'],
            }   
            obj['columns'] = columns
            obj['imagen'] = archivo_imagen
            obj['registros'] = len(agrupacion) 
            obj['typeReport'] = 2
            r = requests.post(settings.SERVICEEXCEL_URL + 'get-polizaAgrupadoExcelReporte/', obj,
            # headers = {
            # 'Authorization':'Bearer %s'%request.user.user_info.fi_token_refresh,
            # # 'Content-Type':'application/json' 
            # }, 
            stream=True)
            response_data= r.text

            response = HttpResponse(r.content,content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')
            return response
        elif group_by == 4:
            prueba_n_pesos = pesos_fianza_n.values('contractor__group__group_name').annotate(Count('contractor__group')).annotate(Sum('p_neta')).annotate(Sum('p_total')).annotate(Sum('comision')).order_by('contractor__group__group_name')
            prueba_n_dolares = dolares_fianza_n.values('contractor__group__group_name').annotate(Count('contractor__group')).annotate(Sum('p_neta')).annotate(Sum('p_total')).annotate(Sum('comision')).order_by('contractor__group__group_name')
            prueba_j_pesos = pesos_fianza_j.values('contractor__group__group_name').annotate(Count('contractor__group')).annotate(Sum('p_neta')).annotate(Sum('p_total')).annotate(Sum('comision')).order_by('contractor__group__group_name')
            prueba_j_dolares = dolares_fianza_j.values('contractor__group__group_name').annotate(Count('contractor__group')).annotate(Sum('p_neta')).annotate(Sum('p_total')).annotate(Sum('comision')).order_by('contractor__group__group_name')
            prueba['naturals_pesos'] = prueba_n_pesos
            prueba['naturals_dolares'] = prueba_n_dolares
            prueba['juridicals_pesos'] = prueba_j_pesos
            prueba['juridicals_dolares'] = prueba_j_dolares
            rows_pesos = prueba['naturals_pesos'].values_list('contractor__group__group_name','p_neta__sum','p_total__sum','comision__sum','contractor__group__count')
            rows_dolares = prueba['naturals_dolares'].values_list('contractor__group__group_name','p_neta__sum','p_total__sum','comision__sum','contractor__group__count')
            rows1_pesos = prueba['juridicals_pesos'].values_list('contractor__group__group_name','p_neta__sum','p_total__sum','comision__sum','contractor__group__count')
            rows1_dolares = prueba['juridicals_dolares'].values_list('contractor__group__group_name','p_neta__sum','p_total__sum','comision__sum','contractor__group__count')
            tipo_reporte = tipo_reporte + " por Grupo"
            
            tipoContratante = []
            agrupacion = []
            prima = []
            total = []
            comision = []
            moneda = []
            registrosA = []
            com_conciliada = []
            dolares = 0
            p = 0
            c_pesos = 0
            cc_pesos = 0
            c_dolares = 0
            cc_dolares = 0
            neta_pesos = 0
            neta_dolares = 0
            for row in rows_pesos:
                if row[0] != None:                    
                    row_num += 1
                    c_pesos = c_pesos + row[3]
                    cc_pesos = cc_pesos 
                    neta_pesos = neta_pesos + row[1]
                    if row[2]:
                        p = p + row[2]
                    ag = ((((((row[0]).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'') 
                    tipoc = 'Naturales'   
                    prn = row[1]
                    tot = row[2]
                    com = row[3]
                    mon = 'Pesos'
                    regs = row[4]
                    agrupacion.append(ag)
                    tipoContratante.append(tipoc)
                    prima.append(prn)
                    total.append(tot)
                    comision.append(com)
                    moneda.append(mon)
                    registrosA.append(regs)
                    # com_conciliada.append(cc)
            # Pesos 2
            for row_1 in rows1_pesos:
                pesos_total_f = 0
                if row_1[0] != None:
                    row_num += 1
                    c_pesos = c_pesos + row_1[3]
                    cc_pesos
                    neta_pesos = neta_pesos + row_1[1]
                    if row_1[2]:
                        p = p + row_1[2]                    
                    ag = ((((((row_1[0]).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')   
                    tipoc = 'Morales'
                    prn = row_1[1]
                    tot = row_1[2]
                    com = row_1[3]
                    mon = 'Pesos'
                    regs = row_1[4]
                    agrupacion.append(ag)
                    tipoContratante.append(tipoc)
                    prima.append(prn)
                    total.append(tot)
                    comision.append(com)
                    moneda.append(mon)
                    registrosA.append(regs)
                    # com_conciliada.append(cc)
            # dolares 1
            for row_2 in rows_dolares:
                if row_2[0] != None:
                    row_num += 1
                    c_dolares = c_dolares + row_2[3]
                    cc_dolares
                    neta_dolares = neta_dolares + row_2[1]
                    if row_2[2]:
                        dolares = dolares + row_2[2]
                    ag = ((((((row_2[0]).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')   
                    tipoc = 'Naturales'
                    prn = row_2[1]
                    tot = row_2[2]
                    com = row_2[3]
                    mon = 'Dolares'
                    regs = row_2[4]
                    agrupacion.append(ag)
                    tipoContratante.append(tipoc)
                    prima.append(prn)
                    total.append(tot)
                    comision.append(com)
                    moneda.append(mon)
                    registrosA.append(regs)
                    # com_conciliada.append(cc)
            # dolares 2               
            for row_2f in rows1_dolares:
                if row_2f[0] != None:
                    row_num += 1
                    c_dolares = c_dolares + row_2f[3]
                    cc_dolares 
                    neta_dolares = neta_dolares + row_2f[1]
                    if row_2f[2]:
                        dolares = dolares + row_2f[2]
                    ag = ((((((row_2f[0]).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')   
                    tipoc = 'Morales'
                    prn = row_2f[1]
                    tot = row_2f[2]
                    com = row_2f[3]
                    mon = 'Dolares'
                    regs = row_2f[4]
                    # cc = row_2f[5]
                    agrupacion.append(ag)
                    tipoContratante.append(tipoc)
                    prima.append(prn)
                    total.append(tot)
                    comision.append(com)
                    moneda.append(mon)
                    registrosA.append(regs)
                    # com_conciliada.append(cc)
            obj = {                
                'agrupacion'   : str(list(agrupacion)),
                'tipoContratante': str(list(tipoContratante)),
                'prima'   : str(list(prima)),
                'total'   : str(list(total)),
                'comision'   : str(list(comision)),
                'moneda'   : str(list(moneda)),
                'registrosA'   : str(list(registrosA)),
                'com_conciliada'   : str(list(com_conciliada)),
                'dolares'   : '$ {:,.2f}'.format(dolares),
                'pesos'   : '$ {:,.2f}'.format(p),
                'cpesos'   : '$ {:,.2f}'.format(c_pesos),
                'cdolares'   : '$ {:,.2f}'.format(c_dolares),
                'ccpesos'   : '$ {:,.2f}'.format(cc_pesos),
                'ccdolares'   : '$ {:,.2f}'.format(cc_dolares),
                'npesos'   : '$ {:,.2f}'.format(neta_pesos),
                'ndolares'   : '$ {:,.2f}'.format(neta_dolares),
                'tipo_reporte': tipo_reporte,
                'grupo': int(group_by),
                'email_org':info_org['email'],
                'phone_org':info_org['phone'],
                'webpage_org':info_org['webpage'],
                'address_org':info_org['address'],
                'urlname_org':info_org['name'],
            }   
            obj['columns'] = columns
            obj['imagen'] = archivo_imagen
            obj['registros'] = len(agrupacion) 
            obj['typeReport'] = 2
            r = requests.post(settings.SERVICEEXCEL_URL + 'get-polizaAgrupadoExcelReporte/', obj,
            # headers = {
            # 'Authorization':'Bearer %s'%request.user.user_info.fi_token_refresh,
            # # 'Content-Type':'application/json' 
            # }, 
            stream=True)
            response_data= r.text

            response = HttpResponse(r.content,content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')
            return response
        elif group_by == 5:
            prueba['pesos'] = pesos_fianza.values('vendor__first_name', 'vendor__last_name').annotate(Count('vendor')).annotate(Sum('p_neta')).annotate(Sum('p_total')).annotate(Sum('comision')).order_by('vendor')
            prueba['dolares'] = dolares_fianza.values('vendor__first_name', 'vendor__last_name').annotate(Count('vendor')).annotate(Sum('p_neta')).annotate(Sum('p_total')).annotate(Sum('comision')).order_by('vendor')
            rows_pesos = prueba['pesos'].values_list('vendor__first_name','p_neta__sum','p_total__sum','comision__sum','vendor__count','vendor__last_name')
            rows_dolares = prueba['dolares'].values_list('vendor__first_name','p_neta__sum','p_total__sum','comision__sum','vendor__count','vendor__last_name')
            rows1_pesos = []
            rows1_dolares = []
            tipo_reporte = tipo_reporte + " por Referenciador" 
            # -------
            tipoContratante = []
            agrupacion = []
            prima = []
            total = []
            comision = []
            moneda = []
            registrosA = []
            com_conciliada = []
            dolares = 0
            p = 0
            c_pesos = 0
            cc_pesos = 0
            c_dolares = 0
            cc_dolares = 0
            neta_pesos = 0
            neta_dolares = 0
            for row in rows_pesos:
                if row[0] != None:                    # -------------------
                    row_num += 1
                    c_pesos = c_pesos + row[3]
                    cc_pesos = cc_pesos
                    neta_pesos = neta_pesos + row[1]
                    if row[2]:
                        p = p + row[2]
                    ag = row[0] + ' ' + str(row[5])
                    tipoc = 'Pólizas'   
                    prn = row[1]
                    tot = row[2]
                    com = row[3]
                    mon = 'Pesos'
                    regs = row[4]
                    agrupacion.append(ag)
                    tipoContratante.append(tipoc)
                    prima.append(prn)
                    total.append(tot)
                    comision.append(com)
                    moneda.append(mon)
                    registrosA.append(regs)
                    # com_conciliada.append(cc)
            for row_2 in rows_dolares:
                if row_2[0] != None:
                    row_num += 1
                    c_dolares = c_dolares + row_2[3]
                    cc_dolares
                    neta_dolares = neta_dolares + row_2[1]
                    if row_2[2]:
                        dolares = dolares + row_2[2]
                    ag = row_2[0] +' '+str(row_2[5])
                    tipoc = 'Pólizas'
                    prn = row_2[1]
                    tot = row_2[2]
                    com = row_2[3]
                    mon = 'Dólares'
                    regs = row_2[4]
                    agrupacion.append(ag)
                    tipoContratante.append(tipoc)
                    prima.append(prn)
                    total.append(tot)
                    comision.append(com)
                    moneda.append(mon)
                    registrosA.append(regs)
                    # com_conciliada.append(cc)
            
            obj = {                
                'agrupacion'   : str(list(agrupacion)),
                'tipoContratante': str(list(tipoContratante)),
                'prima'   : str(list(prima)),
                'total'   : str(list(total)),
                'comision'   : str(list(comision)),
                'moneda'   : str(list(moneda)),
                'registrosA'   : str(list(registrosA)),
                'com_conciliada'   : str(list(com_conciliada)),
                'dolares'   : '$ {:,.2f}'.format(dolares),
                'pesos'   : '$ {:,.2f}'.format(p),
                'cpesos'   : '$ {:,.2f}'.format(c_pesos),
                'cdolares'   : '$ {:,.2f}'.format(c_dolares),
                'ccpesos'   : '$ {:,.2f}'.format(cc_pesos),
                'ccdolares'   : '$ {:,.2f}'.format(cc_dolares),
                'npesos'   : '$ {:,.2f}'.format(neta_pesos),
                'ndolares'   : '$ {:,.2f}'.format(neta_dolares),
                'tipo_reporte': tipo_reporte,
                'grupo': int(group_by),
                'email_org':info_org['email'],
                'phone_org':info_org['phone'],
                'webpage_org':info_org['webpage'],
                'address_org':info_org['address'],
                'urlname_org':info_org['name'],
            }   
            obj['columns'] = columns
            obj['imagen'] = archivo_imagen
            obj['registros'] = len(agrupacion) 
            obj['typeReport'] = 2
            r = requests.post(settings.SERVICEEXCEL_URL + 'get-polizaAgrupadoExcelReporte/', obj,
            # headers = {
            # 'Authorization':'Bearer %s'%request.user.user_info.fi_token_refresh,
            # # 'Content-Type':'application/json' 
            # }, 
            stream=True)
            response_data= r.text

            response = HttpResponse(r.content,content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')
            return response
        elif group_by == 7:
            tipo_reporte = tipo_reporte + " por Usuario"
            prueba['pesos'] = pesos_fianza.values('owner__first_name', 'owner__last_name').annotate(Count('owner')).annotate(Sum('p_neta')).annotate(Sum('p_total')).annotate(Sum('comision')).order_by('owner')
            prueba['dolares'] = dolares_fianza.values('owner__first_name', 'owner__last_name').annotate(Count('owner')).annotate(Sum('p_neta')).annotate(Sum('p_total')).annotate(Sum('comision')).order_by('owner')
            rows_pesos = prueba['pesos'].values_list('owner__first_name','p_neta__sum','p_total__sum','comision__sum','owner__count','owner__last_name')
            rows_dolares = prueba['dolares'].values_list('owner__first_name','p_neta__sum','p_total__sum','comision__sum','owner__count','owner__last_name')
            rows1_pesos = []
            rows1_dolares = []

            agrupacion = []
            prima = []
            total = []
            comision = []
            moneda = []
            registrosA = []
            com_conciliada = []
            dolares = 0
            p = 0
            c_pesos = 0
            cc_pesos = 0
            c_dolares = 0
            cc_dolares = 0
            neta_pesos = 0
            neta_dolares = 0
            for row in rows_pesos:
                if row[0] != None:
                    row_num += 1
                    c_pesos = c_pesos + row[3]
                    neta_pesos = neta_pesos + row[1]
                    if row[2]:
                        p = p + row[2]
                    ag = row[0]+ ' ' + str(row[5])  
                    prn = row[1]
                    tot = row[2]
                    com = row[3]
                    mon = 'Pesos'
                    regs = row[4]
                    agrupacion.append(ag)
                    prima.append(prn)
                    total.append(tot)
                    comision.append(com)
                    moneda.append(mon)
                    registrosA.append(regs)
                    # com_conciliada.append(cc)
            # dolares 1
            for row_2 in rows_dolares:
                if row_2[0] != None:
                    row_num += 1
                    c_dolares = c_dolares + row_2[3]
                    cc_dolares
                    neta_dolares = neta_dolares + row_2[1]
                    if row_2[2]:
                        dolares = dolares + row_2[2]
                    ag = row_2[0]+ ' ' + str(row_2[5]) 
                    prn = row_2[1]
                    tot = row_2[2]
                    com = row_2[3]
                    mon = 'Dolares'
                    regs = row_2[4]
                    agrupacion.append(ag)
                    prima.append(prn)
                    total.append(tot)
                    comision.append(com)
                    moneda.append(mon)
                    registrosA.append(regs)
                    # com_conciliada.append(cc)
            obj = {                
                'agrupacion'   : str(list(agrupacion)),
                'prima'   : str(list(prima)),
                'total'   : str(list(total)),
                'comision'   : str(list(comision)),
                'moneda'   : str(list(moneda)),
                'registrosA'   : str(list(registrosA)),
                'com_conciliada'   : str(list(com_conciliada)),
                'dolares'   : '$ {:,.2f}'.format(dolares),
                'pesos'   : '$ {:,.2f}'.format(p),
                'cpesos'   : '$ {:,.2f}'.format(c_pesos),
                'cdolares'   : '$ {:,.2f}'.format(c_dolares),
                'ccpesos'   : '$ {:,.2f}'.format(cc_pesos),
                'ccdolares'   : '$ {:,.2f}'.format(cc_dolares),
                'npesos'   : '$ {:,.2f}'.format(neta_pesos),
                'ndolares'   : '$ {:,.2f}'.format(neta_dolares),
                'grupo': int(group_by),
                'tipo_reporte': tipo_reporte,
                'email_org':info_org['email'],
                'phone_org':info_org['phone'],
                'webpage_org':info_org['webpage'],
                'address_org':info_org['address'],
                'urlname_org':info_org['name'],
            }   
            obj['columns'] = columns
            obj['imagen'] = archivo_imagen
            obj['registros'] = len(agrupacion) 
            obj['typeReport'] = 2
            r = requests.post(settings.SERVICEEXCEL_URL + 'get-polizaAgrupadoExcelReporte/', obj,
            # headers = {
            # 'Authorization':'Bearer %s'%request.user.user_info.fi_token_refresh,
            # # 'Content-Type':'application/json' 
            # }, 
            stream=True)
            response_data= r.text

            response = HttpResponse(r.content,content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')
            return response
        # ---------report service excel----
    if excel_type ==2:
        columns = ['FIADO','EMAIL','TELÉFONO','NO. FIANZA', 'AFIANZADORA', 'RAMO', 'SUBRAMO','ESTATUS EMISIÓN','PRIMA NETA', 'GASTOS EXPEDICIÓN', 'DERECHO', 
                   'IVA', 'PRIMA TOTAL', 'ESTATUS', 'FECHA CREACIÓN', 'TIPO FIANZA', 'VIGENCIA INICIO', 
                   'VIGENCIA FIN', 'FOLIO', '% TARIFA AFIANZADA', 'CREADOR POR', 'CLAVE AFIANZADORA','PLAZO DEL DOCUMENTO FUENTE','MONTO TOTAL','% GARANTÍA','NÚM CONTRATO','PROYECTO','NÚM INCLUSIÓN','MONTO AFIANZADO','GRUPO','Subgrupo','Subsubgrupo','Agrupación',
                   'Subagrupación','Subsubagrupación','Clasificación','Célula', 'MONTO AFIANZADO CON IVA', 'NOMBRE BENEFICIARIO', 'RFC BENEFICIARIO','Bono Afianzadora','FECHA DE PAGO COMISIÓN',
                   'MAQUILA','TIPO CAMBIO (CAPTURA)','FECHA EMISIÓN FACTURA','MES EMISIÓN PRODUCCIÓN','AÑO EMISIÓN PRODUCCIÓN',
                   'FOLIO FACTURA','ENDOSOS TOTALES','PLAZO INICIO DEL DOCUMENTO FUENTE','PLAZO FIN DEL DOCUMENTO FUENTE']
        # ORDEN
        try:
            columns = request.data['cols1']   
            if addBitacora:                
                columns.insert(0, 'TIPO')            
                columns.append('No. Endoso')             
                columns.append('Tipo Endoso')             
                columns.append('Monto antes')             
                columns.append('Aumento/Disminución')             
                columns.append('Monto Actual')             
                columns.append('Anterior Fin_Vigencia')             
                columns.append('Actual Fin_Vigencia')             
            columns.append('OBSERVACIONES FIANZA')             
            columns.append('DESCRIPCION DEL ENDOSO')             
            columns.append('FECHA ENTREGA FIANZA')             
            columns.append('FECHA ENTREGA ENDOSO')             
        except:
            # print(request.data['cols1'])
            pass       
        # ******************************************
        # Empieza insertado de imagen
        info_org = getInfoOrg(request)
        if len(info_org['logo']) != 0:
            archivo_imagen = 'https://miurabox-public.s3.amazonaws.com/cas/' + info_org['logo']
            # archivo_imagen = get_presigned_url("cas/{url}".format(url=info_org['logo']),28800) 
        else:
          archivo_imagen = 'saam.jpg'
        # print(info_org)
        tipo_reporte = "Reporte de fianzas del " + str(since.strftime("%d/%m/%y")) + " al " + str(until.strftime("%d/%m/%y"))
        
        bonovariable = []
        beneficiarios_name = []
        beneficiarios_rfc = []
        asegurado = []
        antiguedad = []
        referenciador = []
        creadopor = []
        dateRen = []
        otRen = []
        responsable = []
        contratante = []
        contratanteE = []
        contratanteP = []
        contratanteG = []
        collection = []
        clave = []
        cp = []
        startC = []
        endC = []
        guarPerc = []  
        number = []  
        monto = []  
        monto_iva = []  
        has_pdp = []
        pdp = []
        fianza = fianza.order_by('id')
        rate = []
        n_inclusion = []
        monto_afianzado = []
        project_name = []
        grupo1 = []
        grupo2 = []
        nivelAg = []
        grupo3 = []
        monedas = []
        grupo4 = []
        clasifica = []
        businessLine = []
        celulaC = []
        fpc = []
        maq = []
        fef = []
        mf =[]
        ff =[]
        erate =[]
        totalends = []
        monto_cancelac = []
        date_canc = []
        emision_d = []
        fpc = []
        foliox = []
        afianz = []
        sra = []
        ramo = []
        emisionst = []
        sts = []
        fianzan = []
        startv = []
        endv = []
        fcurr = []
        pneta = []
        rpf = []
        derecho = []
        iva = []
        comision = []
        ptotl = []
        id_ = []
        created = []
        fianzatype = []
        ident = []
        tipoendoso = []
        cambioOrig =[]
        cambioEndoso =[]
        montoactual =[]
        anteriorvig =[]
        actualvig =[]
        tipo =[]
        obs_end =[]
        fecha_entrega_fianzas =[]
        fecha_entrega_endosos =[]
        plazoEj = []
        sumaMonto = 0
        sumaMontoCancelado = 0
        aniof = []
        observaciones = []
        fbono = []
        fmaquila = []
        registros = len(fianza)
        endososID = []
        noendosos = []
        for r in fianza:
            texto_observaciones=''
            tipo.append('FIANZA')
            obs_end.append('')
            tipoendoso.append('')
            cambioOrig.append('')
            cambioEndoso.append('')
            montoactual.append('')
            anteriorvig.append('')
            actualvig.append('')
            noendosos.append('')            
            monto_cancelac.append(r.monto_cancelacion if r.monto_cancelacion else 0)
            try:               
                fecha_entrega_fianzas.append(r.fecha_entrega.strftime("%d/%m/%Y") if r.fecha_entrega else '')
                fecha_entrega_endosos.append('')
                date_canc.append(r.fecha_cancelacion.strftime("%d/%m/%Y") if r.fecha_cancelacion else '')
                emision_d.append(r.emision_date.strftime("%d/%m/%Y") if r.emision_date else '')
                fpc.append(r.fecha_pago_comision.strftime("%d/%m/%Y") if r.fecha_pago_comision else '')
                foliox.append(r.folio)
                afianz.append((((((r.aseguradora.alias).replace('[','')).replace(']','')).replace("Decimal(",'')).replace(")",'')).replace("'",'')if r.aseguradora else '')
                sra.append(r.subramo.subramo_name)
                ramo.append(r.ramo.ramo_name)
                fianzan.append(r.poliza_number)
                startv.append(r.start_of_validity.strftime("%d/%m/%Y") if r.start_of_validity else '') 
                endv.append(r.end_of_validity.strftime("%d/%m/%Y") if r.end_of_validity else '') 
                fcurr.append(r.f_currency)
                pneta.append(r.p_neta)
                rpf.append(r.rpf)
                derecho.append(r.derecho)
                iva.append(r.iva)
                comision.append(r.comision)
                ptotl.append(r.p_total)
                id_.append(r.id)
                texto_observaciones =((((((((r.observations).replace('[','')).replace(']','')).replace("Decimal(",'')).replace(")",'')).replace("'",'')).replace(".,",'')).replace(",",'') if r.observations else '')
                created.append(r.created_at.strftime("%d/%m/%Y") if r.created_at else '')                 
                try:
                    ft =  ((((((r.fianza_type.type_name if r.fianza_type else '').replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'') 
                    fianzatype.append(ft)
                    # fianzatype.append(r.fianza_type.type_name if r.fianza_type else '')
                except:
                    fianzatype.append('')
                ident.append((((((r.identifier).replace('[','')).replace(']','')).replace("Decimal(",'')).replace(")",'')).replace("'",'') if r.identifier else '')
            except Exception as f:
                fecha_entrega_fianzas.append(r.fecha_entrega.strftime("%d/%m/%Y") if r.fecha_entrega else '')
                fecha_entrega_endosos.append('')
                date_canc.append(r.fecha_cancelacion)
                emision_d.append(r.emision_date)
                fpc.append(r.fecha_pago_comision)
                foliox.append(r.folio)
                try:
                    afianz.append((((((r.aseguradora.alias).replace('[','')).replace(']','')).replace("Decimal(",'')).replace(")",'')).replace("'",'')if r.aseguradora else '')
                except:
                    afianz.append(r.aseguradora.alias)
                sra.append(r.subramo.subramo_name)
                ramo.append(r.ramo.ramo_name)
                emisionst.append(r.emision_status)
                sts.append(r.status)
                fianzan.append(r.poliza_number)
                startv.append(r.start_of_validity)
                endv.append(r.end_of_validity)
                fcurr.append(r.f_currency)
                pneta.append(r.p_neta)
                rpf.append(r.rpf)
                derecho.append(r.derecho)
                iva.append(r.iva)
                comision.append(r.comision)
                ptotl.append(r.p_total)
                id_.append(r.id)
                texto_observaciones =((((((((r.observations).replace('[','')).replace(']','')).replace("Decimal(",'')).replace(")",'')).replace("'",'')).replace(".,",'')).replace(",",'') if r.observations else '')
                created.append(r.created_at)
                try:
                    ft =  ((((((r.fianza_type.type_name if r.fianza_type else '').replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'') 
                    fianzatype.append(ft)
                    # fianzatype.append(r.fianza_type.type_name)
                except:
                    fianzatype.append('')
                ident.append(r.identifier)
            try:
                maq.append(r.maquila)
            except:
                maq.append('')
            try:
                erate.append(r.exchange_rate)
            except:
                erate.append('')
            try:
                mf.append(int(r.month_factura if r.month_factura else 0))
            except:
                mf.append('')
            try:
                aniof.append(int(r.year_factura if r.year_factura else 0))
            except:
                aniof.append('')
            try:
                ff.append((r.folio_factura if r.folio_factura else ''))
            except:
                ff.append('')
            try:
                fef.append((r.date_emision_factura.strftime("%d/%m/%Y") if r.date_emision_factura else ''))
            except:
                fef.append('')
            try:
                fbono.append((r.date_bono.strftime("%d/%m/%Y") if r.date_bono else ''))
            except:
                fbono.append('')
            try:
                fmaquila.append((r.date_maquila.strftime("%d/%m/%Y") if r.date_maquila else ''))
            except:
                fmaquila.append('')
            
            bonov = r.bono_variable
            contratanG = ''
            antig = get_antiguedad(r.start_of_validity)
            if r.owner:
                val_owner = r.owner.first_name + ' '+ str(r.owner.last_name)
            else:
                val_owner = ''
            if r.clave:
                try:
                    cve = r.clave.name + ' '+ str(r.clave.clave)
                    cve = ((((((cve).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')   
                except Exception as ere:
                    cve = ''
            else:
                cve = ''
            if r.business_line:
                if int(r.business_line) ==1:
                    businessLine_ = 'Comercial'
                elif int(r.business_line) ==2:
                    businessLine_ = 'Personal'
                elif int(r.business_line) ==0:
                    businessLine_ = 'Otro'
                else:
                    businessLine_ = ''
            else:
                if int(r.business_line) ==0:
                    businessLine_ = 'Otro'
                else:
                    businessLine_ = ''
            try:
                refs_policy = ReferenciadoresInvolved.objects.filter(policy = r.poliza.id,is_changed=False).values_list('referenciador__first_name','referenciador__last_name')
                if len(refs_policy):
                    v = []
                    try:
                        for it in refs_policy:
                            v.append(it[0] +' '+ str(it[1])+str('; '))
                        referenc = v
                    except Exception as y:
                        referenc = []
                else:
                    referenc = []
            except Exception as e:
                referenc = []
            if r.contractor:
                contratan = ((((((r.contractor.full_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                contratanE = r.contractor.email
                contratanP = r.contractor.phone_number
                # contratanG = r.contractor.group.group_name
                try:
                    contratanG = ((((((r.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                except Exception as ers:
                    contratanG = ''                
                if r.celula:
                    cel = r.celula.celula_name  
                else:
                    cel='-----'
                if r.contractor.classification:
                    clasifica_ = r.contractor.classification.classification_name  
                else:
                    clasifica_='-----'
                contratanG = ((((((r.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                
                try:
                    if r.contractor.group.type_group == 1:
                        contratanG = ((((((r.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        grupo1_ = ''
                        grupo2_ = ''
                    elif r.contractor.group.type_group == 2:
                        grupotype1 = Group.objects.get(pk = r.contractor.group.parent.id)
                        contratanG = ((((((grupotype1.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        grupo1_ = ((((((r.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        grupo2_ = ''
                    elif r.contractor.group.type_group == 3:
                        grupotype1 = Group.objects.get(pk = r.contractor.group.parent.parent.id)
                        contratanG = ((((((grupotype1.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        subgrupotype2 = Group.objects.get(pk = r.contractor.group.parent.id)
                        grupo1_ = ((((((subgrupotype2.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        grupo2_ = ((((((r.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                except Exception as e:
                    contratanG = ''
                    grupo1_ = ''
                    grupo2_ = ''
                try:
                    if r.groupinglevel:
                        if r.groupinglevel.type_grouping == 1:
                            nivelAg_ = ((((((r.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                            grupo3_ = ''
                            grupo4_ = ''
                        elif r.groupinglevel.type_grouping == 2:
                            grupotype1 = GroupingLevel.objects.get(pk = r.groupinglevel.parent.id)
                            nivelAg_ = ((((((grupotype1.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                            grupo3_ = ((((((r.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                            grupo4_ = ''
                        elif r.groupinglevel.type_grouping == 3:
                            grupotype1 = GroupingLevel.objects.get(pk = r.groupinglevel.parent.parent.id)
                            nivelAg_ = ((((((grupotype1.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                            subgrupotype2 = GroupingLevel.objects.get(pk = r.groupinglevel.parent.id)
                            grupo3_ = ((((((subgrupotype2.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                            grupo4_ = ((((((r.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    else:
                        nivelAg_ = ''
                        grupo3_ = ''
                        grupo4_ = ''  
                except Exception as e:
                    nivelAg_ = ''
                    grupo3_ = ''
                    grupo4_ = ''

            else:
                contratan = ''
                contratanE = ''
                contratanP = ''
                contratanG = ''
                clasifica_='-----'            
                cel='-----'
                contratanG = ''
                grupo1_ = ''
                grupo2_ = ''
                nivelAg_ = ''
            if r.id:
                tot = Endorsement.objects.filter(policy__id = r.id, org_name=r.org_name).exclude(status = 0).count()
                totalends.append(tot if tot else 0)
                beneficiario_name = ''
                beneficiario_rfc = ''
                form = Contract.objects.filter(poliza = r.id)
                beneficiarios = BeneficiariesContract.objects.filter(poliza_many = r.id)
                if beneficiarios.exists():
                    beneficiarios = beneficiarios.first()
                    beneficiario_name = "%s %s %s"%(beneficiarios.first_name, beneficiarios.last_name, beneficiarios.second_last_name) if beneficiarios.type_person == 1 else beneficiarios.j_name
                    beneficiario_rfc = beneficiarios.rfc if beneficiarios.rfc else ''
                if form.exists():
                    form = form.first()
                    if form:
                        startpz = (form.start).strftime("%d/%m/%Y") if form.start else ''
                        endpz = (form.end).strftime("%d/%m/%Y") if form.end else ''
                        gp = form.guarantee_percentage
                        num = form.number
                        try:
                            num = ((((((num).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        except:
                            num =num
                        mnt = form.amount
                        mnt_iva = form.amount_iva
                        rate.append(form.rate)
                        n_inclusion.append(form.number_inclusion)
                        monto_afianzado.append(form.guarantee_amount)
                        if form.guarantee_amount:
                            sumaMonto = float(sumaMonto+float(form.guarantee_amount))
                            if r.status ==11:
                                sumaMontoCancelado = float(sumaMontoCancelado+float(form.guarantee_amount))
                        project_name.append(form.description.replace(',','') if form.description else '')
                    else:
                        start = ''
                        end = ''
                        gp = ''
                        num = ''
                        mnt = ''
                        mnt_iva = ''
                        rate.append('')
                        n_inclusion.append('')
                        monto_afianzado.append('')
                        project_name.append('')
                else:
                    start = ''
                    end = ''
                    gp = ''
                    num = ''
                    mnt = ''
                    mnt_iva = ''
                    rate.append('')
                    n_inclusion.append('')
                    monto_afianzado.append('')
                    project_name.append('')
                plazoEj.append(str(startpz)+' - '+str(endpz))
           
            if r.has_programa_de_proveedores:
                has_pdp.append('Si')
                if r.programa_de_proveedores_contractor:
                    try:
                        px=((((((r.programa_de_proveedores_contractor.full_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        pdp.append(px)
                    except:
                        pdp.append(r.programa_de_proveedores_contractor.full_name)

                else:
                    pdp.append('Sin programa de proveedores')
            else:
                has_pdp.append('No')
                pdp.append('Sin programa de proveedores')

            beneficiarios_name.append(beneficiario_name.replace(',',''))
            beneficiarios_rfc.append(beneficiario_rfc)
            monto.append(mnt)
            monto_iva.append(mnt_iva)
            guarPerc.append(gp)
            startC.append(startpz)
            endC.append(endpz)
            number.append(num)
            referenciador.append(referenc)
            antiguedad.append(antig)
            creadopor.append(val_owner)
            contratante.append(contratan)
            contratanteE.append(contratanE)
            contratanteP.append(contratanP)
            contratanteG.append(contratanG)
            clave.append(cve)
            # ---
            grupo1.append(grupo1_)
            grupo2.append(grupo2_)
            nivelAg.append(nivelAg_)
            grupo3.append(grupo3_)
            grupo4.append(grupo4_)
            clasifica.append(clasifica_)
            businessLine.append(businessLine_)
            celulaC.append(cel)
            bonovariable.append(bonov)
            monedas.append(r.get_f_currency_display())    
            try:
                observaciones.append(texto_observaciones)
            except Exception as f:
                observaciones.append(texto_observaciones)
            if addBitacora:
                endosos = Endorsement.objects.filter(policy__id = r.id, org_name=r.org_name).exclude(status = 0).exclude(policy__status =0).order_by('id')
                if (report_by ==4 or report_by=='4'):                    
                    if int(month_factura) !=0:
                        endosos = endosos.filter(month_factura = int(month_factura))
                    if int(year_factura) !=0:
                        endosos = endosos.filter(year_factura = int(year_factura))
                registros = registros+len(endosos)
                if len(endosos) >0:
                    for end in endosos:
                        endososID.append(end.id)
                        tipo.append('ENDOSO')
                        if end.observations:
                            # obs_end.append(end.observations.replace(',',''))
                            obs_end.append((((((end.observations).replace('[','')).replace(']','')).replace("Decimal(",'')).replace(")",'')).replace("'",'')if end.observations else '')
                        else:
                            obs_end.append('')
                        noendosos.append(end.number_endorsement)
                        beneficiarios_name.append(beneficiario_name.replace(',',''))
                        beneficiarios_rfc.append(beneficiario_rfc)
                        rate.append('')
                        foliox.append(end.internal_number)
                        n_inclusion.append('')
                        monto_afianzado.append('')
                        fianzan.append(r.poliza_number if r.poliza_number else r.internal_number)
                        monedas.append(r.get_f_currency_display())
                        monto_cancelac.append('')
                        emision_d.append('')
                        form2 = Contract.objects.filter(poliza = r.id)
                        if form2.exists():
                            form2 = form2.first()
                            if form2:
                                project_name.append(form2.description.replace(',','') if form2.description else '')
                            else:
                                project_name.append('')
                        else:
                            project_name.append('')
                        if r.has_programa_de_proveedores:
                            has_pdp.append('Si')
                            if r.programa_de_proveedores_contractor:
                                try:
                                    px=((((((r.programa_de_proveedores_contractor.full_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                    pdp.append(px)
                                except:
                                    pdp.append(r.programa_de_proveedores_contractor.full_name)

                            else:
                                pdp.append('Sin programa de proveedores')
                        else:
                            has_pdp.append('No')
                            pdp.append('Sin programa de proveedores')
                        guarPerc.append('')
                        number.append(num)
                        monto.append(mnt)
                        monto_iva.append(mnt_iva)
                        fpc.append('')    
                        fecha_entrega_fianzas.append('')  

                        try:
                            fecha_entrega_endosos.append((end.fecha_entrega.strftime("%d/%m/%Y") if end.fecha_entrega else ''))
                        except:
                            fecha_entrega_endosos.append('')
                            
                        try:
                            mf.append(int(end.month_factura if end.month_factura else 0))
                        except:
                            mf.append('')
                        try:
                            aniof.append(int(end.year_factura if end.year_factura else 0))
                        except:
                            aniof.append('')
                        try:
                            maq.append(end.maquila)
                        except:
                            maq.append('')

                        try:
                            ff.append((end.folio_factura if end.folio_factura else ''))
                        except:
                            ff.append('')
                        try:
                            fef.append((end.date_emision_factura.strftime("%d/%m/%Y") if end.date_emision_factura else ''))
                        except:
                            fef.append('')
                        try:
                            fbono.append((end.date_bono.strftime("%d/%m/%Y") if end.date_bono else ''))
                        except:
                            fbono.append('')
                        try:
                            fmaquila.append((end.date_maquila.strftime("%d/%m/%Y") if end.date_maquila else ''))
                        except:
                            fmaquila.append('')                        
                        try:
                            erate.append(r.exchange_rate)
                        except:
                            erate.append('')
                        startC.append(startpz)
                        endC.append(endpz)
                        referenciador.append(referenc)
                        contratante.append(contratan)
                        contratanteE.append(contratanE)
                        contratanteP.append(contratanP)
                        contratanteG.append(contratanG)
                        try:
                            afianz.append((((((r.aseguradora.alias).replace('[','')).replace(']','')).replace("Decimal(",'')).replace(")",'')).replace("'",'')if r.aseguradora else '')
                        except:
                            afianz.append(r.aseguradora.alias)
                        sra.append(r.subramo.subramo_name)
                        ramo.append(r.ramo.ramo_name)
                        emisionst.append(r.emision_status)
                        fcurr.append(r.f_currency)
                        id_.append(r.id)
                        # sts.append(checkStatusEndo(end.status))
                        if end.status !=6:
                            sts.append(r.status)
                        else:
                            sts.append(checkStatusEndo(end.status))
                        startv.append(end.init_date.strftime("%d/%m/%Y") if end.init_date else '')
                        endv.append(end.end_date.strftime("%d/%m/%Y") if end.end_date else '')
                  
                        pneta.append(end.p_neta)
                        rpf.append(end.rpf)
                        derecho.append(end.derecho)
                        iva.append(end.iva)
                        ptotl.append(end.p_total)
                        comision.append(end.comision)
                        id_.append(end.id)
                        # ****************
                        created.append(end.created_at.strftime("%d/%m/%Y"))
                        clave.append('')
                        
                        date_canc.append(r.fecha_cancelacion.strftime("%d/%m/%Y") if r.fecha_cancelacion else '')
                        try:
                            ft =  ((((((r.fianza_type.type_name if r.fianza_type else '').replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'') 
                            fianzatype.append(ft)
                        except:
                            fianzatype.append('')
                        ident.append('')
                        creadopor.append(end.owner.first_name+' '+str(end.owner.last_name))
                        grupo1.append('')
                        grupo2.append('')
                        nivelAg.append('')
                        grupo3.append('')
                        grupo4.append('')
                        totalends.append('')
                        clasifica.append('')
                        bonovariable.append(end.bono_variable if end.bono_variable else 0)
                        businessLine.append('')
                        celulaC.append('')
                        plazoEj.append('')
                        tipoendoso.append(checkConceptEndoso(int(end.concept)))
                        if end.concept == 58 or end.concept ==59:   
                            form1 = Contract.objects.filter(poliza = r.id) 
                            anteriorvig.append('')
                            actualvig.append('')                        
                            s = end.change
                            d = json.loads(s)
                            orig = end.original
                            try:
                                do = json.loads(orig)
                            except:
                                do = orig
                            monto_a_cambiar = d['guarantee_amount'] if 'guarantee_amount' in d else 0
                            monto_original = do['guarantee_amount'] if 'guarantee_amount' in do else 0
                            if end.concept==58:#aumento
                                monto_endoso_aplicado = float(monto_original) -float(monto_a_cambiar)
                                if monto_endoso_aplicado <0:
                                    monto_endoso_aplicado = float(monto_endoso_aplicado)*-1
                            if end.concept ==59:#dismin
                                monto_endoso_aplicado = float(monto_original)-float(monto_a_cambiar)
                                if float(monto_a_cambiar) > float(monto_original):
                                    monto_endoso_aplicado = float(monto_endoso_aplicado)*-1
                            try:
                                monto_endoso_aplicado = '{:,.2f}'.format(float(monto_endoso_aplicado))
                            except Exception as xs:
                                monto_endoso_aplicado = monto_endoso_aplicado
                            montoactual.append(monto_endoso_aplicado if monto_endoso_aplicado else 0)
                            if 'guarantee_amount' in do:
                                cambioOrig.append('{:,.2f}'.format(float(do['guarantee_amount'])))
                            else:
                                cambioOrig.append('')
                            if 'guarantee_amount' in d:
                                cambioEndoso.append('{:,.2f}'.format(float(d['guarantee_amount'])))
                            else:
                                cambioEndoso.append('')
                        elif end.concept ==54 or end.concept ==57 or end.concept ==62:#prorroga
                            if end.concept==54:#prorroga
                                s = end.change
                                d = json.loads(s)
                                if d:
                                    try:
                                        actualvig.append(datetime.strptime(d, '%d/%m/%Y'))
                                    except Exception as e:
                                        f = d[0:10]
                                        f = f.replace("-", "/")
                                        try: 
                                            f = str(datetime.strptime(f, '%Y/%m/%d').strftime("%d"))+'/'+str(datetime.strptime(f, '%Y/%m/%d').strftime("%m")+'/'+str(datetime.strptime(f, '%Y/%m/%d').strftime("%Y")))
                                        except Exception as rt:
                                            f = f
                                        actualvig.append(f)
                                else:
                                    actualvig.append('')
                                orig = end.original
                                try:
                                    do = json.loads(orig)
                                except:
                                    do = orig
                                if do:
                                    f = do[0:10]
                                    f = f.replace("-", "/")
                                    try:                                            
                                        f = str(datetime.strptime(f, '%Y/%m/%d').strftime("%d"))+'/'+str(datetime.strptime(f, '%Y/%m/%d').strftime("%m")+'/'+str(datetime.strptime(f, '%Y/%m/%d').strftime("%Y")))
                                    except Exception as rt:
                                        f = f
                                    anteriorvig.append(f)
                                    # actualvig.append('')
                                else:
                                    anteriorvig.append('')
                                    # actualvig.append('')
                                montoactual.append('')                          
                                cambioOrig.append('')
                                cambioEndoso.append('')
                            if end.concept==57 or end.concept==62:#aumento y prorroga
                                #prorroga
                                s = end.change
                                d = json.loads(s)
                                if d:
                                    f = d['end_date'][0:10]
                                    f = f.replace("-", "/")
                                    try: 
                                        f = str(datetime.strptime(f, '%Y/%m/%d').strftime("%d"))+'/'+str(datetime.strptime(f, '%Y/%m/%d').strftime("%m")+'/'+str(datetime.strptime(f, '%Y/%m/%d').strftime("%Y")))
                                    except Exception as rt:
                                        print('exp', rt)
                                        f = f
                                    actualvig.append(f)
                                orig = end.original
                                try:
                                    do = json.loads(orig)
                                except:
                                    do = orig
                                try:
                                    f = do['end_of_validity'][0:10]
                                    f = f.replace("-", "/")
                                    try:                                            
                                        f = str(datetime.strptime(f, '%Y/%m/%d').strftime("%d"))+'/'+str(datetime.strptime(f, '%Y/%m/%d').strftime("%m")+'/'+str(datetime.strptime(f, '%Y/%m/%d').strftime("%Y")))
                                    except Exception as rt:
                                        f = f
                                    anteriorvig.append(f)
                                except:
                                    try:
                                        f = do['end_of_validity'][0:10]
                                        f = f.replace("-", "/")
                                        try: 
                                            f = str(datetime.strptime(f, '%Y/%m/%d').strftime("%d"))+'/'+str(datetime.strptime(f, '%Y/%m/%d').strftime("%m")+'/'+str(datetime.strptime(f, '%Y/%m/%d').strftime("%Y")))
                                        except Exception as rt:
                                            f = f
                                    except:
                                        if 'end_of_validity' in do:
                                            f = do['end_of_validity']
                                        else:
                                            f = ''
                                    anteriorvig.append(f)
                                ##aumento
                                s = end.change
                                d = json.loads(s)
                                orig = end.original
                                try:
                                    do = json.loads(orig)
                                except:
                                    do = orig
                                monto_a_cambiar = d['guarantee_amount'] if 'guarantee_amount' in d else 0
                                monto_original = do['guarantee_amount'] if 'guarantee_amount' in do else 0
                                monto_endoso_aplicado = float(monto_original) -float(monto_a_cambiar)
                                if monto_endoso_aplicado <0:
                                    monto_endoso_aplicado = float(monto_endoso_aplicado)*-1
                                monto_endoso_aplicado = float(monto_original)-float(monto_a_cambiar)
                                if float(monto_a_cambiar) > float(monto_original):
                                    monto_endoso_aplicado = float(monto_endoso_aplicado)*-1
                                try:
                                    monto_endoso_aplicado = '{:,.2f}'.format(float(monto_endoso_aplicado))
                                except Exception as xs:
                                    monto_endoso_aplicado = monto_endoso_aplicado
                                montoactual.append(monto_endoso_aplicado if monto_endoso_aplicado else 0)

                                if 'guarantee_amount' in do:
                                    cambioOrig.append('{:,.2f}'.format(float(do['guarantee_amount'])))
                                else:
                                    cambioOrig.append('')
                                if 'guarantee_amount' in d:
                                    cambioEndoso.append('{:,.2f}'.format(float(d['guarantee_amount'])))
                                else:
                                    cambioEndoso.append('')

                        else:  
                            montoactual.append('')
                            anteriorvig.append('')
                            actualvig.append('')                            
                            cambioOrig.append('')
                            cambioEndoso.append('')
                        try:
                            observaciones.append(texto_observaciones)
                        except Exception as f:
                            observaciones.append(texto_observaciones)

        # ----edosos
        tipoE = []
        obs_endE = []
        noendososE = []
        folioxE = []
        fianzanE = []
        fecha_entrega_endososE = []
        mfE = []
        aniofE = []
        maqE = []
        ffE = []
        fefE = []
        fbonoE = []
        fmaquilaE = []
        erateE = []
        startCE = []
        endCE = []
        contratanteE = []
        contratanteEE = []
        contratantePE = []
        contratanteGE = []
        afianzE = []
        sraE = []
        ramoE = []
        stsE = []
        startvE = []
        endvE = []
        pnetaE = []
        rpfE = []
        derechoE = []
        ivaE = []
        ptotlE = []
        comisionE = []
        id_E = []
        obsersE = []
        createdE = []
        claveE = []
        fianzatypeE = []
        identE = []
        creadoporE = []
        bonovariableE = []
        tipoendosoE = []
        anteriorvigE = []
        actualvigE = []
        montoactualE = []
        cambioOrigE = []
        cambioEndosoE = []
        monto_cancelacE = []
        fecha_entrega_fianzasE = []
        date_cancE=[]
        emision_dE=[]
        fpcE=[]
        folioxE=[]
        emisionstE=[]
        fcurrE=[]
        observacionesE = []
        totalendsE = []
        rateE=[]
        n_inclusionE = []
        monto_afianzadoE = []
        plazoEjE=[]
        project_nameE=[]
        has_pdpE=[]
        pdpE=[]
        beneficiarios_nameE=[]
        beneficiarios_rfcE = []
        montoE = []
        monto_ivaE = []
        guarPercE = []
        startCE = []
        endCE = []
        numberE = []
        referenciadorE = []
        antiguedadE = []
        creadoporE = []
        claveE = []
        grupo1E = []
        grupo2E = []
        nivelAgE = []
        grupo3E = []
        grupo4E = []
        clasificaE = []
        businessLineE = []
        celulaCE = []
        bonovariableE = []
        monedasE = []
        percentageE = []
        if addBitacora and (report_by ==4 or report_by=='4'):
            endososGral = endososGral.exclude(pk__in = endososID)
            for ind in endososGral:
                texto_observaciones=''
                tipoE.append('ENDOSO')
                # *********************************************
                if ind.policy:
                    r = Polizas.objects.get(pk = ind.policy.id, org_name = ind.org_name)                    
                    monto_cancelacE.append(r.monto_cancelacion if r.monto_cancelacion else 0)
                    try:               
                        fecha_entrega_fianzasE.append(r.fecha_entrega.strftime("%d/%m/%Y") if r.fecha_entrega else '')
                        date_cancE.append(r.fecha_cancelacion.strftime("%d/%m/%Y") if r.fecha_cancelacion else '')
                        emision_dE.append(r.emision_date.strftime("%d/%m/%Y") if r.emision_date else '')
                        fpcE.append(r.fecha_pago_comision.strftime("%d/%m/%Y") if r.fecha_pago_comision else '')
                        folioxE.append(r.folio)
                        emisionstE.append(r.emision_status)
                        fcurrE.append(r.f_currency)
                        try:
                            ft =  ((((((r.fianza_type.type_name if r.fianza_type else '').replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'') 
                            fianzatypeE.append(ft)
                        except:
                            fianzatypeE.append('')
                    except Exception as f:
                        date_cancE.append(r.fecha_cancelacion)
                        emision_dE.append(r.emision_date)
                        fpcE.append(r.fecha_pago_comision)
                        emisionstE.append(r.emision_status)
                        fcurrE.append(r.f_currency)
                        try:
                            ft =  ((((((r.fianza_type.type_name if r.fianza_type else '').replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'') 
                            fianzatypeE.append(ft)
                        except:
                            fianzatypeE.append('')                    
                    try:
                        observacionesE.append((((((ind.observations).replace('[','')).replace(']','')).replace("Decimal(",'')).replace(")",'')).replace("'",'')if r.observations else '')
                    except:
                        observacionesE.append('')
                    bonov = r.bono_variable
                    contratanG = ''
                    antig = get_antiguedad(r.start_of_validity)
                    if r.owner:
                        val_owner = r.owner.first_name + ' '+ str(r.owner.last_name)
                    else:
                        val_owner = ''
                    if r.clave:
                        try:
                            cve = r.clave.name + ' '+ str(r.clave.clave)
                            cve = ((((((cve).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')   
                        except Exception as ere:
                            cve = ''
                    else:
                        cve = ''
                    if r.business_line:
                        if int(r.business_line) ==1:
                            businessLine_ = 'Comercial'
                        elif int(r.business_line) ==2:
                            businessLine_ = 'Personal'
                        elif int(r.business_line) ==0:
                            businessLine_ = 'Otro'
                        else:
                            businessLine_ = ''
                    else:
                        if int(r.business_line) ==0:
                            businessLine_ = 'Otro'
                        else:
                            businessLine_ = ''
                    try:
                        refs_policy = ReferenciadoresInvolved.objects.filter(policy = r.poliza.id,is_changed=False).values_list('referenciador__first_name','referenciador__last_name')
                        if len(refs_policy):
                            vE = []
                            try:
                                for it in refs_policy:
                                    vE.append(it[0] +' '+ str(it[1])+str('; '))
                                referenc = v
                            except Exception as y:
                                referenc = []
                        else:
                            referenc = []
                    except Exception as e:
                        referenc = []
                    if r.contractor:
                        contratan = ((((((r.contractor.full_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        contratanE = r.contractor.email
                        contratanP = r.contractor.phone_number
                        # contratanG = r.contractor.group.group_name
                        try:
                            contratanG = ((((((r.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        except Exception as ers:
                            contratanG = ''                
                        if r.celula:
                            cel = r.celula.celula_name  
                        else:
                            cel='-----'
                        if r.contractor.classification:
                            clasifica_ = r.contractor.classification.classification_name  
                        else:
                            clasifica_='-----'
                        contratanG = ((((((r.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        
                        try:
                            if r.contractor.group.type_group == 1:
                                contratanG = ((((((r.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo1_ = ''
                                grupo2_ = ''
                            elif r.contractor.group.type_group == 2:
                                grupotype1 = Group.objects.get(pk = r.contractor.group.parent.id)
                                contratanG = ((((((grupotype1.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo1_ = ((((((r.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo2_ = ''
                            elif r.contractor.group.type_group == 3:
                                grupotype1 = Group.objects.get(pk = r.contractor.group.parent.parent.id)
                                contratanG = ((((((grupotype1.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                subgrupotype2 = Group.objects.get(pk = r.contractor.group.parent.id)
                                grupo1_ = ((((((subgrupotype2.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo2_ = ((((((r.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        except Exception as e:
                            contratanG = ''
                            grupo1_ = ''
                            grupo2_ = ''
                        try:
                            if r.groupinglevel:
                                if r.groupinglevel.type_grouping == 1:
                                    nivelAg_ = ((((((r.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                    grupo3_ = ''
                                    grupo4_ = ''
                                elif r.groupinglevel.type_grouping == 2:
                                    grupotype1 = GroupingLevel.objects.get(pk = r.groupinglevel.parent.id)
                                    nivelAg_ = ((((((grupotype1.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                    grupo3_ = ((((((r.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                    grupo4_ = ''
                                elif r.groupinglevel.type_grouping == 3:
                                    grupotype1 = GroupingLevel.objects.get(pk = r.groupinglevel.parent.parent.id)
                                    nivelAg_ = ((((((grupotype1.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                    subgrupotype2 = GroupingLevel.objects.get(pk = r.groupinglevel.parent.id)
                                    grupo3_ = ((((((subgrupotype2.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                    grupo4_ = ((((((r.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                            else:
                                nivelAg_ = ''
                                grupo3_ = ''
                                grupo4_ = ''  
                        except Exception as e:
                            nivelAg_ = ''
                            grupo3_ = ''
                            grupo4_ = ''

                    else:
                        contratan = ''
                        contratanE = ''
                        contratanP = ''
                        contratanG = ''
                        clasifica_='-----'            
                        cel='-----'
                        contratanG = ''
                        grupo1_ = ''
                        grupo2_ = ''
                        nivelAg_ = ''

                    if r.id:
                        tot = Endorsement.objects.filter(policy__id = r.id, org_name=r.org_name).exclude(status = 0).count()
                        totalendsE.append(tot if tot else 0)
                        beneficiario_name = ''
                        beneficiario_rfc = ''
                        form = Contract.objects.filter(poliza = r.id)
                        beneficiarios = BeneficiariesContract.objects.filter(poliza_many = r.id)
                        if beneficiarios.exists():
                            beneficiarios = beneficiarios.first()
                            beneficiario_name = "%s %s %s"%(beneficiarios.first_name, beneficiarios.last_name, beneficiarios.second_last_name) if beneficiarios.type_person == 1 else beneficiarios.j_name
                            beneficiario_rfc = beneficiarios.rfc if beneficiarios.rfc else ''
                        if form.exists():
                            form = form.first()
                            if form:
                                startpz = (form.start).strftime("%d/%m/%Y") if form.start else ''
                                endpz = (form.end).strftime("%d/%m/%Y") if form.end else ''
                                gp = form.guarantee_percentage
                                num = form.number
                                try:
                                    num = ((((((num).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                except:
                                    num =num                                
                                mnt = form.amount
                                mnt_iva = form.amount_iva
                                rateE.append(form.rate)
                                n_inclusionE.append(form.number_inclusion)
                                monto_afianzadoE.append(form.guarantee_amount)
                                if form.guarantee_amount:
                                    sumaMonto = float(sumaMonto+float(form.guarantee_amount))
                                    if r.status ==11:
                                        sumaMontoCancelado = float(sumaMontoCancelado+float(form.guarantee_amount))
                                project_nameE.append(form.description.replace(',',''))
                            else:
                                start = ''
                                end = ''
                                gp = ''
                                num = ''
                                mnt = ''
                                mnt_iva = ''
                                rateE.append('')
                                n_inclusionE.append('')
                                monto_afianzadoE.append('')
                                project_nameE.append('')
                        else:
                            start = ''
                            end = ''
                            gp = ''
                            num = ''
                            mnt = ''
                            mnt_iva = ''
                            rateE.append('')
                            n_inclusionE.append('')
                            monto_afianzadoE.append('')
                            project_nameE.append('')
                        plazoEjE.append(str(startpz)+' - '+str(endpz))
                   
                    if r.has_programa_de_proveedores:
                        has_pdpE.append('Si')
                        if r.programa_de_proveedores_contractor:
                            try:
                                px1=((((((r.programa_de_proveedores_contractor.full_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                pdpE.append(px1)
                            except:
                                pdpE.append(r.programa_de_proveedores_contractor.full_name)
                    else:
                        has_pdpE.append('No')
                        pdpE.append('Sin programa de proveedores')

                    beneficiarios_nameE.append(beneficiario_name.replace(',',''))
                    beneficiarios_rfcE.append(beneficiario_rfc)
                    montoE.append(mnt)
                    monto_ivaE.append(mnt_iva)
                    guarPercE.append(gp)
                    startCE.append(startpz)
                    endCE.append(endpz)
                    numberE.append(num)
                    referenciadorE.append(referenc)
                    antiguedadE.append(antig)
                    # creadoporE.append(val_owner)
                    claveE.append(cve)
                    # ---
                    grupo1E.append(grupo1_)
                    grupo2E.append(grupo2_)
                    nivelAgE.append(nivelAg_)
                    grupo3E.append(grupo3_)
                    grupo4E.append(grupo4_)
                    clasificaE.append(clasifica_)
                    businessLineE.append(businessLine_)
                    celulaCE.append(cel)
                    # bonovariableE.append(bonov)
                    monedasE.append(r.get_f_currency_display())
                # ---------------------------------------------
                if ind.observations:
                    obs_endE.append((((((ind.observations).replace('[','')).replace(']','')).replace("Decimal(",'')).replace(")",'')).replace("'",'')if ind.observations else '')                    
                else:
                    obs_endE.append('')
                noendososE.append(ind.number_endorsement)
                folioxE.append(ind.internal_number)
                fianzanE.append(ind.policy.poliza_number if ind.policy.poliza_number else ind.policy.internal_number)
                try:
                    fecha_entrega_endososE.append((ind.fecha_entrega.strftime("%d/%m/%Y") if ind.fecha_entrega else ''))
                except:
                    fecha_entrega_endososE.append('')
                    
                try:
                    mfE.append(int(ind.month_factura if ind.month_factura else 0))
                except:
                    mfE.append('')
                try:
                    aniofE.append(int(ind.year_factura if ind.year_factura else 0))
                except:
                    aniofE.append('')
                try:
                    maqE.append(ind.maquila)
                except:
                    maqE.append('')

                try:
                    ffE.append((ind.folio_factura if ind.folio_factura else ''))
                except:
                    ffE.append('')
                try:
                    fefE.append((ind.date_emision_factura.strftime("%d/%m/%Y") if ind.date_emision_factura else ''))
                except:
                    fefE.append('')
                try:
                    fbonoE.append((ind.date_bono.strftime("%d/%m/%Y") if ind.date_bono else ''))
                except:
                    fbonoE.append('')
                try:
                    fmaquilaE.append((ind.date_maquila.strftime("%d/%m/%Y") if ind.date_maquila else ''))
                except:
                    fmaquilaE.append('')
                if ind.policy.contractor:
                    contratanE = ((((((ind.policy.contractor.full_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    contratanEE = ind.policy.contractor.email
                    contratanEP = ind.policy.contractor.phone_number
                    # contratanEG = ind.policy.contractor.group.group_name
                    try:
                        contratanEG = ((((((ind.policy.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    except Exception as ers:
                        contratanEG = ''                
                    if r.celula:
                        cel = r.celula.celula_name  
                    else:
                        cel='-----'
                    if ind.policy.contractor.classification:
                        clasifica_ = ind.policy.contractor.classification.classification_name  
                    else:
                        clasifica_='-----'
                    contratanEG = ((((((ind.policy.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    
                    try:
                        if ind.policy.contractor.group.type_group == 1:
                            contratanEG = ((((((ind.policy.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                            grupo1_ = ''
                            grupo2_ = ''
                        elif ind.policy.contractor.group.type_group == 2:
                            grupotype1 = Group.objects.get(pk = ind.policy.contractor.group.parent.id)
                            contratanEG = ((((((grupotype1.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                            grupo1_ = ((((((ind.policy.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                            grupo2_ = ''
                        elif ind.policy.contractor.group.type_group == 3:
                            grupotype1 = Group.objects.get(pk = ind.policy.contractor.group.parent.parent.id)
                            contratanEG = ((((((grupotype1.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                            subgrupotype2 = Group.objects.get(pk = ind.policy.contractor.group.parent.id)
                            grupo1_ = ((((((subgrupotype2.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                            grupo2_ = ((((((ind.policy.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    except Exception as e:
                        contratanEG = ''
                        grupo1_ = ''
                        grupo2_ = ''
                    try:
                        if ind.policy.groupinglevel:
                            if ind.policy.groupinglevel.type_grouping == 1:
                                nivelAg_e = ((((((ind.policy.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo3_e = ''
                                grupo4_e = ''
                            elif ind.policy.groupinglevel.type_grouping == 2:
                                grupotype1= GroupingLevel.objects.get(pk = ind.policy.groupinglevel.parent.id)
                                nivelAg_e = ((((((grupotype1.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo3_e = ((((((ind.policy.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo4_e = ''
                            elif ind.policy.groupinglevel.type_grouping == 3:
                                grupotype1 =GroupingLevel.objects.get(pk = ind.policy.groupinglevel.parent.parent.id)
                                nivelAg_e = ((((((grupotype1.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                subgrupotype2 = GroupingLevel.objects.get(pk = ind.policy.groupinglevel.parent.id)
                                grupo3_e = ((((((subgrupotype2.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo4_e = ((((((ind.policy.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        else:
                            nivelAg_e = ''
                            grupo3_e = ''
                            grupo4_e = ''  
                    except Exception as e:
                        nivelAg_ = ''
                        grupo3_ = ''
                        grupo4_ = ''

                else:
                    contratan = ''
                    contratanE = ''
                    contratanP = ''
                    contratanG = ''
                    clasifica_='-----'            
                    cel='-----'
                    contratanG = ''
                    grupo1_ = ''
                    grupo2_ = ''
                    nivelAg_ = ''
                contratanteE.append(contratanE)
                contratanteEE.append(contratanEE)
                contratantePE.append(contratanEP)
                contratanteGE.append(contratanEG)                
                afianzE.append(((((((ind.policy.aseguradora.alias if ind.policy and ind.policy.aseguradora else '').replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",''))
                sraE.append(ind.policy.subramo.subramo_name)
                ramoE.append(ind.policy.ramo.ramo_name)             
                if ind.status !=6:
                    stsE.append(checkStatusFianza(ind.policy.status))
                else:
                    stsE.append(checkStatusEndo(ind.status))
                startvE.append(ind.init_date.strftime("%d/%m/%Y") if ind.init_date else '')
                endvE.append(ind.end_date.strftime("%d/%m/%Y") if ind.end_date else '')
                pnetaE.append(ind.p_neta)
                rpfE.append(ind.rpf)
                derechoE.append(ind.derecho)
                ivaE.append(ind.iva)
                ptotlE.append(ind.p_total)
                comisionE.append(ind.comision)
                id_E.append(ind.id)
                try:
                    obsersE.append((((((ind.observations).replace('[','')).replace(']','')).replace("Decimal(",'')).replace(")",'')).replace("'",'')if ind.observations else '')                    
                except:
                    obsersE.append(ind.observations)
                createdE.append(ind.created_at.strftime("%d/%m/%Y"))
                identE.append((((((ind.policy.identifier).replace('[','')).replace(']','')).replace("Decimal(",'')).replace(")",'')).replace("'",'') if ind.policy.identifier else '')
                creadoporE.append(ind.owner.first_name+' '+str(ind.owner.last_name))
                bonovariableE.append(ind.bono_variable if ind.bono_variable else 0)
                tipoendosoE.append(checkConceptEndoso(int(ind.concept)))
                if ind.concept == 58 or ind.concept ==59:   
                    form1 = Contract.objects.filter(poliza = r.id) 
                    anteriorvigE.append('')
                    actualvigE.append('')                        
                    s = ind.change
                    d = json.loads(s)
                    orig = ind.original
                    try:
                        do = json.loads(orig)
                    except:
                        do = orig
                    monto_a_cambiar = d['guarantee_amount'] if 'guarantee_amount' in d else 0
                    monto_original = do['guarantee_amount'] if 'guarantee_amount' in do else 0
                    if ind.concept==58:#aumento
                        monto_endoso_aplicado = float(monto_original) -float(monto_a_cambiar)
                        if monto_endoso_aplicado <0:
                            monto_endoso_aplicado = float(monto_endoso_aplicado)*-1
                    if ind.concept ==59:#dismin
                        monto_endoso_aplicado = float(monto_original)-float(monto_a_cambiar)
                        if float(monto_a_cambiar) > float(monto_original):
                            monto_endoso_aplicado = float(monto_endoso_aplicado)*-1
                    try:
                        monto_endoso_aplicado = '{:,.2f}'.format(float(monto_endoso_aplicado))
                    except Exception as xs:
                        monto_endoso_aplicado = monto_endoso_aplicado
                    montoactualE.append(monto_endoso_aplicado if monto_endoso_aplicado else 0)
                    if 'guarantee_amount' in do:
                        cambioOrigE.append('{:,.2f}'.format(float(do['guarantee_amount'])))
                    else:
                        cambioOrigE.append('')
                    if 'guarantee_amount' in d:
                        cambioEndosoE.append('{:,.2f}'.format(float(d['guarantee_amount'])))
                    else:
                        cambioEndosoE.append('')
                elif ind.concept ==54 or ind.concept ==57 or ind.concept ==62:#prorroga
                    if ind.concept==54:#prorroga
                        s = ind.change
                        d = json.loads(s)
                        if d:
                            try:
                                actualvigE.append(datetime.strptime(d, '%d/%m/%Y'))
                            except Exception as e:
                                f = d[0:10]
                                f = f.replace("-", "/")
                                try: 
                                    f = str(datetime.strptime(f, '%Y/%m/%d').strftime("%d"))+'/'+str(datetime.strptime(f, '%Y/%m/%d').strftime("%m")+'/'+str(datetime.strptime(f, '%Y/%m/%d').strftime("%Y")))
                                except Exception as rt:
                                    f = f
                                actualvigE.append(f)
                        orig = ind.original
                        try:
                            do = json.loads(orig)
                        except:
                            do = orig
                        if do:
                            f = do[0:10]
                            f = f.replace("-", "/")
                            try:                                            
                                f = str(datetime.strptime(f, '%Y/%m/%d').strftime("%d"))+'/'+str(datetime.strptime(f, '%Y/%m/%d').strftime("%m")+'/'+str(datetime.strptime(f, '%Y/%m/%d').strftime("%Y")))
                            except Exception as rt:
                                f = f
                            anteriorvigE.append(f)
                        else:
                            anteriorvigE.append('')
                        montoactualE.append('')                          
                        cambioOrigE.append('')
                        cambioEndosoE.append('')
                    if ind.concept==57 or ind.concept==62:#aumento y prorroga
                        #prorroga
                        s = ind.change
                        d = json.loads(s)
                        if d:
                            f = d['end_date'][0:10]
                            f = f.replace("-", "/")
                            try: 
                                f = str(datetime.strptime(f, '%Y/%m/%d').strftime("%d"))+'/'+str(datetime.strptime(f, '%Y/%m/%d').strftime("%m")+'/'+str(datetime.strptime(f, '%Y/%m/%d').strftime("%Y")))
                            except Exception as rt:
                                print('exp', rt)
                                f = f
                            actualvigE.append(f)
                        orig = ind.original
                        try:
                            do = json.loads(orig)
                        except:
                            do = orig
                        try:
                            f = do['end_of_validity'][0:10]
                            f = f.replace("-", "/")
                            try:                                            
                                f = str(datetime.strptime(f, '%Y/%m/%d').strftime("%d"))+'/'+str(datetime.strptime(f, '%Y/%m/%d').strftime("%m")+'/'+str(datetime.strptime(f, '%Y/%m/%d').strftime("%Y")))
                            except Exception as rt:
                                f = f
                            anteriorvigE.append(f)
                        except:
                            try:
                                f = do['end_of_validity'][0:10]
                                f = f.replace("-", "/")
                                try: 
                                    f = str(datetime.strptime(f, '%Y/%m/%d').strftime("%d"))+'/'+str(datetime.strptime(f, '%Y/%m/%d').strftime("%m")+'/'+str(datetime.strptime(f, '%Y/%m/%d').strftime("%Y")))
                                except Exception as rt:
                                    f = f
                            except:
                                if 'end_of_validity' in do:
                                    f = do['end_of_validity']
                                else:
                                    f = ''
                            anteriorvigE.append(f)
                        ##aumento
                        s = ind.change
                        d = json.loads(s)
                        orig = ind.original
                        try:
                            do = json.loads(orig)
                        except:
                            do = orig
                        monto_a_cambiar = d['guarantee_amount'] if 'guarantee_amount' in d else 0
                        monto_original = do['guarantee_amount'] if 'guarantee_amount' in do else 0
                        monto_endoso_aplicado = float(monto_original) -float(monto_a_cambiar)
                        if monto_endoso_aplicado <0:
                            monto_endoso_aplicado = float(monto_endoso_aplicado)*-1
                        monto_endoso_aplicado = float(monto_original)-float(monto_a_cambiar)
                        if float(monto_a_cambiar) > float(monto_original):
                            monto_endoso_aplicado = float(monto_endoso_aplicado)*-1
                        try:
                            monto_endoso_aplicado = '{:,.2f}'.format(float(monto_endoso_aplicado))
                        except Exception as xs:
                            monto_endoso_aplicado = monto_endoso_aplicado
                        montoactualE.append(monto_endoso_aplicado if monto_endoso_aplicado else 0)

                        if 'guarantee_amount' in do:
                            cambioOrigE.append('{:,.2f}'.format(float(do['guarantee_amount'])))
                        else:
                            cambioOrigE.append('')
                        if 'guarantee_amount' in d:
                            cambioEndosoE.append('{:,.2f}'.format(float(d['guarantee_amount'])))
                        else:
                            cambioEndosoE.append('')

                else:  
                    montoactualE.append('')
                    anteriorvigE.append('')
                    actualvigE.append('')                            
                    cambioOrigE.append('')
                    cambioEndosoE.append('')
        fianzas_canceladas = fianza.filter(status = 11).aggregate(Sum('p_total'))
        fianzas_vigentes = fianza.filter(status = 14).aggregate(Sum('p_total'))

        if fianza.filter(status = 11).exists():
            fianzas_canceladas = fianzas_canceladas['p_total__sum']
        else:
            fianzas_canceladas = 0
        if fianza.filter(status = 14).exists():
            fianzas_vigentes = fianzas_vigentes['p_total__sum']
        else:
            fianzas_vigentes = 0        
        total_fv_fc = fianzas_vigentes - fianzas_canceladas
        totalFin = float(sumaMonto)-float(sumaMontoCancelado)
        obj = {
            #'tarifa_afianzada'   : str(list(fianza.values_list('tarifa_afianzada', flat = True))),
            'monto_fv': (sumaMonto),
            'monto_fc': (sumaMontoCancelado),
            'total_fvfc': (totalFin),
            'noendosos' : str(list(noendosos)),
            'beneficiario_name' : str(list(beneficiarios_name)),
            'beneficiario_rfc': str(list(beneficiarios_rfc)),
            'tarifa_afianzada'   : str(rate),
            'folio'   : str(list(foliox)),
            'number_inclusion'   : str(list(n_inclusion)),
            'monto_afianzado'   : str(list(monto_afianzado)),
            'fianza_number'   : str(list(fianzan)),
            'moneda'   : str(list(monedas)),
            'cancelacion_amount': str(list(monto_cancelac)),
            'cancelacion_date': str(list(date_canc)),
            'emision_date': str(list(emision_d)),
            'project_name'   : str(list(project_name)),
            'guarPerc'   : str(list(guarPerc)),
            'number'   : str(list(number)),
            'monto'   : str(list(monto)),
            'monto_iva'   : str(list(monto_iva)),
            'fpc'   : str(list(fpc)),
            'fef'   : str(list(fef)),
            'mf'   : str(list(mf)),
            'ff'   : str(list(ff)),
            'maq'   : str(list(maq)),
            'erate'   : str(list(erate)),
            'observaciones': str(list(observaciones)),
            'plazo'   : str(list(startC)),
            'endplazo'   : str(list(endC)),
            'plazoEjecucion':str(list(plazoEj)),
            'contratante'   : str(list(contratante)),
            'contratanteE'   : str(list(contratanteE)),
            'contratanteP'   : str(list(contratanteP)),
            'contratanteG'   : str(list(contratanteG)),
            'afianzadora'   : str(list(afianz)),
            'subramo'   : str(list(sra)),
            'ramo'   :str(list(ramo)),
            'emision_status'   : str(list(emisionst)),
            'status'   : str(list(sts)),
            'start_of_validity'   : str(list(startv)),
            'end_of_validity'   : str(list(endv)),
            'f_currency'   : str(list(fcurr)),
            'p_neta'   : str(list(pneta)),
            'rpf'   : str(list(rpf)),
            'derecho'   : str(list(derecho)),
            'iva'   : str(list(iva)),
            'p_total'   : str(list(ptotl)),
            'comision'   : str(list(comision)),
            '_id'   : str(list(id_)),
            'observations'   : str(list(observaciones)),
            'created_at'   :str(list(created)) ,
            'clave'   : str(list(clave)),
            'fianza_type':str(list(fianzatype)),   
            'identifier'   : str(list(ident)),              
            'referenciador'   : str(list(referenciador)),
            'antiguedad'   : str(list(antiguedad)),
            'creadopor'   : str(list(creadopor)),
            'grupo1'   : str(list(grupo1)) ,
            'grupo2'   : str(list(grupo2)) ,
            'nivelAg'   : str(list(nivelAg)) ,
            'grupo3'   : str(list(grupo3)) ,
            'grupo4'   : str(list(grupo4)) ,
            'totalends'   : str(list(totalends)) ,
            'clasifica'   : str(list(clasifica)) ,
            'bonovariable'   : str(list(bonovariable)) ,
            'businessLine'   : str(list(businessLine)) ,
            'celula'   : str(list(celulaC)) ,
            'cambioOrig'   : str(list(cambioOrig)) ,
            'cambioEndoso'   : str(list(cambioEndoso)) ,
            'tipoendoso'   : str(list(tipoendoso)) ,
            'montoaplicado'   : str(list(montoactual)) ,
            'anteriorfin'   : str(list(anteriorvig)) ,
            'aniofactura'   : str(list(aniof)) ,
            'actualfin'   : str(list(actualvig)) ,
            'fbono'   : str(list(fbono)) ,
            'fmaquila'   : str(list(fmaquila)) ,
            'TIPO': str(list(tipo)),
            'descripcion_del_endoso': str(list(obs_end)),
            'fecha_entrega_fianzas': str(list(fecha_entrega_fianzas)),
            'fecha_entrega_endosos': str(list(fecha_entrega_endosos)),
            'email_org':info_org['email'],
            'phone_org':info_org['phone'],
            'webpage_org':info_org['webpage'],
            'address_org':info_org['address'],
            'urlname_org':info_org['name'],
            'has_pdp': has_pdp,
            'pdp': pdp,
            #endoss
            'tipoE': str(list(tipoE)),
            'obs_endE': str(list(obs_endE)),
            'noendososE': str(list(noendososE)),
            'folioxE':str(list(folioxE)),
            'fianzanE' :str(list(fianzanE)),
            'mfE': str(list(mfE)),
            'aniofE': str(list(aniofE)),
            'maqE': str(list(maqE)),
            'ffE': str(list(ffE)),
            'fefE': str(list(fefE)),
            'fbonoE': str(list(fbonoE)),
            'fmaquilaE':str(list(fmaquilaE)),
            'contratanteE': str(list(contratanteE)),
            'contratanteEE': str(list(contratanteEE)),
            'contratantePE': str(list(contratantePE)),
            'contratanteGE':str(list(contratanteGE)),
            'afianzE':str(list(afianzE)),
            'sraE':str(list(sraE)),
            'ramoE': str(list(ramoE)),
            'stsE': str(list(stsE)),
            'startvE': str(list(startvE)),
            'endvE': str(list(endvE)),
            'pnetaE': str(list(pnetaE)),
            'rpfE': str(list(rpfE)),
            'derechoE': str(list(derechoE)),
            'ivaE': str(list(ivaE)),
            'ptotlE': str(list(ptotlE)),
            'comisionE': str(list(comisionE)),
            'id_E': str(list(id_E)),
            'obsersE': str(list(obsersE)),
            'createdE': str(list(createdE)),
            'claveE': str(list(claveE)),
            'fianzatypeE': str(list(fianzatypeE)),
            'identE': str(list(identE)),
            'bonovariableE': str(list(bonovariableE)),
            'tipoendosoE': str(list(tipoendosoE)),
            'anteriorvigE': str(list(anteriorvigE)),
            'actualvigE' : str(list(actualvigE)),
            'montoactualE': str(list(montoactualE)),
            'cambioOrigE': str(list(cambioOrigE)),
            'cambioEndosoE': str(list(cambioEndosoE)),
            'guarPercE':str(list(guarPercE)),
            # ---*
            'monto_cancelacE':str(list(monto_cancelacE)),
            'fecha_entrega_fianzasE':str(list(fecha_entrega_fianzasE)),
            'fecha_entrega_endososE':str(list(fecha_entrega_endososE)),
            'date_cancE': str(list(date_cancE)),
            'emision_dE': str(list(emision_dE)),
            'fpcE':str(list(fpcE)),
            'folioxE': str(list(folioxE)),
            'emisionstE': str(list(emisionstE)),
            'fcurrE': str(list(fcurrE)),
            'observacionesE':str(list(observacionesE)),
            'rateE':str(list(rateE)),
            'n_inclusionE':str(list(n_inclusionE)),
            'monto_afianzadoE':str(list(monto_afianzadoE)),
            'project_nameE':str(list(project_nameE)),
            'plazoEjE':str(list(plazoEjE)),
            'has_pdpE':str(list(has_pdpE)),
            'pdpE':str(list(pdpE)),
            'beneficiarios_nameE':str(list(beneficiarios_nameE)),
            'beneficiarios_rfcE':str(list(beneficiarios_rfcE)),
            'montoE':str(list(montoE)),
            'monto_ivaE':str(list(monto_ivaE)),
            'guarPercE':str(list(guarPercE)),
            'startCE':str(list(startCE)),
            'endCE':str(list(endCE)),
            'numberE':str(list(numberE)),
            'referenciadorE':str(list(referenciadorE)),
            'antiguedadE':str(list(antiguedadE)),
            'creadoporE':str(list(creadoporE)),
            'grupo1E':str(list(grupo1E)),
            'grupo2E':str(list(grupo2E)),
            'nivelAgE':str(list(nivelAgE)),
            'grupo3E':str(list(grupo3E)),
            'grupo4E':str(list(grupo4E)),
            'clasificaE':str(list(clasificaE)),
            'businessLineE':str(list(businessLineE)),
            'celulaCE':str(list(celulaCE)),
            'monedasE':str(list(monedasE)),
            'totalendsE':str(list(totalendsE)),
            'campo_celula':campo_celula,
            'campo_agrupacion':campo_agrupacion,
            'campo_lineanegocio':campo_lineanegocio
            # *----
        }  
        if campo_lineanegocio == 'False' or campo_lineanegocio == False:
            if 'businessLine' in obj:
                del obj['businessLine'] 
        if campo_celula == 'False' or campo_celula == False:
            if 'celulaCE' in obj:
                del obj['celulaCE'] 
            if 'celula' in obj:
                del obj['celula'] 
            if 'Célula' in columns:
                columns.remove('Célula')
        if campo_agrupacion == 'False' or campo_agrupacion == False:
            if 'nivelAg' in obj:
                del obj['nivelAg'] 
            if 'grupo3' in obj:
                del obj['grupo3'] 
            if 'grupo4' in obj:
                del obj['grupo4'] 
        
        obj['columns'] = str(list(columns))
        obj['imagen'] = archivo_imagen
        obj['registros'] = (registros)
        obj['addBitacora'] = addBitacora
        obj['report_by'] = report_by
        obj['endososgral'] = len(endososGral)
        obj['moduleName'] = moduleName
        
        r = requests.post(settings.SERVICEEXCEL_URL + 'get-fianzasExcelReporte/', obj,
        # headers = {
        # 'Authorization':'Bearer %s'%request.user.user_info.fi_token_refresh,
        # # 'Content-Type':'application/json' 
        # },
        stream=True)
        response_data= r.text

        response = HttpResponse(r.content,content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

        return response
# Reporte log Reporte
@api_view(['POST'])
@permission_classes((IsAuthenticatedV2, RenovacionesReportesPermissionsV2, IsOrgMemberV2))
def Service_ReporteLogExcel(request):
    # Parameters
    usuarios = request.data['users']
    model = request.data['model']
    since = request.data['since']
    until = request.data['until']
    group_by = request.data['groupBy']
    export = request.data['export_type']
    # Multiples users
    if usuarios:
        users = list(User.objects.filter(pk__in = usuarios).values_list('pk', flat=True))
    else:
        users = list(User.objects.values_list('pk', flat=True))
    # Filtro de fechas
    try:
        f = "%d/%m/%Y %H:%M:%S"
        since = datetime.strptime(since , f)
        until = datetime.strptime(until , f)
    except:
        f = "%m/%d/%Y %H:%M:%S"
        since = datetime.strptime(since , f)
        until = datetime.strptime(until , f)
    date_filters = [Q(created_at__gte=since),Q(created_at__lte = until)]

    logs = Log.objects.filter(reduce(operator.and_, date_filters)).filter(org_name=request.GET.get('org')).exclude(model=32)
    # Filtro de model
    if int(model) == 0:
        logs = logs
    else:
        if int(model) ==2:#físico
            nats = list(Contractor.objects.filter(type_person =1, org_name = request.GET.get('org')).values_list('pk', flat = True))
            logs = logs.filter(model = 26, associated_id__in = nats)
        elif int(model) ==3:#moral
            morl = list(Contractor.objects.filter(type_person =2, org_name = request.GET.get('org')).values_list('pk', flat = True))       
            logs = logs.filter(model = 26, associated_id__in = morl)        
        else:
            logs = logs.filter(model = int(model))
    # Filtro de ususarios selected
    if usuarios:
        logs = logs.filter(Q(user__in = users))
    # Agrupación no
    if int(group_by) == 0:
        logs = logs

    else:
        try:
            if group_by == 1:
                prueba = {}
                prueba = logs.values('user__first_name','user__last_name').annotate(Count('model')).annotate(Sum('event')).annotate(Count('user__id')).order_by('user__id')
        except Exception as e:
            pass

    response = HttpResponse(content_type='application/ms-excel')
    response['Content-Disposition'] = 'attachment; filename="Reporte Transacciones.xls"'

    wb = xlwt.Workbook(encoding='utf-8')
    ws = wb.add_sheet('Paquetes')

    # Empieza insertado de imagen
    info_org = getInfoOrg(request)
    if len(info_org['logo']) != 0:
        archivo_imagen = 'https://miurabox-public.s3.amazonaws.com/cas/' + info_org['logo']
        # archivo_imagen = get_presigned_url("cas/{url}".format(url=info_org['logo']),28800) 
    else:
        archivo_imagen = 'saam.jpg'

    if info_org['urlname'] != 'basanez':
        try:
            img = Image.open(requests.get(archivo_imagen, stream=True).raw)
            r, g, b = img.split()
            img = Image.merge("RGB", (r, g, b))
            img = img.resize((130,150),Image.ANTIALIAS)
            name_logo = info_org['urlname']+'_logo.bmp'
            img.save(name_logo)
            ws.insert_bitmap(name_logo, 0, 0)
        except Exception as e:
            img = Image.open("saam.jpg")
            r, g, b = img.split()
            img = Image.merge("RGB", (r, g, b))
            img.save('imagetoadd.bmp')
            ws.insert_bitmap('imagetoadd.bmp', 0, 0)


    company_style = xlwt.XFStyle()
    pattern = xlwt.Pattern()
    company_style.pattern = pattern
    company_style = xlwt.easyxf('font: bold on, color black, height 380;\
                     pattern: pattern solid, fore_color white; align: horiz center')
    ws.write(0, 5, info_org['name'], company_style)

    text_style = xlwt.XFStyle()
    pattern = xlwt.Pattern()
    text_style.pattern = pattern
    text_style = xlwt.easyxf('font: bold off, color black;\
                     pattern: pattern solid, fore_color white; align: horiz center')
    ws.write(1, 5, info_org['address'], text_style)
    ws.write(3, 5, "Tel." + info_org['phone'], text_style)
    ws.write(4, 5, info_org['email'], text_style)
    ws.write(5, 5, info_org['webpage'], text_style)

    title_style = xlwt.XFStyle()
    pattern = xlwt.Pattern()
    title_style.pattern = pattern
    title_style = xlwt.easyxf('font: bold on, color black, height 280;\
                     pattern: pattern solid, fore_color white; align: horiz center')
    row_num = 10
    font_style = xlwt.XFStyle()
    font_style.font.bold = True
    # Totales dela agrupación
    if int(export) == 1:
        font_style.font.bold = True
        columns = ['Usuario', 'Registros']

        for col_num in range(len(columns)):
            style = xlwt.XFStyle()
            pattern = xlwt.Pattern()
            pattern.pattern = xlwt.Pattern.SOLID_PATTERN
            style = xlwt.easyxf('font: bold on, color black;\
                         borders: top_color black, bottom_color black, right_color black, left_color black,\
                                  left thin, right thin, top thin, bottom thin;\
                         pattern: pattern solid, fore_color ice_blue; align: horiz center')
            ws.write(row_num, col_num, columns[col_num], style)
        rows = prueba.values_list('user__first_name','user__last_name','user__id__count')

        for row in rows:
            row_num += 1
            for col_num in range(2):
                font_style.font.bold = False
                if col_num == 0:
                    font_style.num_format_str = 'general'
                    value = (row[col_num]) + ' '+ str(row[1])
                elif col_num == 1:
                    font_style.num_format_str = 'general'
                    value = row[2]
                else:
                    font_style.num_format_str = 'general'
                    value = row[col_num]

                try:
                    ws.write(row_num, col_num, value, font_style)
                except Exception as e:
                    value = (row[col_num].replace(tzinfo=None))
                    ws.write(row_num, col_num, value, font_style)
        final_row = int(row_num) + 2
        title = "Total: " + str(len(rows)) + " Registros"
        font_style = xlwt.easyxf('font: bold off, color black;\
                         pattern: pattern solid, fore_color white;')
        ws.write(final_row, 0, title, font_style)
        wb.save(response)
        return response
    # Desglose
    elif int(export) == 2:
        font_style.font.bold = True
        # user__first_name','event','identifier','model','created_at','user__last_name
        columns = ['Usuario','Acción','Modelo','Fecha Creación','Registro','ID SAAM']    
        # ******************************************
        # Empieza insertado de imagen
        info_org = getInfoOrg(request)
        if len(info_org['logo']) != 0:
          archivo_imagen = 'https://miurabox-public.s3.amazonaws.com/cas/' + info_org['logo']
            # archivo_imagen = get_presigned_url("cas/{url}".format(url=info_org['logo']),28800) 
        else:
          archivo_imagen = 'saam.jpg'
        tipo_reporte = "Reporte de registros del " + str(since.strftime("%d/%m/%y")) + " al " + str(until.strftime("%d/%m/%y"))
           
        user_log = []
        log_reg = []
        event = []
        logs = logs.order_by('user__first_name','user__last_name')
        for r in logs:
            if r.associated_id:
                if r.model ==1 or r.model ==6 or r.model ==13 or r.model==18 or r.model==25 or r.model==28:
                    try:
                        rg = Polizas.objects.get(pk=r.associated_id,org_name=r.org_name)
                        # log_reg.append(rg.poliza_number if rg.poliza_number else rg.internal_number)
                        if rg.poliza_number:
                            log_reg.append(((((((rg.poliza_number).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",''))
                        elif rg.internal_number:
                            log_reg.append(((((((rg.internal_number).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",''))
                        else:
                            log_reg.append('')
                    except:
                        log_reg.append('')
                elif r.model ==2 or r.model==26:
                    try:
                        rg = Contractor.objects.get(pk=r.associated_id,org_name=r.org_name)
                        # log_reg.append(rg.full_name if rg.full_name else str(rg.first_name) +' '+str(rg.last_name)+' - ' +str(rg.rfc))
                        if rg.full_name:
                            log_reg.append(((((((rg.full_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",''))
                        elif rg.rfc:
                            log_reg.append(((((((rg.rfc).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",''))
                        else:
                            log_reg.append('')
                    except Exception as e:
                        print('eror',e)
                        log_reg.append('')
                elif r.model ==4 or r.model==7 or r.model==20:
                    try:
                        dt=''
                        rg = Recibos.objects.get(pk=r.associated_id,org_name=r.org_name)
                        if rg.receipt_type==1:
                            dt = rg.poliza.poliza_number if rg.poliza  and rg.receipt_type==1 else ' '
                        if rg.receipt_type==2:
                            dt = rg.endorsement.number_endorsement if rg.endorsement  and rg.receipt_type==2 else ' '
                        if rg.receipt_type==3:
                            dt = rg.endorsement.number_endorsement if rg.endorsement  and rg.receipt_type==3 else ' '
                        dt = dt+' Número Recibo: '+str(rg.recibo_numero)+'- Prima Total: '+str(rg.prima_total)
                        # log_reg.append(dt)
                        log_reg.append(((((((dt).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",''))

                    except:
                        log_reg.append('')
                elif r.model ==5:
                    try:
                        rg = Siniestros.objects.get(pk=r.associated_id,org_name=r.org_name)
                        # log_reg.append(rg.numero_siniestro if rg.numero_siniestro else rg.folio_interno)
                        if rg.numero_siniestro:
                            log_reg.append(((((((rg.numero_siniestro).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",''))
                        elif rg.folio_interno:
                            log_reg.append(rg.folio_interno)
                        else:
                            log_reg.append('')
                    except:
                        log_reg.append('')
                elif r.model ==8:
                    try:
                        rg = Group.objects.get(pk=r.associated_id,org_name=r.org_name)
                        # log_reg.append(rg.group_name if rg.group_name else rg.id)
                        if rg.package_name:
                            log_reg.append(((((((rg.package_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",''))
                        elif rg.id:
                            log_reg.append(rg.id)
                        else:
                            log_reg.append('')
                    except:
                        log_reg.append('')
                elif r.model ==9:
                    try:
                        rg = Package.objects.get(pk=r.associated_id,org_name=r.org_name)
                        # log_reg.append(rg.package_name if rg.package_name else rg.id)
                        if rg.package_name:
                            log_reg.append(((((((rg.package_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",''))
                        elif rg.id:
                            log_reg.append(rg.id)
                        else:
                            log_reg.append('')
                    except:
                        log_reg.append('')
                elif r.model ==10:
                    try:
                        rg = Endorsement.objects.get(pk=r.associated_id,org_name=r.org_name)
                        # log_reg.append(rg.number_endorsement if rg.number_endorsement else rg.internal_number)
                        if rg.number_endorsement:
                            log_reg.append(((((((rg.number_endorsement).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",''))
                        elif rg.internal_number:
                            log_reg.append(((((((rg.internal_number).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",''))
                        else:
                            log_reg.append('')
                    except:
                        log_reg.append('')
                elif r.model ==11:
                    try:
                        rg = Provider.objects.get(pk=r.associated_id,org_name=r.org_name)
                        # log_reg.append(rg.alias if rg.alias else rg.compania)
                        if rg.alias:
                            log_reg.append(((((((rg.alias).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",''))
                        elif rg.compania:
                            log_reg.append(((((((rg.compania).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",''))
                        else:
                            log_reg.append('')
                    except:
                        log_reg.append('')
                elif r.model ==12:
                    try:
                        rg = AccountState.objects.get(pk=r.associated_id,org_name=r.org_name)
                        # log_reg.append(rg.folio if rg.folio else rg.transaction_number)
                        if rg.folio:
                            log_reg.append(((((((rg.folio).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",''))
                        elif rg.transaction_number:
                            log_reg.append(((((((rg.transaction_number).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",''))
                        else:
                            log_reg.append('')
                    except:
                        log_reg.append('')
                elif r.model ==14:
                    try:
                        rg = Provider.objects.get(pk=r.associated_id,org_name=r.org_name)
                        # log_reg.append(rg.alias if rg.alias else rg.compania)
                        if rg.alias:
                            log_reg.append(((((((rg.alias).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",''))
                        elif rg.compania:
                            log_reg.append(((((((rg.compania).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",''))
                        else:
                            log_reg.append('')

                    except:
                        log_reg.append('')
                elif r.model ==15:
                    try:
                        rg = Comments.objects.get(pk=r.associated_id,org_name=r.org_name)
                        dt = 'Bitácora de '+str(modelCheck(rg.model))+'-'+str(rg.id_model)
                        log_reg.append(((((((dt).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",''))
                    except:
                        log_reg.append('')
                elif r.model ==16:
                    try:
                        rg = Log.objects.get(pk=r.associated_id,org_name=r.org_name)
                        dt = 'Log de '+str(modelCheck(rg.model))+'-'+str(rg.associated_id)
                        log_reg.append(((((((dt).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",''))
                    except:
                        log_reg.append('')
                elif r.model ==17:
                    try:
                        rg = Cartas.objects.get(pk=r.associated_id,org_name=r.org_name)
                        dt = 'Carta de '+str(modelCheckCarta(rg.model))+'-'+str(rg.name)
                        log_reg.append(((((((dt).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",''))
                    except:
                        log_reg.append('')
                elif r.model ==19:
                    try:
                        rg = Graphics.objects.get(pk=r.associated_id,org_name=r.org_name)
                        dt = 'Configuración Gráficas de '+str(modelCheckGraphics(rg.model))
                        log_reg.append(((((((dt).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",''))
                    except:
                        log_reg.append('')
                elif r.model ==21:
                    try:
                        rg = Claim.objects.get(pk=r.associated_id,org_name=r.org_name)
                        dt = 'Reclamación de '+str(rg.poliza.poliza_number if rg.poliza else '')
                        dt = dt+ ' '+str(rg.number)
                        log_reg.append(((((((dt).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",''))
                    except:
                        log_reg.append('')
                elif r.model ==22 or r.model==23:
                    try:
                        rg = Tasks.objects.get(pk=r.associated_id,org_name=r.org_name)
                        dt =rg.action if rg.action else rg.address
                        dt =dt +str(rg.receptor if rg.receptor else rg.receptor)
                        # log_reg.append(dt)
                        log_reg.append(((((((dt).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",''))

                    except:
                        log_reg.append('')
                elif r.model ==24:
                    try:
                        rg = Schedule.objects.get(pk=r.associated_id,org_name=r.org_name)
                        if rg.title:
                            log_reg.append(((((((rg.title).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",''))
                        else:
                            log_reg.append(((((((rg.observations).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",''))
                        
                    except:
                        log_reg.append('')
                else:
                    log_reg.append(r.model)
            else:
                log_reg.append('-')
            ev = ''
            if r.user:
                userl = r.user.first_name + ' '+ str(r.user.last_name)
            else:
                userl = ''
            if r.event:                    
                ev = ((((((r.identifier).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
            else:
                ev=''
            user_log.append(userl) 
            if r.change:
                ev = ev+' '+str(((((((str(r.change)).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",''))
            
            event.append(ev) 
        obj = {
            'associated_id'   : str(list(logs.values_list('associated_id', flat = True))),
            'event'   : str(list(event)),
            'registro'   : str(list(log_reg)),
            'model'   : str(list(logs.values_list('model', flat = True))),
            'created_at'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in logs.values_list('created_at', flat = True) ])) ,
            'user_log': str(list(user_log)),
            'tipo_reporte': tipo_reporte,
            'email_org':info_org['email'],
            'phone_org':info_org['phone'],
            'webpage_org':info_org['webpage'],
            'address_org':info_org['address'],
            'urlname_org':info_org['name'],
            }  
        obj['columns'] = str(list(columns))
        obj['imagen'] = archivo_imagen
        obj['registros'] = len(logs)
        r = requests.post(settings.SERVICEEXCEL_URL + 'get-logExcelReporte/', obj,
        # headers = {
        # 'Authorization':'Bearer %s'%request.user.user_info.fi_token_refresh,
        # # 'Content-Type':'application/json' 
        # }, 
        stream=True)
        response_data= r.text

        response = HttpResponse(r.content,content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

        return response
def modelCheck(request):
    switcher = {
        1 :'Pólizas',
        2 :'Contratantes Fisicos',
        3 :'Contratantes Morales',
        4 :'Recibos',
        5 :'Siniestros',
        6 :'Renovaciones',
        7 :'Recibos-Comisiones',
        8 :'Grupos',
        9 :'Paquetes',
        10 :'Endosos',
        11 :'Aseguradoras',
        12 : 'Estados de Cuenta',
        13 :'Fianzas',
        14 :'Afianzadoras',
        15 :'Comentarios',
        16 :'Logs',
        17 :'Cartas',
        18 :'Colectividades',
        19 :'Gráficas',
        20 :'Notes',
        21 :'Fianzas Reclamaciones',
        22 :'Tareas'
    }
    return switcher.get(request, "No aplica")
def modelCheckCarta(request):
    switcher = {
        1 :'Pólizas',
        2 :'Endosos',
        3 :'Renovaciones',
        4 :'Recibos',
        5 :'Siniestros',
        6 :'OT',
    }
    return switcher.get(request, "No aplica")
def modelCheckGraphics(request):
    switcher = {
        1 :'OTs',
        2 :'Cobranza',
        3 :'Renovaciones',
        4 :'Siniestros',
        5 :'Tareas',
    }
    return switcher.get(request, "No aplica")
# Reporte log Reporte
@api_view(['POST'])
@permission_classes((IsAuthenticatedV2, RenovacionesReportesPermissionsV2, IsOrgMemberV2))
def Service_ReporteTaskExcel(request):
    # Parameters
    createdBy = request.data['createdBy'] #
    closedBy = request.data['closedBy'] #
    involved = request.data['involvedUsers']
    since = request.data['since']
    until = request.data['until']
    reportBy = request.data['reportBy']
    priority = int(request.data['priority'])
    archived = request.data['archived']
    closed = request.data['closed']
    todos = request.data['todos']

    # Creado por
    if createdBy:
        created_by = list(User.objects.filter(pk__in = createdBy).values_list('pk', flat=True))
    else:
        created_by = list(User.objects.values_list('pk', flat=True))
    # Cerrado por
    if closedBy:
        closed_by = list(User.objects.filter(pk__in = closedBy).values_list('pk', flat=True))
    else:
        closed_by = list(User.objects.values_list('pk', flat=True))

    # Involucrados
    if involved:
        involved_users = list(User.objects.filter(pk__in = involved).values_list('pk', flat=True))
    else:
        involved_users = list(User.objects.values_list('pk', flat=True))
    # Estatus
    if archived:
        archived_task = True
    else:
        archived_task = False

    if closed:
        closed_task = True
    else:
        closed_task = False

    # Filtro de fechas
    try:
        f = "%d/%m/%Y %H:%M:%S"
        since = datetime.strptime(since , f)
        until = datetime.strptime(until , f)
    except:
        f = "%m/%d/%Y %H:%M:%S"
        since = datetime.strptime(since , f)
        until = datetime.strptime(until , f)

    date_filters = []
    if reportBy == 1:
        date_filters = [Q(close_day__gte=since),Q(close_day__lte = until)]
    elif reportBy == 2:
        date_filters = [Q(date__gte=since),Q(date__lte = until)]

    if date_filters:
        if priority != 0:
            tickets = Ticket.objects.filter(reduce(operator.and_, date_filters)).filter(priority = priority, org_name=request.GET.get('org'))
        else:
            tickets = Ticket.objects.filter(reduce(operator.and_, date_filters)).filter(org_name=request.GET.get('org'))
    else:
        if priority != 0:
            tickets = Ticket.objects.filter(org_name = request.GET.get('org'), priority = priority)
        else:
            tickets = Ticket.objects.filter(org_name = request.GET.get('org'))
    # Creado por
    if createdBy:
        tickets = tickets.filter(Q(owner__in = created_by))
    # Cerrado por
    if closedBy:
        tickets = tickets.filter(Q(closedBy__in = closed_by))
    # Tareas cerradas
    if todos:
        tickets = tickets
    else:
        if closed_task:
            tickets = tickets.filter(closed = True)
        else:
            tickets = tickets.filter(closed = False)
        # Tareas archivadas
        if archived_task:
            tickets = tickets.filter(archived = True)
        else:
            tickets = tickets.filter(archived = False)

    if involved:
        involvedTasks = Involved.objects.filter(person__in = involved_users, org_name=request.GET.get('org'))
        tareas = involvedTasks.filter(involved__in = list(tickets)).values_list('involved', flat = True)
        tickets = tickets.filter(id__in = tareas)
    else:
        tickets = tickets
    
    
    # ------------------Ver solo involucrados, creador, asignado----------
    
    session = Session.objects.filter(username=request.user.username)
    if session.exists():
        session = session.first()
    else:
        session = None

    if session and session.another_tasks: # validar si puede ver las tareas de otros
        users_list = list(GroupManager.objects.filter(manager = request.user).values_list('user__username',flat=True))
        users_list.append(request.user.username)
    else:
        users_list = [request.user.username]

    userfilter = [Q(owner__username__in = users_list),
                   Q(assigned__username__in = users_list),]
    ticketsR_filter = tickets.filter(reduce(OR, userfilter), org_name = request.GET.get('org')).values_list('pk', flat = True)
    involvedTask = Involved.objects.filter(involved__in = tickets)
    userfilterI = [Q(person__username__in = users_list)]
    involvedTask_Filter = involvedTask.filter(reduce(OR, userfilterI)).values_list('involved', flat = True)       
    tkt = list(ticketsR_filter) + list(involvedTask_Filter)
    tickets = tickets.filter(pk__in = tkt)
    # ------------------Ver solo involucrados, creador, asignado---------- 
    
    # Empieza insertado de imagen
    info_org = getInfoOrg(request)
    if len(info_org['logo']) != 0:
        archivo_imagen = 'https://miurabox-public.s3.amazonaws.com/cas/' + info_org['logo']
        # archivo_imagen = get_presigned_url("cas/{url}".format(url=info_org['logo']),28800) 
    else:
        archivo_imagen = 'saam.jpg'
    columns = ['Estatus','Identificador','Título','Fecha','Prioridad','Concepto','Descripción','Asignada a','Creada por','Antigüedad','Cerrado por ','Involucrados']
    # ******************************************
    # Empieza insertado de imagen
    info_org = getInfoOrg(request)
    if len(info_org['logo']) != 0:
        archivo_imagen = 'https://miurabox-public.s3.amazonaws.com/cas/' + info_org['logo']
        # archivo_imagen = get_presigned_url("cas/{url}".format(url=info_org['logo']),28800) 
    else:
      archivo_imagen = 'saam.jpg'
    tipo_reporte = "Reporte de tareas del " + str(since.strftime("%d/%m/%y")) + " al " + str(until.strftime("%d/%m/%y"))
       
    involved = []
    involved1 = []
    assigned = []
    estatus = []
    owner = []
    dias_al_cierre = []
    closes_dates = []
    antiguedad = []
    closedBy = []    
    diasFpromesa = []
    endosos = []
    polizas = []
    estatus_endosos = []
    reassignBy = []
    reassign = []
    date_reassign = []

    tickets = tickets.order_by('owner__first_name','owner__last_name')
    for r in tickets:
        reass=''
        date_res = ''
        if r.reassignBy:
            reass = r.reassignBy.first_name + ' '+ str(r.reassignBy.last_name)
        if r.reassign_date:
            date_res = r.reassign_date.strftime("%d/%m/%Y")
        if r.comment and r.comment.model == 10 and r.associated:
            endoso = Endorsement.objects.get(id = int(r.associated))
            num_endo = endoso.internal_number if endoso.status in [5,1] else endoso.number_endorsement
            #num_endo = endoso.number_endorsement
            endosos.append(num_endo)
            polizas.append(endoso.policy.poliza_number),
            estatus_endosos.append(endoso.get_status_display())
        else:

            endosos.append('')
            polizas.append('')
            estatus_endosos.append('')


        antig = get_antiguedad(r.created_at)
        diasfp = get_antiguedad(r.date)
        if r.closed:
          dias_al_cierre.append("%s días"%(r.close_day - r.created_at).days)
          closes_dates.append(r.close_day.strftime("%d/%m/%Y"))
        else:
          dias_al_cierre.append('')
          closes_dates.append('')

        if r.closed:
            oi = 'Completada'
            if archived:
                oi = oi + ' (archivada)'
        else:
            oi = 'Vigente'
            if r.archived:
                oi = oi + ' (archivada)'
        invTask = Involved.objects.filter(involved = int(r.id), org_name=request.GET.get('org')).values_list('person__first_name','person__last_name')
        v = []
        try:
            for it in invTask:
                v.append(it[0] +' '+ str(it[1])+str(', '))
            value = v
        except Exception as e:
            if invTask[0][0]:
                value = invTask[0][0]
            else:
                value = ''
        if r.owner:
            own = r.owner.first_name + ' '+ str(r.owner.last_name)
        else:
            own = ''
        if r.assigned:
            ass = r.assigned.first_name + ' '+ str(r.assigned.last_name)
        else:
            ass = ''
        if r.closedBy:
            clsd = r.closedBy.first_name + ' '+ str(r.closedBy.last_name)
        else:
            clsd = ''
        involved.append(value) 
        estatus.append(oi)
        assigned.append(ass)
        owner.append(own)
        antiguedad.append(antig)
        date_reassign.append(date_res)
        reassign.append(reass)
        closedBy.append(clsd)
        if diasfp > 0:
            diasFpromesa.append(diasfp) 
        else:
            diasFpromesa.append('') 
    obj = {
        'status'   : str(list(estatus)),
        'diasFpromesa'   : str(list(diasFpromesa)),
        # 'identifier'   : str(list(tickets.values_list('identifier', flat = True))),
        'identifier'   : str(list([(((((((x).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')) if x else '' for x in tickets.values_list('identifier', flat = True)])),                 
        'descripcion'   : str(list([(((((((x).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')) if x else '' for x in tickets.values_list('descrip', flat = True)])),
        'title'   : str(list([(((((((x).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')) if x else '' for x in tickets.values_list('title', flat = True)])), 
        'priority'   : str(list(tickets.values_list('priority', flat = True))),
        'concept'   : str(list(tickets.values_list('concept', flat = True))),
        'created_at'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in tickets.values_list('created_at', flat = True) ])) ,
        'involved': str((involved)),
        'assigned': str(list(assigned)),
        'antiguedad': str(list(antiguedad)),
        'closedBy': str(list(closedBy)),
        'date': str(list([date.strftime("%d/%m/%Y") if date else '' for date in tickets.values_list('date', flat = True) ])) ,
        'dias_al_cierre': str(list(dias_al_cierre)),
        'close_date': str(list(closes_dates)) ,
        'owner': str(list(owner)),
        'tipo_reporte': tipo_reporte,
        'email_org':info_org['email'],
        'phone_org':info_org['phone'],
        'webpage_org':info_org['webpage'],
        'address_org':info_org['address'],
        'urlname_org':info_org['name'],
        'endosos': str(list(endosos)),
        'polizas': str(list(polizas)),
        'reassignBy': str(list(reassign)),
        'reassignDate':str(list(date_reassign)),
        'estatus_endosos': str(list(estatus_endosos))
        }  
    obj['columns'] = str(list(columns))
    obj['imagen'] = archivo_imagen
    obj['registros'] = len(tickets)
    r = requests.post(settings.SERVICEEXCEL_URL + 'get-taskExcelReporte/', obj,
    # headers = {
    # 'Authorization':'Bearer %s'%request.user.user_info.fi_token_refresh,
    # # 'Content-Type':'application/json' 
    # }, 
    stream=True)
    response_data= r.text

    response = HttpResponse(r.content,content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

    return response
# Reporte cumpleaños Reporte
@api_view(['POST'])
@permission_classes((IsAuthenticatedV2, RenovacionesReportesPermissionsV2, IsOrgMemberV2))
def Service_ReporteCumpleExcel(request):
#    import pdb; pdb.set_trace()
    if 'since' in request.data:
        since =str(request.data['since'])
    else:
        since = ''

    if 'until' in request.data:
        until =str(request.data['until'])
    else:
        until = ''

    if until:
        f = "%d/%m/%Y" 
        since = datetime.strptime(since , f)
        until = datetime.strptime(until , f)
    try:
        date = datetime.today()
        start_week = date - timedelta(date.weekday() + 2)
        end_week = start_week + timedelta(8)
        start_week_month = start_week.month
        start_week_day = start_week.day

        end_week_month = end_week.month
        end_week_day = end_week.day


        aux_month = datetime.today().month
        aux_day = datetime.today().day
        try:
            f = "%m/%d/%Y"        
            b_month = Q(birthday__month=start_week_month) | Q(birthday__month=end_week_month)
            bd_month = Q(birthdate__month=start_week_month) | Q(birthdate__month=end_week_month)
            bd_month_2 = Q(birth_date__month=start_week_month) | Q(birth_date__month=end_week_month)
            
            l_day_and_month = []

            inicio = since
            fin = until

            lista_fechas = [inicio + timedelta(days=d) for d in range((fin - inicio).days + 1)] 

            for fs in lista_fechas:
                dm = fs.day,fs.month
                l_day_and_month.append(dm)
            lista_fechas = [since + timedelta(days=d) for d in range((until - since).days + 1)] 

            for fs in lista_fechas:
                dm = fs.day,fs.month
                l_day_and_month.append(dm)

            b_month_a = Q(birthday__gte=since) | Q(birthday__lte=until)
            bd_month_a = Q(birthdate__gte=since) | Q(birthdate__lte=until)
            bd_month_2_a = Q(birth_date__gte=since) | Q(birth_date__lte=until)
            
            persons = {
                'contractors':  Contractor.objects.filter(bd_month_2).filter(baja=False,org_name = request.GET.get('org'), is_active=True, type_person =1).order_by('full_name').distinct('full_name').values_list('full_name', 'first_name','last_name','second_last_name','birth_date','created_at','id','email'),
                'titulares':  Personal_Information.objects.filter(bd_month).filter(baja=False,org_name = request.GET.get('org')).exclude(policy__status = 0).order_by('full_name').distinct('full_name').values_list('full_name', 'first_name','last_name','second_last_name','birthdate','created_at','id'),
                'beneficiaries':  Beneficiaries.objects.filter(bd_month).filter(baja=False,org_name = request.GET.get('org'), is_active=True).exclude(life__policy__status = 0).order_by('full_name').distinct('full_name').values_list('full_name', 'first_name','last_name','second_last_name', 'birthdate','created_at','id'),
                'relationship':  Relationship.objects.filter(bd_month).filter(baja=False,org_name = request.GET.get('org'), is_active=True).exclude(accident__policy__status = 0).order_by('full_name').distinct('full_name').values_list('full_name', 'first_name','last_name','second_last_name','birthdate', 'created_at','id')
            }

            persons = {
                'contractors':  Contractor.objects.filter(bd_month_2_a).filter(baja=False,org_name = request.GET.get('org'), is_active=True, type_person =1).order_by('full_name').distinct('full_name').values_list('full_name', 'first_name','last_name','second_last_name','birth_date','created_at','id','email'),
                'titulares':  Personal_Information.objects.filter(bd_month_a).filter(baja=False,org_name = request.GET.get('org')).exclude(policy__status = 0).order_by('full_name').distinct('full_name').values_list('full_name', 'first_name','last_name','second_last_name','birthdate','created_at','id'),
                'beneficiaries':  Beneficiaries.objects.filter(bd_month_a).filter(baja=False,org_name = request.GET.get('org'), is_active=True).exclude(life__policy__status = 0).order_by('full_name').distinct('full_name').values_list('full_name', 'first_name','last_name','second_last_name', 'birthdate','created_at','id'),
                'relationship':  Relationship.objects.filter(bd_month_a).filter(baja=False,org_name = request.GET.get('org'), is_active=True).exclude(accident__policy__status = 0).order_by('full_name').distinct('full_name').values_list('full_name', 'first_name','last_name','second_last_name','birthdate', 'created_at','id')
            }
            
            persons_contratantes = []
            persons_titulares = []
            persons_beneficiarios = []
            persons_relationship = []
            dm_contratantes = []
            dm_titulares = []
            dm_beneficiarios = []
            dm_relationship = []
            for c in persons['contractors']:
                dm_con = c[4].day,c[4].month
                dm_contratantes.append(dm_con)
                if dm_con in l_day_and_month:
                    persons_contratantes.append(c) 
            for t in persons['titulares']:
                dm_tit = t[4].day,t[4].month
                dm_titulares.append(dm_tit)
                if dm_tit in l_day_and_month:
                    persons_titulares.append(t) 
            for b in persons['beneficiaries']:
                dm_ben = b[4].day,b[4].month
                dm_beneficiarios.append(dm_ben)
                if dm_ben in l_day_and_month:
                    persons_beneficiarios.append(b) 
            for r in persons['relationship']:
                dm_rel = r[4].day,r[4].month
                dm_relationship.append(dm_rel)
                if dm_rel in l_day_and_month:
                    persons_relationship.append(r) 

            persons['contractors'] = persons_contratantes
            persons['titulares'] = persons_titulares
            persons['beneficiaries'] = persons_beneficiarios
            persons['relationship'] = persons_relationship
        except Exception as e:
            pass
        persons_original = {
            'contractors':  Contractor.objects.filter(baja=False, birth_date__month = aux_month, birth_date__day = aux_day, org_name= request.GET.get('org'), type_person =1).order_by('full_name').distinct('full_name').values_list('full_name', 'first_name','last_name','second_last_name','birth_date','created_at','id','email'),
            'titulares':  Personal_Information.objects.filter(baja=False, birthdate__month = aux_month, birthdate__day = aux_day, org_name = request.GET.get('org')).exclude(policy__status = 0).order_by('full_name').distinct('full_name').values_list('full_name', 'first_name','last_name','second_last_name','birthdate','created_at','id'),
            'beneficiaries':  Beneficiaries.objects.filter(baja=False, birthdate__month = aux_month, birthdate__day = aux_day, org_name = request.GET.get('org')).exclude(life__policy__status = 0).order_by('full_name').distinct('full_name').values_list('full_name', 'first_name','last_name','second_last_name', 'birthdate','created_at','id'),
            'relationship':  Relationship.objects.filter(baja=False, birthdate__month = aux_month, birthdate__day = aux_day, org_name = request.GET.get('org')).exclude(accident__policy__status = 0).order_by('full_name').distinct('full_name').values_list('full_name', 'first_name','last_name','second_last_name','birthdate', 'created_at','id')
        }                      
    except Exception as e:
        pass  

    response = HttpResponse(content_type='application/ms-excel')
    response['Content-Disposition'] = 'attachment; filename="Reporte cumpleaños.xls"'

    wb = xlwt.Workbook(encoding='utf-8')
    ws = wb.add_sheet('Cumpleaños')

    # Empieza insertado de imagen
    info_org = getInfoOrg(request)
    if len(info_org['logo']) != 0:
        archivo_imagen = 'https://miurabox-public.s3.amazonaws.com/cas/' + info_org['logo']
        # archivo_imagen = get_presigned_url("cas/{url}".format(url=info_org['logo']),28800) 
    else:
        archivo_imagen = 'saam.jpg'

    tipo_reporte = "Reporte de Cumpleaños Semanal del " + str(since.day)+' / '+ str(since.month) + " al " + str(until.day)+' / '+str(until.month)

    row_num = 10
    font_style = xlwt.XFStyle()
    font_style.font.bold = True
    font_style.font.bold = True
    columns = ['Tipo','Persona','Cumpleaños','Fecha Creación']

    final_row = 0
    final_row_1 = 0
    final_row_2 = 0
    final_row_3 = 0
    # rows = persons.values_list('user__first_name','event','identifier','model','created_at','user__last_name')
    rows = persons['contractors']
    rows_1 = persons['titulares']
    rows_2 = persons['beneficiaries']
    rows_3 = persons['relationship']
    tipos = []    
    names = []    
    cumple = []    
    created_at = []   
    polizaR = []           
    email = []           
    for t0 in rows:
        em = ''
        if t0[0]:
            nm = t0[0]
            nm = ((((((nm).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
        else:
            nm = t0[1]+' '+str(t0[2])
            nm = ((((((nm).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
        tp = 'Contratante'
        try:
            br = t0[4].strftime("%d/%m/%Y") 
            br = br.replace("'",'')
        except Exception as b:
            br = t0[4]
        try:
            crt = t0[5].strftime("%d/%m/%Y")  
            crt = crt.replace("'",'')
        except Exception as b:
            crt = t0[5]
        try:
            em = t0[7]
        except Exception as b:
            em = t0[7]
        poliza = Polizas.objects.filter(document_type__in = [1,3,7,8,11,12],contractor__id = t0[6],org_name = request.GET.get('org')).exclude(status = 0)
        if poliza:
            pol = str(poliza[0].poliza_number) if str(poliza[0].internal_number) else str(poliza[0].internal_number)
        else:
            pol = ''
        email.append(em)
        polizaR.append(pol)
        names.append(nm)
        cumple.append(br)
        created_at.append(crt)
        tipos.append(tp)
    for t in rows_1:
        if t[0]:
            nm = t[0]
            nm = ((((((nm).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
        else:
            nm = t[1]+' '+str(t[2])+' '+str(t[3])
            nm = ((((((nm).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
        tp = 'Titular'
        try:
            br = t[4].strftime("%d/%m/%Y")  
            br = br.replace("'",'')
        except Exception as b:
            br = t[4]
        try:
            crt = t[5].strftime("%d/%m/%Y")  
            crt = crt.replace("'",'')
        except Exception as b:
            crt = t[5]
        
        accs = AccidentsDiseases.objects.filter(personal__id = t[6], org_name = request.GET.get('org')).values_list('policy',flat = True)
        poliza = Polizas.objects.filter(id__in = accs,org_name = request.GET.get('org')).exclude(status = 0)                    
        if poliza:
            pol = str(poliza[0].poliza_number) if str(poliza[0].internal_number) else str(poliza[0].internal_number)
        else:
            pol = ''
        email.append('')
        polizaR.append(pol)
        names.append(nm)
        cumple.append(br)
        created_at.append(crt)
        tipos.append(tp)
    for t1 in rows_2:
        if t1[0]:
            nm = t1[0]
            nm = ((((((nm).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
        else:
            nm = t1[1]+' '+str(t1[2])
            nm = ((((((nm).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
        tp = 'Beneficiarios'
        try:
            br = t1[4].strftime("%d/%m/%Y")  
            br = br.replace("'",'')
        except Exception as b:
            br = t1[4]
        try:
            crt = t1[5].strftime("%d/%m/%Y")  
            crt = crt.replace("'",'')
        except Exception as b:
            crt = t1[5]
        bens = Beneficiaries.objects.get(id= t1[6], org_name = request.GET.get('org'))
        poliza = bens.life.policy
        if poliza:
            pol = str(poliza.poliza_number) if str(poliza.internal_number) else str(poliza.internal_number)
        else:
            pol = ''
        email.append('')
        polizaR.append(pol)
        names.append(nm)
        cumple.append(br)
        created_at.append(crt)
        tipos.append(tp)
    for t2 in rows_3:
        if t2[0]:
            nm = t2[0]
            nm = ((((((nm).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
        else:
            nm = t2[1]+' '+str(t2[2])
            nm = ((((((nm).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
        tp = 'Dependientes'
        try:
            br = t2[4].strftime("%d/%m/%Y")  
            br = br.replace("'",'')
        except Exception as b:
            br = t2[4]
        try:
            crt = t2[5].strftime("%d/%m/%Y")  
            crt = crt.replace("'",'')
        except Exception as b:
            crt = t2[5]
        bens = Relationship.objects.get(id= t2[6], org_name = request.GET.get('org'))
        poliza = bens.accident.policy if bens.accident and bens.accident.policy else None
        if poliza:
            pol = str(poliza.poliza_number) if str(poliza.internal_number) else str(poliza.internal_number)
        else:
            pol = str('')
        email.append('')
        polizaR.append(pol)
        names.append(nm)
        cumple.append(br)
        created_at.append(crt)
        tipos.append(tp)
    # Empieza insertado de imagen
    info_org = getInfoOrg(request)
    if len(info_org['logo']) != 0:
        archivo_imagen = 'https://miurabox-public.s3.amazonaws.com/cas/' + info_org['logo']
        # archivo_imagen = get_presigned_url("cas/{url}".format(url=info_org['logo']),28800) 
    else:
      archivo_imagen = 'saam.jpg'    
    obj = {
        'contratantes'   : str(list(rows)),
        'titulares'   : str(list(rows_1)),
        'beneficiarios'   : str(list(rows_2)),
        'dependientes'   : str(list(rows_3)),
        'persona'   : str(list(names)),
        'tipos'   : str(list(tipos)),
        'cumple'   : str(list(cumple)),
        'email'   : str(list(email)),
        'created'   : str(list(created_at)),
        'poliza'   : str(list(polizaR)),
        'tipo_reporte': tipo_reporte,
        'email_org':info_org['email'],
        'phone_org':info_org['phone'],
        'webpage_org':info_org['webpage'],
        'address_org':info_org['address'],
        'urlname_org':info_org['name'],
        }  
    obj['columns'] = str(list(columns))
    obj['imagen'] = archivo_imagen
    obj['registros'] = len(rows)+len(rows_1)+len(rows_2)+len(rows_3)
    r = requests.post(settings.SERVICEEXCEL_URL + 'get-cumpleExcelReporte/', obj,
    # headers = {
    # 'Authorization':'Bearer %s'%request.user.user_info.fi_token_refresh,
    # # 'Content-Type':'application/json' 
    # }, 
    stream=True)
    response_data= r.text

    response = HttpResponse(r.content,content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

    return response
# Reporte Cobranza Excel
@api_view(['POST'])
@permission_classes((IsAuthenticatedV2, CobranzaReportesPermissionsV2, IsOrgMemberV2))
def Service_ReporteRecibosSubsExcel(request):
    valueCom = False
    valueCom = True
    try:
        valueCom = comisions(request)
    except Exception as ers:
        valueCom =  True
    provider = request.data['provider']
    number = request.data['status']
    try:
        order = int(request.data['order'])
        asc = int(request.data['asc'])
    except:
        order = 1
        asc = 1
    status = [0]

    try:
        policies_obj_req = request.data['polizas'].split(";")
    except Exception as e:
        policies_obj_req = []

    if number == 1:
        status = [4]
    elif number == 2:
        status = [1]
    elif number == 3:
        status = [5]
    elif number == 4:
        status = [2]
    elif number == 5:
        status = [8]
    else:
        status = []

    ramo = request.data['ramo']
    subramo = request.data['subramo']   
    since = request.data['since']
    until = request.data['until']
    deliver = request.data['delivered']
    
    payment = request.data['payment']
    vendedor = int(request.data['vendedor'])
    collection_executive = int(request.data['ejecutivo'])
    ramos_sel = (request.data['ramos'])
    subramos_sel = (request.data['subramos'])
    providers_sel = (request.data['providers'])
    tipo_recibo = (request.data['tipo_recibo'])
    user_pay = (request.data['user_pay'])
    # Pagado por
    if (user_pay):
        users_pay = list(User.objects.filter(pk__in = (user_pay)).values_list('pk', flat=True))
    else:
        users_pay = list(User.objects.values_list('pk', flat=True))
    # FORMA_DE_PAGO = [12,3,6,12,24,4]
    if int(payment) > 0:
        fp = [int(payment)]
    else:
        fp = [12,24,6,5,4,3,2,1,14,7,15]

    type_contractor = request.data['type_contractor']
    contratante = request.data['contratante']
    group = request.data['grupo']

    # Grupo
    
    grupos = Group.objects.filter(org_name = request.GET.get('org'))
    if group != 0:
        grupos = grupos.filter(pk=int(group))

        grps = None
        if grupos[0].type_group == 1:            
            grs1 = Group.objects.filter(parent__id = grupos[0].id, type_group = 2).values_list('pk',flat=True)
            grs2 = Group.objects.filter(parent__id__in = grs1, type_group = 3).values_list('pk',flat=True)
            grs = list(grs1)+list(grs2)
            grs.append(grupos[0].id)
            grps = Group.objects.filter(pk__in = grs)
        if grupos[0].type_group == 2:            
            grs2 = Group.objects.filter(parent__id__in = grupos[0].id, type_group = 3).values_list('pk',flat=True)
            grs = list(grs2)
            grs.append(grupos[0].id)
            grps = Group.objects.filter(pk__in = grs)
        if grupos[0].type_group == 3:
            grps = grupos[0]

    
    if int(provider) > 0 :
        providers = list(Provider.objects.filter(pk = int(provider)).values_list('pk', flat=True))
    else:
        providers = list(Provider.objects.filter(org_name = request.GET.get('org')).values_list('pk', flat=True))

    if (vendedor) > 0 :
        vendors = list(User.objects.filter(pk = int(vendedor)).values_list('pk', flat=True))
    else:
        vendors = list(UserInfo.objects.filter(org_name = request.GET.get('org')).values_list('user', flat=True))

    if (collection_executive) != 0:
        ejecutivo_cobranza = list(User.objects.filter(pk = int(collection_executive)).values_list('pk', flat=True))
    else:
        ejecutivo_cobranza = list(User.objects.values_list('pk', flat=True))

    if int(ramo) > 0 :
        ramos = list(Ramos.objects.filter(pk = int(ramo)).values_list('pk', flat=True))
    else:
        ramos = list(Ramos.objects.filter(org_name = request.GET.get('org'), provider__in = providers).values_list('pk', flat=True))
    
    if int(subramo) > 0 :
        subramos = list(SubRamos.objects.filter(pk = int(subramo)).values_list('pk', flat=True))
    else:
        subramos = list(SubRamos.objects.filter(org_name = request.GET.get('org'), ramo__in = ramos).values_list('pk', flat=True))
    # ramos_selected----
    if (ramos_sel):
        ramos = list(Ramos.objects.filter(org_name = request.GET.get('org'), provider__in = providers,ramo_code__in=ramos_sel).values_list('pk', flat=True))
    else:
        ramos = list(Ramos.objects.filter(org_name = request.GET.get('org'), provider__in = providers).values_list('pk', flat=True))

    # rsubramos_sel----
    if (subramos_sel):
        subramos = list(SubRamos.objects.filter(org_name = request.GET.get('org'), ramo__in = ramos,subramo_code__in= subramos_sel).values_list('pk', flat=True))
    else:
        subramos = list(SubRamos.objects.filter(org_name = request.GET.get('org'), ramo__in = ramos).values_list('pk', flat=True)) 
    if (providers_sel):
        providers = list(Provider.objects.filter(pk__in = (providers_sel)).values_list('pk', flat=True))
    else:
        providers = list(Provider.objects.filter(org_name = request.GET.get('org')).values_list('pk', flat=True))
    


    polizas = []
    if int(contratante) > 0 :
        if vendedor == 0:
            contratanten = list( Contractor.objects.filter(pk = int(contratante)).values_list('pk', flat = True) )
            contratantej = None
            # polizas = Polizas.objects.exclude(status__in = [2,12,13,10,0]).filter(forma_de_pago__in = fp, natural__in = contratanten,org_name = request.GET.get('org'),ramo__in = ramos, subramo__in = subramos, aseguradora__in = providers).values_list('pk', flat=True)
            polizas = Polizas.objects.exclude(status__in = [2,0]).filter(forma_de_pago__in = fp, contractor__in = contratanten,org_name = request.GET.get('org'),ramo__in = ramos, subramo__in = subramos, aseguradora__in = providers).values_list('pk', flat=True)
        else:
            contratanten = list( Contractor.objects.filter(pk = int(contratante)).values_list('pk', flat = True) )
            contratantej = None
            polizas = Polizas.objects.exclude(status__in = [2,0]).filter(ref_policy__referenciador__id__in = [vendedor],forma_de_pago__in = fp, contractor__in = contratanten,org_name = request.GET.get('org'),ramo__in = ramos, subramo__in = subramos, aseguradora__in = providers).values_list('pk', flat=True)
                        
    else:
        if vendedor == 0:
            contratanten = list( Contractor.objects.filter(group = grupos).values_list('pk', flat = True) )
            polizas = Polizas.objects.exclude(status__in = [2,0]).filter(forma_de_pago__in = fp,org_name = request.GET.get('org'),ramo__in = ramos, subramo__in = subramos, aseguradora__in = providers).values_list('pk', flat=True)
            polizas = polizas.filter(contractor__in = contratanten)

        else:
            contratanten = list( Contractor.objects.filter(group = grupos).values_list('pk', flat = True) )
            polizas = Polizas.objects.exclude(status__in = [2,0]).filter(forma_de_pago__in = fp ,org_name = request.GET.get('org'),ramo__in = ramos, subramo__in = subramos, aseguradora__in = providers).values_list('pk', flat=True)
            polizas = polizas.filter(contractor__in = contratanten).filter(ref_policy__referenciador__id__in = vendors)
        
    query = []
    if policies_obj_req:
        for p in policies_obj_req:
            query.append(Q(poliza_number__icontains = p))

        polizas = polizas.filter(reduce(OR, query))
    try:
        if collection_executive == 0:
            polizas = polizas
        else:
            polizas = polizas.filter(collection_executive__in = ejecutivo_cobranza)
    except Exception as e:
        polizas = polizas


    bonos = Bonos.objects.filter(org_name = request.GET.get('org'), aseguradora__in = providers)
    
    # recibos = Recibos.objects.filter(isActive = True, isCopy = False , poliza__in = polizas)
    recibos = Recibos.objects.filter((Q(poliza__in = polizas) | Q(bono__in = bonos)), isActive = True, isCopy = False).filter(receipt_type__in = [1,2,3,4])
    try:
        dataToFilter = getDataForPerfilRestricted(request, request.GET.get('org'))
    except Exception as er:
        dataToFilter = {}
    if dataToFilter:
        # Contratantes***
        polizasCl = Polizas.objects.filter(document_type__in = [1,3,11,7,8,12,6,4], org_name = request.GET.get('org'))
        polizasToF = Polizas.objects.filter(document_type__in = [1,3,11,7,8], org_name = request.GET.get('org'))
        if dataToFilter['ccpr']:
            polizasToF = polizasToF.filter(contractor__in = list(dataToFilter['ccpr']))
        if dataToFilter['cgpr']:
            polizasToF = polizasToF.filter(contractor__group__in = list(dataToFilter['cgpr']))
        if dataToFilter['ccepr']:
            polizasToF = polizasToF.filter(contractor__cellule__in = list(dataToFilter['ccepr']))
        if dataToFilter['crpr']:
            polizasToF = polizasToF.filter(contractor__vendor__in = list(dataToFilter['crpr']))
        if dataToFilter['cspr']:
            polizasToF = polizasToF.filter(contractor__sucursal__in = list(dataToFilter['cspr']))
        # Pólizas ****
        if dataToFilter['pppr']:
            polizasToF = polizasToF.filter(pk__in = list(dataToFilter['pppr']))
        if dataToFilter['pgpr']:
            polizasToF = polizasToF.filter(contractor__group__in = list(dataToFilter['pgpr']))
        if dataToFilter['pcepr']:
            polizasToF = polizasToF.filter(celula__in = list(dataToFilter['pcepr']))
        if dataToFilter['prpr']:
            polizasToF = polizasToF.filter(ref_policy__referenciador__in = list(dataToFilter['prpr']))
        if dataToFilter['pspr']:
            polizasToF = polizasToF.filter(sucursal__in = list(dataToFilter['pspr']))
        if dataToFilter['papr']:
            polizasToF = polizasToF.filter(groupinglevel__in = list(dataToFilter['papr']))
        if dataToFilter['pcapr']:
            polizasToF = polizasToF.filter(clave__in = list(dataToFilter['pcapr']))
        if dataToFilter['psrpr']:
            polizasToF = polizasToF.filter(subramo__subramo_code__in = list(dataToFilter['psrpr']))
        if dataToFilter['paspr']:
            polizasToF = polizasToF.filter(aseguradora__in = list(dataToFilter['paspr']))
        if dataToFilter['pstpr']:
            polizasToF = polizasToF.filter(status__in = list(dataToFilter['pstpr']))
        
        polizasCT = polizasCl.filter(document_type = 12, parent__in = list(polizasToF))
        polizasGT = polizasCl.filter(document_type = 6, parent__parent__parent__in = list(polizasToF))
        polizasFin = list(polizasToF.values_list('pk', flat = True)) + list(polizasCT.values_list('pk', flat = True)) + list(polizasGT.values_list('pk', flat = True))
        recibos = recibos.filter(poliza__in = list(polizasFin))    
    
    if user_pay:
        recibos = recibos.filter(user_pay__in = users_pay)
    try:
        f = "%d/%m/%Y %H:%M:%S"        
        since = datetime.strptime(since , f)
        until = datetime.strptime(until , f)
    except:
        f = "%m/%d/%Y %H:%M:%S"        
        since = datetime.strptime(since , f)
        until = datetime.strptime(until , f)

    date_filters = [Q(fecha_inicio__gte=since),Q(fecha_inicio__lte = until)]

    # recibos = recibos.filter(reduce(operator.and_,date_filters))       
    if order == 1:
        if asc == 1:
            recibos = recibos.filter(reduce(operator.and_, date_filters), org_name = request.GET.get('org')).order_by('receipt_type')
        else:
            recibos = recibos.filter(reduce(operator.and_, date_filters), org_name = request.GET.get('org')).order_by('-receipt_type')
    
    elif order == 2:
        if asc == 1:
            recibos = recibos.filter(reduce(operator.and_, date_filters), org_name = request.GET.get('org')).order_by('poliza__contractor__full_name')
        else:
            recibos = recibos.filter(reduce(operator.and_, date_filters), org_name = request.GET.get('org')).order_by('-poliza__contractor__full_name',)
    
    elif order == 3:
        if asc == 1:
            recibos = recibos.filter(reduce(operator.and_, date_filters), org_name = request.GET.get('org')).order_by('poliza__poliza_number')
        else:
            recibos = recibos.filter(reduce(operator.and_, date_filters), org_name = request.GET.get('org')).order_by('-poliza__poliza_number')
    
    elif order == 4:
        if asc == 1:
            recibos = recibos.filter(reduce(operator.and_, date_filters), org_name = request.GET.get('org')).order_by('fecha_inicio')
        else:
            recibos = recibos.filter(reduce(operator.and_, date_filters), org_name = request.GET.get('org')).order_by('-fecha_inicio')
    
    elif order == 5:
        if asc == 1:
            recibos = recibos.filter(reduce(operator.and_, date_filters), org_name = request.GET.get('org')).order_by('poliza__aseguradora__compania')
        else:
            recibos = recibos.filter(reduce(operator.and_, date_filters), org_name = request.GET.get('org')).order_by('-poliza__aseguradora__compania')

    elif order == 6:
        if asc == 1:
            recibos = recibos.filter(reduce(operator.and_, date_filters), org_name = request.GET.get('org')).order_by('status')
        else:
            recibos = recibos.filter(reduce(operator.and_, date_filters), org_name = request.GET.get('org')).order_by('-status')
    
    elif order == 7:
        if asc == 1:
            recibos = recibos.filter(reduce(operator.and_, date_filters), org_name = request.GET.get('org')).order_by('prima_total')
        else:
            recibos = recibos.filter(reduce(operator.and_, date_filters), org_name = request.GET.get('org')).order_by('-prima_total')

    elif order == 8:
        if asc == 1:
            recibos = recibos.filter(reduce(operator.and_, date_filters), org_name = request.GET.get('org')).order_by('owner')
        else:
            recibos = recibos.filter(reduce(operator.and_, date_filters), org_name = request.GET.get('org')).order_by('-owner')
    else:
        recibos = recibos.filter(reduce(operator.and_,date_filters))  

    if int(tipo_recibo)==1:
        recibos = recibos.filter(recibo_numero=1)
    if int(tipo_recibo)==2:
        recibos = recibos.filter(~Q(recibo_numero=1))
    if status:
        recibos = recibos.filter(isCopy = False, isActive = True, status__in = status)
    else:
        recibos = recibos.filter(isCopy = False, isActive = True)

    if int(deliver)==1:
        recibos = recibos.filter(delivered=True)
    elif int(deliver)==2:
        recibos = recibos.filter(delivered = False)

    # Empieza insertado de imagen
    info_org = getInfoOrg(request)
    if len(info_org['logo']) != 0:
        archivo_imagen = 'https://miurabox-public.s3.amazonaws.com/cas/' + info_org['logo']
        # archivo_imagen = get_presigned_url("cas/{url}".format(url=info_org['logo']),28800) 
    else:
        archivo_imagen = 'saam.jpg'

    if tipo_recibo == 2:
        tipo_reporte = "Reporte de Recibos Subsecuentes del " +str(since.strftime("%d/%m/%y")) +" al "+str(until.strftime("%d/%m/%y"))
    else:
        tipo_reporte = "Reporte de Recibos"

    # Sheet header, first row
    # if si_com:
    columns = ['No.Póliza/Fianza','Tipo', 'No.Endoso','Estatus Póliza/Endoso','Grupo','Contratante','Correo electrónico','Teléfono',
             'Alías Aseguradora/Afianzadora','Ramo','Subramo','Identificador','Riesgo/Asegurado','Forma de Pago','Moneda',
             'Serie No.Recibo','Fecha Inicio recibo', 'Fecha Fin recibo','Vencimiento','Antigüedad','Prima Neta','RPF','Derecho',
             'IVA','Prima Total','Comisión','Estatus recibo', 'Domiciliado','Metodo de Pago','Documento de Pago', 'Tipo Cambio',
             'Importe Pesos','Fecha Pago','Fecha Liquidación','Folio de Liquidación','Fecha de conciliación','Comisión conciliada','Fecha Inicio Póliza/Fianza', 
             'Fecha Fin Póliza/Fianza', 'Clave de Agente', 'Referenciador', 'Sucursal','Responsable','Ej. Cobranza','Pagado por','Creado por',
             'Creación','Promesa Pago', 'Contacto(nombre)', 'Contacto(telefono)', 'Contacto(email)']  

    asegurado = []
    clave = []
    aseguradora = []
    antiguedad = []
    referenciador = []
    responsable = []
    collection = []
    userpay = []
    creadopor = []
    contract = []
    contractemail = []
    contractphone = []
    contractgrupo = []
    inicio = []
    fin = []
    aseguradora = []
    clave = []
    poliza_number = []
    inc = ''
    fn = ''
    aseg = ''
    cve = ''
    pnumber = ''
    subramo = []
    ramo = []
    identifier = []
    statusP = []
    forma_de_pago = []
    payForm = ''
    sucursal = []
    receipttype = []
    metodoPago = []
    mpago = ''
    currency = []
    promesa_pago = []
    fc = 1
    importe = 0
    importePesos = []
    
    contactos_nombre = []
    contactos_email = []
    contactos_telefono = []
    tipo_poliza_fianza = []
    folio_pago_list = []
    caratulas = []


    verReferenciadores = is_perm_ver_referenciadores(request)
    # recibos = recibos.order_by('poliza__contractor__full_name','poliza__juridical__j_name','fianza__natural__full_name','fianza__juridical__j_name','poliza__ramo__ramo_name','fianza__ramo__ramo_name','poliza__aseguradora__compania','fianza__aseguradora__compania')
    recibos = recibos.order_by('id')
    for r in recibos:
        tpf = 'No especificado'
        importe = r.prima_total
        fc = 1
        mpago = ''
        try:            
            pp = r.promesa_pago.strftime("%d/%m/%Y")
        except Exception as es:
            pp = r.promesa_pago
        if r.pay_form == 1:
            mpago = "Cheque"
        elif r.pay_form == 2:
            mpago = "Efectivo"
        elif r.pay_form == 3:
            mpago = "Transferencia"
        elif r.pay_form == 4:
            mpago = "Deposito Bancario"
        elif r.pay_form == 5:
            mpago = "Tarjeta de Credito"
        elif r.pay_form == 6:
            mpago = "Tarjeta de Debito"
        elif r.pay_form == 7:
            mpago = "Estado de Cuenta"
        elif r.pay_form == 8:
            mpago = "Compañia"
        elif r.pay_form == 0:
            mpago = "No Especificado"
        else:
            mpago = 'No Especificado'
        receipt1 = ''
        contratantex = ''
        contratanteE = ''
        contratanteP = ''
        contratanteG = ''
        inc = ''
        fn = ''
        aseg = ''
        cve = ''
        pnumber = ''
        sramo = ''
        rm = ''
        iden = ''
        status_p = ''
        payForm = ''
        sc= ''
        antig = get_antiguedad(r.fecha_inicio)
        if r.user_pay:
            val_userpay = r.user_pay.first_name + ' '+ str(r.user_pay.last_name)
        else:
            val_userpay = ''
        if r.owner:
            val_owner = r.owner.first_name + ' '+ str(r.owner.last_name)
        else:
            val_owner = ''

        if r.poliza.fianza_type:
            tpf = r.poliza.fianza_type.type_name

        if r.poliza:
            receipt1 = 'Póliza'
            if r.poliza.document_type == 6:
                try:
                    if r.poliza.parent.parent.parent.f_currency == 2 or r.poliza.parent.parent.parent.f_currency == 3 or r.poliza.parent.parent.parent.f_currency == 4:
                        try:
                            importe = float(r.prima_total) * float(r.rate_exchange)
                        except Exception as es:
                            importe = r.prima_total
                    else:
                        importe = r.prima_total
                except Exception as err:
                    importe = r.prima_total
                receipt1 = 'Categoría'
                try:
                    sramo = r.poliza.parent.parent.parent.subramo.subramo_name
                    fc = r.poliza.parent.parent.parent.f_currency
                    status_p = r.poliza.parent.parent.parent.status
                    rm = r.poliza.parent.parent.parent.ramo.ramo_name
                    pnumber = r.poliza.parent.parent.parent.poliza_number
                    iden = r.poliza.parent.parent.parent.identifier
                    try:
                        iden = ((((((iden).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')                    
                    except Exception as er:
                        iden = ''
                    payForm = r.poliza.parent.parent.parent.forma_de_pago
                    sc = r.poliza.parent.parent.parent.sucursal.sucursal_name
                    inc = r.poliza.parent.parent.parent.start_of_validity.strftime("%d/%m/%Y")
                    fn =r.poliza.parent.parent.parent.end_of_validity.strftime("%d/%m/%Y")
                    try:
                        cve = r.poliza.parent.parent.parent.clave.name +' '+str(r.poliza.parent.parent.parent.clave.clave)
                        cve = ((((((cve).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    except Exception as eres:
                        cve = ''
                    aseg = r.poliza.parent.parent.parent.aseguradora.alias
                except Exception as fd:
                    inc = ''
                    fn = ''
                    aseg = ''
                    cve = ''
                    pnumber = ''
                    sramo = ''
                    status_p = ''
                    rm = ''
                    iden = ''
                    payForm = 12
                    sc = ''
                    fc = 1
                if r.poliza.parent.parent.parent.contractor:
                    contratantex = ((((((r.poliza.parent.parent.parent.contractor.full_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    contratanteE = r.poliza.parent.parent.parent.contractor.email
                    contratanteP = r.poliza.parent.parent.parent.contractor.phone_number
                    # contratanteG = r.parent.parent.parent.contractor.group.group_name
                    contratanteG = ((((((r.poliza.parent.parent.parent.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                else:
                    contratantex = ''
                    contratanteE = ''
                    contratanteP = ''
                    # contratanteG = r.parent.parent.parent.juridical.group.group_name
                    contratanteG = ''
            elif r.poliza.document_type == 4:
                receipt1 = 'Subgrupo'
                try:
                    if r.poliza.parent.f_currency == 2 or r.poliza.parent.f_currency == 3 or r.poliza.parent.f_currency == 4:
                        try:
                            importe = float(r.prima_total) * float(r.rate_exchange)
                        except Exception as es:
                            importe = r.prima_total
                    else:
                        importe = r.prima_total
                except Exception as err:
                    importe = r.prima_total
                try:
                    sramo = r.poliza.parent.subramo.subramo_name
                    fc = r.poliza.parent.f_currency
                    status_p = r.poliza.parent.status
                    rm = r.poliza.parent.ramo.ramo_name
                    pnumber = r.poliza.parent.poliza_number
                    iden = r.poliza.parent.identifier
                    iden = ((((((iden).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')                    
                    payForm = r.poliza.parent.forma_de_pago
                    try:
                        sc = r.poliza.parent.sucursal.sucursal_name
                    except Exception as f:
                        sc = ''
                    inc = r.poliza.parent.start_of_validity.strftime("%d/%m/%Y")
                    fn =r.poliza.parent.end_of_validity.strftime("%d/%m/%Y")
                    try:
                        cve = r.poliza.parent.clave.name +' '+str(r.poliza.parent.clave.clave)
                        cve = ((((((cve).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    except Exception as ers:
                        cve = ''
                    aseg = r.poliza.parent.aseguradora.alias
                except Exception as fd:
                    inc = ''
                    fn = ''
                    aseg = ''
                    cve = ''
                    pnumber = ''
                    sramo = ''
                    status_p = ''
                    iden = ''
                    payForm = 12
                    sc = ''
                if r.poliza.parent.contractor:
                    contratantex =((((((r.poliza.parent.contractor.full_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    contratanteE = r.poliza.parent.contractor.email
                    contratanteP = r.poliza.parent.contractor.phone_number
                    # contratanteG = r.poliza.parent.contractor.group.group_name
                    contratanteG = ((((((r.poliza.parent.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                else:
                    contratantex = ''
                    contratanteE = ''
                    contratanteP = ''
                    # contratanteG = r.parent.parent.parent.juridical.group.group_name
                    contratanteG = ''
            else:   
                try:
                    if r.poliza.f_currency == 2 or r.poliza.f_currency == 3 or r.poliza.f_currency == 4:
                        try:
                            importe = float(r.prima_total) * float(r.rate_exchange)
                        except Exception as es:
                            importe = r.prima_total
                    else:
                        importe = r.prima_total
                except Exception as err:
                    importe = r.prima_total             
                if r.poliza.document_type == 7:
                    receipt1 = 'Fianza'
                if r.poliza.document_type == 8:
                    receipt1 = 'Fianza Colectiva'
                if r.poliza.document_type == 11:
                    receipt1 = 'Colectividad'
                if r.poliza.document_type == 12:
                    receipt1 = 'Póliza de Colectividad'
                if r.poliza.document_type == 3:
                    receipt1 = 'Póliza de Grupo'
                try:
                    sramo = r.poliza.subramo.subramo_name
                    fc = r.poliza.f_currency
                    status_p = r.poliza.status
                    rm = r.poliza.ramo.ramo_name
                    pnumber = r.poliza.poliza_number
                    iden = r.poliza.identifier
                    iden = ((((((iden).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')                    
                    inc = r.poliza.start_of_validity.strftime("%d/%m/%Y")
                    fn =r.poliza.end_of_validity.strftime("%d/%m/%Y")
                    try:
                        cve = r.poliza.clave.name +' '+str(r.poliza.clave.clave)
                        cve = ((((((cve).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    except Exception as erer:
                        cve =''
                    aseg = r.poliza.aseguradora.alias
                    payForm = r.poliza.forma_de_pago
                    try:
                        sc = r.poliza.sucursal.sucursal_name
                    except Exception as c:
                        sc = ''
                except Exception as fd:
                    inc = ''
                    fn = ''
                    aseg = ''
                    cve = ''
                    pnumber = ''
                    iden = ''
                    ident = ''
                    status_p = ''
                    payForm = 12
                    sc = ''
                    fc =1
                if r.poliza.contractor:
                    contratantex = ((((((r.poliza.contractor.full_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    contratanteE = r.poliza.contractor.email
                    contratanteP = r.poliza.contractor.phone_number
                    # contratanteG = r.poliza.contractor.group.group_name
                    contratanteG = ((((((r.poliza.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')

                    contacto = ContactInfo.objects.filter(contractor=r.poliza.contractor)
                        
                    if contacto:
                        contacto_nombre = contacto[0].name
                        contacto_telefono = contacto[0].phone_number
                        contacto_email = contacto[0].email
                    else:
                        contacto_nombre = ''
                        contacto_telefono = ''
                        contacto_email = ''

                else:
                    contratantex = ''
                    contratanteE = ''
                    contratanteP = ''
                    # contratanteG = r.parent.parent.parent.juridical.group.group_name
                    contratanteG = ''
                    contacto_nombre = ''
                    contacto_telefono = ''
                    contacto_email = ''

            if r.poliza.responsable:
                val_resp = r.poliza.responsable.first_name + ' '+ str(r.poliza.responsable.last_name)
            else:
                val_resp = ''
            if r.poliza.collection_executive:
                val_cexe = r.poliza.collection_executive.first_name + ' '+ str(r.poliza.collection_executive.last_name)
            else:
                val_cexe = ''
            try:
                refs_policy = ReferenciadoresInvolved.objects.filter(policy = r.poliza.id,is_changed=False).values_list('referenciador__first_name','referenciador__last_name')
                if len(refs_policy):
                    v = []
                    try:
                        for it in refs_policy:
                            v.append(it[0] +' '+ str(it[1])+str('-'))
                        referenc = v
                    except Exception as y:
                        referenc = []
                else:
                    referenc = []
            except Exception as e:
                referenc = []
            if r.poliza.ramo:
                if r.poliza.ramo.ramo_code == 1:
                    form = Life.objects.filter(policy = r.poliza.id)
                    try:
                        if form:
                            value = form[0].personal.full_name
                        else:
                            value = ''
                    except Exception as rt:
                       value = ''
                elif r.poliza.ramo.ramo_code == 2:
                    form = AccidentsDiseases.objects.filter(policy = r.poliza.id)
                    if form:
                        value = form[0].personal.full_name
                    else:
                        value = ''
                elif r.poliza.subramo.subramo_code == 9:
                    form = AutomobilesDamages.objects.filter(policy = r.poliza.id)
                    if form:
                        try:
                            form[0].model = ((((((form[0].model).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                            form[0].version = ((((((form[0].version).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        except Exception as ers:
                            form[0].model = form[0].model
                            form[0].version = form[0].version
                        value = str(form[0].brand) + '-' + str(form[0].model) + '-' + str(form[0].version)+ '-' + str(form[0].serial)
                    else:
                        value = ''
                elif r.poliza.ramo.ramo_code == 3 and not r.poliza.subramo.subramo_code == 9:
                    form = Damages.objects.filter(policy = r.poliza.id)
                    if form:
                        value = form[0].insured_item
                    else:
                        value = ''
                else:
                    value = 'Sin asegurado'
            else:
                value = 'Sin asegurado'

        else:
            value = 'Sin asegurado'
            val_resp = 'Sin responsable'
            val_cexe = 'Sin ejecutivo'
        
        if r.bono:
            receipt1 = 'Bono'
            fc = r.bono.tipo_cambio
            try:
                if r.bono.tipo_cambio == 2 or r.bono.tipo_cambio == 3 or r.bono.tipo_cambio == 4:
                    try:
                        importe = float(r.prima_total) * float(r.bono.tipo_cambio)
                    except Exception as es:
                        importe = r.prima_total
                else:
                    importe = r.prima_total
            except Exception as err:
                importe = r.prima_total
            try:
                cve = r.bono.clave.name +' '+str(r.bono.clave.clave)
                cve = ((((((cve).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
            except Exception as e:
                cve = ''
            aseg = r.bono.aseguradora.alias
            pnumber = r.bono.factura_number
            if r.bono.vendor:
                referenc = [r.bono.vendor.first_name + ' '+ str(r.bono.vendor.last_name)]
            else:
                referenc = []
            inc = 'Sin fecha'
            fn = 'Sin fecha'
        if r.receipt_type == 3:
            receipt1 = 'Nota de Crédito'
        elif r.receipt_type == 2:
            receipt1 = 'Endoso'
        elif r.receipt_type == 4:
            receipt1 = 'Bono'
        if value:
            value = ((((((value).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'') 
        else:
            value = value

        if r.poliza.document_type == 12:
            caratulas.append(r.poliza.parent.poliza_number)
        else:
            caratulas.append(0)

        asegurado.append(value)
        promesa_pago.append(pp)
        metodoPago.append(mpago)
        receipttype.append(receipt1)
        referenciador.append(referenc)
        antiguedad.append(antig)
        responsable.append(val_resp)
        collection.append(val_cexe)
        userpay.append(val_userpay)
        creadopor.append(val_owner)
        contract.append(contratantex)
        contractemail.append(contratanteE)
        contractphone.append(contratanteP)
        contractgrupo.append(contratanteG)
        aseguradora.append(aseg)
        inicio.append(inc)
        fin.append(fn)
        poliza_number.append(pnumber)
        clave.append(cve)
        subramo.append(sramo)
        ramo.append(rm)
        identifier.append(iden)
        statusP.append(status_p)
        forma_de_pago.append(payForm)
        sucursal.append(sc)
        currency.append(fc)
        importePesos.append(importe)
        contactos_nombre.append(contacto_nombre)
        contactos_email.append(contacto_email)
        contactos_telefono.append(contacto_telefono)
        tipo_poliza_fianza.append(tpf)
        folio_pago_list.append(r.folio_pago)
        
    obj = {
        'document_type'   : str(list(recibos.values_list('poliza__document_type', flat = True))),
        'metodo_pago'   : str(list(metodoPago)),
        'promesa_pago'   : str(list(promesa_pago)),
        'tipo_pago': str(list(recibos.values_list('rate_exchange', flat = True))),
        'documento_pago': str(list(recibos.values_list('pay_doc', flat = True))),
        'receipt_type'   : str(list(receipttype)),
        'recibo_numero'   : str(list(recibos.values_list('recibo_numero', flat = True))),
        'endoso_number'   : str(list(recibos.values_list('endorsement__number_endorsement', flat = True))),
        'poliza_number'   : str(list(poliza_number)),
        'identifier'   : str(list(identifier)),
        'aseguradora'   : str(list(aseguradora)),
        'subramo'   : str(list(subramo)),
        'forma_de_pago'   : str(list(forma_de_pago)),
        'status'   : str(list(recibos.values_list('status', flat = True))),
        'domiciliado'   : str(list(recibos.values_list('conducto_de_pago', flat = True))),
        'status_p'   : str(list(statusP)),
        'fecha_inicio'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in recibos.values_list('fecha_inicio', flat = True) ])) ,
        'fecha_fin'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in recibos.values_list('fecha_fin', flat = True) ])) ,
        'vencimiento'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in recibos.values_list('vencimiento', flat = True) ])) ,
        'fecha_pago'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in recibos.values_list('pay_date', flat = True) ])) ,
        'fecha_conciliacion'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in recibos.values_list('conciliacion_date', flat = True) ])) ,
        'fecha_liquidacion'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in recibos.values_list('liquidacion_date', flat = True) ])) ,
        'liquidacion_folio'   : str(list(recibos.values_list('liquidacion_folio', flat = True))) ,
        'start_of_validity'   : str(list(inicio)) ,
        'end_of_validity'   : str(list(fin)) ,
        'f_currency'   : str(list(currency)),
        'p_neta'   : str(list(recibos.values_list('prima_neta', flat = True))),
        'comision_conc': str(list(recibos.values_list('comision_conciliada', flat = True))),
        'rpf'   : str(list(recibos.values_list('rpf', flat = True))),
        'derecho'   : str(list(recibos.values_list('derecho', flat = True))),
        'iva'   : str(list(recibos.values_list('iva', flat = True))),
        'p_total'   : str(list(recibos.values_list('prima_total', flat = True))),
        'importe_pesos'   : str(list(importePesos)),
        'comision'   : str(list(recibos.values_list('comision', flat = True))),
        'clave'   : str(list(clave)),
        '_id'   : str(list(recibos.values_list('id', flat = True))),
        'observations'   : str(list([(((((((x).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')) if x else '' for x in recibos.values_list('poliza__observations', flat = True)])),
        'created_at'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in recibos.values_list('created_at', flat = True) ]))  , 
        'sucursal'   : str(list(sucursal)),
        'asegurado'   : str(list(asegurado)),
        'ramo'   : str(list(ramo)),
        'referenciador'   : str(list(referenciador)),
        'antiguedad'   : str(list(antiguedad)),
        'creadopor'   : str(list(creadopor)),
        'collection'   : str(list(collection)),
        'user_pay'   : str(list(userpay)),
        'responsable'   : str(list(responsable)),
        'contratante'   : str(list(contract)),
        'contratanteE'   : str(list(contractemail)),
        'contratanteP'   : str(list(contractphone)),
        'contratanteG'   : str(list(contractgrupo)),
        'contactos_nombre'   : str(list(contactos_nombre)),
        'contactos_telefono'   : str(list(contactos_telefono)),
        'contactos_email'   : str(list(contactos_email)),
        'tipo_poliza_fianza'   : str(list(tipo_poliza_fianza)),
        'tipo_reporte': tipo_reporte,
        'email_org':info_org['email'],
        'phone_org':info_org['phone'],
        'webpage_org':info_org['webpage'],
        'address_org':info_org['address'],
        'urlname_org':info_org['name'],
        'pago_folio' : str(list(folio_pago_list)),
        'caratulas' : str(list(caratulas)),
    }   
    obj['columns'] = str(list(columns))
    obj['imagen'] = archivo_imagen
    obj['verReferenciadores'] = verReferenciadores
    obj['valueCom'] = valueCom
    obj['registros'] = len(recibos)
    obj['typeReport'] = 2
    r = requests.post(settings.SERVICEEXCEL_URL + 'get-cobranzaExcelReporte/', obj,
    # headers = {
    # 'Authorization':'Bearer %s'%request.user.user_info.fi_token_refresh,
    # # 'Content-Type':'application/json' 
    # }, 
    stream=True)
    response_data= r.text

    response = HttpResponse(r.content,content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

    return response
# Reporte Ots Endosos Excel
@api_view(['POST'])
@permission_classes((IsAuthenticatedV2, IsOrgMemberV2))
def Service_ReporteOtsEndososExcel(request):
    provider = request.data['provider']
    ramo = request.data['ramo']
    subramo = request.data['subramo']
    report_by = request.data['report_by']
    since = request.data['since']
    until = request.data['until']
    status = request.data['status']
    payment = request.data['payment']
    contratante = request.data['contratante']
    group = request.data['grupo']
    poliza = request.data['poliza']
    identifier = request.data['identifier']
    group_by = request.data['group_by']
    type_person = request.data['type_contractor']
    ot_rep = request.data['ot']
    order = int(request.data['order'])
    asc = int(request.data['asc'])
    cve = request.data['cve']
    ramos_sel = (request.data['ramos'])
    subramos_sel = (request.data['subramos'])
    providers_sel = (request.data['providers'])
    users_sel = (request.data['users'])
    p_neta_total = 0
    p_total_total = 0
    comision_total = 0
    add_renovadas = int(request.data['renewals'])
    org_name=request.GET.get('org')
    try:
        if int(payment) > 0:
            fp = [int(payment)]
        else:
            fp = [12,24,6,5,4,3,2,1,14,7,15]
    except Exception as e:
        fp = [12,24,6,5,4,3,2,1,14,7,15]

    try:
        if int(status) > 0:
                st = [int(status)]
        else:
                st = [1,2,4,10,11,12,13,14,15]
    except Exception as e:
        st = [1,2,4,10,11,12,13,14,15]

    if int(group) > 0:
        grupos = Group.objects.get(pk= int(group), org_name = request.GET.get('org'))
        grps = None
        if grupos.type_group == 1:            
            grs1 = Group.objects.filter(parent__id = grupos.id, type_group = 2).values_list('pk',flat=True)
            grs2 = Group.objects.filter(parent__id__in = grs1, type_group = 3).values_list('pk',flat=True)
            grs = list(grs1)+list(grs2)
            grs.append(grupos.id)
            grps = Group.objects.filter(pk__in = grs)
        if grupos.type_group == 2:            
            grs2 = Group.objects.filter(parent__id__in = grupos.id, type_group = 3).values_list('pk',flat=True)
            grs = list(grs2)
            grs.append(grupos.id)
            grps = Group.objects.filter(pk__in = grs)
        if grupos.type_group == 3:
            grps = grupos
        grupos = grps
    else:
        grupos = Group.objects.filter(org_name = request.GET.get('org'))

    if (poliza) != '0':
            npolicy = poliza
    else:
        npolicy = ''

    if (identifier) != '0':
            identif = identifier
    else:
        identif = ''
    
    if int(provider) > 0 :
            providers = list(Provider.objects.filter(pk = int(provider)).values_list('pk', flat=True))
    else:
            providers = list(Provider.objects.filter(org_name = request.GET.get('org')).values_list('pk', flat=True))

    if int(ramo) > 0 :
            ramos = list(Ramos.objects.filter(pk = int(ramo)).values_list('pk', flat=True))
    else:
            ramos = list(Ramos.objects.filter(org_name = request.GET.get('org'), provider__in = providers).values_list('pk', flat=True))
    
    if int(subramo) > 0 :
            subramos = list(SubRamos.objects.filter(pk = int(subramo)).values_list('pk', flat=True))
    else:
            subramos = list(SubRamos.objects.filter(org_name = request.GET.get('org'), ramo__in = ramos).values_list('pk', flat=True))

    # Provider sel----
    if (providers_sel):
            providers = list(Provider.objects.filter(pk__in = (providers_sel)).values_list('pk', flat=True))
    else:
            providers = list(Provider.objects.filter(org_name = request.GET.get('org')).values_list('pk', flat=True))
    # ramos_selected----
    if (ramos_sel):
            ramos = list(Ramos.objects.filter(org_name = request.GET.get('org'), provider__in = providers,ramo_code__in=ramos_sel).values_list('pk', flat=True))
    else:
            ramos = list(Ramos.objects.filter(org_name = request.GET.get('org'), provider__in = providers).values_list('pk', flat=True))

    # rsubramos_sel----
    if (subramos_sel):
            subramos = list(SubRamos.objects.filter(org_name = request.GET.get('org'), ramo__in = ramos,subramo_code__in= subramos_sel).values_list('pk', flat=True))
    else:
            subramos = list(SubRamos.objects.filter(org_name = request.GET.get('org'), ramo__in = ramos).values_list('pk', flat=True))   
    # users sel----
    if (users_sel):
            users = list(User.objects.filter(pk__in = (users_sel)).values_list('pk', flat=True))
    else:
            users = list(User.objects.values_list('pk', flat=True))
    try:
        clave = int(cve)
        if clave > 0:
            cves = list(Claves.objects.filter(clave__icontains = cve, org_name = request.GET.get('org')).values_list('pk', flat=True))
        else:
            cves = list(Claves.objects.filter(org_name = request.GET.get('org')).values_list('pk', flat=True))
    except:
        cves = list(Claves.objects.filter(clave__icontains = cve, org_name = request.GET.get('org')).values_list('pk', flat=True))
    polizas = []  

    if npolicy:
        polizas = Polizas.objects.filter(status__in = st, 
                                                                     forma_de_pago__in = fp, 
                                                                     org_name=request.GET.get('org'),
                                                                     ramo__in = ramos, 
                                                                     subramo__in = subramos, 
                                                                     aseguradora__in = providers,
                                                                     clave__in = cves,
                                                                     owner__in = users,
                                                                     poliza_number__icontains = npolicy)
    else:
        polizas = Polizas.objects.filter(status__in = st, 
                                                                     forma_de_pago__in = fp, 
                                                                     org_name=request.GET.get('org'),
                                                                     ramo__in = ramos, 
                                                                     subramo__in = subramos, 
                                                                     aseguradora__in = providers,
                                                                     clave__in = cves,
                                                                     owner__in = users,)

    if identif:
        polizas = polizas.filter(status__in = st, 
                                                                     forma_de_pago__in = fp, 
                                                                     org_name=request.GET.get('org'),
                                                                     ramo__in = ramos, 
                                                                     subramo__in = subramos, 
                                                                     aseguradora__in = providers,
                                                                     clave__in = cves,
                                                                     owner__in = users,
                                                                     identifier__icontains = identif)
    else:
        polizas = polizas.filter(status__in = st, 
                                                                     forma_de_pago__in = fp, 
                                                                     org_name=request.GET.get('org'),
                                                                     ramo__in = ramos, 
                                                                     subramo__in = subramos, 
                                                                     aseguradora__in = providers,
                                                                     clave__in = cves,
                                                                     owner__in = users,)
    polizas_n = []
    polizas_j = []
    polizas_total = []
    if int(contratante) > 0 :
        contratanten = list( Contractor.objects.filter(pk = int(contratante), group = grupos).values_list('pk', flat = True))
        polizas = polizas.filter(contractor__in = contratanten)
    else:
        contratanten = list(Contractor.objects.filter(group = grupos).values_list('pk', flat = True))

        if len(contratanten):
            polizas = polizas.filter(contractor__in = contratanten)

    if add_renovadas == 1:
        polizas = polizas.filter(renewed_status=1)
    elif add_renovadas == 2:
        polizas = polizas.filter(renewed_status=0)
    elif add_renovadas == 0:
        polizas = polizas

    try:
        f = "%d/%m/%Y %H:%M:%S"        
        since = datetime.strptime(since , f)
        until = datetime.strptime(until , f)

    except:
        f = "%m/%d/%Y %H:%M:%S"        
        since = datetime.strptime(since , f)
        until = datetime.strptime(until , f)
    # Vigencia
    if int(report_by) == 2:
        date_filters = [Q(start_of_validity__gte=since),Q(start_of_validity__lte = until)]
    # Fecha creación
    elif int(report_by) == 1:
        date_filters = [Q(created_at__gte=since), Q(created_at__lte=until), Q(migrated = False)]

    # Endosos - Pólizas  
    polizas_endosos = Polizas.objects.filter(org_name=request.GET.get('org')).exclude(document_type__in = [4,5,6])
    if npolicy:
        polizas_endosos = Polizas.objects.filter(status__in = st, 
                                                                     forma_de_pago__in = fp, 
                                                                     org_name=request.GET.get('org'),
                                                                     ramo__in = ramos, 
                                                                     subramo__in = subramos, 
                                                                     aseguradora__in = providers,
                                                                     clave__in = cves,
                                                                     owner__in = users,
                                                                     poliza_number__icontains = npolicy)
    else:
        polizas_endosos = Polizas.objects.filter(status__in = st, 
                                                                     forma_de_pago__in = fp, 
                                                                     org_name=request.GET.get('org'),
                                                                     ramo__in = ramos, 
                                                                     subramo__in = subramos, 
                                                                     aseguradora__in = providers,
                                                                     clave__in = cves,
                                                                     owner__in = users,)

    if identif:
        polizas_endosos = polizas_endosos.filter(status__in = st, 
                                                                     forma_de_pago__in = fp, 
                                                                     org_name=request.GET.get('org'),
                                                                     ramo__in = ramos, 
                                                                     subramo__in = subramos, 
                                                                     aseguradora__in = providers,
                                                                     clave__in = cves,
                                                                     owner__in = users,
                                                                     identifier__icontains = identif)
    else:
        polizas_endosos = polizas_endosos.filter(status__in = st, 
                                                                     forma_de_pago__in = fp, 
                                                                     org_name=request.GET.get('org'),
                                                                     ramo__in = ramos, 
                                                                     subramo__in = subramos, 
                                                                     aseguradora__in = providers,
                                                                     clave__in = cves,
                                                                     owner__in = users,)
    if int(contratante) > 0 :
        contratanten = list( Contractor.objects.filter(pk = int(contratante), group = grupos).values_list('pk', flat = True))
        polizas_endosos = polizas_endosos.filter(contractor__in = contratanten)
    else:
        contratanten = list(Contractor.objects.filter(group = grupos).values_list('pk', flat = True))

        if len(contratanten):
            polizas_endosos = polizas_endosos.filter(contractor__in = contratanten)

    if add_renovadas == 1:
        polizas_endosos = polizas_endosos.filter(renewed_status=1)
    elif add_renovadas == 2:
        polizas_endosos = polizas_endosos.filter(renewed_status=0)
    elif add_renovadas == 0:
        polizas_endosos = polizas_endosos
    try:
        dataToFilter = getDataForPerfilRestricted(request, request.GET.get('org'))
    except Exception as er:
        dataToFilter = {}
    if dataToFilter:
        # Contratantes***
        polizasCl = Polizas.objects.filter(document_type__in = [1,3,11,7,8,12,6,4], org_name = request.GET.get('org'))
        polizasToF = Polizas.objects.filter(document_type__in = [1,3,11,7,8], org_name = request.GET.get('org'))
        if dataToFilter['ccpr']:
            polizasToF = polizasToF.filter(contractor__in = list(dataToFilter['ccpr']))
        if dataToFilter['cgpr']:
            polizasToF = polizasToF.filter(contractor__group__in = list(dataToFilter['cgpr']))
        if dataToFilter['ccepr']:
            polizasToF = polizasToF.filter(contractor__cellule__in = list(dataToFilter['ccepr']))
        if dataToFilter['crpr']:
            polizasToF = polizasToF.filter(contractor__vendor__in = list(dataToFilter['crpr']))
        if dataToFilter['cspr']:
            polizasToF = polizasToF.filter(contractor__sucursal__in = list(dataToFilter['cspr']))
        # Pólizas ****
        if dataToFilter['pppr']:
            polizasToF = polizasToF.filter(pk__in = list(dataToFilter['pppr']))
        if dataToFilter['pgpr']:
            polizasToF = polizasToF.filter(contractor__group__in = list(dataToFilter['pgpr']))
        if dataToFilter['pcepr']:
            polizasToF = polizasToF.filter(celula__in = list(dataToFilter['pcepr']))
        if dataToFilter['prpr']:
            polizasToF = polizasToF.filter(ref_policy__referenciador__in = list(dataToFilter['prpr']))
        if dataToFilter['pspr']:
            polizasToF = polizasToF.filter(sucursal__in = list(dataToFilter['pspr']))
        if dataToFilter['papr']:
            polizasToF = polizasToF.filter(groupinglevel__in = list(dataToFilter['papr']))
        if dataToFilter['pcapr']:
            polizasToF = polizasToF.filter(clave__in = list(dataToFilter['pcapr']))
        if dataToFilter['psrpr']:
            polizasToF = polizasToF.filter(subramo__subramo_code__in = list(dataToFilter['psrpr']))
        if dataToFilter['paspr']:
            polizasToF = polizasToF.filter(aseguradora__in = list(dataToFilter['paspr']))
        if dataToFilter['pstpr']:
            polizasToF = polizasToF.filter(status__in = list(dataToFilter['pstpr']))
        
        polizasCT = polizasCl.filter(document_type = 12, parent__in = list(polizasToF))
        polizasGT = polizasCl.filter(document_type = 6, parent__parent__parent__in = list(polizasToF))
        polizasFin = list(polizasToF.values_list('pk', flat = True)) + list(polizasCT.values_list('pk', flat = True)) + list(polizasGT.values_list('pk', flat = True))
        polizas_endosos = polizas_endosos.filter(pk__in = list(polizasFin))    
        polizas = polizas.filter(pk__in = list(polizasFin))  
    endorsment_filters = [(Q(policy__in = list(polizas_endosos))), Q(internal_number__icontains = str(request.GET.get('cadena'))),
                                            Q(number_endorsement__icontains = str(request.GET.get('cadena')))]
    # endosos = Endorsement.objects.filter(reduce(OR,endorsment_filters),org_name = org,status__in = [1, 5]).exclude(status = 0).distinct('id')
    endosos = Endorsement.objects.filter(reduce(OR,endorsment_filters),org_name=request.GET.get('org'),status__in = [1, 5]).exclude(status = 0)
    serializer_endosos = EndorsementSearchHyperSerializer(endosos, context={'request': request}, many=True)
    # -----------------------------
    
    campo_celula, campo_agrupacion, campo_lineanegocio, moduleName = getOrgInfo(request)
    if ot_rep == 1:
        if order == 1:
            if asc == 1:
                    polizas = polizas.filter(reduce(operator.and_, date_filters), document_type__in = list([1,3]) ,org_name = request.GET.get('org'), status__in = [1,2]).order_by('poliza_number')
            else:
                    polizas = polizas.filter(reduce(operator.and_, date_filters), document_type__in = list([1,3]), org_name = request.GET.get('org'), status__in = [1,2]).order_by('-poliza_number')
            
        elif order == 2:
                if asc == 1:
                        polizas = polizas.filter(reduce(operator.and_, date_filters), document_type__in = list([1,3]), org_name = request.GET.get('org'), status__in = [1,2]).order_by('-document_type')
                else:
                        polizas = polizas.filter(reduce(operator.and_, date_filters), document_type__in = list([1,3]), org_name = request.GET.get('org'), status__in = [1,2]).order_by('document_type')
        
        elif order == 3:
                if asc == 1:
                        polizas = polizas.filter(reduce(operator.and_, date_filters), document_type__in = list([1,3]), org_name = request.GET.get('org'), status__in = [1,2]).order_by('contractor__full_name')
                else:
                        polizas = polizas.filter(reduce(operator.and_, date_filters), document_type__in = list([1,3]), org_name = request.GET.get('org'), status__in = [1,2]).order_by('-contractor__full_name')
        
        elif order == 4:
                if asc == 1:
                        polizas = polizas.filter(reduce(operator.and_, date_filters), document_type__in = list([1,3]), org_name = request.GET.get('org'), status__in = [1,2]).order_by('aseguradora__compania')
                else:
                        polizas = polizas.filter(reduce(operator.and_, date_filters), document_type__in = list([1,3]), org_name = request.GET.get('org'), status__in = [1,2]).order_by('-aseguradora__compania')
        
        elif order == 5:
                if asc == 1:
                        polizas = polizas.filter(reduce(operator.and_, date_filters), document_type__in = list([1,3]), org_name = request.GET.get('org'), status__in = [1,2]).order_by('ramo__ramo_name')
                else:
                        polizas = polizas.filter(reduce(operator.and_, date_filters), document_type__in = list([1,3]), org_name = request.GET.get('org'), status__in = [1,2]).order_by('-ramo__ramo_name')


        elif order == 6:
                if asc == 1:
                        polizas = polizas.filter(reduce(operator.and_, date_filters), document_type__in = list([1,3]), org_name = request.GET.get('org'), status__in = [1,2]).order_by('subramo__subramo_name')
                else:
                        polizas = polizas.filter(reduce(operator.and_, date_filters), document_type__in = list([1,3]), org_name = request.GET.get('org'), status__in = [1,2]).order_by('-subramo__subramo_name')
        
        elif order == 7:
                if asc == 1:
                        polizas = polizas.filter(reduce(operator.and_, date_filters), document_type__in = list([1,3]), org_name = request.GET.get('org'), status__in = [1,2]).order_by('paquete__package_name')
                else:
                        polizas = polizas.filter(reduce(operator.and_, date_filters), document_type__in = list([1,3]), org_name = request.GET.get('org'), status__in = [1,2]).order_by('-paquete__package_name')

        elif order == 8:
                if asc == 1:
                        polizas = polizas.filter(reduce(operator.and_, date_filters), document_type__in = list([1,3]), org_name = request.GET.get('org'), status__in = [1,2]).order_by('forma_de_pago')
                else:
                        polizas = polizas.filter(reduce(operator.and_, date_filters), document_type__in = list([1,3]), org_name = request.GET.get('org'), status__in = [1,2]).order_by('-forma_de_pago')

        elif order == 9:
                if asc == 1:
                        polizas = polizas.filter(reduce(operator.and_, date_filters), document_type__in = list([1,3]), org_name = request.GET.get('org'), status__in = [1,2]).order_by('status')
                else:
                        polizas = polizas.filter(reduce(operator.and_, date_filters), document_type__in = list([1,3]), org_name = request.GET.get('org'), status__in = [1,2]).order_by('-status')

        elif order == 10:
                if asc == 1:
                        polizas = polizas.filter(reduce(operator.and_, date_filters), document_type__in = list([1,3]), org_name = request.GET.get('org'), status__in = [1,2]).order_by('start_of_validity')
                else:
                        polizas = polizas.filter(reduce(operator.and_, date_filters), document_type__in = list([1,3]), org_name = request.GET.get('org'), status__in = [1,2]).order_by('-start_of_validity')

        elif order ==11:
                if asc == 1:
                        polizas = polizas.filter(reduce(operator.and_, date_filters), document_type__in = list([1,3]), org_name = request.GET.get('org'), status__in = [1,2]).order_by('folio')
                else:
                        polizas = polizas.filter(reduce(operator.and_, date_filters), document_type__in = list([1,3]), org_name = request.GET.get('org'), status__in = [1,2]).order_by('-folio')

        elif order ==12:
                if asc == 1:
                        polizas = polizas.filter(reduce(operator.and_, date_filters), document_type__in = list([1,3]), org_name = request.GET.get('org'), status__in = [1,2]).order_by('f_currency')
                else:
                        polizas = polizas.filter(reduce(operator.and_, date_filters), document_type__in = list([1,3]), org_name = request.GET.get('org'), status__in = [1,2]).order_by('-f_currency')

        elif order == 13:
                if asc == 1:
                        polizas = polizas.filter(reduce(operator.and_, date_filters), document_type__in = list([1,3]), org_name = request.GET.get('org'), status__in = [1,2]).order_by('p_neta')
                else:
                        polizas = polizas.filter(reduce(operator.and_, date_filters), document_type__in = list([1,3]), org_name = request.GET.get('org'), status__in = [1,2]).order_by('-p_neta')

        elif order == 14:
                if asc == 1:
                        polizas = polizas.filter(reduce(operator.and_, date_filters), document_type__in = list([1,3]), org_name = request.GET.get('org'), status__in = [1,2]).order_by('rpf')
                else:
                        polizas = polizas.filter(reduce(operator.and_, date_filters), document_type__in = list([1,3]), org_name = request.GET.get('org'), status__in = [1,2]).order_by('-rpf')


        elif order == 15:
                if asc == 1:
                        polizas = polizas.filter(reduce(operator.and_, date_filters), document_type__in = list([1,3]), org_name = request.GET.get('org'), status__in = [1,2]).order_by('derecho')
                else: 
                        polizas = polizas.filter(reduce(operator.and_, date_filters), document_type__in = list([1,3]), org_name = request.GET.get('org'), status__in = [1,2]).order_by('-derecho')

        elif order == 16:
                if asc == 1:
                        polizas = polizas.filter(reduce(operator.and_, date_filters), document_type__in = list([1,3]), org_name = request.GET.get('org'), status__in = [1,2]).order_by('iva')
                else:
                        polizas = polizas.filter(reduce(operator.and_, date_filters), document_type__in = list([1,3]), org_name = request.GET.get('org'), status__in = [1,2]).order_by('-iva')

        elif order == 17:
                if asc == 1:
                        polizas = polizas.filter(reduce(operator.and_, date_filters), document_type__in = list([1,3]), org_name = request.GET.get('org'), status__in = [1,2]).order_by('p_total')
                else:
                        polizas = polizas.filter(reduce(operator.and_, date_filters), document_type__in = list([1,3]), org_name = request.GET.get('org'), status__in = [1,2]).order_by('-p_total')

        elif order == 18:
                if asc == 1:
                        polizas = polizas.filter(reduce(operator.and_, date_filters), document_type__in = list([1,3]), org_name = request.GET.get('org'), status__in = [1,2]).order_by('comision')
                else:
                        polizas = polizas.filter(reduce(operator.and_, date_filters), document_type__in = list([1,3]), org_name = request.GET.get('org'), status__in = [1,2]).order_by('-comision')

        elif order == 19:
                if asc == 1:
                        polizas = polizas.filter(reduce(operator.and_, date_filters), document_type__in = list([1,3]), org_name = request.GET.get('org'), status__in = [1,2]).order_by('observations')
                else:
                        polizas = polizas.filter(reduce(operator.and_, date_filters), document_type__in = list([1,3]), org_name = request.GET.get('org'), status__in = [1,2]).order_by('-observations')

        elif order == 20:
                if asc == 1:
                        polizas = polizas.filter(reduce(operator.and_, date_filters), document_type__in = list([1,3]), org_name = request.GET.get('org'), status__in = [1,2]).order_by('owner')
                else:
                        polizas = polizas.filter(reduce(operator.and_, date_filters), document_type__in = list([1,3]), org_name = request.GET.get('org'), status__in = [1,2]).order_by('-owner')

        elif order == 21:
                if asc == 1:
                        polizas = polizas.filter(reduce(operator.and_, date_filters), document_type__in = list([1,3]), org_name = request.GET.get('org'), status__in = [1,2]).order_by('clave__clave')
                else:
                        polizas = polizas.filter(reduce(operator.and_, date_filters), document_type__in = list([1,3]), org_name = request.GET.get('org'), status__in = [1,2]).order_by('-clave__clave')

        elif order == 23:
                if asc == 1:
                        polizas = polizas.filter(reduce(operator.and_, date_filters), document_type__in = list([1,3]), org_name = request.GET.get('org'), status__in = [1,2]).order_by('created_at')
                else:
                        polizas = polizas.filter(reduce(operator.and_, date_filters), document_type__in = list([1,3]), org_name = request.GET.get('org'), status__in = [1,2]).order_by('-created_at')
        elif order == 24:
                if asc == 1:
                        polizas = polizas.filter(reduce(operator.and_, date_filters), document_type__in = list([1,3]), org_name = request.GET.get('org'), status__in = [1,2]).order_by('contractor__group')
                else:
                        polizas = polizas.filter(reduce(operator.and_, date_filters), document_type__in = list([1,3]), org_name = request.GET.get('org'), status__in = [1,2]).order_by('-contractor__group',)
        
        else:
            polizas.filter(reduce(operator.and_, date_filters), document_type__in = list([1,3]), org_name = request.GET.get('org'), status__in = [1,2])
    elif ot_rep == 2:
        print('---------------SOLO ENDOSOS------------')
    elif ot_rep == 3:   
        polizas = polizas.filter(reduce(operator.and_, date_filters), document_type__in = list([1,3]), org_name = request.GET.get('org'), status__in = [1,2]).order_by('-poliza_number') 

    paginator = Paginator(polizas, 10)
    try:
            page = request.data['page']
            results = paginator.page(page)
    except:
            results = paginator.page(1)

    try:
        p_neta_total = polizas.aggregate(Sum('p_neta'))
        comision_total = polizas.aggregate(Sum('comision'))
        p_total_total = polizas.aggregate(Sum('p_total'))

    except Exception as e:
        print(e)


    sumas = {
        'p_total_total': p_total_total['p_total__sum'],
        'p_neta_total': p_neta_total['p_neta__sum'],
        'comision_total': comision_total['comision__sum']
    }
    # serializer = PolizaResumeSerializer(results,context={'request':request},many=True)
    if ot_rep == 1:
        ots = polizas
        endosos = []
    elif ot_rep == 2:
        ots = []
        endosos = endosos
    elif ot_rep == 3:
        ots = polizas
        endosos = endosos
    info_org = getInfoOrg(request)

    if len(info_org['logo']) != 0:
        archivo_imagen = 'https://miurabox-public.s3.amazonaws.com/cas/' + info_org['logo']
        # archivo_imagen = get_presigned_url("cas/{url}".format(url=info_org['logo']),28800) 
    else:
            archivo_imagen = 'saam.jpg'


    si_com = comisions(request)    
    verReferenciadores = is_perm_ver_referenciadores(request)
    # Ots
    if ot_rep == 1:
        tipo_reporte = " Reporte OTs de Pólizas"
        columns = ['Tipo', 'No.Póliza', 'Contratante','Grupo', 'Email', 'Teléfono', 'Proveedor', 'Subramo', 
                             'Forma de Pago', 'Estatus', 'Inicio Póliza', 'Fin Póliza', 'Moneda', 'Prima Neta', 
                             'RPF', 'Derecho', 'IVA', 'Prima Total', 'Comisión', 'Clave', 'Sucursal', 'Referenciador', 'Creado por', 
                             'Fecha creación', 'Observaciones', 'Asegurado', 'Marca', 'Modelo', 'Versión', 'Año',
                             'Placas', 'Motor', 'Adaptaciones', 'Conductor','Dirección','Código Postal']

        ots = ots.exclude(document_type = 2)
            # Empieza insertado de imagen
        info_org = getInfoOrg(request)

        if len(info_org['logo']) != 0:
            archivo_imagen = 'https://miurabox-public.s3.amazonaws.com/cas/' + info_org['logo']
            # archivo_imagen = get_presigned_url("cas/{url}".format(url=info_org['logo']),28800) 
        else:
            archivo_imagen = 'saam.jpg'

        asegurado = []
        antiguedad = []
        referenciador = []
        responsable = []
        collection = []
        userpay = []
        creadopor = []
        clave = []
        contract = []
        contractemail = []
        contractphone = []
        contractgrupo = []

        ots = ots.order_by('contractor__full_name')
            # Empieza insertado de imagen
        info_org = getInfoOrg(request)

        asegurado = []
        antiguedad = []
        referenciador = []
        creadopor = []
        dateRen = []
        otRen = []
        responsable = []
        contratante = []
        contratanteE = []
        contratanteP = []
        contratanteG = []
        collection = []
        clave = []
        cp = []
        paquete = []
        valueMA = []  
        valueModA = [] 
        valueVA = [] 
        valueYA = [] 
        valueLPA = [] 
        valueEA = [] 
        valueAdA = [] 
        valueDrA = []
        # ots = ots.order_by('natural__full_name','juridical__j_name')
        ots = ots.order_by('id')
        for r in ots:
            if r.address:
               pc = r.address.postal_code
            else:
               pc = ''
            antig = get_antiguedad(r.start_of_validity)
            if r.owner:
                val_owner = r.owner.first_name + ' '+ str(r.owner.last_name)
            else:
                val_owner = ''
            if r.paquete:
                pac = r.paquete.package_name
            else:
                pac = ''
            if r.responsable:
                val_resp = r.responsable.first_name + ' '+ str(r.responsable.last_name)
            else:
                val_resp = ''
            if r.collection_executive:
                val_col = r.collection_executive.first_name + ' '+ str(r.collection_executive.last_name)
            else:
                val_col = ''
            if r.clave:
                try:
                    cve = r.clave.name + ' '+ str(r.clave.clave)
                    cve = ((((((cve).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                except Exception as ers:
                    cve = ''
            else:
                cve = ''
            if r.contractor:
                contratan = ((((((r.contractor.full_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                contratanE = r.contractor.email
                contratanP = r.contractor.phone_number
                # contratanG = r.contractor.group.group_name
                contratanG = ((((((r.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')

            else:
                contratan = ''
                contratanE = ''
                contratanP = ''
                # contratanG = r.juridical.group.group_name
                contratanG = ''
            try:
                old = OldPolicies.objects.filter(base_policy__id = r.id)
                try:
                  date_renovacion = old[0].created_at.strftime("%d/%m/%Y")
                except Exception as rr:
                    date_renovacion = 'Por renovar'
                try:
                    ot_renovacion = old[0].new_policy.poliza_number if old[0].new_policy.poliza_number else old[0].new_policy.internal_number
                except Exception as rr:
                    ot_renovacion = 'Por renovar'
            except Exception as dwe:
                date_renovacion = 'Por renovar'
                ot_renovacion = 'Por renovar'
            try:
                refs_policy = ReferenciadoresInvolved.objects.filter(policy = r.id,is_changed=False).values_list('referenciador__first_name','referenciador__last_name')
                if len(refs_policy):
                    v = []
                    try:
                        for it in refs_policy:
                            v.append(it[0] +' '+ str(it[1])+str('; '))
                        referenc = v
                    except Exception as y:
                        referenc = []
                else:
                    referenc = []
            except Exception as e:
                referenc = []
            if r.ramo.ramo_code == 1:
                form = Life.objects.filter(policy = r.id)
                if form:
                    try:
                        if form:
                            value = form[0].personal.full_name
                        else:
                            value = ''
                    except Exception as rt:
                       value = ''
                    valueM = '' 
                    valueMod = '' 
                    valueV = '' 
                    valueY = ''
                    valueLP = '' 
                    valueE = '' 
                    valueAd = '' 
                    valueDr = ''
                else:
                    value = ''
                    valueM = '' 
                    valueMod = '' 
                    valueV = '' 
                    valueY = ''
                    valueLP = '' 
                    valueE = '' 
                    valueAd = '' 
                    valueDr = ''
            elif r.ramo.ramo_code == 2:
                form = AccidentsDiseases.objects.filter(policy = r.id)
                if form:
                    value = form[0].personal.full_name
                    valueM = '' 
                    valueMod = '' 
                    valueV = '' 
                    valueY = ''
                    valueLP = '' 
                    valueE = '' 
                    valueAd = '' 
                    valueDr = ''
                else:
                    value = ''
                    valueM = '' 
                    valueMod = '' 
                    valueV = '' 
                    valueY = ''
                    valueLP = '' 
                    valueE = '' 
                    valueAd = '' 
                    valueDr = ''
            elif r.subramo.subramo_code == 9:
                form = AutomobilesDamages.objects.filter(policy = r.id)
                if form:
                    try:
                        form[0].model = ((((((form[0].model).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        form[0].version = ((((((form[0].version).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    except Exception as ers:
                        form[0].model = form[0].model
                        form[0].version = form[0].version
                    value = str(form[0].brand) + '-' + str(form[0].model )+ '-' + str(form[0].version)+ '-' + str(form[0].serial)
                    valueM = form[0].brand 
                    valueMod = form[0].model 
                    valueV = form[0].version 
                    valueY = form[0].year 
                    valueLP = form[0].license_plates 
                    valueE = form[0].engine 
                    valueAd = form[0].adjustment 
                    valueDr = form[0].driver 
                else:
                    value = ''
                    valueM = '' 
                    valueMod = '' 
                    valueV = '' 
                    valueY = ''
                    valueLP = '' 
                    valueE = '' 
                    valueAd = '' 
                    valueDr = ''
            elif r.ramo.ramo_code == 3 and not r.subramo.subramo_code == 9:
                form = Damages.objects.filter(policy = r.id)
                if form:
                    value = form[0].insured_item
                    valueM = '' 
                    valueMod = '' 
                    valueV = '' 
                    valueY = ''
                    valueLP = '' 
                    valueE = '' 
                    valueAd = '' 
                    valueDr = ''
                else:
                    value = ''
                    valueM = '' 
                    valueMod = '' 
                    valueV = '' 
                    valueY = ''
                    valueLP = '' 
                    valueE = '' 
                    valueAd = '' 
                    valueDr = ''
            if value:
                value = ((((((value).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'') 
            else:
                value = value
            asegurado.append(value)
            dateRen.append(date_renovacion)
            otRen.append(ot_renovacion)
            referenciador.append(referenc)
            antiguedad.append(antig)
            creadopor.append(val_owner)
            contratante.append(contratan)
            contratanteE.append(contratanE)
            contratanteP.append(contratanP)
            contratanteG.append(contratanG)
            responsable.append(val_resp)
            collection.append(val_col)
            paquete.append(pac)
            clave.append(cve)
            cp.append(pc)
            valueMA.append(valueM) 
            valueModA.append(valueMod)  
            valueVA.append(valueV) 
            valueYA.append(valueY) 
            valueLPA.append(valueLP)  
            valueEA.append(valueE)  
            valueAdA.append(valueAd)  
            valueDrA.append(valueDr) 
        obj = {
            'reasoncacel'   : str(list(ots.values_list('reason_cancel', flat = True))),
            'renewable'   : str(list(ots.values_list('is_renewable', flat = True))),
            'document_type'   : str(list(ots.values_list('document_type', flat = True))),
            'poliza_number'   : str(list(ots.values_list('poliza_number', flat = True))),
            'contratante'   : str(list(contratante)),
            'contratanteE'   : str(list(contratanteE)),
            'contratanteP'   : str(list(contratanteP)),
            'contratanteG'   : str(list(contratanteG)),
            'aseguradora__compania'   : str(list(ots.values_list('aseguradora__alias', flat = True))),
            'subramo__subramo_name'   : str(list(ots.values_list('subramo__subramo_name', flat = True))),
            'ramo'   : str(list(ots.values_list('ramo__ramo_name', flat = True))),
            'forma_de_pago'   : str(list(ots.values_list('forma_de_pago', flat = True))),
            'status'   : str(list(ots.values_list('status', flat = True))),
            'start_of_validity'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in ots.values_list('start_of_validity', flat = True) ])) ,
            'end_of_validity'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in ots.values_list('end_of_validity', flat = True) ])) ,
            'f_currency'   : str(list(ots.values_list('f_currency', flat = True))),
            'p_neta'   : str(list(ots.values_list('p_neta', flat = True))),
            'rpf'   : str(list(ots.values_list('rpf', flat = True))),
            'derecho'   : str(list(ots.values_list('derecho', flat = True))),
            'iva'   : str(list(ots.values_list('iva', flat = True))),
            'p_total'   : str(list(ots.values_list('p_total', flat = True))),
            'comision'   : str(list(ots.values_list('comision', flat = True))),
            '_id'   : str(list(ots.values_list('id', flat = True))),
            'observations'   : str(list([(((((((x).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')) if x else '' for x in ots.values_list('observations', flat = True)])),
            'created_at'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in ots.values_list('created_at', flat = True) ]))  ,
            'clave'   : str(list(clave)),
            'sucursal__sucursal_name'   : str(list(ots.values_list('sucursal__sucursal_name', flat = True))),
            'renewed_status': str(list(ots.values_list('renewed_status', flat = True))),
            'paquete': str(list(paquete)),
            'identifier'   : str(list([(((((((x).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')) if x else '' for x in ots.values_list('identifier', flat = True)])),  
            'address': str(list(ots.values_list('address__administrative_area_level_1', flat = True))),
            'cp': str(list(cp)),
            'dateRen'   : str(list(dateRen)),
            'collection'   : str(list(collection)),
            'otRen'   : str(list(otRen)),
            'asegurado'   : str(list(asegurado)),
            'marca'   : str(list(valueMA)),
            'modelo'   : str(list(valueModA)),
            'version'   : str(list(valueVA)),
            'anio'   : str(list(valueYA)),
            'placa'   : str(list(valueLPA)),
            'motor'   : str(list(valueEA)),
            'adaptaciones'   : str(list(valueAdA)),
            'conductor'   : str(list(valueDrA)),
            'referenciador'   : str(list(referenciador)),
            'antiguedad'   : str(list(antiguedad)),
            'creadopor'   : str(list(creadopor)),
            'responsable'   : str(list(responsable)),
            'tipo_reporte': tipo_reporte,
            'email_org':info_org['email'],
            'phone_org':info_org['phone'],
            'webpage_org':info_org['webpage'],
            'address_org':info_org['address'],
            'urlname_org':info_org['name'],
            'campo_celula':campo_celula,
            'campo_agrupacion':campo_agrupacion,
            'campo_lineanegocio':campo_lineanegocio
        }  
        obj['columns'] = str(list(columns))
        obj['imagen'] = archivo_imagen
        obj['lenots'] = len(ots)
        obj['lenendosos'] = len(endosos)
        obj['registros'] = len(ots) +len(endosos)
        obj['verReferenciadores'] = verReferenciadores

        r = requests.post(settings.SERVICEEXCEL_URL + 'get-polizasExcelReporte/', obj,
        # headers = {
        # 'Authorization':'Bearer %s'%request.user.user_info.fi_token_refresh,
        # # 'Content-Type':'application/json' 
        # }, 
        stream=True)
        response_data= r.text

        response = HttpResponse(r.content,content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

        return response
    # Endosos
    if ot_rep == 2:
        tipo_reporte = 'Reporte Endosos'
        columns = ['Tipo', 'No.Endoso', 'Contratante', 'Email', 'Teléfono', 'Proveedor', 'Subramo', 'Forma de Pago', 'Estatus', 
                 'Inicio Póliza', 'Fin Póliza', 'Moneda', 'Prima Neta', 'RPF', 'Derecho', 'IVA', 'Prima Total', 'Comisión',
                 'Clave', 'Asegurado', 'Descripción', 'Referenciador', 'Fecha de creación', 'Creado por','Folio Interno',
                 'Identificador Póliza/Fianza','Responsable','Ejecutivo Cobranza','Ramo','Tipo de endoso','Sucursal','Grupo',
                 'Número de Póliza']

        # ORDEN
        try:
            columns = request.data['cols1']
            columns.append('Número de Póliza')
        except:
            pass
        info_org = getInfoOrg(request)
        if len(info_org['logo']) != 0:
            archivo_imagen = 'https://miurabox-public.s3.amazonaws.com/cas/' + info_org['logo']
            # archivo_imagen = get_presigned_url("cas/{url}".format(url=info_org['logo']),28800) 
        else:
                archivo_imagen = 'saam.jpg'
        
        asegurado = []
        antiguedad = []
        referenciador = []
        creadopor = []
        dateRen = []
        otRen = []
        responsable = []
        collection = []
        contratante = []
        contratanteE = []
        contratanteP = []
        contratanteG = []
        clave = []
        cp = []
        subramo = []
        ramo = []
        company = []
        # paqueteramo__ramo_name        
        # endosos = endosos.order_by('policy__document_type','policy__contractor__full_name','policy__juridical__j_name','fianza__natural__full_name','fianza__juridical__j_name')
        # endosos = endosos.order_by('policy__contractor__full_name','policy__juridical__j_name','fianza__natural__full_name','fianza__juridical__j_name','id')
        endosos = endosos.order_by('id')

        startV = []
        endV = []
        # endosos = endosos.order_by('policy__document_type','policy__poliza_number','fianza__fianza_number')
        for r in endosos:
            inc=''
            fn=''
            if r.policy:
                if r.policy.address:
                   pc = r.policy.address.postal_code
                else:
                   pc = ''
            else:
                pc = ''
            antig = get_antiguedad(r.init_date)
            if r.owner:
                val_owner = r.owner.first_name + ' '+ str(r.owner.last_name)
            else:
                val_owner = ''
            
            if r.policy:
                try:               
                    inc = r.policy.start_of_validity.strftime("%d/%m/%Y")
                    fn =r.policy.end_of_validity.strftime("%d/%m/%Y")
                except Exception as f:
                    inc =''
                    fn = ''
                if r.policy.responsable:
                    val_resp = r.policy.responsable.first_name + ' '+ str(r.policy.responsable.last_name)
                else:
                    val_resp = ''
                if r.policy.aseguradora:
                    cmpa = r.policy.aseguradora.alias
                else:
                    cmpa = ''
                if r.policy.subramo:
                    sra = r.policy.subramo.subramo_name
                else:
                    sra = ''
                if r.policy.ramo:
                    ra = r.policy.ramo.ramo_name
                else:
                    ra = ''
                if r.policy.collection_executive:
                    cllection = r.policy.collection_executive.first_name +' '+str(r.policy.collection_executive.last_name)
                else:
                    cllection = ''
                if r.policy.clave:
                    try:
                        cve = r.policy.clave.name + ' '+ str(r.policy.clave.clave)
                        cve = ((((((cve).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    except Exception as ers:
                        cve = ''
                else:
                    cve = ''
                if r.policy.contractor:
                    contratan = ((((((r.policy.contractor.full_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    contratanE = r.policy.contractor.email
                    contratanP = r.policy.contractor.phone_number
                    # contratanG = r.policy.contractor.group.group_name
                    contratanG = ((((((r.policy.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                else:
                    contratan = ''
                    contratanE = ''
                    contratanP = ''
                    contratanG = ''
                    # contratanG = r.policy.juridical.group.group_name
                if r.policy.ramo.ramo_code == 1:
                    form = Life.objects.filter(policy = r.policy.id)
                    try:
                        if form:
                            value = form[0].personal.full_name
                        else:
                            value = ''
                    except Exception as rt:
                       value = ''
                elif r.policy.ramo.ramo_code == 2:
                    form = AccidentsDiseases.objects.filter(policy = r.policy.id)
                    if form:
                        value = form[0].personal.full_name
                    else:
                        value = ''
                elif r.policy.subramo.subramo_code == 9:
                    form = AutomobilesDamages.objects.filter(policy = r.policy.id)
                    if form:
                        try:
                            form[0].model = ((((((form[0].model).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                            form[0].version = ((((((form[0].version).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        except Exception as ers:
                            form[0].model = form[0].model
                            form[0].version = form[0].version
                        value = str(form[0].brand) + '-' + str(form[0].model) + '-' + str(form[0].version)+ '-' + str(form[0].serial)
                    else:
                        value = ''
                elif r.policy.ramo.ramo_code == 3 and not r.policy.subramo.subramo_code == 9:
                    form = Damages.objects.filter(policy = r.policy.id)
                    if form:
                        value = form[0].insured_item
                    else:
                        value = ''
            elif r.fianza:
                try:               
                    inc = r.fianza.start_of_validity.strftime("%d/%m/%Y")
                    fn =r.fianza.end_of_validity.strftime("%d/%m/%Y")
                except Exception as f:
                    inc =''
                    fn = ''
                if r.fianza.clave:
                    try:
                        cve = r.fianza.clave.name + ' '+ str(r.fianza.clave.clave)
                        cve = ((((((cve).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    except Exception as e:
                        cve = ''
                else:
                    cve = ''
                if r.fianza.contractor:
                    contratan = ((((((r.fianza.contractor.full_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    contratanE = r.fianza.contractor.email
                    contratanP = r.fianza.contractor.phone_number
                    contratanG = ((((((r.fianza.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    # contratanG = r.fianza.contractor.group.group_name
                else:
                    contratan = ''
                    contratanE = ''
                    contratanP = ''
                    contratanG = ''
                    # contratanG = r.fianza.juridical.group.group_name
                if r.fianza.clave:
                    try:
                        cve = r.fianza.clave.name + ' '+ str(r.fianza.clave.clave)
                        cve = ((((((cve).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    except Exception as ers:
                        cve =''
                else:
                    cve = ''
                if r.fianza.afianzadora:
                    cmpa = r.fianza.afianzadora.alias
                else:
                    cmpa = ''
                if r.fianza.subramo:
                    sra = r.fianza.subramo.subramo_name
                else:
                    sra = ''
                if r.fianza.ramo:
                    ra = r.fianza.ramo.ramo_name
                else:
                    ra = ''
                cllection = ''
                value = ''
            else:
                val_resp = ''
                contratan =''
                contratanE =''
                contratanP = ''
                contratanG = ''
            try:
                refs_policy = ReferenciadoresInvolved.objects.filter(policy = r.policy.id,is_changed=False).values_list('referenciador__first_name','referenciador__last_name')
                if len(refs_policy):
                    v = []
                    try:
                        for it in refs_policy:
                            v.append(it[0] +' '+ str(it[1])+str('; '))
                        referenc = v
                    except Exception as y:
                        referenc = []
                else:
                    referenc = []
            except Exception as e:
                referenc = []
            if value:
                value = ((((((value).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'') 
            else:
                value = value
            asegurado.append(value)
            referenciador.append(referenc)
            antiguedad.append(antig)
            creadopor.append(val_owner)
            contratante.append(contratan)
            contratanteE.append(contratanE)
            contratanteP.append(contratanP)
            contratanteG.append(contratanG)
            responsable.append(val_resp)
            clave.append(cve)
            company.append(cmpa)
            subramo.append(sra)
            ramo.append(ra)
            collection.append(cllection)
            startV.append(inc)
            endV.append(fn)
            # start.append(strt)
            # end.append(endd)
        obj = {
            'document_type'   : str(list(endosos.values_list('policy__document_type', flat = True))),
            'poliza_number'   : str(list(endosos.values_list('policy__poliza_number', flat = True))),
            'contratante'   : str(list(contratante)),
            'collection'   : str(list(collection)),
            'contratanteE'   : str(list(contratanteE)),
            'contratanteP'   : str(list(contratanteP)),
            'contratanteG'   : str(list(contratanteG)),
            'aseguradora'   : str(list(company)),
            'subramo'   : str(list(subramo)),
            'ramo'   : str(list(ramo)),
            'forma_de_pago'   : str(list(endosos.values_list('policy__forma_de_pago', flat = True))),
            # 'identificador'   : str(list(endosos.values_list('policy__identifier', flat = True))),
            'identificador'   : str(list([(((((((x).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')) if x else '' for x in endosos.values_list('policy__identifier', flat = True)])),  
            'numEndoso'   : str(list(endosos.values_list('number_endorsement', flat = True))),
            'internal_number'   : str(list(endosos.values_list('internal_number', flat = True))),
            'status_e'   : str(list(endosos.values_list('status', flat = True))),
            'status'   : str(list(endosos.values_list('status', flat = True))),
            'start_of_validity'   : str(list(startV)) ,
            'end_of_validity'   : str(list(endV)) ,
            'f_currency'   : str(list(endosos.values_list('policy__f_currency', flat = True))),
            'p_neta'   : str(list(endosos.values_list('p_neta', flat = True))),
            'rpf'   : str(list(endosos.values_list('rpf', flat = True))),
            'derecho'   : str(list(endosos.values_list('derecho', flat = True))),
            'iva'   : str(list(endosos.values_list('iva', flat = True))),
            'p_total'   : str(list(endosos.values_list('p_total', flat = True))),
            'comision'   : str(list(endosos.values_list('comision', flat = True))),
            'endorsement_type'   : str(list(endosos.values_list('endorsement_type', flat = True))),
            'clave'   : str(list(clave)),
            '_id'   : str(list(endosos.values_list('id', flat = True))),
            'descripcion'   : str(list([(((((((x).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')) if x else '' for x in endosos.values_list('observations', flat = True)])),
            'created_at'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in endosos.values_list('created_at', flat = True) ]))  ,
            'initdate'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in endosos.values_list('init_date', flat = True) ]))  ,
            'sucursal__sucursal_name'   : str(list(endosos.values_list('policy__sucursal__sucursal_name', flat = True))),
            'ramo': str(list(ramo)),
            'cp': str(list(cp)),
            'dateRen'   : str(list(dateRen)),
            'otRen'   : str(list(otRen)),
            'asegurado'   : str(list(asegurado)),
            'referenciador'   : str(list(referenciador)),
            'antiguedad'   : str(list(antiguedad)),
            'creadopor'   : str(list(creadopor)),
            'responsable'   : str(list(responsable)),
            'tipo_reporte': tipo_reporte,
            'email_org':info_org['email'],
            'phone_org':info_org['phone'],
            'webpage_org':info_org['webpage'],
            'address_org':info_org['address'],
            'urlname_org':info_org['name'],
            'campo_celula':campo_celula,
            'campo_agrupacion':campo_agrupacion,
            'campo_lineanegocio':campo_lineanegocio
            }  
        obj['columns'] = str(list(columns))
        obj['imagen'] = archivo_imagen
        obj['registros'] = len(endosos)
        obj['verReferenciadores'] = verReferenciadores
        r = requests.post(settings.SERVICEEXCEL_URL + 'get-endososExcelReporte/', obj,
        # headers = {
        # 'Authorization':'Bearer %s'%request.user.user_info.fi_token_refresh,
        # # 'Content-Type':'application/json' 
        # }, 
        stream=True)
        response_data= r.text

        response = HttpResponse(r.content,content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

        return response
    # Todos
    if ot_rep == 3:
        tipo_reporte = " Reporte OTs de Pólizas"
        columns = ['Tipo', 'No.Póliza', 'Contratante','Grupo', 'Email', 'Teléfono', 'Proveedor', 'Subramo', 
                             'Forma de Pago', 'Estatus', 'Inicio Póliza', 'Fin Póliza', 'Moneda', 'Prima Neta', 
                             'RPF', 'Derecho', 'IVA', 'Prima Total', 'Comisión', 'Clave', 'Sucursal', 'Referenciador', 'Creado por', 
                             'Fecha creación', 'Observaciones', 'Asegurado', 'Marca', 'Modelo', 'Versión', 'Año',
                             'Placas', 'Motor', 'Adaptaciones', 'Conductor','Dirección','Código Postal']
        tipo_reporteE = "Reporte OTS de Endosos"

        columns_end = ['Tipo', 'No.Endoso', 'Contratante', 'Email', 'Teléfono', 'Proveedor', 'Subramo', 'Forma de Pago', 'Estatus', 
                                     'Inicio Póliza', 'Fin Póliza', 'Moneda', 'Prima Neta', 'RPF', 'Derecho', 'IVA', 'Prima Total', 'Comisión',
                                     'Clave', 'Asegurado', 'Observaciones', 'Referenciador', 'Fecha de creación', 'Creado por','Folio Interno','Número Póliza/Fianza']
        
        ots = ots.exclude(document_type = 2)
            # Empieza insertado de imagen
        info_org = getInfoOrg(request)

        if len(info_org['logo']) != 0:
            archivo_imagen = 'https://miurabox-public.s3.amazonaws.com/cas/' + info_org['logo']
            # archivo_imagen = get_presigned_url("cas/{url}".format(url=info_org['logo']),28800) 
        else:
            archivo_imagen = 'saam.jpg'
        asegurado = []
        antiguedad = []
        referenciador = []
        creadopor = []
        dateRen = []
        otRen = []
        responsable = []
        contratante = []
        contratanteE = []
        contratanteP = []
        contratanteG = []
        collection = []
        clave = []
        cp = []
        paquete = []
        valueMA = []  
        valueModA = [] 
        valueVA = [] 
        valueYA = [] 
        valueLPA = [] 
        valueEA = [] 
        valueAdA = [] 
        valueDrA = []
        ots = ots.order_by('id')
        # ots = ots.order_by('natural__full_name','juridical__j_name')
        for r in ots:
            if r.address:
               pc = r.address.postal_code
            else:
               pc = ''
            antig = get_antiguedad(r.start_of_validity)
            if r.owner:
                val_owner = r.owner.first_name + ' '+ str(r.owner.last_name)
            else:
                val_owner = ''
            if r.paquete:
                pac = r.paquete.package_name
            else:
                pac = ''
            if r.responsable:
                val_resp = r.responsable.first_name + ' '+ str(r.responsable.last_name)
            else:
                val_resp = ''
            if r.collection_executive:
                val_col = r.collection_executive.first_name + ' '+ str(r.collection_executive.last_name)
            else:
                val_col = ''
            if r.clave:
                cve = r.clave.name + ' '+ str(r.clave.clave)
                cve = ((((((cve).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
            else:
                cve = ''
            if r.contractor:
                contratan = ((((((r.contractor.full_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                contratanE = r.contractor.email
                contratanP = r.contractor.phone_number
                contratanG = ((((((r.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                # contratanG = r.contractor.group.group_name
            else:
                contratan = ''
                contratanE = ''
                contratanP = ''
                contratanG = ''
                # contratanG = r.juridical.group.group_name
            try:
                old = OldPolicies.objects.filter(base_policy__id = r.id)
                try:
                  date_renovacion = old[0].created_at.strftime("%d/%m/%Y")
                except Exception as rr:
                    date_renovacion = 'Por renovar'
                try:
                    ot_renovacion = old[0].new_policy.poliza_number if old[0].new_policy.poliza_number else old[0].new_policy.internal_number
                except Exception as rr:
                    ot_renovacion = 'Por renovar'
            except Exception as dwe:
                date_renovacion = 'Por renovar'
                ot_renovacion = 'Por renovar'
            try:
                refs_policy = ReferenciadoresInvolved.objects.filter(policy = r.id,is_changed=False).values_list('referenciador__first_name','referenciador__last_name')
                if len(refs_policy):
                    v = []
                    try:
                        for it in refs_policy:
                            v.append(it[0] +' '+ str(it[1])+str('; '))
                        referenc = v
                    except Exception as y:
                        referenc = []
                else:
                    referenc = []
            except Exception as e:
                referenc = []
            if r.ramo.ramo_code == 1:
                form = Life.objects.filter(policy = r.id)
                if form:
                    try:
                        if form:
                            value = form[0].personal.full_name
                        else:
                            value = ''
                    except Exception as rt:
                       value = ''
                    valueM = '' 
                    valueMod = '' 
                    valueV = '' 
                    valueY = ''
                    valueLP = '' 
                    valueE = '' 
                    valueAd = '' 
                    valueDr = ''
                else:
                    value = ''
                    valueM = '' 
                    valueMod = '' 
                    valueV = '' 
                    valueY = ''
                    valueLP = '' 
                    valueE = '' 
                    valueAd = '' 
                    valueDr = ''
            elif r.ramo.ramo_code == 2:
                form = AccidentsDiseases.objects.filter(policy = r.id)
                if form:
                    value = form[0].personal.full_name
                    valueM = '' 
                    valueMod = '' 
                    valueV = '' 
                    valueY = ''
                    valueLP = '' 
                    valueE = '' 
                    valueAd = '' 
                    valueDr = ''
                else:
                    value = ''
                    valueM = '' 
                    valueMod = '' 
                    valueV = '' 
                    valueY = ''
                    valueLP = '' 
                    valueE = '' 
                    valueAd = '' 
                    valueDr = ''
            elif r.subramo.subramo_code == 9:
                form = AutomobilesDamages.objects.filter(policy = r.id)
                if form:
                    try:
                        form[0].model = ((((((form[0].model).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        form[0].version = ((((((form[0].version).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    except Exception as ers:
                        form[0].model = form[0].model
                        form[0].version = form[0].version
                    value = str(form[0].brand) + '-' + str(form[0].model) + '-' + str(form[0].version)+ '-' + str(form[0].serial)
                    valueM = form[0].brand 
                    valueMod = form[0].model 
                    valueV = form[0].version 
                    valueY = form[0].year 
                    valueLP = form[0].license_plates 
                    valueE = form[0].engine 
                    valueAd = form[0].adjustment 
                    valueDr = form[0].driver 
                else:
                    value = ''
                    valueM = '' 
                    valueMod = '' 
                    valueV = '' 
                    valueY = ''
                    valueLP = '' 
                    valueE = '' 
                    valueAd = '' 
                    valueDr = ''
            elif r.ramo.ramo_code == 3 and not r.subramo.subramo_code == 9:
                form = Damages.objects.filter(policy = r.id)
                if form:
                    value = form[0].insured_item
                    valueM = '' 
                    valueMod = '' 
                    valueV = '' 
                    valueY = ''
                    valueLP = '' 
                    valueE = '' 
                    valueAd = '' 
                    valueDr = ''
                else:
                    value = ''
                    valueM = '' 
                    valueMod = '' 
                    valueV = '' 
                    valueY = ''
                    valueLP = '' 
                    valueE = '' 
                    valueAd = '' 
                    valueDr = ''
            if value:
                value = ((((((value).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'') 
            else:
                value = value
            asegurado.append(value)
            dateRen.append(date_renovacion)
            otRen.append(ot_renovacion)
            referenciador.append(referenc)
            antiguedad.append(antig)
            creadopor.append(val_owner)
            contratante.append(contratan)
            contratanteE.append(contratanE)
            contratanteP.append(contratanP)
            contratanteG.append(contratanG)
            responsable.append(val_resp)
            collection.append(val_col)
            paquete.append(pac)
            clave.append(cve)
            cp.append(pc)
            valueMA.append(valueM) 
            valueModA.append(valueMod)  
            valueVA.append(valueV) 
            valueYA.append(valueY) 
            valueLPA.append(valueLP)  
            valueEA.append(valueE)  
            valueAdA.append(valueAd)  
            valueDrA.append(valueDr) 
        asegurado_e = []
        antiguedad_e = []
        referenciador_e = []
        responsable_e = []
        collection_e = []
        userpay_e = []
        creadopor_e = []
        clave_e = []
        contract_e = []
        contractemail_e = []
        contractphone_e = []
        contractgrupo_e = []
        subramo_e = []
        numPoliza =[]
        aseguradoraE = []
        endosos = endosos.order_by('id')
        for r in endosos:
            aseg = ''
            antig_e = get_antiguedad(r.init_date)
            if r.owner:
                val_owner_e = r.owner.first_name + ' '+ str(r.owner.last_name)
            else:
                val_owner_e = ''
            if r.policy:
                npol = r.policy.poliza_number if r.policy.poliza_number else r.policy.internal_number
                sramo_e = r.policy.subramo.subramo_name
                aseg = r.policy.aseguradora.alias
                if r.policy.document_type == 6:
                    if r.policy.parent.parent.parent.contractor:
                        contratante_e = ((((((r.policy.parent.parent.parent.contractor.full_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        contratanteE_e = r.policy.parent.parent.parent.contractor.email
                        contratanteP_e = r.policy.parent.parent.parent.contractor.phone_number
                    else:
                        contratante_e = ''
                        contratanteE_e = ''
                        contratanteP_e = ''
                else:
                    if r.policy.contractor:
                        contratante_e = ((((((r.policy.contractor.full_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        contratanteE_e = r.policy.contractor.email
                        contratanteP_e = r.policy.contractor.phone_number
                    else:
                        contratante_e = ''
                        contratanteE_e = ''
                        contratanteP_e = ''

                if r.policy.responsable:
                    val_resp_e = r.policy.responsable.first_name + ' '+ str(r.policy.responsable.last_name)
                else:
                    val_resp_e = ''
                if r.policy.clave:
                    try:
                        cve_e = r.policy.clave.clave + ' '+ str(r.policy.clave.name)
                        cve_e = ((((((cve_e).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    except Exception as ds:
                        cve_e = ''
                else:
                    cve_e = ''
                if r.policy.collection_executive:
                    val_cexe_e = r.policy.collection_executive.first_name + ' '+ str(r.policy.collection_executive.last_name)
                else:
                    val_cexe_e = ''
                try:
                    refs_policy = ReferenciadoresInvolved.objects.filter(policy = r.policy.id,is_changed=False).values_list('referenciador__first_name','referenciador__last_name')
                    if len(refs_policy):
                        v = []
                        try:
                            for rty in refs_policy:
                                v.append(rty[0] +' '+ str(rty[1])+str(', '))
                            referenc_e = v
                        except Exception as y:
                            referenc_e = []
                    else:
                        referenc_e = []
                except Exception as e:
                    referenc = []
                if r.policy.ramo.ramo_code == 1:
                    form = Life.objects.filter(policy = r.policy.id)
                    try:
                        if form:
                            value_e = form[0].personal.full_name
                        else:
                            value_e = ''
                    except Exception as rt:
                       value_e = ''
                elif r.policy.ramo.ramo_code == 2:
                    form = AccidentsDiseases.objects.filter(policy = r.policy.id)
                    if form:
                        value_e = form[0].personal.full_name
                    else:
                        value_e = ''
                elif r.policy.subramo.subramo_code == 9:
                    form = AutomobilesDamages.objects.filter(policy = r.policy.id)
                    if form:
                        try:
                            form[0].model = ((((((form[0].model).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                            form[0].version = ((((((form[0].version).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        except Exception as ers:
                            form[0].model = form[0].model
                            form[0].version = form[0].version
                        value_e = str(form[0].brand) + '-' + str(form[0].model) + '-' + str(form[0].version)+ '-' + str(form[0].serial)
                    else:
                        value_e = ''
                elif r.policy.ramo.ramo_code == 3 and not r.policy.subramo.subramo_code == 9:
                    form = Damages.objects.filter(policy = r.policy.id)
                    if form:
                        value_e = form[0].insured_item
                    else:
                        value_e = ''
                else:
                    value_e = 'Sin asegurado'
            else:
                if r.fianza: 
                    aseg = r.fianza.afianzadora.alias
                    npol = r.fianza.fianza_number if r.fianza.fianza_number else r.fianza.internal_number
                    if r.fianza.contractor:
                        contratante_e = ((((((r.fianza.contractor.full_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        contratanteE_e = r.fianza.contractor.email
                        contratanteP_e = r.fianza.contractor.phone_number
                    else:
                        contratante_e = ''
                        contratanteE_e = ''
                        contratanteP_e = ''
                    if r.fianza.clave:
                        try:
                            cve_e = r.fianza.clave.clave + ' '+ str(r.fianza.clave.name)
                            cve_e = ((((((cve_e).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        except Exception as e:
                            cve_e =''
                    else:
                        cve_e = ''
                    if r.fianza.vendor:
                        referenc_e = [r.fianza.vendor.first_name + ' '+ str(r.fianza.vendor.last_name)]
                    else:
                        referenc_e = []
                    sramo_e = r.fianza.subramo.subramo_name
                value_e = 'Sin asegurado'
                val_resp_e = 'Sin responsable'
                val_cexe_e = 'Sin ejecutivo'
            if value_e:
                value_e = ((((((value_e).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'') 
            else:
                value_e = value_e
            asegurado_e.append(value_e)
            referenciador_e.append(referenc_e)
            antiguedad_e.append(antig_e)
            responsable_e.append(val_resp_e)
            collection_e.append(val_cexe_e)
            creadopor_e.append(val_owner_e)
            clave_e.append(cve_e)
            contract_e.append(contratante_e)
            contractemail_e.append(contratanteE_e)
            contractphone_e.append(contratanteP_e)
            subramo_e.append(sramo_e)
            numPoliza.append(npol)
            aseguradoraE.append(aseg)
        obj = {
            'reasoncacel'   : str(list(ots.values_list('reason_cancel', flat = True))),
            'renewable'   : str(list(ots.values_list('is_renewable', flat = True))),
            'document_type'   : str(list(ots.values_list('document_type', flat = True))),
            'poliza_number'   : str(list(ots.values_list('poliza_number', flat = True))),
            'contratante'   : str(list(contratante)),
            'contratanteE'   : str(list(contratanteE)),
            'contratanteP'   : str(list(contratanteP)),
            'contratanteG'   : str(list(contratanteG)),
            'aseguradora__compania'   : str(list(ots.values_list('aseguradora__alias', flat = True))),
            'subramo__subramo_name'   : str(list(ots.values_list('subramo__subramo_name', flat = True))),
            'ramo'   : str(list(ots.values_list('ramo__ramo_name', flat = True))),
            'forma_de_pago'   : str(list(ots.values_list('forma_de_pago', flat = True))),
            'status'   : str(list(ots.values_list('status', flat = True))),
            'start_of_validity'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in ots.values_list('start_of_validity', flat = True) ])) ,
            'end_of_validity'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in ots.values_list('end_of_validity', flat = True) ])) ,
            'f_currency'   : str(list(ots.values_list('f_currency', flat = True))),
            'p_neta'   : str(list(ots.values_list('p_neta', flat = True))),
            'rpf'   : str(list(ots.values_list('rpf', flat = True))),
            'derecho'   : str(list(ots.values_list('derecho', flat = True))),
            'iva'   : str(list(ots.values_list('iva', flat = True))),
            'p_total'   : str(list(ots.values_list('p_total', flat = True))),
            'comision'   : str(list(ots.values_list('comision', flat = True))),
            '_id'   : str(list(ots.values_list('id', flat = True))),
            'observations'   : str(list([(((((((x).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')) if x else '' for x in ots.values_list('observations', flat = True)])),
            'created_at'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in ots.values_list('created_at', flat = True) ]))  ,
            'clave'   : str(list(clave)),
            'sucursal__sucursal_name'   : str(list(ots.values_list('sucursal__sucursal_name', flat = True))),
            'renewed_status': str(list(ots.values_list('renewed_status', flat = True))),
            'paquete': str(list(paquete)),
            # 'identifier': str(list(ots.values_list('identifier', flat = True))),
            'identifier'   : str(list([(((((((x).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')) if x else '' for x in ots.values_list('identifier', flat = True)])),  
            'address': str(list(ots.values_list('address__administrative_area_level_1', flat = True))),
            'cp': str(list(cp)),
            'dateRen'   : str(list(dateRen)),
            'collection'   : str(list(collection)),
            'otRen'   : str(list(otRen)),
            'asegurado'   : str(list(asegurado)),
            'marca'   : str(list(valueMA)),
            'modelo'   : str(list(valueModA)),
            'version'   : str(list(valueVA)),
            'anio'   : str(list(valueYA)),
            'placa'   : str(list(valueLPA)),
            'motor'   : str(list(valueEA)),
            'adaptaciones'   : str(list(valueAdA)),
            'conductor'   : str(list(valueDrA)),
            'referenciador'   : str(list(referenciador)),
            'antiguedad'   : str(list(antiguedad)),
            'creadopor'   : str(list(creadopor)),
            'responsable'   : str(list(responsable)),
            'tipo_reporte': tipo_reporte,
            # Endosos
            'document_type_e'   : str(list(endosos.values_list('policy__document_type', flat = True))),        
            'endosoType'   : str(list(endosos.values_list('endorsement_type', flat = True))),        
            'poliza_number_e'   : str(list(numPoliza)),
            'formaPago_e'   : str(list(endosos.values_list('policy__forma_de_pago', flat = True))),
            'aseguradoraE'   : str(list(aseguradoraE)),
            'forma_de_pago_e'   : str(list(endosos.values_list('policy__forma_de_pago', flat = True))),
            'status_ep'   : str(list(endosos.values_list('policy__status', flat = True))),
            'status_e'   : str(list(endosos.values_list('status', flat = True))),
            'start_of_validity_e'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in endosos.values_list('policy__start_of_validity', flat = True) ])) ,
            'end_of_validity_e'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in endosos.values_list('policy__end_of_validity', flat = True) ])) ,
            'f_currency_e'   : str(list(endosos.values_list('policy__f_currency', flat = True))),        
            'created_at_e'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in endosos.values_list('created_at', flat = True) ]))  ,
            'number_endorsement'   : str(list(endosos.values_list('number_endorsement', flat = True))),           
            'pneta_e'   : str(list(endosos.values_list('p_neta', flat = True))),        
            'rpf_e'   : str(list(endosos.values_list('rpf', flat = True))),        
            'derecho_e'   : str(list(endosos.values_list('derecho', flat = True))),        
            'iva_e'   : str(list(endosos.values_list('iva', flat = True))),        
            'ptotal_e'   : str(list(endosos.values_list('p_total', flat = True))),        
            'comision_e'   : str(list(endosos.values_list('comision', flat = True))),        
            'internal_number_e'   : str(list(endosos.values_list('internal_number', flat = True))), 
            'observations_e'   : str(list([(((((((x).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')) if x else '' for x in endosos.values_list('observations', flat = True)])),
            'asegurado_e'   : str(list(asegurado_e)),
            'referenciador_e'   : str(list(referenciador_e)),
            'antiguedad_e'   : str(list(antiguedad_e)),
            'creadopor_e'   : str(list(creadopor_e)),
            'collection_e'   : str(list(collection_e)),
            'user_pay_e'   : str(list(userpay_e)),
            'responsable_e'   : str(list(responsable_e)),
            'clave_e'   : str(list(clave_e)),        
            'contratact_e'   : str(list(contract_e)),
            'contractemail_e'   : str(list(contractemail_e)),
            'contractphone_e'   : str(list(contractphone_e)),
            'subramo_e'   : str(list(subramo_e)),
            'tipo_reporteE': tipo_reporteE,            
            'email_org':info_org['email'],
            'phone_org':info_org['phone'],
            'webpage_org':info_org['webpage'],
            'address_org':info_org['address'],
            'urlname_org':info_org['name'],
            'campo_celula':campo_celula,
            'campo_agrupacion':campo_agrupacion,
            'campo_lineanegocio':campo_lineanegocio
        }  
        obj['columns'] = str(list(columns))
        obj['imagen'] = archivo_imagen
        obj['lenots'] = len(ots)
        obj['lenendosos'] = len(endosos)
        obj['registros'] = len(ots) + len(endosos)
        obj['verReferenciadores'] = verReferenciadores

        r = requests.post(settings.SERVICEEXCEL_URL + 'get-ordenesEndososExcelReporte/', obj,
        # headers = {
        # 'Authorization':'Bearer %s'%request.user.user_info.fi_token_refresh,
        # # 'Content-Type':'application/json' 
        # }, 
        stream=True)
        response_data= r.text

        response = HttpResponse(r.content,content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

        return response 
# ------------------------------------------------------------------------

# Reporte Contratantes
@api_view(['POST'])
@permission_classes((IsAuthenticatedV2, IsOrgMemberV2))
def Service_ReporteContractorExcel(request):
    filters = []
    try:
        contratante = int(request.data['contratante'])
    except:
        contratante = request.data['contratante']
    try:
        type_person = [int(request.data['type_person'])]
        typep = int(request.data['type_person'])
    except:
        type_person = [1,2]
        typep = 0
    
    if type_person == [0]:
        typep = 0
        type_person = [1,2]
    try:
        rfc = int(request.data['rfc'])
    except:
        rfc = request.data['rfc']
    try:
        pproveedor = request.data['pproveedor']
    except:
        pproveedor = ''
    try:
        onlyS = request.data['onlyS']
    except:
        onlyS = ''

    onlyVIP = request.data['onlyVIP'] if 'onlyVIP' in request.data else ''

    group = request.data['grupo'] if 'group' in request.data else 0
    cond = request.data['condicion'] if 'condicion' in request.data else 0

    if int(group) > 0:
        grupos = Group.objects.get(pk = int(group))
        sub = Group.objects.filter(parent = grupos, type_group = 2)
        sub2 = Group.objects.filter(parent = sub, type_group = 3)
        grupos_all = list(sub)+list(sub2)
        grupos_all.append(grupos)
        filters.append(Q(group__in = grupos_all))
    else:
        grupos = Group.objects.filter(org_name = (request.GET.get('org')))
        filters.append(Q(group__in = grupos))
    
    if rfc != 0:
        filters.append(Q(rfc__icontains = str(rfc)))
        
    if contratante != 0:
        filters.append(Q(full_name__icontains = str(contratante)))

    contractors = Contractor.objects.filter(reduce(and_, filters), org_name = (request.GET.get('org')), is_active = True, type_person__in = type_person)
    filtros = []
    if (cond != 0):
        if len(cond):
            for co in cond:
                if int(co) == 1:
                    filtros.append(Q(vendor = None))
                if int(co) == 2:
                    filtros.append(Q(email = ''))
                if int(co) == 3:
                    filtros.append(Q(phone_number = ''))
            contractors = Contractor.objects.filter(reduce(and_, filtros), org_name = (request.GET.get('org')), is_active = True)
    
    if onlyS:
        contractors = contractors.filter(only_sureties = True)
    if onlyVIP:
        contractors = contractors.filter(vip = True)
    try:
        dataToFilter = getDataForPerfilRestricted(request, request.GET.get('org'))
    except Exception as er:
        dataToFilter = {}
    if dataToFilter and 'sp' in dataToFilter and not dataToFilter['sp']:
        # Contratantes***
        if dataToFilter['ccpr']:
            contractors = contractors.filter(pk__in = list(dataToFilter['ccpr']))
        if dataToFilter['cgpr']:
            contractors = contractors.filter(group__in = list(dataToFilter['cgpr']))
        if dataToFilter['ccepr']:
            contractors = contractors.filter(cellule__in = list(dataToFilter['ccepr']))
        if dataToFilter['crpr']:
            contractors = contractors.filter(vendor__in = list(dataToFilter['crpr']))
        if dataToFilter['cspr']:
            contractors = contractors.filter(sucursal__in = list(dataToFilter['cspr']))
    
    elif 'sp' in dataToFilter and dataToFilter['sp']:
        polizasCl = Polizas.objects.filter(document_type__in = [1,3,11,7,8,12,6,4], org_name = request.GET.get('org'))
        polizasToF = Polizas.objects.filter(document_type__in = [1,3,11,7,8], org_name = request.GET.get('org'))
        if dataToFilter['pppr']:
            polizasToF = polizasToF.filter(pk__in = list(dataToFilter['pppr']))
        if dataToFilter['pgpr']:
            polizasToF = polizasToF.filter(contractor__group__in = list(dataToFilter['pgpr']))
        if dataToFilter['pcepr']:
            polizasToF = polizasToF.filter(celula__in = list(dataToFilter['pcepr']))
        if dataToFilter['prpr']:
            polizasToF = polizasToF.filter(ref_policy__referenciador__in = list(dataToFilter['prpr']))
        if dataToFilter['pspr']:
            polizasToF = polizasToF.filter(sucursal__in = list(dataToFilter['pspr']))
        if dataToFilter['papr']:
            polizasToF = polizasToF.filter(groupinglevel__in = list(dataToFilter['papr']))
        if dataToFilter['pcapr']:
            polizasToF = polizasToF.filter(clave__in = list(dataToFilter['pcapr']))
        if dataToFilter['psrpr']:
            polizasToF = polizasToF.filter(subramo__subramo_code__in = list(dataToFilter['psrpr']))
        if dataToFilter['paspr']:
            polizasToF = polizasToF.filter(aseguradora__in = list(dataToFilter['paspr']))
        if dataToFilter['pstpr']:
            polizasToF = polizasToF.filter(status__in = list(dataToFilter['pstpr']))

        polizasCT = polizasCl.filter(document_type = 12, parent__in = list(polizasToF))
        polizasGT = polizasCl.filter(document_type = 6, parent__parent__parent__in = list(polizasToF))
        polizasFin = list(polizasToF.values_list('contractor', flat = True)) + list(polizasCT.values_list('contractor', flat = True)) + list(polizasGT.values_list('contractor', flat = True))
        contractors = contractors.filter(id__in = polizasFin)

    #Program de Proveedores
    if pproveedor:
        contractors = contractors.filter(has_programa_de_proveedores = True, only_sureties = True)
    else:
        contractors = contractors.filter(has_programa_de_proveedores = False)

    queryset= contractors   

    # Empieza insertado de imagen
    info_org = getInfoOrg(request)

    if len(info_org['logo']) != 0:
        archivo_imagen = 'https://miurabox-public.s3.amazonaws.com/cas/' + info_org['logo']
        # archivo_imagen = get_presigned_url("cas/{url}".format(url=info_org['logo']),28800) 
    else:
        archivo_imagen = 'saam.jpg'    

    referenciador = []
    responsable = []
    creadopor = []
    grupo = []
    name = []
    contactos_nombre = []
    contactos_email = []
    contactos_telefono = []
    sub = []
    sub2=[]
    celula=[]
    ids_cliente =[]
    ids_address =[]
    strs_address =[]
    tipos_persona = []
    telefono2 = []
    correo2 = []
    telefono3 = []
    correo3 = []
    ag = ''
    ag1 = ''
    ag2 = ''
    ag_list = []
    ag1_list = []
    ag2_list = []
    # -----------------------------------------------
    calle = []
    numeroext = []
    numeroint = []
    colonia = []
    municipio = []
    estado = []
    cp = []
    tipodireccion = []
    referencia = []
    mensajeria = []
    clasificacion = []
    # ***********************************************
    contractors = contractors.order_by('id')
    # juridicals = juridicals.order_by('j_name')
    emailprincipal=[]
    phoneprincipal=[]
    vipprincipal=[]
    ine_representante=[]
    constancia = []
    baja = []
    bajamotivo = []
    adjuntosContractor = []
    campo_celula, campo_agrupacion, campo_lineanegocio, moduleName = getOrgInfo(request)
    for r in contractors:
        adjuntos = ContractorFile.objects.filter(owner=r, org_name=r.org_name)
        adjuntosContractor.append(len(adjuntos) if adjuntos else 'Sin adjuntos')
        ba=''
        bam=''
        contacto_email = ''
        tel_telefono = ''
        telmensajeria = ''
        cor_email = ''
        tel_telefono3 = ''
        cor_email3 = ''
        id_addr = ''
        str_addr =''
        # ***
        calle_dir = ''
        numeroext_dir = ''
        numeroint_dir = ''
        colonia_dir = ''
        municipio_dir = ''
        estado_dir = ''
        cp_dir = ''
        tipodireccion_dir = ''
        referencia_dir = ''
        cl = ''
        if int(r.get_type_person_display()) == 1:
            tipos_persona.append('Física')
        elif int(r.get_type_person_display()) == 2:
            tipos_persona.append('Moral')
        else:
            tipos_persona.append('NA')
        grupo1= ''
        grupo2= ''
        if r.full_name:
            nm = ((((((r.full_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
        else:
            nm=r.full_name
        # groupinglevel_many:
        if r.cellule:
            cel_ = r.cellule.celula_name
        else:
            cel_ =''
        if r.classification:
            cl = r.classification.classification_name
        else:
            cl =''
        if r.group.type_group == 1:
            contratanG = ((((((r.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
            grupo1 = ''
            grupo2 = ''
        elif r.group.type_group == 2:
            grupotype1 = Group.objects.get(pk = r.group.parent.id)
            contratanG = ((((((grupotype1.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
            grupo1 = ((((((r.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
            grupo2 = ''
        elif r.group.type_group == 3:
            grupotype1 = Group.objects.get(pk = r.group.parent.parent.id)
            contratanG = ((((((grupotype1.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
            subgrupotype2 = Group.objects.get(pk = r.group.parent.id)
            grupo1 = ((((((subgrupotype2.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
            grupo2 = ((((((r.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
        
        if r.groupinglevel:
            if r.groupinglevel.type_grouping == 1:
                ag = ((((((r.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                ag1 = ''
                ag2 = ''
            elif r.groupinglevel.type_grouping == 2:
                if r.groupinglevel.parent:
                    grupe1 = GroupingLevel.objects.get(pk = r.groupinglevel.parent.id)
                else:
                    grupe1 = ''
                ag = ((((((grupe1.description if grupe1 else '').replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                ag1 = ((((((r.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                ag2 = ''
            elif r.groupinglevel.type_grouping == 3:
                if r.groupinglevel.parent and r.groupinglevel.parent.parent:
                    grupe1 = GroupingLevel.objects.get(pk = r.groupinglevel.parent.parent.id)
                else:
                    grupe1 = ''
                ag = ((((((grupe1.description if grupe1 else '').replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                if r.groupinglevel.parent:
                    subgrpe2 = GroupingLevel.objects.get(pk = r.groupinglevel.parent.id)
                else:
                    subgrpe2 = ''
                ag1 = ((((((subgrpe2.description if subgrpe2 else '').replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                ag2 = ((((((r.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
        else:            
            ag = ''
            ag1 = ''
            ag2 = ''

        if r.owner:
            val_owner = r.owner.first_name + ' '+ str(r.owner.last_name)
        else:
            val_owner = ''
        if r.responsable:
            val_resp = r.responsable.first_name + ' '+ str(r.responsable.last_name)
        else:
            val_resp = ''  
        if r.vendor:
            referenc = r.vendor.first_name + ' '+ str(r.vendor.last_name)
        else:
            referenc = ''

        contacto = ContactInfo.objects.filter(contractor=r)

        if contacto:
            contacto_nombre = ((((((contacto[0].name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
            contacto_telefono = contacto[0].phone_number
            contacto_email = contacto[0].email
        else:
            contacto_nombre = ''
            contacto_telefono = ''
            contacto_email = ''
        id_addr = ''
        str_addr = ''
        address = Address.objects.filter(contractor=r)
        if address:
            id_addr = address[0].id
            str_addr = address[0].concatenate()
            # ***
            calle_dir = address[0].route
            if calle_dir:
                calle_dir = ((((((calle_dir).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
            numeroext_dir = address[0].street_number
            if numeroext_dir:
                numeroext_dir = ((((((numeroext_dir).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
            numeroint_dir = address[0].street_number_int
            if numeroint_dir:
                numeroint_dir = ((((((numeroint_dir).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
            colonia_dir = address[0].sublocality
            if colonia_dir:
                colonia_dir = ((((((colonia_dir).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
            municipio_dir = address[0].administrative_area_level_2
            if municipio_dir:
                municipio_dir = ((((((municipio_dir).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
            estado_dir = address[0].administrative_area_level_1
            if estado_dir:
                estado_dir = ((((((estado_dir).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
            cp_dir = address[0].postal_code
            if cp_dir:
                cp_dir = ((((((cp_dir).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
            tipodireccion_dir = address[0].tipo
            if tipodireccion_dir:
                tipodireccion_dir = ((((((tipodireccion_dir).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
            referencia_dir = address[0].details
            if referencia_dir:
                referencia_dir = ((((((referencia_dir).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
            # ---
        calle.append(calle_dir)
        numeroext.append(numeroext_dir)
        numeroint.append(numeroint_dir)
        colonia.append(colonia_dir)
        municipio.append(municipio_dir)
        estado.append(estado_dir)
        cp.append(cp_dir)
        tipodireccion.append(tipodireccion_dir)
        referencia.append(referencia_dir)
        ids_cliente.append(r.id)
        ids_address.append(id_addr)
        strs_address.append(str_addr)

        referenciador.append(referenc)
        responsable.append(val_resp)
        creadopor.append(val_owner)
        grupo.append(contratanG)
        name.append(nm)
        sub.append(grupo1)
        sub2.append(grupo2) 
        celula.append(cel_) 
        tel = Phones.objects.filter(contractor=r)
        cor = Emails.objects.filter(contractor=r)

        ag_list.append(ag) 
        ag1_list.append(ag1)
        ag2_list.append(ag2)
        if tel:
            tel_telefono = tel[0].phone
        else:
            tel_telefono = ''
        if r.phone_mensajeria:
            telmensajeria =r.phone_mensajeria
        else:
            telmensajeria = ''
        if cor:
            cor_email = cor[0].correo
        else:
            cor_email = ''
        try:
            if tel:
                tel_telefono3 = tel[1].phone
            else:
                tel_telefono3 = ''
        except:
            tel_telefono3 = ''
        try:
            if cor:
                cor_email3 = cor[1].correo
            else:
                cor_email3 = ''
        except:
            cor_email3 = ''
        if r.baja:
            baja.append('Baja')
            bajamotivo.append(r.motivo_baja)
        else:
            baja.append('')
            bajamotivo.append('')
        correo3.append(cor_email3)
        telefono3.append(tel_telefono3)
        correo2.append(cor_email)
        telefono2.append(tel_telefono)
        contactos_nombre.append(contacto_nombre)
        contactos_email.append(contacto_email)
        contactos_telefono.append(contacto_telefono)
        mensajeria.append(telmensajeria)
        clasificacion.append(cl)
        emailp = r.email if r.email else ''
        phonep = ((((((r.phone_number).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'') if r.phone_number else ''
        emailprincipal.append(emailp if emailp else '')
        phoneprincipal.append(phonep if phonep else '')
        vipprincipal.append(r.vip if r.vip else False)
    obj = {
        'correo2'   : str(list(correo2)),
        'mensajeria':str(list(mensajeria)),
        'telefono2'   : str(list(telefono2)),
        'correo3'   : str(list(correo3)),
        'telefono3'   : str(list(telefono3)),
        'contractor'   : str(list(name)),
        'adjuntosContractor':str(list(adjuntosContractor)),
        'email'   : str(list(emailprincipal)),
        'vip'   : str(list(vipprincipal)),
        'baja'   : str(list(baja)),
        'motivobaja'   : str(list(bajamotivo)),
        
        'phone_number'   : str(list(phoneprincipal)),
        'rfc'   : str(list(contractors.values_list('rfc', flat = True))),
        'acta_constitutiva'   : str(list(contractors.values_list('constitutive_act', flat = True))),
        'rfc_doc'   : str(list(contractors.values_list('rfc_document', flat = True))),
        'constancia_fiscal'   : str(list(contractors.values_list('constancia_situacion_fiscal', flat = True))),
        'ine_representante'   : str(list(contractors.values_list('ine_representante', flat = True))),
        'ced_id_oficial'   : str(list(contractors.values_list('card_official_identification', flat = True))),
        'comprobante_domicilio_fiscal'   : str(list(contractors.values_list('voucher_of_address', flat = True))),
        'mod_acta_constitutiva'   : str(list(contractors.values_list('modifications_constitutive_act', flat = True))),
        'poder_fiscal'   : str(list(contractors.values_list('fiscal_power', flat = True))),
        'fianzas_only'   : str(list(contractors.values_list('only_sureties', flat = True))),
        'curp'   : str(list(contractors.values_list('CURP', flat = True))),
        'idoficial'   : str(list(contractors.values_list('card_official_identification', flat = True))),
        'comprobante_firma_electronica' : str(list(contractors.values_list('voucher_efirm', flat = True))),
        'formato_ic_firmado'   : str(list(contractors.values_list('signed_format_ic', flat = True))),
        'sucursal'   : str(list(contractors.values_list('sucursal__sucursal_name', flat = True))),
        'sexo'   : str(list(contractors.values_list('sex', flat = True))),
        'sucursal'   : str(list(contractors.values_list('sucursal__sucursal_name', flat = True))),
        'grupo'   : str(list(grupo)),
        'subgrupo'   : str(list(sub)),
        'subsubgrupo'   : str(list(sub2)),
        'celula':str(list(celula)),
        'fecha_est'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in contractors.values_list('birth_date', flat = True) ])),
        'created_date'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in contractors.values_list('created_at', flat = True) ])),
        'referenciador': str(list(referenciador)),
        'responsable': str(list(responsable)),
        'creadopor': str(list(creadopor)),
        'sexo'   : str(list(contractors.values_list('sex', flat = True))),
        'contactos_nombre': str(list(contactos_nombre)),
        'contactos_telefono': str(list(contactos_telefono)),
        'contactos_email': str(list(contactos_email)),
        'clasificacion':str(list(clasificacion)),
        'ids_cliente'   : str(list(ids_cliente)),
        'ids_address'   : str(list(ids_address)),
        'strs_address'   : str(list(strs_address)),

        'calle': str(list(calle)),
        'numeroext': str(list(numeroext)),
        'numeroint': str(list(numeroint)),
        'colonia': str(list(colonia)),
        'municipio': str(list(municipio)),
        'estado': str(list(estado)),
        'cp': str(list(cp)),
        'tipodireccion': str(list(tipodireccion)),
        'referencia': str(list(referencia)),

        'ag_list'   : str(list(ag_list)),
        'ag1_list'   : str(list(ag1_list)),
        'ag2_list'   : str(list(ag2_list)),

        'email_org':info_org['email'],
        'phone_org':info_org['phone'],
        'webpage_org':info_org['webpage'],
        'address_org':info_org['address'],
        'urlname_org':info_org['name'],
        'tipo': str(list(tipos_persona)),
        'campo_celula':campo_celula,
        'campo_agrupacion':campo_agrupacion,
        'campo_lineanegocio':campo_lineanegocio
    }   
    #obj['columns'] = str(list(columns))
    obj['imagen'] = archivo_imagen
    obj['pproveedor'] = pproveedor
    obj['infoOrg'] = str(list(info_org))
    obj['registros'] = len(contractors)
    obj['fiados'] = onlyS
    obj['typep'] = typep
    obj['moduleName'] = moduleName
    if campo_lineanegocio == 'False' or campo_lineanegocio == False:
        if 'businessLine' in obj:
            del obj['businessLine'] 
    if campo_celula == 'False' or campo_celula == False:
        if 'celula' in obj:
            del obj['celula'] 
    if campo_agrupacion == 'False' or campo_agrupacion == False:
        if 'ag_list' in obj:
            del obj['ag_list'] 
        if 'ag1_list' in obj:
            del obj['ag1_list'] 
        if 'ag2_list' in obj:
                del obj['ag2_list'] 

    r = requests.post(settings.SERVICEEXCEL_URL + 'get-ContractorsExcel/', obj,
    # headers = {
    # 'Authorization':'Bearer %s'%request.user.user_info.fi_token_refresh,
    # # 'Content-Type':'application/json' 
    # }, 
    stream=True)
    response_data= r.text
    # ----
    response = HttpResponse(r.content,content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

    return response

#reporte pp
@api_view(['POST'])
@permission_classes((IsAuthenticatedV2, IsOrgMemberV2))
def Service_ReporteContractorPPExcel(request):
    filters = []
    try:
        contratante = int(request.data['contratante'])
    except:
        contratante = request.data['contratante']
    try:
        type_person = [int(request.data['type_person'])]
    except:
        type_person = [1,2]
    
    if type_person == [0]:
        type_person = [1,2]
    try:
        rfc = int(request.data['rfc'])
    except:
        rfc = request.data['rfc']
    try:
        pproveedor = request.data['pproveedor']
    except:
        pproveedor = ''
    group = request.data['grupo'] if 'grupo' in request.data else 0 
    cond = request.data['condicion'] if 'condicion' in request.data else 0

    if int(group) > 0:
        grupos = Group.objects.get(pk = int(group))
        sub = Group.objects.filter(parent = grupos, type_group = 2)
        sub2 = Group.objects.filter(parent = sub, type_group = 3)
        grupos_all = list(sub)+list(sub2)
        grupos_all.append(grupos)
        filters.append(Q(group__in = grupos_all))
    else:
        grupos = Group.objects.filter(org_name = (request.GET.get('org')))
        filters.append(Q(group__in = grupos))
    
    if rfc != 0:
        filters.append(Q(rfc__icontains = str(rfc)))
        
    if contratante != 0:
        filters.append(Q(full_name__icontains = str(contratante)))

    contractors = Contractor.objects.filter(reduce(and_, filters), org_name = (request.GET.get('org')), is_active = True, type_person__in = type_person)
    filtros = []
    if (cond != 0):
        if len(cond):
            for co in cond:
                if int(co) == 1:
                    filtros.append(Q(vendor = None))
                if int(co) == 2:
                    filtros.append(Q(email = ''))
                if int(co) == 3:
                    filtros.append(Q(phone_number = ''))
            contractors = Contractor.objects.filter(reduce(and_, filtros), org_name = (request.GET.get('org')), is_active = True)
    try:
        dataToFilter = getDataForPerfilRestricted(request, request.GET.get('org'))
    except Exception as er:
        dataToFilter = {}
    if dataToFilter and 'sp' in dataToFilter and not dataToFilter['sp']:
        # Contratantes***
        if dataToFilter['ccpr']:
            contractors = contractors.filter(pk__in = list(dataToFilter['ccpr']))
        if dataToFilter['cgpr']:
            contractors = contractors.filter(group__in = list(dataToFilter['cgpr']))
        if dataToFilter['ccepr']:
            contractors = contractors.filter(cellule__in = list(dataToFilter['ccepr']))
        if dataToFilter['crpr']:
            contractors = contractors.filter(vendor__in = list(dataToFilter['crpr']))
        if dataToFilter['cspr']:
            contractors = contractors.filter(sucursal__in = list(dataToFilter['cspr']))
    
    elif 'sp' in dataToFilter and dataToFilter['sp']:
        polizasCl = Polizas.objects.filter(document_type__in = [1,3,11,7,8,12,6,4], org_name = request.GET.get('org'))
        polizasToF = Polizas.objects.filter(document_type__in = [1,3,11,7,8], org_name = request.GET.get('org'))
        if dataToFilter['pppr']:
            polizasToF = polizasToF.filter(pk__in = list(dataToFilter['pppr']))
        if dataToFilter['pgpr']:
            polizasToF = polizasToF.filter(contractor__group__in = list(dataToFilter['pgpr']))
        if dataToFilter['pcepr']:
            polizasToF = polizasToF.filter(celula__in = list(dataToFilter['pcepr']))
        if dataToFilter['prpr']:
            polizasToF = polizasToF.filter(ref_policy__referenciador__in = list(dataToFilter['prpr']))
        if dataToFilter['pspr']:
            polizasToF = polizasToF.filter(sucursal__in = list(dataToFilter['pspr']))
        if dataToFilter['papr']:
            polizasToF = polizasToF.filter(groupinglevel__in = list(dataToFilter['papr']))
        if dataToFilter['pcapr']:
            polizasToF = polizasToF.filter(clave__in = list(dataToFilter['pcapr']))
        if dataToFilter['psrpr']:
            polizasToF = polizasToF.filter(subramo__subramo_code__in = list(dataToFilter['psrpr']))
        if dataToFilter['paspr']:
            polizasToF = polizasToF.filter(aseguradora__in = list(dataToFilter['paspr']))
        if dataToFilter['pstpr']:
            polizasToF = polizasToF.filter(status__in = list(dataToFilter['pstpr']))

        polizasCT = polizasCl.filter(document_type = 12, parent__in = list(polizasToF))
        polizasGT = polizasCl.filter(document_type = 6, parent__parent__parent__in = list(polizasToF))
        polizasFin = list(polizasToF.values_list('contractor', flat = True)) + list(polizasCT.values_list('contractor', flat = True)) + list(polizasGT.values_list('contractor', flat = True))
        contractors = contractors.filter(id__in = polizasFin)

    #Program de Proveedores
    if pproveedor:
        contractors = contractors.filter(has_programa_de_proveedores = True, only_sureties = True)
    else:
        contractors = contractors.filter(has_programa_de_proveedores = False)

    queryset= contractors   

    # Empieza insertado de imagen
    info_org = getInfoOrg(request)

    if len(info_org['logo']) != 0:
        archivo_imagen = 'https://miurabox-public.s3.amazonaws.com/cas/' + info_org['logo']
        # archivo_imagen = get_presigned_url("cas/{url}".format(url=info_org['logo']),28800) 
    else:
        archivo_imagen = 'saam.jpg'    

    referenciador = []
    responsable = []
    creadopor = []
    grupo = []
    name = []
    contactos_nombre = []
    contactos_email = []
    contactos_telefono = []
    sub = []
    sub2=[]
    celula=[]
    contractors = contractors.order_by('id')
    ids_cliente =[]
    ids_address =[]
    strs_address =[]
    tipos_persona = []
    # juridicals = juridicals.order_by('j_name')
    for r in contractors:
        if int(r.get_type_person_display()) == 1:
            tipos_persona.append('Física')
        elif int(r.get_type_person_display()) == 2:
            tipos_persona.append('Moral')
        else:
            tipos_persona.append('NA')
        grupo1= ''
        grupo2= ''
        nm = ((((((r.full_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
        # groupinglevel_many:
        if r.cellule:
            cel_ = r.cellule.celula_name
        else:
            cel_ =''

        if r.group.type_group == 1:
            contratanG = ((((((r.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
            grupo1 = ''
            grupo2 = ''
        elif r.group.type_group == 2:
            grupotype1 = Group.objects.get(pk = r.group.parent.id)
            contratanG = ((((((grupotype1.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
            grupo1 = ((((((r.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
            grupo2 = ''
        elif r.group.type_group == 3:
            grupotype1 = Group.objects.get(pk = r.group.parent.parent.id)
            contratanG = ((((((grupotype1.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
            subgrupotype2 = Group.objects.get(pk = r.group.parent.id)
            grupo1 = ((((((subgrupotype2.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
            grupo2 = ((((((r.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
   
        if r.owner:
            val_owner = r.owner.first_name + ' '+ str(r.owner.last_name)
        else:
            val_owner = ''
        if r.responsable:
            val_resp = r.responsable.first_name + ' '+ str(r.responsable.last_name)
        else:
            val_resp = ''  
        if r.vendor:
            referenc = r.vendor.first_name + ' '+ str(r.vendor.last_name)
        else:
            referenc = ''

        contacto = ContactInfo.objects.filter(contractor=r)

        if contacto:
            contacto_nombre = contacto[0].name
            contacto_telefono = contacto[0].phone_number
            contacto_email = contacto[0].email
        else:
            contacto_nombre = ''
            contacto_telefono = ''
            contacto_email = ''
        id_addr = ''
        str_addr = ''
        address = Address.objects.filter(contractor=r)
        if address:
            id_addr = address[0].id
            str_addr = address[0].concatenate()
        ids_cliente.append(r.id)
        ids_address.append(id_addr)
        strs_address.append(str_addr)

        referenciador.append(referenc)
        responsable.append(val_resp)
        creadopor.append(val_owner)
        grupo.append(contratanG)
        name.append(nm)
        sub.append(grupo1)
        sub2.append(grupo2) 
        celula.append(cel_) 

        contactos_nombre.append(contacto_nombre)
        contactos_email.append(contacto_email)
        contactos_telefono.append(contacto_telefono)
    obj = {
        'contractor'   : str(list(name)),

        'email'   : str(list(contractors.values_list('email', flat = True))),
        'vip'   : str(list(contractors.values_list('vip', flat = True))),
        
        'phone_number'   : str(list(contractors.values_list('phone_number', flat = True))),
        'rfc'   : str(list(contractors.values_list('rfc', flat = True))),
        'acta_constitutiva'   : str(list(contractors.values_list('constitutive_act', flat = True))),
        'rfc_doc'   : str(list(contractors.values_list('rfc_document', flat = True))),
        'ced_id_oficial'   : str(list(contractors.values_list('card_official_identification', flat = True))),
        'comprobante_domicilio_fiscal'   : str(list(contractors.values_list('voucher_of_address', flat = True))),
        'mod_acta_constitutiva'   : str(list(contractors.values_list('modifications_constitutive_act', flat = True))),
        'poder_fiscal'   : str(list(contractors.values_list('fiscal_power', flat = True))),
        'fianzas_only'   : str(list(contractors.values_list('only_sureties', flat = True))),
        'curp'   : str(list(contractors.values_list('CURP', flat = True))),
        'idoficial'   : str(list(contractors.values_list('card_official_identification', flat = True))),
        'comprobante_firma_electronica' : str(list(contractors.values_list('voucher_efirm', flat = True))),
        'formato_ic_firmado'   : str(list(contractors.values_list('signed_format_ic', flat = True))),
        'sucursal'   : str(list(contractors.values_list('sucursal__sucursal_name', flat = True))),
        'sexo'   : str(list(contractors.values_list('sex', flat = True))),
        'sucursal'   : str(list(contractors.values_list('sucursal__sucursal_name', flat = True))),
        'grupo'   : str(list(grupo)),
        'subgrupo'   : str(list(sub)),
        'subsubgrupo'   : str(list(sub2)),
        'celula':str(list(celula)),
        'fecha_est'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in contractors.values_list('birth_date', flat = True) ])),
        'created_date'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in contractors.values_list('created_at', flat = True) ])),
        'referenciador': str(list(referenciador)),
        'responsable': str(list(responsable)),
        'creadopor': str(list(creadopor)),
        'sexo'   : str(list(contractors.values_list('sex', flat = True))),
        'contactos_nombre': str(list(contactos_nombre)),
        'contactos_telefono': str(list(contactos_telefono)),
        'contactos_email': str(list(contactos_email)),

        'ids_cliente'   : str(list(ids_cliente)),
        'ids_address'   : str(list(ids_address)),
        'strs_address'   : str(list(strs_address)),

        'email_org':info_org['email'],
        'phone_org':info_org['phone'],
        'webpage_org':info_org['webpage'],
        'address_org':info_org['address'],
        'urlname_org':info_org['name'],
        'tipo': str(list(tipos_persona)),
    }   
    #obj['columns'] = str(list(columns))
    obj['imagen'] = archivo_imagen
    obj['pproveedor'] = pproveedor
    obj['infoOrg'] = str(list(info_org))
    obj['registros'] = len(contractors)

    r = requests.post(settings.SERVICEEXCEL_URL + 'get-ContractorsPPExcel/', obj,
    # headers = {
    # 'Authorization':'Bearer %s'%request.user.user_info.fi_token_refresh,
    # # 'Content-Type':'application/json' 
    # }, 
    stream=True)
    response_data= r.text
    # ----
    response = HttpResponse(r.content,content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

    return response

# reporte Grupos
@api_view(['POST'])
@permission_classes((IsAuthenticatedV2, IsOrgMemberV2))
def Service_ReporteGrupoExcel(request):
    queryset = Group.objects.filter(org_name = request.GET.get('org'),type_group=1).order_by('group_name')
    queryset_ = Group.objects.filter(org_name = request.GET.get('org')).order_by('group_name')
    # Empieza insertado de imagen
    info_org = getInfoOrg(request)
    if len(info_org['logo']) != 0:
        archivo_imagen = 'https://miurabox-public.s3.amazonaws.com/cas/' + info_org['logo']
        # archivo_imagen = get_presigned_url("cas/{url}".format(url=info_org['logo']),28800) 
    else:
            archivo_imagen = 'saam.jpg'
    try:
        dataToFilter = getDataForPerfilRestricted(request, request.GET.get('org'))
    except Exception as er:
        dataToFilter = {}
    if dataToFilter:
        # Contratantes***
        if dataToFilter['cgpr'] and not dataToFilter['pgpr']:
            queryset = queryset.filter(pk__in = list(dataToFilter['cgpr']))
        if dataToFilter['pgpr'] and not dataToFilter['cgpr']:
            queryset = queryset.filter(pk__in = list(dataToFilter['pgpr']))
        if dataToFilter['cgpr'] and dataToFilter['pgpr']:
            queryset = queryset.filter(Q(pk__in = list(dataToFilter['pgpr'])) | Q(pk__in = list(dataToFilter['cgpr'])))
    responsable = []
    creadopor = []
    grupo = []
    tipo=[]
    for r in queryset:
        nameG = ((((((r.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')       
        tipo.append('Grupo')
        if r.owner:
            val_owner = r.owner.first_name + ' '+ str(r.owner.last_name)
        else:
            val_owner = ''
        if r.responsable:
            val_resp = r.responsable.first_name + ' '+ str(r.responsable.last_name)
        else:
            val_resp = '' 
        responsable.append(val_resp)
        creadopor.append(val_owner)
        grupo.append(nameG)
        subgrupos = Group.objects.filter(type_group=2, parent__id=r.id)
        for sg in subgrupos:
            nameG = ((((((sg.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')       
            tipo.append('SubGrupo')
            if sg.owner:
                val_owner = sg.owner.first_name + ' '+ str(sg.owner.last_name)
            else:
                val_owner = ''
            if sg.responsable:
                val_resp = sg.responsable.first_name + ' '+ str(sg.responsable.last_name)
            else:
                val_resp = '' 
            responsable.append(val_resp)
            creadopor.append(val_owner)
            grupo.append(nameG)
            ssubgrupos = Group.objects.filter(type_group=3, parent__id=sg.id)
            for ssg in ssubgrupos:
                nameG = ((((((ssg.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')       
                tipo.append('SubSubGrupo')
                if ssg.owner:
                    val_owner = ssg.owner.first_name + ' '+ str(ssg.owner.last_name)
                else:
                    val_owner = ''
                if ssg.responsable:
                    val_resp = ssg.responsable.first_name + ' '+ str(ssg.responsable.last_name)
                else:
                    val_resp = '' 
                responsable.append(val_resp)
                creadopor.append(val_owner)
                grupo.append(nameG)
    columns = ['Nombre','Responsable', 'Creado por']
    # ----------------------------------------------------------
    obj = {
        'grupo'   : str(list(grupo)),
        'responsable': str(list(responsable)),
        'creadopor': str(list(creadopor)),
        'email_org':info_org['email'],
        'phone_org':info_org['phone'],
        'webpage_org':info_org['webpage'],
        'address_org':info_org['address'],
        'urlname_org':info_org['name'],
        'tipo':str(list(tipo))
    }   
    obj['columns'] = str(list(columns))
    obj['imagen'] = archivo_imagen
    obj['infoOrg'] = str(list(info_org))
    obj['registros'] = len(queryset_)
    r = requests.post(settings.SERVICEEXCEL_URL + 'get-GrupoExcel/', obj,
    # headers = {
    # 'Authorization':'Bearer %s'%request.user.user_info.fi_token_refresh,
    # # 'Content-Type':'application/json' 
    # }, 
    stream=True)
    response_data= r.text
    # ----
    response = HttpResponse(r.content,content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

    return response
@api_view(['POST'])
@permission_classes((IsAuthenticatedV2, IsOrgMemberV2))
def Service_ReporteSeekerGruposExcel(request):    
    user = request.META['user']
    org =  user['org']['name']
    try:
        info_org = getInfoOrg(request)
        groups = Group.objects.filter(group_name__icontains = str(request.data['cadena']))
        queryset = groups
    
        if len(info_org['logo']) != 0:
            archivo_imagen = 'https://miurabox-public.s3.amazonaws.com/cas/' + info_org['logo']
            # archivo_imagen = get_presigned_url("cas/{url}".format(url=info_org['logo']),28800) 
        else:
            archivo_imagen = 'saam.jpg'
        
        responsable = []
        creadopor = []
        grupo = []
        for r in queryset:
            nameG = ((((((r.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')     
            if r.owner:
                val_owner = r.owner.first_name + ' '+ str(r.owner.last_name)
            else:
                val_owner = ''
            if r.responsable:
                val_resp = r.responsable.first_name + ' '+ str(r.responsable.last_name)
            else:
                val_resp = '' 
            responsable.append(val_resp)
            creadopor.append(val_owner)
            grupo.append(nameG)
        columns = ['Nombre','Responsable', 'Creado por']
        # ----------------------------------------------------------
        obj = {
            'grupo'   : str(list(grupo)),
            'responsable': str(list(responsable)),
            'creadopor': str(list(creadopor)),
            'email_org':info_org['email'],
            'phone_org':info_org['phone'],
            'webpage_org':info_org['webpage'],
            'address_org':info_org['address'],
            'urlname_org':info_org['name'],
        }   
        obj['columns'] = str(list(columns))
        obj['imagen'] = archivo_imagen
        obj['infoOrg'] = str(list(info_org))
        obj['registros'] = len(queryset)
        r = requests.post(settings.SERVICEEXCEL_URL + 'get-GrupoExcel/', obj,
        # headers = {
        # 'Authorization':'Bearer %s'%request.user.user_info.fi_token_refresh,
        # # 'Content-Type':'application/json' 
        # }, 
        stream=True)
        response_data= r.text
        # ----
        response = HttpResponse(r.content,content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

        return response        
    except Exception as e:
            pass
# Reporte Póliza listado
@api_view(['POST'])
@permission_classes((IsAuthenticatedV2, IsOrgMemberV2))
def Service_PolizasExcel(request):
    valueCom = True
    try:
        valueCom = comisions(request)
    except Exception as ers:
        valueCom =  True
    provider = request.data['provider']
    ramo = request.data['ramo']
    subramo = request.data['subramo']    
    since = request.data['since']  
    until = request.data['until']  
    status = request.data['status']  
    payment = request.data['payment']  
    contratante = request.data['contratante']  
    group = request.data['grupo']  
    # --------****
    subgrupo = request.data['subgrupo']
    subsubgrupo = request.data['subsubgrupo']
    nivelagrupacion = request.data['groupinglevel']
    subnivel = request.data['subgrupinglevel']
    subsubnivel = request.data['subsubgrupinglevel']

    clasificacion = request.data['classification']
    bsLine = request.data['businessLine']
    # --------****
    poliza = request.data['poliza']
    # internal = request.data['internal']
    inicio_fin = request.data['inicio_fin']  
    type_person = request.data['type_contractor']  
    order = int(request.data['order']  )
    asc = int(request.data['asc'])
    dates = int(request.data['dates'])
    ramos_sel = (request.data['ramos'])
    subramos_sel = (request.data['subramos'])
    providers_sel = (request.data['providers'])
    celula = int(request.data['celula'])
    try:
        onlyCaratula = int(request.data['only_caratula'])
    except:
        onlyCaratula = 0

    if int(payment) > 0:
            fp = [int(payment)]
    else:
        fp = [12,24,6,5,4,3,2,1,7,14,15]

    if int(status) > 0:
            st = [int(status)]
    else:
            st = [4,10,11,12,13,14,15]

    if int(group) > 0:
            grupos1 = Group.objects.get(pk = int(group))
            subg = Group.objects.filter(parent__id = int(group), type_group = 2, org_name = request.GET.get('org')).values_list('pk', flat=True)
            subsubg = Group.objects.filter(parent__id__in = subg, type_group = 3, org_name = request.GET.get('org')).values_list('pk', flat=True)
            allgrupos = list(subg) + list(subsubg)
            allgrupos.append(grupos1.id)
            grupos = Group.objects.filter(pk__in = allgrupos, org_name = request.GET.get('org'))
    else:
            grupos = Group.objects.filter(org_name = request.GET.get('org'))

    if int(subgrupo) > 0:
            subg = Group.objects.get(pk = int(subgrupo), org_name = request.GET.get('org'))
            subsubg = Group.objects.filter(parent__id = int(subgrupo), type_group = 3, org_name = request.GET.get('org')).values_list('pk', flat=True)
            allgrupos =list(subsubg)
            allgrupos.append(subg.id)
            grupos = Group.objects.filter(pk__in = allgrupos, org_name = request.GET.get('org'))
    # else:
    #         grupos = Group.objects.filter(org_name = request.GET.get('org'))
    if int(subsubgrupo) > 0:
            grupos = Group.objects.get(pk = int(subsubgrupo), org_name = request.GET.get('org'))
    # else:
    #         grupos = Group.objects.filter(org_name = request.GET.get('org'))
    # --------------
    if int(clasificacion) > 0:
        clasifics = Classification.objects.get(pk = int(clasificacion), org_name = request.GET.get('org'))
    else:
        clasifics = Classification.objects.filter(org_name = request.GET.get('org'))

    if int(provider) > 0 :
            providers = list(Provider.objects.filter(pk = int(provider)).values_list('pk', flat=True))
    else:
            providers = list(Provider.objects.filter(org_name = request.GET.get('org')).values_list('pk', flat=True))

    if int(ramo) > 0 :
            ramos = list(Ramos.objects.filter(pk = int(ramo)).values_list('pk', flat=True))
    else:
            ramos = list(Ramos.objects.filter(org_name = request.GET.get('org'), provider__in = providers).values_list('pk', flat=True))
    
    if int(subramo) > 0 :
            subramos = list(SubRamos.objects.filter(pk = int(subramo)).values_list('pk', flat=True))
    else:
            subramos = list(SubRamos.objects.filter(org_name = request.GET.get('org'), ramo__in = ramos).values_list('pk', flat=True))

    # ramos_selected----
    if (ramos_sel):
            ramos = list(Ramos.objects.filter(org_name = request.GET.get('org'), provider__in = providers,ramo_code__in=ramos_sel).values_list('pk', flat=True))
    else:
            ramos = list(Ramos.objects.filter(org_name = request.GET.get('org'), provider__in = providers).values_list('pk', flat=True))

    # rsubramos_sel----
    if (subramos_sel):
            subramos = list(SubRamos.objects.filter(org_name = request.GET.get('org'), ramo__in = ramos,subramo_code__in= subramos_sel).values_list('pk', flat=True))
    else:
            subramos = list(SubRamos.objects.filter(org_name = request.GET.get('org'), ramo__in = ramos).values_list('pk', flat=True)) 
    if (providers_sel):
            providers = list(Provider.objects.filter(pk__in = (providers_sel)).values_list('pk', flat=True))
    else:
            providers = list(Provider.objects.filter(org_name = request.GET.get('org')).values_list('pk', flat=True))

    polizas = Polizas.objects.filter(status__in = st, 
                                 forma_de_pago__in = fp, 
                                 org_name = request.GET.get('org'),
                                 ramo__in = ramos, 
                                 subramo__in = subramos, 
                                 aseguradora__in = providers)
    if int(contratante) > 0 :
        contratante_c = list(Contractor.objects.filter(pk = int(contratante), group = grupos).values_list('pk', flat = True) )
        polizas = polizas.filter(contractor__in = contratante_c)
    
    polizas_n = []
    polizas_j = []
    polizas_new = []
    if int(group) > 0 :
        contratanten = list( Contractor.objects.filter(group = grupos).values_list('pk', flat = True))
        polizas_n = polizas.filter(contractor__in = contratanten)        
        if int(contratante) > 0 :
            contratante_c = list(Contractor.objects.filter(pk = int(contratante), group = grupos).values_list('pk', flat = True) )
            polizas = polizas.filter(contractor__in = contratante_c)
    else:
        polizas = polizas.filter(contractor__group=grupos)
    # ----------------------******************************---------------------------------------------------
    if int(celula) > 0 :
        #************ si son carátula debe mandar el contratnte que tenga la carátula y los de la póliza no cuentan***************
        polizas = polizas.filter(celula = celula)


    gp = nivelagrupacion
    gp1= subnivel
    gp2 = subsubnivel

    if gp > 0 or gp1 > 0 or gp2 > 0:

        if(nivelagrupacion == 0):
            nivelagrupacion = GroupingLevel.objects.filter(org_name = request.GET.get('org'), type_grouping = 1).values_list('pk', flat = True)
        else :
            nivelagrupacion = GroupingLevel.objects.filter(id = nivelagrupacion).values_list('pk', flat = True)



        if(subnivel == 0):
            subnivel = GroupingLevel.objects.filter(org_name = request.GET.get('org'), type_grouping = 2, parent__in = list(nivelagrupacion)).values_list('pk', flat = True)
        else :
            subnivel = GroupingLevel.objects.filter(id = subnivel).values_list('pk', flat = True)



        if(subsubnivel == 0):
            subsubnivel = GroupingLevel.objects.filter(org_name = request.GET.get('org'), type_grouping = 3, parent__in = list(subnivel)).values_list('pk', flat = True)
        else :
            subsubnivel = GroupingLevel.objects.filter(id = subsubnivel).values_list('pk', flat = True)


        niveles = list(subsubnivel) + list(subnivel) + list(nivelagrupacion)


        polizas = polizas.filter(groupinglevel__in = niveles)



    # -----------------------------***********************************************-----------------------------------    
    if int(clasificacion) > 0 :
        # polizas = polizas.filter(Q(natural__classification = clasifics) | Q(juridical__classification = clasifics))
        polizas = polizas.filter(contractor__classification = clasifics)
    # ---------------*************------******
    if int(bsLine) > 0:
        if int(bsLine) == 3:
            polizas = polizas.filter(business_line = 0)    
        else:
            polizas = polizas.filter(business_line = bsLine)        
    # -----------------------------***********************************************-----------------------------------
    if int(group) >0:
        # polizas = polizas.filter(Q(natural__group=grupos)  | Q(juridical__group=grupos))
        polizas = polizas.filter(contractor__group=grupos)
    # ----------
    if dates == 1:
        try:
                f = "%d/%m/%Y %H:%M:%S"        
                since = datetime.strptime(since , f)
                until = datetime.strptime(until , f)
        except:
                f = "%m/%d/%Y %H:%M:%S"        
                since = datetime.strptime(since , f)
                until = datetime.strptime(until , f)

        if inicio_fin == True:
                date_filters = [Q(start_of_validity__gte=since),Q(start_of_validity__lte = until), Q(document_type__in = list([1,3,11,12]))]
        else:
                date_filters = [Q(end_of_validity__gte=since),Q(end_of_validity__lte = until), Q(document_type__in = list([1,3,11,12]))]
    else:
            date_filters = [Q(document_type__in = list([1,3,11,12]))]

    try:
        if (poliza) != 0:
            date_filters.append(Q(poliza_number__icontains=poliza))
    except:
            date_filters = date_filters
    # MBX-2038
    if onlyCaratula != 0:
        date_filters = [Q(document_type__in = list([11,12]))]    
        date_filters.append(Q(pk=onlyCaratula) | Q(parent__id=onlyCaratula))    
        try:
            if (poliza) != 0:
                date_filters.append(Q(poliza_number__icontains=poliza) | Q(parent__poliza_number__icontains=poliza))
        except:
            date_filters = date_filters
                
    if order == 1:
        if asc == 1:
            order_polizas = polizas.filter(reduce(operator.and_, date_filters), org_name = request.GET.get('org')).order_by('-document_type')
        else:
            order_polizas = polizas.filter(reduce(operator.and_, date_filters), org_name = request.GET.get('org')).order_by('document_type')
    
    elif order == 2:
        if asc == 1:
            order_polizas = polizas.filter(reduce(operator.and_, date_filters), org_name = request.GET.get('org')).order_by('poliza_number')
        else:
            order_polizas = polizas.filter(reduce(operator.and_, date_filters), org_name = request.GET.get('org')).order_by('-poliza_number')
    
    elif order == 3:
        if asc == 1:
            # order_polizas = polizas.filter(reduce(operator.and_, date_filters), org_name = request.GET.get('org')).order_by('natural__full_name', 'juridical__j_name')
            order_polizas = polizas.filter(reduce(operator.and_, date_filters), org_name = request.GET.get('org')).order_by('contractor__full_name')
        else:
            # order_polizas = polizas.filter(reduce(operator.and_, date_filters), org_name = request.GET.get('org')).order_by('-natural__full_name', '-juridical__j_name')
            order_polizas = polizas.filter(reduce(operator.and_, date_filters), org_name = request.GET.get('org')).order_by('-contractor__full_name')
    
    elif order == 4:
        if asc == 1:
            order_polizas = polizas.filter(reduce(operator.and_, date_filters), org_name = request.GET.get('org')).order_by('aseguradora__compania')
        else:
            order_polizas = polizas.filter(reduce(operator.and_, date_filters), org_name = request.GET.get('org')).order_by('-aseguradora__compania')
    
    elif order == 5:
        if asc == 1:
            order_polizas = polizas.filter(reduce(operator.and_, date_filters), org_name = request.GET.get('org')).order_by('subramo__subramo_name')
        else:
            order_polizas = polizas.filter(reduce(operator.and_, date_filters), org_name = request.GET.get('org')).order_by('-subramo__subramo_name')


    elif order == 6:
        if asc == 1:
            order_polizas = polizas.filter(reduce(operator.and_, date_filters), org_name = request.GET.get('org')).order_by('forma_de_pago')
        else:
            order_polizas = polizas.filter(reduce(operator.and_, date_filters), org_name = request.GET.get('org')).order_by('-forma_de_pago')
    
    elif order == 7:
        if asc == 1:
            order_polizas = polizas.filter(reduce(operator.and_, date_filters), org_name = request.GET.get('org')).order_by('status')
        else:
            order_polizas = polizas.filter(reduce(operator.and_, date_filters), org_name = request.GET.get('org')).order_by('-status')

    elif order == 8:
        if asc == 1:
            order_polizas = polizas.filter(reduce(operator.and_, date_filters), org_name = request.GET.get('org')).order_by('start_of_validity')
        else:
            order_polizas = polizas.filter(reduce(operator.and_, date_filters), org_name = request.GET.get('org')).order_by('-start_of_validity')

    else:
        order_polizas = polizas.filter(reduce(operator.and_, date_filters), org_name = request.GET.get('org'))
    try:
        dataToFilter = getDataForPerfilRestricted(request, request.GET.get('org'))
    except Exception as er:
        dataToFilter = {}
    if dataToFilter:
        # Contratantes***
        polizas = Polizas.objects.filter(document_type__in = [1,3,11,12], org_name = request.GET.get('org'))
        polizasToF = Polizas.objects.filter(document_type__in = [1,3,11], org_name = request.GET.get('org'))
        if dataToFilter['ccpr']:
            polizasToF = polizasToF.filter(contractor__in = list(dataToFilter['ccpr']))
        if dataToFilter['cgpr']:
            polizasToF = polizasToF.filter(contractor__group__in = list(dataToFilter['cgpr']))
        if dataToFilter['ccepr']:
            polizasToF = polizasToF.filter(contractor__cellule__in = list(dataToFilter['ccepr']))
        if dataToFilter['crpr']:
            polizasToF = polizasToF.filter(contractor__vendor__in = list(dataToFilter['crpr']))
        if dataToFilter['cspr']:
            polizasToF = polizasToF.filter(contractor__sucursal__in = list(dataToFilter['cspr']))
        # Pólizas ****
        if dataToFilter['pppr']:
            polizasToF = polizasToF.filter(pk__in = list(dataToFilter['pppr']))
        if dataToFilter['pgpr']:
            polizasToF = polizasToF.filter(contractor__group__in = list(dataToFilter['pgpr']))
        if dataToFilter['pcepr']:
            polizasToF = polizasToF.filter(celula__in = list(dataToFilter['pcepr']))
        if dataToFilter['prpr']:
            polizasToF = polizasToF.filter(ref_policy__referenciador__in = list(dataToFilter['prpr']))
        if dataToFilter['pspr']:
            polizasToF = polizasToF.filter(sucursal__in = list(dataToFilter['pspr']))
        if dataToFilter['papr']:
            polizasToF = polizasToF.filter(groupinglevel__in = list(dataToFilter['papr']))
        if dataToFilter['pcapr']:
            polizasToF = polizasToF.filter(clave__in = list(dataToFilter['pcapr']))
        if dataToFilter['psrpr']:
            polizasToF = polizasToF.filter(subramo__subramo_code__in = list(dataToFilter['psrpr']))
        if dataToFilter['paspr']:
            polizasToF = polizasToF.filter(aseguradora__in = list(dataToFilter['paspr']))
        if dataToFilter['pstpr']:
            polizasToF = polizasToF.filter(status__in = list(dataToFilter['pstpr']))
        
        polizasCT = polizas.filter(document_type = 12, parent__in = list(polizasToF))
        polizasFin = list(polizasToF.values_list('pk', flat = True)) + list(polizasCT.values_list('pk', flat = True))
        order_polizas = order_polizas.filter(pk__in = list(polizasFin))
    info_org = getInfoOrg(request)
    if len(info_org['logo']) != 0:
        archivo_imagen = 'https://miurabox-public.s3.amazonaws.com/cas/' + info_org['logo']
        # archivo_imagen = get_presigned_url("cas/{url}".format(url=info_org['logo']),28800) 
    else:
            archivo_imagen = 'saam.jpg'
    columns = ['Tipo', 'No.Póliza', 'Contratante','Grupo','SubGrupo', 'SubSubGrupo', 'Email', 'Teléfono', 'Proveedor', 'Subramo', 'Forma de Pago', 'Estatus', 
                       'Inicio Póliza', 'Fin Póliza', 'Moneda', 'Prima Neta', 'RPF', 'Derecho', 'IVA', 'Prima Total', 'Comisión','%Comisión Prima Neta',
                       '%Comisión Derecho','%Comisión RPF',
                       'Clave', 'Asegurado', 'Observaciones', 'Referenciador', 'Fecha de creación', 'Creado por','Sucursal',
                       'Agrupación','SubAgrupación', 'SubsubAgrupación','Clasificación','Línea Negocio','Célula','Estado de Circulación',
                       'Motivo No Renovación','Motivo Cancelación','Fecha de Cancelación']
    # order_polizas = order_polizas.order_by('natural__full_name','juridical__j_name','ramo__ramo_name','aseguradora__compania')
    order_polizas = order_polizas.order_by('id')
    asegurado = []
    antiguedad = []
    referenciador = []
    creadopor = []
    contratante = []
    contratanteE = []
    contratanteP = []
    contratanteG = []
    grupo1 = []
    grupo2 = []
    nivelAg = []
    grupo3 = []
    grupo4 = []
    clasifica = []
    businessLine = []
    clave = []
    celulaC = []
    edocir = []
    mrenovacion = []
    mcancelacion = []
    ownercancel = []
    datecancel =[]
    status_poliza = []
    idpoliza = []
    razonrehabilitacion = []
    nivelhospitalario = []
    tabulador = []
    campo_celula, campo_agrupacion, campo_lineanegocio, moduleName = getOrgInfo(request)
    for r in order_polizas:
        tab = ''
        nhosp = ''
        nivelhospitalario.append(((((((r.hospital_level).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'') if r.hospital_level else '')
        tabulador.append(((((((r.tabulator).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')  if r.tabulator else '')
        idpoliza.append(r.id)
        mreh = r.reason_rehabilitate
        date_cancel_=''
        if mreh:
            mreh = ((((((mreh).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'') 
        else:
            mreh = mreh
        razonrehabilitacion.append(mreh)
        statusr = checkStatusPolicy(r.status)
        valR = False
        if OldPolicies.objects.filter(base_policy__id = r.id, new_policy__status = 1).exists():
            valR = True
        if r.org_name == 'ancora':
            if r.status ==13 and r.is_renewable==1 or r.renewed_status ==2:
                statusr = statusr+' -En Proceso de Renovación'
        cl = ''
        cve = ''
        antig = get_antiguedad(r.start_of_validity)
        if r.owner:
            val_owner = r.owner.first_name + ' '+ str(r.owner.last_name)
        else:
            val_owner = ''
        if r.status ==11:
            if r.owner_cancel:
                ownercancel.append(r.owner_cancel.first_name+' '+str(r.owner_cancel.last_name))
            else:
                ownercancel.append('')
            if r.date_cancel:
                date_cancel_= r.date_cancel.strftime("%d/%m/%Y")
            elif r.fecha_cancelacion:
                date_cancel_= r.fecha_cancelacion.strftime("%d/%m/%Y")
            else:
                date_cancel_= ''
        else:
            ownercancel.append('')
        if r.state_circulation:
            valstate = r.state_circulation
            try:
                valstate = getStates(int(r.state_circulation))
            except Exception as e:                
                valstate = r.state_circulation
        else:
            valstate = ''
        if r.business_line:
            if int(r.business_line) ==1:
                businessLine_ = 'Comercial'
            elif int(r.business_line) ==2:
                businessLine_ = 'Personal'
            elif int(r.business_line) ==0:
                businessLine_ = 'Otro'
            else:
                businessLine_ = ''
        else:
            try:
                if int(r.business_line) ==0:
                    businessLine_ = 'Otro'
                else:
                    businessLine_ = ''
            except:
                businessLine_ = ''
        if r.clave:
            try:
                try:
                    cve = r.clave.name + ' '+ str(r.clave.clave)
                    cve = ((((((cve).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                except Exception as fds:
                    cve =''
            except Exception as ecv:
                cve = ''
        else:
            cve = ''
        try:
            refs_policy = ReferenciadoresInvolved.objects.filter(policy = r.id).values_list('referenciador__first_name','referenciador__last_name')
            if len(refs_policy):
                v = []
                try:
                    for it in refs_policy:
                        v.append(it[0] +' '+ str(it[1])+str('; '))
                    referenc = v
                except Exception as y:
                    v = []
                    referenc = v
            else:
                v = []
                referenc = v
        except Exception as e:
            v = []
            referenc = v 
        if r.ramo.ramo_code == 1:
            form = Life.objects.filter(policy = r.id)
            if form:
                try:
                    if form:
                        value = form[0].personal.full_name
                    else:
                        value = ''
                except Exception as rt:
                   value = ''
            else:
               value = ''
        elif r.ramo.ramo_code == 2:
            form = AccidentsDiseases.objects.filter(policy = r.id)
            if form:
                value = form[0].personal.full_name
            else:
                value = ''
        elif r.subramo.subramo_code == 9:
            form = AutomobilesDamages.objects.filter(policy = r.id)
            if form:
                try:
                    form[0].model = ((((((form[0].model).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    form[0].version = ((((((form[0].version).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                except Exception as ers:
                    form[0].model = form[0].model
                    form[0].version = form[0].version
                value = str(form[0].brand) + '-' + str(form[0].model) + '-' + str(form[0].version)+ '-' + str(form[0].serial)
            else:
                value = ''
        elif r.ramo.ramo_code == 3 and not r.subramo.subramo_code == 9:
            form = Damages.objects.filter(policy = r.id)
            if form:
                value = form[0].insured_item
            else:
                value = ''
        if r.contractor:
            contratan = ((((((r.contractor.full_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
            contratanE = r.contractor.email
            contratanP = r.contractor.phone_number
            try:
                if r.contractor.group.type_group == 1:
                    contratanG = ((((((r.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    grupo1_ = ''
                    grupo2_ = ''
                elif r.contractor.group.type_group == 2:
                    grupotype1 = Group.objects.get(pk = r.contractor.group.parent.id)
                    contratanG = ((((((grupotype1.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    grupo1_ = ((((((r.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    grupo2_ = ''
                elif r.contractor.group.type_group == 3:
                    grupotype1 = Group.objects.get(pk = r.contractor.group.parent.parent.id)
                    contratanG = ((((((grupotype1.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    subgrupotype2 = Group.objects.get(pk = r.contractor.group.parent.id)
                    grupo1_ = ((((((subgrupotype2.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    grupo2_ = ((((((r.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
            except Exception as e:
                contratanG = ''
                grupo1_ = ''
                grupo2_ = ''
            try:
                if r.groupinglevel:
                    if r.groupinglevel.type_grouping == 1:
                        nivelAg_ = ((((((r.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        grupo3_ = ''
                        grupo4_ = ''
                    elif r.groupinglevel.type_grouping == 2:
                        grupotype1 = GroupingLevel.objects.get(pk = r.groupinglevel.parent.id)
                        nivelAg_ = ((((((grupotype1.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        grupo3_ = ((((((r.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        grupo4_ = ''
                    elif r.groupinglevel.type_grouping == 3:
                        grupotype1 = GroupingLevel.objects.get(pk = r.groupinglevel.parent.parent.id)
                        nivelAg_ = ((((((grupotype1.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        subgrupotype2 = GroupingLevel.objects.get(pk = r.groupinglevel.parent.id)
                        grupo3_ = ((((((subgrupotype2.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        grupo4_ = ((((((r.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                else:
                    nivelAg_ = ''
                    grupo3_ = ''
                    grupo4_ = ''  
            except Exception as e:
                nivelAg_ = ''
                grupo3_ = ''
                grupo4_ = ''  
            if r.contractor.classification:
                clasifica_ = r.contractor.classification.classification_name  
            else:
                clasifica_='-----'
            if r.celula:
                cel = r.celula.celula_name  
            else:
                cel='-----'   
        
        if value:
            value = ((((((value).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'') 
        else:
            value = value
        mren = r.reason_ren
        if mren:
            mren = ((((((mren).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'') 
        else:
            mren = mren
        mcan = r.reason_cancel
        if mcan:
            mcan = ((((((mcan).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'') 
        else:
            mcan = mcan
        contratante.append(contratan)
        contratanteE.append(contratanE)
        contratanteP.append(contratanP)
        contratanteG.append(contratanG)
        # ---
        grupo1.append(grupo1_)
        grupo2.append(grupo2_)
        nivelAg.append(nivelAg_)
        grupo3.append(grupo3_)
        grupo4.append(grupo4_)
        clasifica.append(clasifica_)
        businessLine.append(businessLine_)
        celulaC.append(cel)
        # ----
        asegurado.append(value)
        referenciador.append(referenc)
        antiguedad.append(antig)
        creadopor.append(val_owner)
        clave.append(cve)
        edocir.append(valstate)
        mrenovacion.append(mren)
        mcancelacion.append(mcan)
        status_poliza.append(statusr)
        datecancel.append(date_cancel_)
    verReferenciadores = is_perm_ver_referenciadores(request)
    obj = {
        'document_type'   : str(list(order_polizas.values_list('document_type', flat = True))),
        'poliza_number'   :str(list([(((((((x).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')) if x else '' for x in order_polizas.values_list('poliza_number', flat = True)])),
        'contratante'   : str(list(contratante)),
        'contratanteE'   : str(list(contratanteE)),
        'contratanteP'   : str(list(contratanteP)),
        'aseguradora__compania'   : str(list(order_polizas.values_list('aseguradora__alias', flat = True))),
        'subramo__subramo_name'   : str(list(order_polizas.values_list('subramo__subramo_name', flat = True))),
        'forma_de_pago'   : str(list(order_polizas.values_list('forma_de_pago', flat = True))),
        'status'   : str(list(status_poliza)),
        'start_of_validity'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in order_polizas.values_list('start_of_validity', flat = True) ])) ,
        'end_of_validity'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in order_polizas.values_list('end_of_validity', flat = True) ])) ,
        'dateCancel'   : str(list(datecancel)) ,
        'f_currency'   : str(list(order_polizas.values_list('f_currency', flat = True))),
        'p_neta'   : str(list(order_polizas.values_list('p_neta', flat = True))),
        'rpf'   : str(list(order_polizas.values_list('rpf', flat = True))),
        'derecho'   : str(list(order_polizas.values_list('derecho', flat = True))),
        'iva'   : str(list(order_polizas.values_list('iva', flat = True))),
        'p_total'   : str(list(order_polizas.values_list('p_total', flat = True))),
        'comision'   : str(list(order_polizas.values_list('comision', flat = True))),
        'comision_pneta'   : str(list(order_polizas.values_list('comision_percent', flat = True))),
        'comision_derecho'   : str(list(order_polizas.values_list('comision_derecho_percent', flat = True))),
        'comision_rpf'   : str(list(order_polizas.values_list('comision_rpf_percent', flat = True))),
        'clave__clave'   : str(list(clave)),
        '_id'   : str(list(order_polizas.values_list('id', flat = True))),
        'observations'   : str(list([(((((((x).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')) if x else '' for x in order_polizas.values_list('observations', flat = True)])),
        'owner__first_name'   : str(list(order_polizas.values_list('owner__first_name', flat = True))),
        'owner__last_name'   : str(list(order_polizas.values_list('owner__last_name', flat = True))),
        'created_at'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in order_polizas.values_list('created_at', flat = True) ]))  ,
        'clave__name'   : str(list(order_polizas.values_list('clave__name', flat = True))),
        'contratanteG'   : str(list(contratanteG)) ,
        'grupo1'   : str(list(grupo1)) ,
        'grupo2'   : str(list(grupo2)) ,
        'nivelAg'   : str(list(nivelAg)) ,
        'grupo3'   : str(list(grupo3)) ,
        'grupo4'   : str(list(grupo4)) ,
        'clasifica'   : str(list(clasifica)) ,
        'businessLine'   : str(list(businessLine)) ,
        'celula'   : str(list(celulaC)) ,
        'motivor'   : str(list(mrenovacion)) ,
        'motivoc'   : str(list(mcancelacion)) ,
        'sucursal__sucursal_name'   :str(list([(((((((x).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')) if x else '' for x in order_polizas.values_list('sucursal__sucursal_name', flat = True)])),
        'asegurado'   : str(list(asegurado)),
        'referenciador'   : str(list(referenciador)),
        'antiguedad'   : str(list(antiguedad)),
        'creadopor'   : str(list(creadopor)),
        'estadoc'   : str(list(edocir)),
        'ownercancel':str(list(ownercancel)),
        'razonreha':str(list(razonrehabilitacion)),
        'nivelhospitalario':str(list(nivelhospitalario)),
        'tabulador':str(list(tabulador)),
        'tipo_reporte': ' ',
        'email_org':info_org['email'],
        'phone_org':info_org['phone'],
        'webpage_org':info_org['webpage'],
        'address_org':info_org['address'],
        'urlname_org':info_org['name'],
        'campo_celula':campo_celula,
        'campo_agrupacion':campo_agrupacion,
        'campo_lineanegocio':campo_lineanegocio,
        }   
    obj['columns'] = str(list(columns))
    obj['imagen'] = archivo_imagen
    obj['valueCom'] = valueCom
    obj['registros'] = len(order_polizas)
    obj['verReferenciadores'] = verReferenciadores
    obj['moduleName'] = moduleName
    if campo_lineanegocio == 'False' or campo_lineanegocio == False:
        if 'businessLine' in obj:
            del obj['businessLine'] 
    if campo_celula == 'False' or campo_celula == False:
        if 'celula' in obj:
            del obj['celula'] 
    if campo_agrupacion == 'False' or campo_agrupacion == False:
        if 'nivelAg' in obj:
            del obj['nivelAg'] 
        if 'grupo3' in obj:
            del obj['grupo3'] 
        if 'grupo4' in obj:
            del obj['grupo4'] 
            
    r = requests.post(settings.SERVICEEXCEL_URL + 'get-PolicyExcel/', obj,
    # headers = {
    # 'Authorization':'Bearer %s'%request.user.user_info.fi_token_refresh,
    # # 'Content-Type':'application/json' 
    # },
    stream=True)
    response_data= r.text

    response = HttpResponse(r.content,content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

    return response
# Reporte Póliza OT listado
@api_view(['POST'])
@permission_classes((IsAuthenticatedV2, IsOrgMemberV2))
def Service_PolizasOtExcel(request):
    valueCom = True
    try:
        valueCom = comisions(request)
    except Exception as ers:
        valueCom =  True
    provider = request.data['provider']
    ramo = request.data['ramo']
    subramo = request.data['subramo']    
    since = request.data['since']  
    until = request.data['until']  
    status = request.data['status']  
    payment = request.data['payment']  
    contratante = request.data['contratante']  
    group = request.data['grupo']  
    poliza = request.data['poliza']  
    inicio_fin = request.data['inicio_fin']  
    type_person = request.data['type_contractor']  
    order = int(request.data['order']  )
    asc = int(request.data['asc'])
    dates = int(request.data['dates'])
    ramos_sel = (request.data['ramos'])
    subramos_sel = (request.data['subramos'])
    providers_sel = (request.data['providers'])
    celula = int(request.data['celula'])

    # --------****
    subgrupo = request.data['subgrupo']
    subsubgrupo = request.data['subsubgrupo']
    nivelagrupacion = request.data['groupinglevel']
    subnivel = request.data['subgrupinglevel']
    subsubnivel = request.data['subsubgrupinglevel']

    clasificacion = request.data['classification']
    bsLine = request.data['businessLine']
    try:
        onlyCaratula = int(request.data['only_caratula'])
    except:
        onlyCaratula = 0
    # --- 
    if int(group) > 0:
        grupos1 = Group.objects.get(pk = int(group))
        subg = Group.objects.filter(parent__id = int(group), type_group = 2, org_name=request.GET.get('org')).values_list('pk', flat=True)
        subsubg = Group.objects.filter(parent__id__in = subg, type_group = 3, org_name=request.GET.get('org')).values_list('pk', flat=True)
        allgrupos = list(subg) + list(subsubg)
        allgrupos.append(grupos1.id)
        grupos = Group.objects.filter(pk__in = allgrupos, org_name=request.GET.get('org'))
    else:
        grupos = Group.objects.filter(org_name=request.GET.get('org'))

    if int(subgrupo) > 0:
        subg = Group.objects.get(pk = int(subgrupo), org_name=request.GET.get('org'))
        subsubg = Group.objects.filter(parent__id = int(subgrupo), type_group = 3, org_name=request.GET.get('org')).values_list('pk', flat=True)
        allgrupos =list(subsubg)
        allgrupos.append(subg.id)
        grupos = Group.objects.filter(pk__in = allgrupos, org_name=request.GET.get('org'))
    if int(subsubgrupo) > 0:
        grupos = Group.objects.get(pk = int(subsubgrupo), org_name = request.GET.get('org'))
     
    # --------------
    if int(clasificacion) > 0:
        clasifics = Classification.objects.get(pk = int(clasificacion), org_name=request.GET.get('org'))
    else:
        clasifics = Classification.objects.filter(org_name=request.GET.get('org')) 
    
    if int(payment) > 0:
            fp = [int(payment)]
    else:
        fp = [12,24,6,5,4,3,2,1,14,7,15]

    st = []
    if int(status) > 0 and int(status) in [1,2]:
        st = [int(status)]
    else:
        st = [1,2]
    
    if int(provider) > 0 :
            providers = list(Provider.objects.filter(pk = int(provider)).values_list('pk', flat=True))
    else:
            providers = list(Provider.objects.filter(org_name = request.GET.get('org')).values_list('pk', flat=True))

    if int(ramo) > 0 :
            ramos = list(Ramos.objects.filter(pk = int(ramo)).values_list('pk', flat=True))
    else:
            ramos = list(Ramos.objects.filter(org_name = request.GET.get('org'), provider__in = providers).values_list('pk', flat=True))
    
    if int(subramo) > 0 :
            subramos = list(SubRamos.objects.filter(pk = int(subramo)).values_list('pk', flat=True))
    else:
            subramos = list(SubRamos.objects.filter(org_name = request.GET.get('org'), ramo__in = ramos).values_list('pk', flat=True))
            
    if (providers_sel):
            providers = list(Provider.objects.filter(pk__in = (providers_sel)).values_list('pk', flat=True))
    else:
            providers = list(Provider.objects.filter(org_name = request.GET.get('org')).values_list('pk', flat=True))
    # ramos_selected----
    if (ramos_sel):
            ramos = list(Ramos.objects.filter(org_name = request.GET.get('org'), provider__in = providers,ramo_code__in=ramos_sel).values_list('pk', flat=True))
    else:
            ramos = list(Ramos.objects.filter(org_name = request.GET.get('org'), provider__in = providers).values_list('pk', flat=True))

    # rsubramos_sel----
    if (subramos_sel):
            subramos = list(SubRamos.objects.filter(org_name = request.GET.get('org'), ramo__in = ramos,subramo_code__in= subramos_sel).values_list('pk', flat=True))
    else:
            subramos = list(SubRamos.objects.filter(org_name = request.GET.get('org'), ramo__in = ramos).values_list('pk', flat=True))

    polizas = Polizas.objects.filter(status__in = st, 
                                                                     forma_de_pago__in = fp, 
                                                                     org_name=request.GET.get('org'),
                                                                     ramo__in = ramos, 
                                                                     subramo__in = subramos, 
                                                                     aseguradora__in = providers,
                                                                     document_type__in = [1,3,11,12])
    
    if int(contratante) > 0 :
        contratante_c= list(Contractor.objects.filter(pk = int(contratante)).values_list('pk', flat = True) )
        if int(group) > 0:
            contratante_c = list(Contractor.objects.filter(pk = int(contratante),group = grupos).values_list('pk', flat = True))
            polizas = polizas.filter(contractor__in = contratante_c)
        else:
            polizas = polizas.filter(contractor__in = contratante_c)
    if int(group) > 0:
            contratante_c = list(Contractor.objects.filter(group = grupos).values_list('pk', flat = True))
            polizas = polizas.filter(contractor__in = contratante_c)
            carat = polizas.filter(document_type__in = [1,3,11])
            carat = carat.filter(contractor__group = grupos).values_list('pk', flat = True)
            only_caratulas = Polizas.objects.filter(pk__in = carat,document_type = 11)
            pol = polizas.filter(document_type = 12, parent__in = only_caratulas).values_list('pk', flat = True)
            polizas = list(carat) + list(pol)
            polizas = Polizas.objects.filter(pk__in = polizas)
    else:
        polizas = polizas.filter(contractor__group=grupos)
    # ----------------------******************************---------------------------------------------------
    if int(nivelagrupacion) > 0 :
        # polizas = polizas.filter(Q(natural__grouping_level = levelGrouping) | Q(juridical__grouping_level = levelGrouping))
        carat = polizas.filter(document_type__in = [1,3,11])
        # carat = carat.filter(Q(natural__grouping_level = levelGrouping) | Q(juridical__grouping_level = levelGrouping)).values_list('pk', flat = True)
        carat = carat.filter(contractor__grouping_level = levelGrouping).values_list('pk', flat = True)
        # pol = polizas.filter(document_type = 12).values_list('pk', flat = True)
        only_caratulas = Polizas.objects.filter(pk__in = carat,document_type = 11)
        pol = polizas.filter(document_type = 12, parent__in = only_caratulas).values_list('pk', flat = True)
        polizas = list(carat) + list(pol)
        polizas = Polizas.objects.filter(pk__in = polizas)
    # -----------------------------***********************************************-----------------------------------   
    if int(clasificacion) > 0 :
        # polizas = polizas.filter(Q(natural__classification = clasifics) | Q(juridical__classification = clasifics))
        polizas = polizas.filter(contractor__classification = clasifics)
    

    if int(celula) > 0 :
        #************ si son carátula debe mandar el contratnte que tenga la carátula y los de la póliza no cuentan***************
        polizas = polizas.filter(celula = celula)


    gp = nivelagrupacion
    gp1= subnivel
    gp2 = subsubnivel

    if gp > 0 or gp1 > 0 or gp2 > 0:

        if(nivelagrupacion == 0):
            nivelagrupacion = GroupingLevel.objects.filter(org_name = request.GET.get('org'), type_grouping = 1).values_list('pk', flat = True)
        else :
            nivelagrupacion = GroupingLevel.objects.filter(id = nivelagrupacion).values_list('pk', flat = True)



        if(subnivel == 0):
            subnivel = GroupingLevel.objects.filter(org_name = request.GET.get('org'), type_grouping = 2, parent__in = list(nivelagrupacion)).values_list('pk', flat = True)
        else :
            subnivel = GroupingLevel.objects.filter(id = subnivel).values_list('pk', flat = True)


        if(subsubnivel == 0):
            subsubnivel = GroupingLevel.objects.filter(org_name = request.GET.get('org'), type_grouping = 3, parent__in = list(subnivel)).values_list('pk', flat = True)
        else :
            subsubnivel = GroupingLevel.objects.filter(id = subsubnivel).values_list('pk', flat = True)


        niveles = list(subsubnivel) + list(subnivel) + list(nivelagrupacion)

        polizas = polizas.filter(groupinglevel__in = niveles)
    

    if int(bsLine) >0:
        if int(bsLine) == 3:
            polizas = polizas.filter(business_line = 0) 
        else:
            polizas = polizas.filter(business_line = bsLine)
    # -----------------------------***********************************************----------------------------------- 

    if dates == 1:
        try:
                f = "%d/%m/%Y %H:%M:%S"        
                since = datetime.strptime(since , f)
                until = datetime.strptime(until , f)
        except:
                f = "%m/%d/%Y %H:%M:%S"        
                since = datetime.strptime(since , f)
                until = datetime.strptime(until , f)

        if inicio_fin == "true":
            date_filters = [Q(start_of_validity__gte=since),Q(start_of_validity__lte = until), Q(document_type__in = list([1,3,11,12]))]
        else:
            date_filters = [Q(end_of_validity__gte=since),Q(end_of_validity__lte = until), Q(document_type__in = list([1,3,11,12]))]
    else:
        date_filters = [Q(document_type__in = list([1,3,11,12]))]
    
    try:
            if int(poliza) != 0:
                date_filters.append(Q(poliza_number__icontains=poliza))
    except:
            date_filters.append(Q(poliza_number__icontains=poliza))
    # MBX-2038
    if onlyCaratula != 0:
        date_filters = [Q(document_type__in = list([11,12]))]    
        date_filters.append(Q(pk=onlyCaratula) | Q(parent__id=onlyCaratula))    
        try:
            if (poliza) != 0:
                date_filters.append(Q(poliza_number__icontains=poliza) | Q(parent__poliza_number__icontains=poliza))
        except:
            date_filters = date_filters
    if order == 1:
        if asc == 1:
            order_polizas = polizas.filter(reduce(operator.and_, date_filters), org_name = request.GET.get('org')).order_by('internal_number')
        else:
            order_polizas = polizas.filter(reduce(operator.and_, date_filters), org_name = request.GET.get('org')).order_by('-internal_number')
    
    elif order == 2:
        if asc == 1:
            # order_polizas = polizas.filter(reduce(operator.and_, date_filters), org = get_org(request.GET.get('org'))).order_by('natural__full_name', 'juridical__j_name')
            order_polizas = polizas.filter(reduce(operator.and_, date_filters), org = get_org(request.GET.get('org'))).order_by('contractor__full_name')
        else:
            # order_polizas = polizas.filter(reduce(operator.and_, date_filters), org = get_org(request.GET.get('org'))).order_by('-natural__full_name', '-juridical__j_name')
            order_polizas = polizas.filter(reduce(operator.and_, date_filters), org = get_org(request.GET.get('org'))).order_by('-contractor__full_name')    
    elif order == 3:
        if asc == 1:
            order_polizas = polizas.filter(reduce(operator.and_, date_filters), org_name = request.GET.get('org')).order_by('aseguradora__compania')
        else:
            order_polizas = polizas.filter(reduce(operator.and_, date_filters), org_name = request.GET.get('org')).order_by('-aseguradora__compania')
    
    elif order == 4:
        if asc == 1:
            order_polizas = polizas.filter(reduce(operator.and_, date_filters), org_name = request.GET.get('org')).order_by('paquete__package_name')
        else:
            order_polizas = polizas.filter(reduce(operator.and_, date_filters), org_name = request.GET.get('org')).order_by('-paquete__package_name')

    elif order == 5:
        if asc == 1:
            order_polizas = polizas.filter(reduce(operator.and_, date_filters), org_name = request.GET.get('org')).order_by('subramo__subramo_name')
        else:
            order_polizas = polizas.filter(reduce(operator.and_, date_filters), org_name = request.GET.get('org')).order_by('-subramo__subramo_name')


    elif order == 6:
        if asc == 1:
            order_polizas = polizas.filter(reduce(operator.and_, date_filters), org_name = request.GET.get('org')).order_by('forma_de_pago')
        else:
            order_polizas = polizas.filter(reduce(operator.and_, date_filters), org_name = request.GET.get('org')).order_by('-forma_de_pago')
    
    elif order == 7:
        if asc == 1:
            order_polizas = polizas.filter(reduce(operator.and_, date_filters), org_name = request.GET.get('org')).order_by('status')
        else:
            order_polizas = polizas.filter(reduce(operator.and_, date_filters), org_name = request.GET.get('org')).order_by('-status')

    elif order == 8:
        if asc == 1:
            order_polizas = polizas.filter(reduce(operator.and_, date_filters), org_name = request.GET.get('org')).order_by('start_of_validity')
        else:
            order_polizas = polizas.filter(reduce(operator.and_, date_filters), org_name = request.GET.get('org')).order_by('-start_of_validity')

    else:
        order_polizas = polizas.filter(reduce(operator.and_, date_filters), org_name = request.GET.get('org'))
    try:
        dataToFilter = getDataForPerfilRestricted(request, request.GET.get('org'))
    except Exception as er:
        dataToFilter = {}
    if dataToFilter:
        # Contratantes***
        polizas = Polizas.objects.filter(document_type__in = [1,3,11,12], org_name = request.GET.get('org'))
        polizasToF = Polizas.objects.filter(document_type__in = [1,3,11], org_name = request.GET.get('org'))
        if dataToFilter['ccpr']:
            polizasToF = polizasToF.filter(contractor__in = list(dataToFilter['ccpr']))
        if dataToFilter['cgpr']:
            polizasToF = polizasToF.filter(contractor__group__in = list(dataToFilter['cgpr']))
        if dataToFilter['ccepr']:
            polizasToF = polizasToF.filter(contractor__cellule__in = list(dataToFilter['ccepr']))
        if dataToFilter['crpr']:
            polizasToF = polizasToF.filter(contractor__vendor__in = list(dataToFilter['crpr']))
        if dataToFilter['cspr']:
            polizasToF = polizasToF.filter(contractor__sucursal__in = list(dataToFilter['cspr']))
        # Pólizas ****
        if dataToFilter['pppr']:
            polizasToF = polizasToF.filter(pk__in = list(dataToFilter['pppr']))
        if dataToFilter['pgpr']:
            polizasToF = polizasToF.filter(contractor__group__in = list(dataToFilter['pgpr']))
        if dataToFilter['pcepr']:
            polizasToF = polizasToF.filter(celula__in = list(dataToFilter['pcepr']))
        if dataToFilter['prpr']:
            polizasToF = polizasToF.filter(ref_policy__referenciador__in = list(dataToFilter['prpr']))
        if dataToFilter['pspr']:
            polizasToF = polizasToF.filter(sucursal__in = list(dataToFilter['pspr']))
        if dataToFilter['papr']:
            polizasToF = polizasToF.filter(groupinglevel__in = list(dataToFilter['papr']))
        if dataToFilter['pcapr']:
            polizasToF = polizasToF.filter(clave__in = list(dataToFilter['pcapr']))
        if dataToFilter['psrpr']:
            polizasToF = polizasToF.filter(subramo__subramo_code__in = list(dataToFilter['psrpr']))
        if dataToFilter['paspr']:
            polizasToF = polizasToF.filter(aseguradora__in = list(dataToFilter['paspr']))
        if dataToFilter['pstpr']:
            polizasToF = polizasToF.filter(status__in = list(dataToFilter['pstpr']))
        
        polizasCT = polizas.filter(document_type = 12, parent__in = list(polizasToF))
        polizasFin = list(polizasToF.values_list('pk', flat = True)) + list(polizasCT.values_list('pk', flat = True))
        order_polizas = order_polizas.filter(pk__in = list(polizasFin))
    info_org = getInfoOrg(request)
    if len(info_org['logo']) != 0:
        archivo_imagen = 'https://miurabox-public.s3.amazonaws.com/cas/' + info_org['logo']
        # archivo_imagen = get_presigned_url("cas/{url}".format(url=info_org['logo']),28800) 
    else:
        archivo_imagen = 'saam.jpg'

    columns = ['Tipo', 'No.Póliza', 'Contratante','Grupo', 'Email', 'Teléfono', 'Proveedor', 'Subramo', 'Forma de Pago', 'Estatus', 
                       'Inicio Póliza', 'Fin Póliza', 'Moneda', 'Prima Neta', 'RPF', 'Derecho', 'IVA', 'Prima Total', 'Comisión',
                       'Clave', 'Asegurado', 'Observaciones', 'Referenciador', 'Fecha de creación', 'Creado por','Sucursal']
    asegurado = []
    antiguedad = []
    referenciador = []
    creadopor = []
    contratante = []
    contratanteE = []
    contratanteP = []
    contratanteG = []
    clave = []
    grupo1 = []
    grupo2 = []
    nivelAg = []
    grupo3 = []
    grupo4 = []
    clasifica = []
    businessLine = []
    celulaC = []
    edocir = []
    # order_polizas = order_polizas.order_by('natural__full_name','juridical__j_name','ramo__ramo_name','aseguradora__compania')
    order_polizas = order_polizas.order_by('id')
    ownercancel = []
    seguimiento=[]
    campo_celula, campo_agrupacion, campo_lineanegocio, moduleName = getOrgInfo(request)
    verReferenciadores = is_perm_ver_referenciadores(request)
    for r in order_polizas:
        tab = ''
        try:
            if r.document_type in [1,3,12]:
                if r.status ==1:
                    tablero =PromotoriaTablero.objects.filter(org_name=r.org_name,is_active=True)#config
                    if tablero:
                        confTab = tablero[0].polizas_ots
                        try:
                            confTab = json.loads(confTab)
                        except Exception as eee:
                            confTab = confTab
                            try:
                                confTab = eval(confTab)
                            except Exception as e:
                                pass
                        for ind,y in enumerate(confTab):
                            if r.id in y['polizas']:
                                tab=y['tablero']
                                break
                    else:
                        tab= ''
                else:
                    tab= ''
            else:
                tab= ''
        except:
            tab= ''
        seguimiento.append(tab)
        cve = ''
        cel = ''
        antig = get_antiguedad(r.start_of_validity)
        if r.state_circulation:
            valstate = r.state_circulation
            try:
                valstate = getStates(int(r.state_circulation))
            except Exception as c:
                valstate = valstate
        else:
            valstate = ''
        if r.status ==11:
            if r.owner_cancel:
                ownercancel.append(r.owner_cancel.first_name+' '+str(r.owner_cancel.last_name))
            else:
                ownercancel.append('')
        else:
            ownercancel.append('')
        if r.business_line:
            if int(r.business_line) ==1:
                businessLine_ = 'Comercial'
            elif int(r.business_line) ==2:
                businessLine_ = 'Personal'
            elif int(r.business_line) ==0:
                businessLine_ = 'Otro'
            else:
                businessLine_ = ''
        else:
            try:
                if int(r.business_line) ==0:
                    businessLine_ = 'Otro'
                else:
                    businessLine_ = ''
            except:
                businessLine_ = ''
        if r.owner:
            val_owner = r.owner.first_name + ' '+ str(r.owner.last_name)
        else:
            val_owner = ''
        try:
            refs_policy = ReferenciadoresInvolved.objects.filter(policy = r.id,is_changed=False).values_list('referenciador__first_name','referenciador__last_name')
            if len(refs_policy):
                v = []
                try:
                    for it in refs_policy:
                        v.append(it[0] +' '+ str(it[1])+str('; '))
                    referenc = v
                except Exception as y:
                    v = []
                    referenc = v 
            else:
                v = []
                referenc = v 
        except Exception as e:
            v = []
            referenc = v 
        if r.ramo.ramo_code == 1:
            form = Life.objects.filter(policy = r.id)
            if form:
                try:
                    if form:
                        value = form[0].personal.full_name
                    else:
                        value = ''
                except Exception as rt:
                   value = ''
            else:
               value = ''
        elif r.ramo.ramo_code == 2:
            form = AccidentsDiseases.objects.filter(policy = r.id)
            if form:
                value = form[0].personal.full_name
            else:
                value = ''
        elif r.subramo.subramo_code == 9:
            form = AutomobilesDamages.objects.filter(policy = r.id)
            if form:
                try:
                    form[0].model = ((((((form[0].model).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    form[0].version = ((((((form[0].version).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                except Exception as ers:
                    form[0].model = form[0].model
                    form[0].version = form[0].version
                value = str(form[0].brand) + '-' + str(form[0].model) + '-' + str(form[0].version)+ '-' + str(form[0].serial)
            else:
                value = ''
        elif r.ramo.ramo_code == 3 and not r.subramo.subramo_code == 9:
            form = Damages.objects.filter(policy = r.id)
            if form:
                value = form[0].insured_item
            else:
                value = ''
        if r.contractor:
            contratan = ((((((r.contractor.full_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
            contratanE = r.contractor.email
            contratanP = r.contractor.phone_number
            contratanG = ((((((r.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')   
            try:
                if r.contractor.group.type_group == 1:
                    contratanG = ((((((r.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    grupo1_ = ''
                    grupo2_ = ''
                elif r.contractor.group.type_group == 2:
                    grupotype1 = Group.objects.get(pk = r.contractor.group.parent.id)
                    contratanG = ((((((grupotype1.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    grupo1_ = ((((((r.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    grupo2_ = ''
                elif r.contractor.group.type_group == 3:
                    grupotype1 = Group.objects.get(pk = r.contractor.group.parent.parent.id)
                    contratanG = ((((((grupotype1.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    subgrupotype2 = Group.objects.get(pk = r.contractor.group.parent.id)
                    grupo1_ = ((((((subgrupotype2.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    grupo2_ = ((((((r.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
            except Exception as e:
                contratanG = ''
                grupo1_ = ''
                grupo2_ = ''
            try:
                if r.groupinglevel:
                    if r.groupinglevel.type_grouping == 1:
                        nivelAg_ = ((((((r.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        grupo3_ = ''
                        grupo4_ = ''
                    elif r.groupinglevel.type_grouping == 2:
                        grupotype1 = GroupingLevel.objects.get(pk = r.groupinglevel.parent.id)
                        nivelAg_ = ((((((grupotype1.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        grupo3_ = ((((((r.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        grupo4_ = ''
                    elif r.groupinglevel.type_grouping == 3:
                        grupotype1 = GroupingLevel.objects.get(pk = r.groupinglevel.parent.parent.id)
                        nivelAg_ = ((((((grupotype1.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        subgrupotype2 = GroupingLevel.objects.get(pk = r.groupinglevel.parent.id)
                        grupo3_ = ((((((subgrupotype2.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        grupo4_ = ((((((r.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                else:
                    nivelAg_ = ''
                    grupo3_ = ''
                    grupo4_ = ''  
            except Exception as e:
                nivelAg_ = ''
                grupo3_ = ''
                grupo4_ = ''  
            if r.contractor.classification:
                clasifica_ = r.contractor.classification.classification_name  
            else:
                clasifica_='-----'
            if r.celula:
                cel = r.celula.celula_name  
            else:
                cel='-----'
         
        if r.clave:
            try:
                cve = r.clave.name + ' '+ str(r.clave.clave)
                cve = ((((((cve).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
            except Exception as fds:
                cve = ''
        else:
            cve = ''
        if value:
            value = ((((((value).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'') 
        else:
            value = value
        clave.append(cve)
        contratante.append(contratan)
        contratanteE.append(contratanE)
        contratanteP.append(contratanP)
        contratanteG.append(contratanG)
        asegurado.append(value)
        referenciador.append(referenc)
        antiguedad.append(antig)
        creadopor.append(val_owner)
        # ---
        grupo1.append(grupo1_)
        grupo2.append(grupo2_)
        nivelAg.append(nivelAg_)
        grupo3.append(grupo3_)
        grupo4.append(grupo4_)
        clasifica.append(clasifica_)
        businessLine.append(businessLine_)
        celulaC.append(cel)
        edocir.append(valstate)
        # ----
    obj = {
        'seguimiento'   : str(list(seguimiento)),
        'document_type'   : str(list(order_polizas.values_list('document_type', flat = True))),
        'poliza_number'   : str(list(order_polizas.values_list('poliza_number', flat = True))),
        'contratante'   : str(list(contratante)),
        'contratanteE'   : str(list(contratanteE)),
        'contratanteP'   : str(list(contratanteP)),
        'aseguradora__compania'   : str(list(order_polizas.values_list('aseguradora__alias', flat = True))),
        'subramo__subramo_name'   : str(list(order_polizas.values_list('subramo__subramo_name', flat = True))),
        'forma_de_pago'   : str(list(order_polizas.values_list('forma_de_pago', flat = True))),
        'status'   : str(list(order_polizas.values_list('status', flat = True))),
        'start_of_validity'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in order_polizas.values_list('start_of_validity', flat = True) ])) ,
        'end_of_validity'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in order_polizas.values_list('end_of_validity', flat = True) ])) ,
        'f_currency'   : str(list(order_polizas.values_list('f_currency', flat = True))),
        'p_neta'   : str(list(order_polizas.values_list('p_neta', flat = True))),
        'rpf'   : str(list(order_polizas.values_list('rpf', flat = True))),
        'derecho'   : str(list(order_polizas.values_list('derecho', flat = True))),
        'iva'   : str(list(order_polizas.values_list('iva', flat = True))),
        'p_total'   : str(list(order_polizas.values_list('p_total', flat = True))),
        'comision'   : str(list(order_polizas.values_list('comision', flat = True))),
        'clave__clave'   : str(list(clave)),
        '_id'   : str(list(order_polizas.values_list('id', flat = True))),
        'observations'   : str(list([(((((((x).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')) if x else '' for x in order_polizas.values_list('observations', flat = True)])),
        'owner__first_name'   : str(list(order_polizas.values_list('owner__first_name', flat = True))),
        'owner__last_name'   : str(list(order_polizas.values_list('owner__last_name', flat = True))),
        'created_at'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in order_polizas.values_list('created_at', flat = True) ]))  ,        
        'contratanteG'   : str(list(contratanteG)) ,
        'dateCancel'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in order_polizas.values_list('date_cancel', flat = True) ])) ,
        'grupo1'   : str(list(grupo1)) ,
        'grupo2'   : str(list(grupo2)) ,
        'nivelAg'   : str(list(nivelAg)) ,
        'grupo3'   : str(list(grupo3)) ,
        'grupo4'   : str(list(grupo4)) ,
        'clasifica'   : str(list(clasifica)) ,
        'businessLine'   : str(list(businessLine)) , 
        'celula'   : str(list(celulaC)) , 
        'sucursal__sucursal_name'   : str(list(order_polizas.values_list('sucursal__sucursal_name', flat = True))),
        'asegurado'   : str(list(asegurado)),
        'referenciador'   : str(list(referenciador)),
        'antiguedad'   : str(list(antiguedad)),
        'creadopor'   : str(list(creadopor)),
        'estadoc'   : str(list(edocir)),
        'ownercancel':str(list(ownercancel)),
        'tipo_reporte': ' ',
        'email_org':info_org['email'],
        'phone_org':info_org['phone'],
        'webpage_org':info_org['webpage'],
        'address_org':info_org['address'],
        'campo_celula':campo_celula,
        'campo_agrupacion':campo_agrupacion,
        'campo_lineanegocio':campo_lineanegocio,
        'urlname_org':info_org['name'],
        } 
    obj['columns'] = str(list(columns))
    obj['imagen'] = archivo_imagen
    obj['valueCom'] = valueCom
    obj['registros'] = len(order_polizas)
    obj['verReferenciadores'] = verReferenciadores
    obj['moduleName'] = moduleName

    
    r = requests.post(settings.SERVICEEXCEL_URL + 'get-PolicyExcel/', obj,
    # headers = {
    # 'Authorization':'Bearer %s'%request.user.user_info.fi_token_refresh,
    # # 'Content-Type':'application/json' 
    # }, 
    stream=True)
    response_data= r.text

    response = HttpResponse(r.content,content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

    return response
# Reporte Renovaciones listado
@api_view(['GET'])
@permission_classes((IsAuthenticatedV2, RenovacionesReportesPermissionsV2, IsOrgMemberV2))
def Service_RenovacionesExcel(request):
    valueCom = True
    try:
        valueCom = comisions(request)
    except Exception as ers:
        valueCom =  True
    subramo = request.GET.getlist('subramo',0)
    ramo = request.GET.getlist('ramo',0)
    aseguradora = request.GET.getlist('provider',0)
    payment = int(request.GET.get('payment'))
    contratante = request.GET.get('contratante')
    tipo_poliza = request.GET.get('tipo_poliza')
    group = request.GET.get('grupo')
    status = int(request.GET.get('status'))
    type_person = request.GET.get('type_contractor')
    order = int(request.GET.get('order'))
    asc = int(request.GET.get('asc'))        
    renovadas = int(request.GET.get('renovadas'))
    # --------****
    subgrupo = request.GET.get('subgrupo')
    subsubgrupo = request.GET.get('subsubgrupo')
    nivelagrupacion = request.GET.get('groupinglevel')
    subnivel = request.GET.get('subgrupinglevel')
    subsubnivel = request.GET.get('subsubgrupinglevel')

    clasificacion = request.GET.get('classification')
    bsLine = request.GET.get('businessLine')
    celula = request.GET.get('celula')
    # ------------
    since = request.GET.get('since')
    until = request.GET.get('until')
    try:
        onlyCaratula = int(request.GET.get('only_caratula'))
    except:
        onlyCaratula = 0
    if subramo == 0 or (len(subramo) == 1 and subramo[0] == '0'):
        subramo = list(SubRamos.objects.filter(org_name = request.GET.get('org')).distinct('subramo_code').values_list('subramo_code', flat=True))
    if ramo == 0 or (len(ramo) == 1 and ramo[0] == '0'):
        ramo = list(Ramos.objects.filter(org_name = request.GET.get('org')).distinct('ramo_code').values_list('ramo_code', flat=True))                
    if aseguradora == 0 or (len(aseguradora) == 1 and aseguradora[0] == '0'):
        aseguradora = list(Provider.objects.filter(org_name = request.GET.get('org')).values_list('pk', flat=True))


    if int(payment) > 0:
        fp = [int(payment)]
    else:
        fp = [12,24,6,5,4,3,2,1,14,7,15]

    if int(status) > 0:
        status = [int(status)]
    else:
        status = list([1,2,4,10,11,12,13,14,15]) 

    
    if int(tipo_poliza) == 0:
        tipo_poliza = [1,3,11,12]
    else:
        tipo_poliza = [tipo_poliza]

    if int(group) > 0:
        grupos1 = Group.objects.get(pk = int(group))
        subg = Group.objects.filter(parent__id = int(group), type_group = 2, org_name=request.GET.get('org')).values_list('pk', flat=True)
        subsubg = Group.objects.filter(parent__id__in = subg, type_group = 3, org_name=request.GET.get('org')).values_list('pk', flat=True)
        allgrupos = list(subg) + list(subsubg)
        allgrupos.append(grupos1.id)
        grupos = Group.objects.filter(pk__in = allgrupos, org_name=request.GET.get('org'))
    else:
            grupos = Group.objects.filter(org_name=request.GET.get('org'))

    if int(subgrupo) > 0:
            subg = Group.objects.get(pk = int(subgrupo), org_name=request.GET.get('org'))
            subsubg = Group.objects.filter(parent__id = int(subgrupo), type_group = 3, org_name=request.GET.get('org')).values_list('pk', flat=True)
            allgrupos =list(subsubg)
            allgrupos.append(subg.id)
            grupos = Group.objects.filter(pk__in = allgrupos, org_name=request.GET.get('org'))
    # else:
    #       grupos = Group.objects.filter(org_name=request.GET.get('org'))
    if int(subsubgrupo) > 0:
            grupos = Group.objects.get(pk = int(subsubgrupo), org_name=request.GET.get('org'))
    # else:
    #       grupos = Group.objects.filter(org_name = request.GET.get('org'))
    
    # --------------
    if int(clasificacion) > 0:
        clasifics = Classification.objects.get(pk = int(clasificacion), org_name=request.GET.get('org'))
    else:
        clasifics = Classification.objects.filter(org_name=request.GET.get('org')) 

    try:
        f = "%d/%m/%Y %H:%M:%S"        
        since = datetime.strptime(request.GET.get('since') , f)
        until = datetime.strptime(request.GET.get('until') , f)
    except:
        f = "%m/%d/%Y %H:%M:%S"        
        since = datetime.strptime(request.GET.get('since') , f)
        until = datetime.strptime(request.GET.get('until') , f)

    date_filters = [Q(end_of_validity__gte=since),Q(end_of_validity__lte = until)]

    # polizas = Polizas.objects.filter(org_name=request.GET.get('org'),
    #                                   ramo__in = ramo, 
    #                                   subramo__in = subramo, 
    #                                   forma_de_pago__in = fp,
    #                                   aseguradora__in = aseguradora,
    #                                   status__in = status,
    #                                   document_type__in = list([1,3]),
    #                                   renewed_status=1)
    # renewed_status = 0,
    if renovadas == 1:
        polizas = Polizas.objects.filter(org_name=request.GET.get('org'),
                                      ramo__ramo_code__in = ramo, 
                                      subramo__subramo_code__in = subramo, 
                                      forma_de_pago__in = fp,
                                      aseguradora__in = aseguradora,
                                      status = 12,
                                      # renewed_status__in = list([1]),
                                      document_type__in = list(tipo_poliza),
                                      renewed_status__in=[1],
                                      # is_renewable = 1
                                      )
    else:
        polizas = Polizas.objects.filter(org_name=request.GET.get('org'),
                                      ramo__ramo_code__in = ramo, 
                                      subramo__subramo_code__in = subramo, 
                                      forma_de_pago__in = fp,
                                      aseguradora__in = aseguradora,
                                      status__in = list([14,13,10]),
                                      document_type__in = list(tipo_poliza),
                                      is_renewable = 1
                                      )
                                      

    
    # polizas = polizas.filter(reduce(operator.and_,date_filters))
    # ---------------------------------------------------------------
    if order == 1:
        if asc == 1:
            polizas = polizas.filter(reduce(operator.and_,date_filters),org_name = request.GET.get('org')).order_by('poliza_number')
        else:
            polizas = polizas.filter(reduce(operator.and_,date_filters), org_name = request.GET.get('org')).order_by('-poliza_number')
    
    elif order == 2:
        if asc == 1:
            polizas = polizas.filter(reduce(operator.and_,date_filters), org_name = request.GET.get('org')).order_by('contractor__full_name')
        else:
            polizas = polizas.filter(reduce(operator.and_,date_filters), org_name = request.GET.get('org')).order_by('-contractor__full_name')
    
    elif order == 3:
        if asc == 1:
            polizas = polizas.filter(reduce(operator.and_,date_filters), org_name = request.GET.get('org')).order_by('document_type')
        else:
            polizas = polizas.filter(reduce(operator.and_,date_filters), org_name = request.GET.get('org')).order_by('-document_type')
    
    elif order == 4:
        if asc == 1:
            polizas = polizas.filter(reduce(operator.and_,date_filters), org_name = request.GET.get('org')).order_by('aseguradora__compania')
        else:
            polizas = polizas.filter(reduce(operator.and_,date_filters), org_name = request.GET.get('org')).order_by('-aseguradora__compania')
    
    elif order == 5:
        if asc == 1:
            polizas = polizas.filter(reduce(operator.and_,date_filters), org_name = request.GET.get('org')).order_by('paquete__package_name')
        else:
            polizas = polizas.filter(reduce(operator.and_,date_filters), org_name = request.GET.get('org')).order_by('-paquete__package_name')

    elif order == 6:
        if asc == 1:
            polizas = polizas.filter(reduce(operator.and_,date_filters), org_name = request.GET.get('org')).order_by('subramo__subramo_name')
        else:
            polizas = polizas.filter(reduce(operator.and_,date_filters), org_name = request.GET.get('org')).order_by('-subramo__subramo_name')
    
    elif order == 7:
        if asc == 1:
            polizas = polizas.filter(reduce(operator.and_,date_filters), org_name = request.GET.get('org')).order_by('start_of_validity')
        else:
            polizas = polizas.filter(reduce(operator.and_,date_filters), org_name = request.GET.get('org')).order_by('-start_of_validity')

    elif order == 8:
        if asc == 1:
            polizas = polizas.filter(reduce(operator.and_,date_filters), org_name = request.GET.get('org')).order_by('end_of_validity')
        else:
            polizas = polizas.filter(reduce(operator.and_,date_filters), org_name = request.GET.get('org')).order_by('-end_of_validity')

    elif order == 9:
        if asc == 1:
            polizas = polizas.filter(reduce(operator.and_,date_filters), org_name = request.GET.get('org')).order_by('forma_de_pago')
        else:
            polizas = polizas.filter(reduce(operator.and_,date_filters), org_name = request.GET.get('org')).order_by('-forma_de_pago')

    elif order == 10:
        if asc == 1:
            polizas = polizas.filter(reduce(operator.and_,date_filters), org_name = request.GET.get('org')).order_by('status')
        else:
            polizas = polizas.filter(reduce(operator.and_,date_filters), org_name = request.GET.get('org')).order_by('-status')
    else:
        polizas.filter(reduce(operator.and_,date_filters))

    try:
        if int(contratante) > 0:
            contratanten = list( Contractor.objects.filter(group = grupos, pk = int(contratante)).values_list('pk', flat = True) )
            polizas = polizas.filter(contractor__in = contratanten)

    except Exception as e:
        polizas = polizas
    if int(group) > 0:
        carat = polizas.filter(document_type__in = [1,3,11])
        carat = carat.filter(contractor__group = grupos).values_list('pk', flat = True)
        only_caratulas = Polizas.objects.filter(pk__in = carat,document_type = 11)
        pol = polizas.filter(document_type = 12, parent__in = only_caratulas).values_list('pk', flat = True)
        polizas = list(carat) + list(pol)
        polizas = Polizas.objects.filter(pk__in = polizas)
    
    # -----------------------------***********************************************-----------------------------------   
    if int(clasificacion) > 0 :
        polizas = polizas.filter(contractor__classification = clasifics)
    if int(celula) > 0:
         polizas = polizas.filter(celula = celula)


    gp = int(nivelagrupacion)
    gp1= int(subnivel)
    gp2 = int(subsubnivel)

    if gp > 0 or gp1 > 0 or gp2 > 0:

        if(nivelagrupacion == 0):
            nivelagrupacion = GroupingLevel.objects.filter(org_name = request.GET.get('org'), type_grouping = 1).values_list('pk', flat = True)
        else :
            nivelagrupacion = GroupingLevel.objects.filter(id = nivelagrupacion).values_list('pk', flat = True)



        if(subnivel == 0):
            subnivel = GroupingLevel.objects.filter(org_name = request.GET.get('org'), type_grouping = 2, parent__in = list(nivelagrupacion)).values_list('pk', flat = True)
        else :
            subnivel = GroupingLevel.objects.filter(id = subnivel).values_list('pk', flat = True)

 

        if(subsubnivel == 0):
            subsubnivel = GroupingLevel.objects.filter(org_name = request.GET.get('org'), type_grouping = 3, parent__in = list(subnivel)).values_list('pk', flat = True)
        else :
            subsubnivel = GroupingLevel.objects.filter(id = subsubnivel).values_list('pk', flat = True)


        niveles = list(subsubnivel) + list(subnivel) + list(nivelagrupacion)


        polizas = polizas.filter(groupinglevel__in = niveles)



    if int(bsLine) > 0:
        if int(bsLine) == 3:
            polizas = polizas.filter(business_line = 0) 
        else:
            polizas = polizas.filter(business_line = bsLine)

    if onlyCaratula != 0:
        polizas = polizas.filter(Q(pk=onlyCaratula) | Q(parent__id=onlyCaratula), Q(document_type__in = list([11,12])),)
    # -----------------------------***********************************************-----------------------------------
    try:
        dataToFilter = getDataForPerfilRestricted(request, request.GET.get('org'))
    except Exception as er:
        dataToFilter = {}
    if dataToFilter:
        # Contratantes***
        polizasToF = polizas.filter(document_type__in = [1,3,11], org_name = request.GET.get('org'))
        if dataToFilter['ccpr']:
            polizasToF = polizasToF.filter(contractor__in = list(dataToFilter['ccpr']))
        if dataToFilter['cgpr']:
            polizasToF = polizasToF.filter(contractor__group__in = list(dataToFilter['cgpr']))
        if dataToFilter['ccepr']:
            polizasToF = polizasToF.filter(contractor__cellule__in = list(dataToFilter['ccepr']))
        if dataToFilter['crpr']:
            polizasToF = polizasToF.filter(contractor__vendor__in = list(dataToFilter['crpr']))
        if dataToFilter['cspr']:
            polizasToF = polizasToF.filter(contractor__sucursal__in = list(dataToFilter['cspr']))
        # Pólizas ****
        if dataToFilter['pppr']:
            polizasToF = polizasToF.filter(pk__in = list(dataToFilter['pppr']))
        if dataToFilter['pgpr']:
            polizasToF = polizasToF.filter(contractor__group__in = list(dataToFilter['pgpr']))
        if dataToFilter['pcepr']:
            polizasToF = polizasToF.filter(celula__in = list(dataToFilter['pcepr']))
        if dataToFilter['prpr']:
            polizasToF = polizasToF.filter(ref_policy__referenciador__in = list(dataToFilter['prpr']))
        if dataToFilter['pspr']:
            polizasToF = polizasToF.filter(sucursal__in = list(dataToFilter['pspr']))
        if dataToFilter['papr']:
            polizasToF = polizasToF.filter(groupinglevel__in = list(dataToFilter['papr']))
        if dataToFilter['pcapr']:
            polizasToF = polizasToF.filter(clave__in = list(dataToFilter['pcapr']))
        if dataToFilter['psrpr']:
            polizasToF = polizasToF.filter(subramo__subramo_code__in = list(dataToFilter['psrpr']))
        if dataToFilter['paspr']:
            polizasToF = polizasToF.filter(aseguradora__in = list(dataToFilter['paspr']))
        if dataToFilter['pstpr']:
            polizasToF = polizasToF.filter(status__in = list(dataToFilter['pstpr']))
        
        polizasCT = polizas.filter(document_type = 12, parent__in = list(polizasToF))
        polizasGT = polizas.filter(document_type = 6, parent__parent__parent__in = list(polizasToF))
        polizasFin = list(polizasToF.values_list('pk', flat = True)) + list(polizasCT.values_list('pk', flat = True)) + list(polizasGT.values_list('pk', flat = True))
        polizas = polizas.filter(pk__in = list(polizasFin))

    info_org = getInfoOrg(request)
    if len(info_org['logo']) != 0:
        archivo_imagen = 'https://miurabox-public.s3.amazonaws.com/cas/' + info_org['logo']
        # archivo_imagen = get_presigned_url("cas/{url}".format(url=info_org['logo']),28800) 
    else:
            archivo_imagen = 'saam.jpg'

    columns = ['Tipo', 'No.Póliza', 'Contratante', 'Email', 'Teléfono', 'Proveedor', 'Subramo', 'Forma de Pago', 'Estatus', 
               'Inicio Póliza', 'Fin Póliza', 'Moneda', 'Prima Neta', 'RPF', 'Derecho', 'IVA', 'Prima Total','Comisión',
               'Clave', 'Asegurado', 'Observaciones', 'Referenciador', 'Fecha de creación', 'Creado por', 'Fecha renovación','Estatus de la Renovación','Sucursal']
    asegurado = []
    antiguedad = []
    referenciador = []
    creadopor = []
    dateRen = []
    contratante = []
    contratanteE = []
    contratanteP = []
    contratanteG = []
    clave = []
    # -------------------
    grupo1 = []
    grupo2 = []
    nivelAg = []
    grupo3 = []
    grupo4 = []
    clasifica = []
    businessLine = []
    clave = []
    celulaC = []
    status_poliza = []
    # -----------------------
    polizas = polizas.order_by('id')
    verReferenciadores = is_perm_ver_referenciadores(request)
    for r in polizas:
        statusr = checkStatusPolicy(r.status)
        valR = False
        if OldPolicies.objects.filter(base_policy__id = r.id, new_policy__status = 1).exists():
            valR = True
        if r.org_name == 'ancora':
            if r.status==13 and r.is_renewable==1 or (r.renewed_status ==2 and r.status ==13):
                statusr = statusr+' -En Proceso de Renovación'
        antig = get_antiguedad(r.start_of_validity)
        if r.business_line:
            if int(r.business_line) ==1:
                businessLine_ = 'Comercial'
            elif int(r.business_line) ==2:
                businessLine_ = 'Personal'
            elif int(r.business_line) ==0:
                businessLine_ = 'Otro'
            else:
                businessLine_ = ''
        else:
            if r and r. business_line and int(r.business_line) ==0:
                businessLine_ = 'Otro'
            else:
                businessLine_ = ''
        if r.owner:
            val_owner = r.owner.first_name + ' '+ str(r.owner.last_name)
        else:
            val_owner = ''
        if renovadas == 1:
            old = OldPolicies.objects.filter(base_policy__id = r.id)
            try:
              date_renovacion = old[0].created_at.strftime("%d/%m/%Y")
            except Exception as rr:
                date_renovacion = ''
        else:
            date_renovacion = 'Por renovar'
        try:
            refs_policy = ReferenciadoresInvolved.objects.filter(policy = r.id,is_changed=False).values_list('referenciador__first_name','referenciador__last_name')
            if len(refs_policy):
                v = []
                try:
                    for it in refs_policy:
                        v.append(it[0] +' '+ str(it[1])+str('; '))
                    referenc = v
                except Exception as y:
                    v = []
                    referenc = []
            else:
                v = []
                referenc = []
        except Exception as e:
            v = []
            referenc = []
        if r.ramo.ramo_code == 1:
            form = Life.objects.filter(policy = r.id)
            try:
                if form:
                    value = form[0].personal.full_name
                else:
                    value = ''
            except Exception as rt:
               value = ''
        elif r.ramo.ramo_code == 2:
            form = AccidentsDiseases.objects.filter(policy = r.id)
            if form:
                value = form[0].personal.full_name
            else:
                value = ''
        elif r.subramo.subramo_code == 9:
            form = AutomobilesDamages.objects.filter(policy = r.id)
            if form:
                try:
                    form[0].model = ((((((form[0].model).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    form[0].version = ((((((form[0].version).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                except Exception as ers:
                    form[0].model = form[0].model
                    form[0].version = form[0].version
                value = str(form[0].brand) + '-' + str(form[0].model) + '-' + str(form[0].version)+ '-' + str(form[0].serial)
            else:
                value = ''
        elif r.ramo.ramo_code == 3 and not r.subramo.subramo_code == 9:
            form = Damages.objects.filter(policy = r.id)
            if form:
                value = form[0].insured_item
            else:
                value = ''
        if r.contractor:
            contratan = ((((((r.contractor.full_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
            contratanE = r.contractor.email
            contratanP = r.contractor.phone_number
            if r.contractor.classification:
                clasifica_ = r.contractor.classification.classification_name
            else:
                clasifica_=''
            if r.celula:
                cel = r.celula.celula_name
            else:
                cel=''
            # contratanG = ((((((r.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')     
            try:
                if r.contractor.group.type_group == 1:
                    contratanG = ((((((r.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    grupo1_ = ''
                    grupo2_ = ''
                elif r.contractor.group.type_group == 2:
                    grupotype1 = Group.objects.get(pk = r.contractor.group.parent.id)
                    contratanG = ((((((grupotype1.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    grupo1_ = ((((((r.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    grupo2_ = ''
                elif r.contractor.group.type_group == 3:
                    grupotype1 = Group.objects.get(pk = r.contractor.group.parent.parent.id)
                    contratanG = ((((((grupotype1.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    subgrupotype2 = Group.objects.get(pk = r.contractor.group.parent.id)
                    grupo1_ = ((((((subgrupotype2.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    grupo2_ = ((((((r.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
            except Exception as e:
                contratanG = ''
                grupo1_ = ''
                grupo2_ = ''
            try:
                if r.groupinglevel:
                    if r.groupinglevel.type_grouping == 1:
                        nivelAg_ = ((((((r.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        grupo3_ = ''
                        grupo4_ = ''
                    elif r.groupinglevel.type_grouping == 2:
                        grupotype1 = GroupingLevel.objects.get(pk = r.groupinglevel.parent.id)
                        nivelAg_ = ((((((grupotype1.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        grupo3_ = ((((((r.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        grupo4_ = ''
                    elif r.groupinglevel.type_grouping == 3:
                        grupotype1 = GroupingLevel.objects.get(pk = r.groupinglevel.parent.parent.id)
                        nivelAg_ = ((((((grupotype1.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        subgrupotype2 = GroupingLevel.objects.get(pk = r.groupinglevel.parent.id)
                        grupo3_ = ((((((subgrupotype2.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        grupo4_ = ((((((r.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                else:
                    nivelAg_ = ''
                    grupo3_ = ''
                    grupo4_ = ''  
            except Exception as e:
                nivelAg_ = ''
                grupo3_ = ''
                grupo4_ = '' 
            # ---
            # contratanG = r.natural.group.group_name
        else:
            contratan = ''
            contratanE = ''
            contratanP = ''
            clasifica_=''
            cel=''
            contratanG = ''
            grupo1_ = ''
            grupo2_ = ''
            nivelAg_ = ''
            grupo3_ = ''
            grupo4_ = ''  
        if r.clave:
            try:
                cve = r.clave.name + ' '+str(r.clave.clave)
                cve = ((((((cve).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')            
            except Exception as dsad:
                cve =''
        else:
            cve = ''
        if value:
            value = ((((((value).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'') 
        else:
            value = value
        clave.append(cve)
        contratante.append(contratan)
        contratanteE.append(contratanE)
        contratanteP.append(contratanP)
        contratanteG.append(contratanG)
        asegurado.append(value)
        dateRen.append(date_renovacion)
        referenciador.append(referenc)
        antiguedad.append(antig)
        creadopor.append(val_owner)
        grupo1.append(grupo1_)
        grupo2.append(grupo2_)
        nivelAg.append(nivelAg_)
        grupo3.append(grupo3_)
        grupo4.append(grupo4_)
        clasifica.append(clasifica_)
        businessLine.append(businessLine_)
        celulaC.append(cel)
        status_poliza.append(statusr)
        # ----
    obj = {
        'document_type'   : str(list(polizas.values_list('document_type', flat = True))),
        'poliza_number'   : str(list(polizas.values_list('poliza_number', flat = True))),
        'aseguradora__compania'   : str(list(polizas.values_list('aseguradora__alias', flat = True))),
        'subramo__subramo_name'   : str(list(polizas.values_list('subramo__subramo_name', flat = True))),
        'forma_de_pago'   : str(list(polizas.values_list('forma_de_pago', flat = True))),
        'status'   : str(list(status_poliza)),
        'start_of_validity'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in polizas.values_list('start_of_validity', flat = True) ])) ,
        'end_of_validity'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in polizas.values_list('end_of_validity', flat = True) ])) ,
        'f_currency'   : str(list(polizas.values_list('f_currency', flat = True))),
        'p_neta'   : str(list(polizas.values_list('p_neta', flat = True))),
        'rpf'   : str(list(polizas.values_list('rpf', flat = True))),
        'derecho'   : str(list(polizas.values_list('derecho', flat = True))),
        'iva'   : str(list(polizas.values_list('iva', flat = True))),
        'p_total'   : str(list(polizas.values_list('p_total', flat = True))),
        'comision'   : str(list(polizas.values_list('comision', flat = True))),
        'clave__clave'   : str(list(clave)),
        '_id'   : str(list(polizas.values_list('id', flat = True))),
        'observations'   : str(list([(((((((x).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')) if x else '' for x in polizas.values_list('observations', flat = True)])),
        'owner__first_name'   : str(list(polizas.values_list('owner__first_name', flat = True))),
        'owner__last_name'   : str(list(polizas.values_list('owner__last_name', flat = True))),
        'created_at'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in polizas.values_list('created_at', flat = True) ]))  ,
        'clave__name'   : str(list(polizas.values_list('clave__name', flat = True))),
        'contratante'   : str(list(contratante)),
        'contratanteE'   : str(list(contratanteE)),
        'contratanteP'   : str(list(contratanteP)),
        'contratanteG'   : str(list(contratanteG)) ,
        'celula'   : str(list(celulaC)) ,
        'grupo1'   : str(list(grupo1)) ,
        'grupo2'   : str(list(grupo2)) ,
        'nivelAg'   : str(list(nivelAg)) ,
        'grupo3'   : str(list(grupo3)) ,
        'grupo4'   : str(list(grupo4)) ,
        'clasifica'   : str(list(clasifica)) ,
        'businessLine'   : str(list(businessLine)) ,
        'sucursal__sucursal_name'   : str(list(polizas.values_list('sucursal__sucursal_name', flat = True))),
        'renewed_status': str(list(polizas.values_list('renewed_status', flat = True))),
        'dateRen'   : str(list(dateRen)),
        'asegurado'   : str(list(asegurado)),
        'referenciador'   : str(list(referenciador)),
        'antiguedad'   : str(list(antiguedad)),
        'creadopor'   : str(list(creadopor)),
        'tipo_reporte': ' Renovaciones',
        'email_org':info_org['email'],
        'phone_org':info_org['phone'],
        'webpage_org':info_org['webpage'],
        'address_org':info_org['address'],
        'urlname_org':info_org['name'],
        }   
    
    campo_celula, campo_agrupacion, campo_lineanegocio, moduleName = getOrgInfo(request)
    obj['columns'] = str(list(columns))
    obj['imagen'] = archivo_imagen
    obj['valueCom'] = valueCom
    obj['verReferenciadores'] = verReferenciadores
    obj['registros'] = len(polizas)
    obj['moduleName'] = moduleName
    r = requests.post(settings.SERVICEEXCEL_URL + 'get-RenovacionesExcel/', obj,
    # headers = {
    # 'Authorization':'Bearer %s'%request.user.user_info.fi_token_refresh,
    # # 'Content-Type':'application/json' 
    # }, 
    stream=True)
    response_data= r.text

    response = HttpResponse(r.content,content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

    return response
def get_full_name(form):
    return form[0].personal.full_name if form else ''

def get_automobile_details(form):
    try:
        model = clean_string(form[0].model)
        version = clean_string(form[0].version)
    except Exception:
        model = form[0].model
        version = form[0].version
        
    return str(form[0].brand) + '-' + model + '-' + version + '-' + str(form[0].serial)

def clean_text(description):
    return description.replace('[', '').replace(']', '').replace(",", '').replace(".", '').replace("'", '')
def get_org_name(request):
    return request.GET.get('org')

def get_group_ids(group_id, org_name, type_group=None):
    if type_group:
        return Group.objects.filter(parent__id=group_id, type_group=type_group, org_name=org_name).values_list('pk', flat=True)
    return Group.objects.filter(parent__id=group_id, org_name=org_name).values_list('pk', flat=True)

def fetch_groups(group, subgrupo, subsubgrupo, org_name):
    all_groups = []
    
    if int(group) > 0:
        grupos1 = Group.objects.get(pk=int(group))
        subg = get_group_ids(int(group), org_name, type_group=2)
        subsubg = get_group_ids(subg, org_name, type_group=3)
        all_groups = list(subg) + list(subsubg)
        all_groups.append(grupos1.id)
        grupos = Group.objects.filter(pk__in=all_groups, org_name=org_name)
    else:
        grupos = Group.objects.filter(org_name=org_name)

    if int(subgrupo) > 0:
        subg = Group.objects.get(pk=int(subgrupo), org_name=org_name)
        subsubg = get_group_ids(int(subgrupo), org_name, type_group=3)
        all_groups = list(subsubg)
        all_groups.append(subg.id)
        grupos = Group.objects.filter(pk__in=all_groups, org_name=org_name)

    if int(subsubgrupo) > 0:
        grupos = Group.objects.get(pk=int(subsubgrupo), org_name=org_name)

    return grupos
def get_classification(clasificacion, org_name):
    try:
        clasificacion = int(clasificacion)
        if clasificacion > 0:
            return Classification.objects.get(pk=clasificacion, org_name=org_name)
    except (ValueError, TypeError):
        pass 
    return Classification.objects.filter(org_name=org_name)

def get_tipo_poliza(tipo_poliza):
    tipo_poliza = int(tipo_poliza)
    if tipo_poliza == 0:
        return [1, 3, 7, 8, 11, 12]
    elif tipo_poliza == 1:
        return [1, 7]
    elif tipo_poliza == 3:
        return [3, 8]
    return [tipo_poliza]

def get_providers(provider, org_name):
    if int(provider) > 0:
        return list(Provider.objects.filter(pk=int(provider)).values_list('pk', flat=True))
    return list(Provider.objects.filter(org_name=org_name).values_list('pk', flat=True))

def get_vendors_ok(vendedor, org_name):
    if int(vendedor) > 0:
        return list(User.objects.filter(pk=int(vendedor)).values_list('pk', flat=True))
    return list(UserInfo.objects.filter(org_name=org_name).values_list('user', flat=True))

def get_ejecutivo_cobranza(collection_executive):
    if int(collection_executive) != 0:
        return list(User.objects.filter(pk=int(collection_executive)).values_list('pk', flat=True))
    return list(User.objects.values_list('pk', flat=True))

def get_ramos(ramo, org_name, providers):
    if int(ramo) > 0:
        return list(Ramos.objects.filter(pk=int(ramo)).values_list('pk', flat=True))
    return list(Ramos.objects.filter(org_name=org_name, provider__in=providers).values_list('pk', flat=True))

def get_subramos(subramo, org_name, ramos):
    if int(subramo) > 0:
        return list(SubRamos.objects.filter(pk=int(subramo)).values_list('pk', flat=True))
    return list(SubRamos.objects.filter(org_name=org_name, ramo__in=ramos).values_list('pk', flat=True))

def get_filtered_ramos(ramos_sel, org_name, providers):
    if ramos_sel:
        return list(Ramos.objects.filter(org_name=org_name, provider__in=providers, ramo_code__in=ramos_sel).values_list('pk', flat=True))
    return list(Ramos.objects.filter(org_name=org_name, provider__in=providers).values_list('pk', flat=True))

def get_filtered_subramos(subramos_sel, org_name, ramos):
    if subramos_sel:
        return list(SubRamos.objects.filter(org_name=org_name, ramo__in=ramos, subramo_code__in=subramos_sel).values_list('pk', flat=True))
    return list(SubRamos.objects.filter(org_name=org_name, ramo__in=ramos).values_list('pk', flat=True))

def get_filtered_providers(providers_sel, org_name):
    if providers_sel:
        return list(Provider.objects.filter(pk__in=providers_sel).values_list('pk', flat=True))
    return list(Provider.objects.filter(org_name=org_name).values_list('pk', flat=True))

# Reporte Cobranza listado
@api_view(['POST'])
@permission_classes((IsAuthenticatedV2, IsOrgMemberV2))
def Service_CobranzaExcel(request):    
    valueCom = True
    try:
        valueCom = comisions(request)
    except Exception as ers:
        valueCom =  True
    provider = request.data['provider']
    number = request.data['status']
    tipo_poliza = request.data['tipo_poliza']
    try:
        order = int(request.data['order'])
        asc = int(request.data['asc'])
    except:
        order = 1
        asc = 1
    status = 0

    if 'polizas' in request.data:
        poliza_numero = request.data['polizas']
    else:
        poliza_numero = None

    if number == 1:
        status = 4
    elif number == 2:
        status = 1
    elif number == 3:
        status = 5
    elif number == 4:
        status = 2
    elif number == 5:
        status = 8

    ramo = request.data['ramo']
    subramo = request.data['subramo']   
    since = request.data['since']
    until = request.data['until']
    bsLine = request.data['businessLine']
    payment = request.data['payment']
    vendedor = int(request.data['vendedor'])
    collection_executive = int(request.data['ejecutivo'])
    ramos_sel = (request.data['ramos'])
    subramos_sel = (request.data['subramos'])
    providers_sel = (request.data['providers'])
    tipo_recibo = (request.data['tipo_recibo'])
    user_pay = (request.data['user_pay'])
    # 
    # --------****
    subgrupo = request.data['subgrupo']
    subsubgrupo = request.data['subsubgrupo']
    nivelagrupacion = request.data['groupinglevel']
    subnivel = request.data['subgrupinglevel']
    subsubnivel = request.data['subsubgrupinglevel']
    try:
        clasificacion = request.data['classification']
    except:
        clasificacion = 0
    celula = request.data['celula']

    try:
        onlyCaratula = int(request.data['only_caratula'])
    except:
        onlyCaratula = 0

    conducto_de_pago = request.data['conducto_de_pago']

    # --------****
    # Pagado por
    if (user_pay):
        users_pay = list(User.objects.filter(pk__in = (user_pay)).values_list('pk', flat=True))
    else:
        users_pay = list(User.objects.values_list('pk', flat=True))
    # FORMA_DE_PAGO = [12,3,6,12,24,4]
    if int(payment) > 0:
        fp = [int(payment)]
    else:
        fp = [12,24,6,5,4,3,2,1,7,14,15]

    type_contractor = request.data['type_contractor']
    contratante = request.data['contratante']
    group = request.data['grupo']

    org_name = get_org_name(request)  # Store the org_name for later use
    grupos = fetch_groups(group, subgrupo, subsubgrupo, org_name)
    org_name = get_org_name(request)

    clasifics = get_classification(clasificacion, org_name)
    tipo_poliza = get_tipo_poliza(tipo_poliza)
    providers = get_providers(provider, org_name)
    vendors = get_vendors_ok(vendedor, org_name)
    ejecutivo_cobranza = get_ejecutivo_cobranza(collection_executive)
    ramos = get_ramos(ramo, org_name, providers)
    subramos = get_subramos(subramo, org_name, ramos)
    ramos = get_filtered_ramos(ramos_sel, org_name, providers)
    subramos = get_filtered_subramos(subramos_sel, org_name, ramos)
    providers = get_filtered_providers(providers_sel, org_name)

    polizas = []
    fianzas = []
    try:
        contratante = int(contratante)
    except ValueError:
        contratante = 0
    if contratante > 0:
        contratante_c = list(Contractor.objects.filter(pk=contratante).values_list('pk', flat=True))
    else:
        contratante_c = list(Contractor.objects.filter(org_name=org_name).values_list('pk', flat=True))

    if vendedor == 0:
        polizas = Polizas.objects.exclude(status__in=[2, 0]).filter(
            forma_de_pago__in=fp,
            contractor__in=contratante_c,
            org_name=org_name,
            ramo__in=ramos,
            subramo__in=subramos,
            aseguradora__in=providers
        ).values_list('pk', flat=True)
    else:
        polizas = Polizas.objects.exclude(status__in=[2, 0]).filter(
            forma_de_pago__in=fp,
            contractor__in=contratante_c,
            org_name=org_name,
            ramo__in=ramos,
            subramo__in=subramos,
            aseguradora__in=providers,
            ref_policy__referenciador__id__in=[vendedor]
        ).values_list('pk', flat=True)

    if int(group) > 0:
        carat = polizas.filter(document_type__in=[1, 3, 11])
        carat = carat.filter(contractor__group=grupos).values_list('pk', flat=True)
        only_caratulas = Polizas.objects.filter(pk__in=carat, document_type=11)
        pol = polizas.filter(document_type=12, parent__in=only_caratulas).values_list('pk', flat=True)
        polizas = Polizas.objects.filter(pk__in=list(carat) + list(pol))

    if clasificacion and int(clasificacion) > 0:
        polizas = polizas.filter(contractor__classification=clasifics)

    if celula and int(celula) > 0:
        polizas = polizas.filter(celula = celula)

    if conducto_de_pago and int(conducto_de_pago) > 0:
        polizas = polizas.filter(conducto_de_pago = conducto_de_pago)

    gp = int(nivelagrupacion)
    gp1= int(subnivel)
    gp2 = int(subsubnivel)

    if gp > 0 or gp1 > 0 or gp2 > 0:

        if(nivelagrupacion == 0):
            nivelagrupacion = GroupingLevel.objects.filter(org_name = request.GET.get('org'), type_grouping = 1).values_list('pk', flat = True)
        else :
            nivelagrupacion = GroupingLevel.objects.filter(id = nivelagrupacion).values_list('pk', flat = True)



        if(subnivel == 0):
            subnivel = GroupingLevel.objects.filter(org_name = request.GET.get('org'), type_grouping = 2, parent__in = list(nivelagrupacion)).values_list('pk', flat = True)
        else :
            subnivel = GroupingLevel.objects.filter(id = subnivel).values_list('pk', flat = True)

 

        if(subsubnivel == 0):
            subsubnivel = GroupingLevel.objects.filter(org_name = request.GET.get('org'), type_grouping = 3, parent__in = list(subnivel)).values_list('pk', flat = True)
        else :
            subsubnivel = GroupingLevel.objects.filter(id = subsubnivel).values_list('pk', flat = True)


        niveles = list(subsubnivel) + list(subnivel) + list(nivelagrupacion)


        polizas = polizas.filter(groupinglevel__in = niveles)
    
    if int(bsLine) > 0:
        if int(bsLine) == 3:
            polizas = polizas.filter(business_line = 0) 
        else:
            polizas = polizas.filter(business_line = bsLine)
    # -----------------------------***********************************************-----------------------------------
    polizas = polizas.filter(document_type__in = tipo_poliza)

    query = []
    query_fianza = []
    # Filtro por númeero de poliza-fianza
    
    if poliza_numero:
        query.append(Q(poliza_number__icontains = poliza_numero))
        polizas = polizas.filter(reduce(OR, query))
    
    try:
        if collection_executive == 0:
            polizas = polizas
        else:
            polizas = polizas.filter(collection_executive__in = ejecutivo_cobranza)
    except Exception as e:
        polizas = polizas
    # MBX-2038
    if onlyCaratula != 0:
        polizas = polizas.filter(Q(pk=onlyCaratula) | Q(parent__id=onlyCaratula), Q(document_type__in = list([11,12])),)      
        try:
            if policies_obj_req:
                for p in policies_obj_req:
                    query.append(Q(poliza_number__icontains=policies_obj_req) | Q(parent__poliza_number__icontains=policies_obj_req))
                polizas = polizas.filter(reduce(OR, query))
        except:
            polizas = polizas
    bonos = Bonos.objects.filter(org_name = request.GET.get('org'), aseguradora__in = providers)
    parents = polizas.filter(document_type = 3)
    subgrupos = Polizas.objects.filter(parent__in = parents, document_type = 4, org_name = request.GET.get('org')).values_list('id', flat = True)

    polizas = list(polizas) + list(subgrupos)
    try:
        dataToFilter = getDataForPerfilRestricted(request, request.GET.get('org'))
    except Exception as er:
        dataToFilter = {}
    if dataToFilter:
        # Contratantes***
        polizasToF = Polizas.objects.filter(document_type__in = [1,3,11], pk__in = list(polizas), org_name = request.GET.get('org')).exclude(status = 0)
        polizasCol = Polizas.objects.filter(document_type__in = [12], pk__in = list(polizas), org_name = request.GET.get('org')).exclude(status = 0)
        polizasGCer = Polizas.objects.filter(document_type__in = [6], pk__in = list(polizas), org_name = request.GET.get('org')).exclude(status = 0)
        if dataToFilter['ccpr']:
            polizasToF = polizasToF.filter(contractor__in = list(dataToFilter['ccpr']))
        if dataToFilter['cgpr']:
            polizasToF = polizasToF.filter(contractor__group__in = list(dataToFilter['cgpr']))
        if dataToFilter['ccepr']:
            polizasToF = polizasToF.filter(contractor__cellule__in = list(dataToFilter['ccepr']))
        if dataToFilter['crpr']:
            polizasToF = polizasToF.filter(contractor__vendor__in = list(dataToFilter['crpr']))
        if dataToFilter['cspr']:
            polizasToF = polizasToF.filter(contractor__sucursal__in = list(dataToFilter['cspr']))
        # Pólizas ****
        if dataToFilter['pppr']:
            polizasToF = polizasToF.filter(pk__in = list(dataToFilter['pppr']))
        if dataToFilter['pgpr']:
            polizasToF = polizasToF.filter(contractor__group__in = list(dataToFilter['pgpr']))
        if dataToFilter['pcepr']:
            polizasToF = polizasToF.filter(celula__in = list(dataToFilter['pcepr']))
        if dataToFilter['prpr']:
            polizasToF = polizasToF.filter(ref_policy__referenciador__in = list(dataToFilter['prpr']))
        if dataToFilter['pspr']:
            polizasToF = polizasToF.filter(sucursal__in = list(dataToFilter['pspr']))
        if dataToFilter['papr']:
            polizasToF = polizasToF.filter(groupinglevel__in = list(dataToFilter['papr']))
        if dataToFilter['pcapr']:
            polizasToF = polizasToF.filter(clave__in = list(dataToFilter['pcapr']))
        if dataToFilter['psrpr']:
            polizasToF = polizasToF.filter(subramo__subramo_code__in = list(dataToFilter['psrpr']))
        if dataToFilter['paspr']:
            polizasToF = polizasToF.filter(aseguradora__in = list(dataToFilter['paspr']))
        if dataToFilter['pstpr']:
            polizasToF = polizasToF.filter(status__in = list(dataToFilter['pstpr']))
        
        polizasCT = polizasCol.filter(document_type = 12, parent__in = list(polizasToF))
        polizasGT = polizasGCer.filter(Q(parent__parent__parent__in = list(polizasToF)) | Q(parent__parent__in = list(polizasToF)),document_type__in = [6,4])
        polizasFin = list(polizasToF.values_list('pk', flat = True)) + list(polizasCT.values_list('pk', flat = True)) + list(polizasGT.values_list('pk', flat = True))
        fpol = Polizas.objects.filter(pk__in = list(polizas))
        polizas = fpol.filter(pk__in = list(polizasFin))
    # recibos = Recibos.objects.filter(isActive = True, isCopy = False , poliza__in = polizas)
    recibos = Recibos.objects.filter((Q(poliza__in = polizas) | Q(bono__in = bonos) ), isActive = True, isCopy = False).exclude(status__in = [0]).filter(receipt_type__in =[1,2,3,4])

    if user_pay:
        recibos = recibos.filter(user_pay__in = users_pay)

    try:
        f = "%d/%m/%Y %H:%M:%S"        
        since = datetime.strptime(since , f)
        until = datetime.strptime(until , f)
    except:
        f = "%m/%d/%Y %H:%M:%S"        
        since = datetime.strptime(since , f)
        until = datetime.strptime(until , f)

    date_filters = [Q(fecha_inicio__gte=since),Q(fecha_inicio__lte = until)]

    # recibos = recibos.filter(reduce(operator.and_,date_filters))       
    if order == 1:
        if asc == 1:
            recibos = recibos.filter(reduce(operator.and_, date_filters), org_name = request.GET.get('org')).order_by('receipt_type')
        else:
            recibos = recibos.filter(reduce(operator.and_, date_filters), org_name = request.GET.get('org')).order_by('-receipt_type')
    
    elif order == 2:
        if asc == 1:
            recibos = recibos.filter(reduce(operator.and_, date_filters), org_name = request.GET.get('org')).order_by('poliza__contractor__full_name')
        else:
            recibos = recibos.filter(reduce(operator.and_, date_filters), org_name = request.GET.get('org')).order_by('-poliza__contractor__full_name')
    
    elif order == 3:
        if asc == 1:
            recibos = recibos.filter(reduce(operator.and_, date_filters), org_name = request.GET.get('org')).order_by('poliza__poliza_number')
        else:
            recibos = recibos.filter(reduce(operator.and_, date_filters), org_name = request.GET.get('org')).order_by('-poliza__poliza_number')
    
    elif order == 4:
        if asc == 1:
            recibos = recibos.filter(reduce(operator.and_, date_filters), org_name = request.GET.get('org')).order_by('fecha_inicio')
        else:
            recibos = recibos.filter(reduce(operator.and_, date_filters), org_name = request.GET.get('org')).order_by('-fecha_inicio')
    
    elif order == 5:
        if asc == 1:
            recibos = recibos.filter(reduce(operator.and_, date_filters), org_name = request.GET.get('org')).order_by('poliza__aseguradora__compania')
        else:
            recibos = recibos.filter(reduce(operator.and_, date_filters), org_name = request.GET.get('org')).order_by('-poliza__aseguradora__compania')

    elif order == 6:
        if asc == 1:
            recibos = recibos.filter(reduce(operator.and_, date_filters), org_name = request.GET.get('org')).order_by('status')
        else:
            recibos = recibos.filter(reduce(operator.and_, date_filters), org_name = request.GET.get('org')).order_by('-status')
    
    elif order == 7:
        if asc == 1:
            recibos = recibos.filter(reduce(operator.and_, date_filters), org_name = request.GET.get('org')).order_by('prima_total')
        else:
            recibos = recibos.filter(reduce(operator.and_, date_filters), org_name = request.GET.get('org')).order_by('-prima_total')

    elif order == 8:
        if asc == 1:
            recibos = recibos.filter(reduce(operator.and_, date_filters), org_name = request.GET.get('org')).order_by('owner')
        else:
            recibos = recibos.filter(reduce(operator.and_, date_filters), org_name = request.GET.get('org')).order_by('-owner')
    elif order == 11:
        if asc == 1:
            recibos = recibos.filter(reduce(operator.and_, date_filters), org_name = request.GET.get('org')).order_by('promesa_pago')
        else:
            recibos = recibos.filter(reduce(operator.and_, date_filters), org_name = request.GET.get('org')).order_by('-promesa_pago')
    else:
        recibos = recibos.filter(reduce(operator.and_,date_filters))  

    if int(tipo_recibo)==1:
        recibos = recibos.filter(recibo_numero=1)
    if int(tipo_recibo)==2:
        recibos = recibos.filter(~Q(recibo_numero=1))

    recibos = recibos.filter(isCopy = False, isActive = True, status = status)
    # Empieza insertado de imagen
    info_org = getInfoOrg(request)

    if len(info_org['logo']) != 0:
        archivo_imagen = 'https://miurabox-public.s3.amazonaws.com/cas/' + info_org['logo']
        # archivo_imagen = get_presigned_url("cas/{url}".format(url=info_org['logo']),28800) 
    else:
        archivo_imagen = 'saam.jpg'

    if tipo_recibo == 2:
        tipo_reporte = "Reporte de Recibos Subsecuentes del " +str(since.strftime("%d/%m/%y")) +" al "+str(until.strftime("%d/%m/%y"))
    else:
       tipo_reporte = "Reporte de Recibos"

    # Sheet header, first row
    row_num = 10

    font_style = xlwt.XFStyle()
    font_style.font.bold = True

    verReferenciadores = is_perm_ver_referenciadores(request)
    columns = ['No.Póliza','No.Recibo','Estatus', 'Prima Neta', 'RPF', 'Derecho', 'IVA', 'Prima Total', 'Comisión', 
               'Fecha Inicio', 'Fecha Fin', 'Vencimiento', 'Conducto de Pago', 'Tipo', 'No.Póliza', 'No.Endoso', 
               'Contratante', 'Email', 'Teléfono', 'Aseguradora', 'Subramo', 'Forma de Pago', 'Estatus Póliza', 
               'Inicio Póliza', 'Fin Póliza', 'Clave', 'Asegurado', 'Referenciador','Ejecutivo Cobranza',
               'Folio Liquidación','Pagado por','Responsable','Creado por','Fecha Pago','Sucursal','Grupo','Célula',
               'POLIZA CON OT DE ENDOSO(S) EN TRAMITE','Fecha cancelación Recibo','Fecha cancelación Póliza']

    asegurado = []
    antiguedad = []
    referenciador = []
    responsable = []
    collection = []
    userpay = []
    creadopor = []
    contract = []
    contractE = []
    contractP = []
    contractG= []
    inicio = []
    fin = []
    aseguradora = []
    clave = []
    poliza_number = []
    inc = ''
    fn = ''
    aseg = ''
    cve = ''
    pnumber = ''
    subramo = []
    receipttype = []
    currency = []
    fc = 1

    grupo1 = []
    grupo2 = []
    nivelAg = []
    grupo3 = []
    grupo4 = []
    clasifica = []
    businessLine = []
    celulaC = []
    endosotramite = []
    inicio = []
    fin=[]
    inicior = []
    finr=[]
    vencimiento=[]
    cancelacionr=[]
    cancelacionp=[]
    # recibos = recibos.order_by('poliza__contractor__full_name','poliza__juridical__j_name','fianza____full_name','fianza__juridical__j_name','poliza__ramo__ramo_name','fianza__ramo__ramo_name','poliza__aseguradora__compania','fianza__aseguradora__compania')
    recibos = recibos.order_by('id')
    status_poliza = []
    campo_celula, campo_agrupacion, campo_lineanegocio, moduleName = getOrgInfo(request)
    for r in recibos:
        statusr = ''
        try:
            poliza_aux = Endorsement.objects.filter(policy = r.poliza, status__in = [1,5], org_name = r.poliza.org_name).exists()    
            if poliza_aux:
                endosotramite.append('Si')
            else:
                endosotramite.append('No')
        except:
            endosotramite.append('No')
        receipt1 = ''
        fc=1
        inc = ''
        fn = ''
        aseg = ''
        cve = ''
        pnumber = ''
        sramo = ''
        grupo1_ = ''
        contratantex = ''
        contratanteE = ''
        contratanteP = ''
        cel = ''
        contratanteG = ''
        antig = get_antiguedad(r.fecha_inicio)
        if r.user_pay:
            val_userpay = r.user_pay.first_name + ' '+ str(r.user_pay.last_name)
        else:
            val_userpay = ''
        if r.owner:
            val_owner = r.owner.first_name + ' '+ str(r.owner.last_name)
        else:
            val_owner = ''
        if r.poliza:
            if r.poliza.date_cancel and r.poliza.status ==11:
                cancelacionp.append(r.poliza.date_cancel.strftime("%d/%m/%Y"))
            else:
                cancelacionp.append('')
            statusr = checkStatusPolicy(r.poliza.status)
            valR = False
            if OldPolicies.objects.filter(base_policy__id = r.poliza.id, new_policy__status = 1).exists():
                valR = True
            if r.org_name == 'ancora':
                if r.status ==13 and r.poliza.is_renewable==1 or (r.poliza.renewed_status ==2 and r.poliza.status ==13):
                    statusr = statusr+' -En Proceso de Renovación'
            if r.poliza.document_type == 6:
                receipt1 = 'Categoría'
                try:
                    policy = r.poliza.parent.parent.parent 
                    
                    sramo = policy.subramo.subramo_name
                    fc = policy.f_currency
                    pnumber = policy.poliza_number
                    inc = policy.start_of_validity.strftime("%d/%m/%Y")
                    fn = policy.end_of_validity.strftime("%d/%m/%Y")
                    
                    try:
                        cve = policy.clave.name+' '+str(policy.clave.clave)
                        cve = clean_string(cve)
                    except Exception as ds:
                        cve = '' 

                    aseg = policy.aseguradora.alias

                except Exception as fd:
                    inc = ''
                    fn = ''
                    aseg = ''
                    cve = ''
                    pnumber = ''
                    sramo = ''
                    fc = 1 
                if r.poliza.parent.parent.parent.contractor:
                    try:
                        contractor = r.poliza.parent.parent.parent.contractor
                        contratantex = clean_text(contractor.full_name)
                        contratanteE = contractor.email
                        contratanteP = contractor.phone_number
                        business_line_mapping = {
                            1: 'Comercial',
                            2: 'Personal',
                            0: 'Otro'
                        }
                        business_line_value = contractor.business_line
                        businessLine_ = business_line_mapping.get(int(business_line_value), '')

                    except Exception as e:
                        contratantex = ''
                        contratanteE = ''
                        contratanteP = ''
                        businessLine_ = ''
                    try:
                        contractor_group = r.poliza.parent.parent.parent.contractor.group
                        type_group = contractor_group.type_group

                        if type_group == 1:
                            contratanteG = clean_text(contractor_group.group_name)
                            grupo1_ = ''
                            grupo2_ = ''
                        
                        elif type_group == 2:
                            grupotype1 = Group.objects.get(pk=contractor_group.parent.id)
                            contratanteG = clean_text(grupotype1.group_name)
                            grupo1_ = clean_text(contractor_group.group_name)
                            grupo2_ = ''
                        
                        elif type_group == 3:
                            grupotype1 = Group.objects.get(pk=contractor_group.parent.parent.id)
                            contratanteG = clean_text(grupotype1.group_name)
                            subgrupotype2 = Group.objects.get(pk=contractor_group.parent.id)
                            grupo1_ = clean_text(subgrupotype2.group_name)
                            grupo2_ = clean_text(contractor_group.group_name)

                    except Exception as e:
                        # Log the exception if necessary
                        contratanteG = ''
                        grupo1_ = ''
                        grupo2_ = ''
                    nivelAg_, grupo3_, grupo4_ = '', '', ''
                    clasifica_, cel = '-----', '-----'
                    groupinglevel = getattr(r.poliza.parent.parent.parent, 'groupinglevel', None)

                    if groupinglevel:
                        description = clean_text(groupinglevel.description)
                        if groupinglevel.type_grouping == 1:
                            nivelAg_ = description
                        elif groupinglevel.type_grouping == 2:
                            parent_grouping = getattr(groupinglevel.parent, 'description', '')
                            nivelAg_ = clean_text(parent_grouping) if parent_grouping else ''
                            grupo3_ = description
                        elif groupinglevel.type_grouping == 3:
                            grandparent_grouping = getattr(groupinglevel.parent.parent, 'description', '')
                            nivelAg_ = clean_text(grandparent_grouping) if grandparent_grouping else ''
                            parent_grouping = getattr(groupinglevel.parent, 'description', '')
                            grupo3_ = clean_text(parent_grouping) if parent_grouping else ''
                            grupo4_ = description

                    contractor = getattr(r.poliza.parent.parent.parent, 'contractor', None)
                    if contractor:
                        clasifica_ = getattr(contractor.classification, 'classification_name', '-----')
                    celula = getattr(r.poliza.parent.parent.parent, 'celula', None)
                    if celula:
                        cel = getattr(celula, 'celula_name', '-----')
                else:
                    contratantex = ''
                    contratanteE = ''
                    contratanteP = ''
                    contratanteG = ''     
                    contratanteG = ''
                    grupo1_ = ''
                    grupo2_ = ''                       
                    nivelAg_ = ''
                    grupo3_ = ''
                    grupo4_ = '' 
                    clasifica_='-----'
                    cel='-----'
            elif r.poliza.document_type == 4:
                receipt1 = 'Subgrupo'
                inc, fn, aseg, cve, pnumber, sramo, fc = '', '', '', '', '', '', 1
                contratantex, contratanteE, contratanteP, contratanteG = '', '', '', ''
                grupo1_, grupo2_, nivelAg_, grupo3_, grupo4_ = '', '', '', '', ''
                clasifica_, cel, businessLine_ = '-----', '-----', ''
                try:
                    parent_policy = r.poliza.parent
                    sramo = parent_policy.subramo.subramo_name
                    fc = parent_policy.f_currency
                    pnumber = parent_policy.poliza_number
                    inc = parent_policy.start_of_validity.strftime("%d/%m/%Y")
                    fn = parent_policy.end_of_validity.strftime("%d/%m/%Y")
                    cve = clean_text(parent_policy.clave.name+' '+str(parent_policy.clave.clave)) if parent_policy.clave else ''
                    
                    aseg = parent_policy.aseguradora.alias
                except AttributeError:
                    pass

                contractor = getattr(parent_policy, 'contractor', None)
                if contractor:
                    contratantex = clean_text(contractor.full_name)
                    contratanteE = contractor.email
                    contratanteP = contractor.phone_number
                    
                    contratanteG = clean_text(getattr(contractor.group, 'group_name', '')) if contractor.group else ''
                    business_line_mapping = {1: 'Comercial', 2: 'Personal', 0: 'Otro'}
                    businessLine_ = business_line_mapping.get(int(parent_policy.business_line), '') if parent_policy.business_line else ''
                    group = contractor.group
                    try:
                        if group:
                            if group.type_group == 1:
                                grupo1_, grupo2_ = '', ''
                            elif group.type_group == 2:
                                grupo1_ = clean_text(group.group_name)
                                grupo2_ = ''
                                parent_group = getattr(group, 'parent', None)
                                if parent_group:
                                    contratanteG = clean_text(parent_group.group_name)
                            elif group.type_group == 3:
                                grupo1_ = clean_text(group.group_name)
                                grupo2_ = ''
                                sub_group = getattr(group.parent, 'group_name', '')
                                contratanteG = clean_text(sub_group) if sub_group else ''
                                grupo2_ = clean_text(group.group_name) if group.group_name else ''
                    except AttributeError:
                        pass
                    groupinglevel = getattr(parent_policy, 'groupinglevel', None)
                    try:
                        if groupinglevel:
                            if groupinglevel.type_grouping == 1:
                                nivelAg_ = clean_text(groupinglevel.description)
                                grupo3_, grupo4_ = '', ''
                            elif groupinglevel.type_grouping == 2:
                                parent_grouping = getattr(groupinglevel.parent, 'description', '')
                                nivelAg_ = clean_text(parent_grouping) if parent_grouping else ''
                                grupo3_ = clean_text(groupinglevel.description)
                                grupo4_ = ''
                            elif groupinglevel.type_grouping == 3:
                                grandparent_grouping = getattr(groupinglevel.parent.parent, 'description', '')
                                nivelAg_ = clean_text(grandparent_grouping) if grandparent_grouping else ''
                                subgrouping = getattr(groupinglevel.parent, 'description', '')
                                grupo3_ = clean_text(subgrouping) if subgrouping else ''
                                grupo4_ = clean_text(groupinglevel.description)
                    except AttributeError:
                        pass
                    clasifica_ = contractor.classification.classification_name if contractor.classification else '-----'
                    cel = parent_policy.celula.celula_name if parent_policy.celula else '-----'
                else:
                    businessLine_ = business_line_mapping.get(int(parent_policy.business_line), '') if parent_policy and parent_policy.business_line else ''
            else:
                document_type_mapping = {
                    7: 'Fianza',
                    8: 'Fianza Colectiva',
                    11: 'Colectividad',
                    12: 'Póliza de Colectividad',
                    3: 'Póliza de Grupo'
                }
                receipt1 = document_type_mapping.get(r.poliza.document_type, 'Póliza')

                try:
                    sramo = r.poliza.subramo.subramo_name
                    fc = r.poliza.f_currency
                    pnumber = r.poliza.poliza_number
                    inc = r.poliza.start_of_validity.strftime("%d/%m/%Y")
                    fn = r.poliza.end_of_validity.strftime("%d/%m/%Y")
                    try:
                        cve = r.poliza.clave.name + ' ' + str(r.poliza.clave.clave)
                        cve = clean_text(cve)
                    except AttributeError:
                        cve = ''
                    aseg = r.poliza.aseguradora.alias if r.poliza and r.poliza.aseguradora else ''

                except Exception as fd:
                    # Handle the case where some or all fields are missing
                    inc = ''
                    fn = ''
                    aseg = ''
                    cve = ''
                    fc = 1
                    pnumber = ''
                if r.poliza.contractor:
                    contratantex = clean_text(r.poliza.contractor.full_name)
                    contratanteE = r.poliza.contractor.email
                    contratanteP = r.poliza.contractor.phone_number
                    contratanteG = clean_text(r.poliza.contractor.group.group_name) if r.poliza.contractor and r.poliza.contractor.group else ''
                    business_line_mapping = {
                        1: 'Comercial',
                        2: 'Personal',
                        0: 'Otro'
                    }
                    if r.poliza.business_line is not None:
                        businessLine_ = business_line_mapping.get(int(r.poliza.business_line), '')
                    else:
                        businessLine_ = 'Otro'
                    try:
                        if r.poliza.contractor.group:
                            contractor_group = r.poliza.contractor.group
                            type_group = contractor_group.type_group
                            if type_group == 1:
                                contratanteG = clean_text(contractor_group.group_name)
                                grupo1_ = ''
                                grupo2_ = ''
                            elif type_group == 2:
                                parent_group = contractor_group.parent
                                contratanteG = clean_text(parent_group.group_name)
                                grupo1_ = clean_text(contractor_group.group_name)
                                grupo2_ = ''
                            elif type_group == 3:
                                grandparent_group = contractor_group.parent.parent
                                parent_group = contractor_group.parent
                                contratanteG = clean_text(grandparent_group.group_name)
                                grupo1_ = clean_text(parent_group.group_name)
                                grupo2_ = clean_text(contractor_group.group_name)
                        else:
                            contratanteG = ''
                            grupo1_ = ''
                            grupo2_ = ''
                    except (AttributeError, Group.DoesNotExist) as e:
                        contratanteG = ''
                        grupo1_ = ''
                        grupo2_ = ''
                    try:
                        if r.poliza.groupinglevel:
                            groupinglevel = r.poliza.groupinglevel
                            type_grouping = groupinglevel.type_grouping
                            if type_grouping == 1:
                                nivelAg_ = clean_text(groupinglevel.description)
                                grupo3_ = ''
                                grupo4_ = ''
                                
                            elif type_grouping == 2:
                                parent_grouping = groupinglevel.parent
                                nivelAg_ = clean_text(parent_grouping.description)
                                grupo3_ = clean_text(groupinglevel.description)
                                grupo4_ = ''
                                
                            elif type_grouping == 3:
                                grandparent_grouping = groupinglevel.parent.parent
                                parent_grouping = groupinglevel.parent
                                nivelAg_ = clean_text(grandparent_grouping.description)
                                grupo3_ = clean_text(parent_grouping.description)
                                grupo4_ = clean_text(groupinglevel.description)
                        else:
                            nivelAg_ = ''
                            grupo3_ = ''
                            grupo4_ = '' 
                    except Exception as e:
                        nivelAg_ = ''
                        grupo3_ = ''
                        grupo4_ = '' 
         
                    if r.poliza.contractor.classification:
                        clasifica_ = r.poliza.contractor.classification.classification_name  
                    else:
                        clasifica_='-----'
                    if r.poliza.celula:
                        cel = r.poliza.celula.celula_name  
                    else:
                        cel='-----'
                    # contratanteG = r.poliza.contractor.group.group_name
                else:
                    contratantex = ''
                    contratanteE = ''
                    contratanteP = ''
                    contratanteG = ''     
                    contratanteG = ''
                    grupo1_ = ''
                    grupo2_ = ''
                    nivelAg_ = ''
                    grupo3_ = ''
                    grupo4_ = ''  
                    clasifica_='-----'
                    cel='-----'
            if r.poliza.responsable:
                val_resp = r.poliza.responsable.first_name + ' '+ str(r.poliza.responsable.last_name)
            else:
                val_resp = ''
            if r.poliza.collection_executive:
                val_cexe = r.poliza.collection_executive.first_name + ' '+ str(r.poliza.collection_executive.last_name)
            else:
                val_cexe = ''
            try:
                refs_policy = ReferenciadoresInvolved.objects.filter(policy = r.poliza.id,is_changed=False).values_list('referenciador__first_name','referenciador__last_name','comision_vendedor')
                if len(refs_policy):
                    v = []
                    try:
                        for it in refs_policy:
                            v.append(it[0] +' '+ str(it[1])+str('-')+str(it[2]))
                        referenc = v
                    except Exception as y:
                        v = []
                        referenc = []
                else:
                    v = []
                    referenc = []
            except Exception as e:
                v = []
                referenc = [] 
            try:
                if r.poliza.ramo:
                    ramo_code = r.poliza.ramo.ramo_code
                    policy_id = r.poliza.id                    
                    if ramo_code == 1:
                        form = Life.objects.filter(policy=policy_id)
                        value = get_full_name(form)
                    
                    elif ramo_code == 2:
                        form = AccidentsDiseases.objects.filter(policy=policy_id)
                        value = get_full_name(form)

                    elif r.poliza.subramo.subramo_code == 9:
                        form = AutomobilesDamages.objects.filter(policy=policy_id)
                        value = get_automobile_details(form) if form else ''
                    
                    elif ramo_code == 3 and r.poliza.subramo.subramo_code != 9:
                        form = Damages.objects.filter(policy=policy_id)
                        value = form[0].insured_item if form else ''
                    
                    else:
                        value = 'Sin asegurado'
                else:
                    value = 'Sin asegurado'

            except Exception as e:
                value = 'Sin asegurado' 

        else:
            value = 'Sin asegurado'
            val_resp = 'Sin responsable'
            val_cexe = 'Sin ejecutivo'
            
            cancelacionp.append('')
        if r.bono:
            receipt1 = 'Bono'
            fc = r.bono.tipo_cambio
            try:
                cve = r.bono.clave.name +' '+str(r.bono.clave.clave)
                cve =((((((cve).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
            except  Exception as e:
                cve =''
            aseg = r.bono.aseguradora.alias
            pnumber = r.bono.factura_number
            if r.bono.vendor:
                referenc = [r.bono.vendor.first_name + ' '+ str(r.bono.vendor.last_name)]
            else:
                referenc = []
        if r.receipt_type == 3:
            receipt1 = 'Nota de Crédito'
        elif r.receipt_type == 2:
            receipt1 = 'Endoso'
        if value:
            value = ((((((value).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'') 
        else:
            value = value
        if r.status==2:
            if Log.objects.filter(model=4,associated_id=r.id,identifier__icontains='cance').exists():
                cancelacionr.append(Log.objects.filter(model=4,associated_id=r.id,identifier__icontains='cance')[0].created_at.strftime("%d/%m/%Y"))
            else:
                cancelacionr.append('')
        else:
            cancelacionr.append('')
        asegurado.append(value)
        receipttype.append(receipt1)
        referenciador.append(referenc)
        antiguedad.append(antig)
        responsable.append(val_resp)
        collection.append(val_cexe)
        userpay.append(val_userpay)
        creadopor.append(val_owner)
        contract.append(contratantex)
        contractE.append(contratanteE)
        contractP.append(contratanteP)
        contractG.append(contratanteG)
        aseguradora.append(aseg)
        inicio.append(inc)
        fin.append(fn)
        poliza_number.append(pnumber)
        clave.append(cve)
        subramo.append(sramo)
        currency.append(fc)
        # ---
        grupo1.append(grupo1_)
        grupo2.append(grupo2_)
        nivelAg.append(nivelAg_)
        grupo3.append(grupo3_)
        grupo4.append(grupo4_)
        clasifica.append(clasifica_)
        celulaC.append(cel)
        businessLine.append(businessLine_)    

        fir = r.fecha_inicio
        if fir:
            try:
                formatted = r.fecha_inicio.strftime('%H/%M/%S')
                if formatted =='00/00/00' or formatted =='17/00/00' or formatted =='05/00/00':
                    fir_ =  (str(r.fecha_inicio).split('.')[0])
                    fir_ = r.fecha_inicio+ timedelta(hours=6, minutes=00)
                    fir = fir_
                    fir = fir.strftime("%d/%m/%Y")
            except Exception as eft:
                print('formateo',eft)
                if r.fecha_fin:
                    fir = r.fecha_fin.strftime("%d/%m/%Y")
        ffr = r.fecha_fin
        if ffr:
            try:
                formatted = r.fecha_fin.strftime('%H/%M/%S')
                if formatted =='00/00/00' or formatted =='17/00/00' or formatted =='05/00/00':
                    ffr_ =  (str(r.fecha_fin).split('.')[0])
                    ffr_ = r.fecha_fin+ timedelta(hours=6, minutes=00)
                    ffr = ffr_
                    ffr = ffr.strftime("%d/%m/%Y")
            except Exception as eft:
                print('formateo',eft)
                if r.fecha_fin:
                    ffr = r.fecha_fin.strftime("%d/%m/%Y")
        fvr = r.vencimiento
        if fvr:
            try:
                formatted = r.vencimiento.strftime('%H/%M/%S')
                if formatted =='00/00/00' or formatted =='17/00/00' or formatted =='05/00/00':
                    fvr_ =  (str(r.vencimiento).split('.')[0])
                    fvr_ = r.vencimiento+ timedelta(hours=6, minutes=00)
                    fvr = fvr_
                    fvr = fvr.strftime("%d/%m/%Y")
            except Exception as eft:
                print('formateo',eft)
                if r.vencimiento:
                    fvr = r.vencimiento.strftime("%d/%m/%Y")
        try:
            fvr = fvr.strftime("%d/%m/%Y")
        except Exception as e:
            pass
        try:
            fir = fir.strftime("%d/%m/%Y")
        except Exception as e:
            pass
        try:
            ffr = ffr.strftime("%d/%m/%Y")
        except Exception as e:
            pass
        inicior.append(fir)
        finr.append(ffr)
        vencimiento.append(fvr) 
        status_poliza.append(statusr)

    obj = {
        'document_type'   : str(list(recibos.values_list('poliza__document_type', flat = True))),
        'receipttype'   : str(list(receipttype)),
        'recibo'   : str(list(recibos.values_list('recibo_numero', flat = True))),
        'endoso_number'   : str(list(recibos.values_list('endorsement__number_endorsement', flat = True))),
        'endosotramite'   : str(list(endosotramite)),
        'poliza_number'   : str(list(poliza_number)),
        'aseguradora__compania'   : str(list(aseguradora)),
        'subramo__subramo_name'   : str(list(subramo)),
        'forma_de_pago'   : str(list(recibos.values_list('poliza__forma_de_pago', flat = True))),
        'status'   : str(list(recibos.values_list('status', flat = True))),
        'status_p'   : str(list(status_poliza)),
        'fecha_inicio'   : str(list(inicior)) ,
        'fecha_fin'   : str(list(finr)) ,
        'vencimiento'   : str(list(vencimiento)) ,
        'fecha_pago'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in recibos.values_list('pay_date', flat = True) ])) ,
        'liquidacion_folio'   : str(list(recibos.values_list('liquidacion_folio', flat = True))) ,
        'start_of_validity'   : str(list(inicio)) ,
        'end_of_validity'   : str(list(fin)) ,
        'start_of_validity_f'   : str(list(fin)) ,
        'end_of_validity_f'   : str(list(fin)) ,
        'f_currency'   : str(list(currency)),
        'p_neta'   : str(list(recibos.values_list('prima_neta', flat = True))),
        'rpf'   : str(list(recibos.values_list('rpf', flat = True))),
        'derecho'   : str(list(recibos.values_list('derecho', flat = True))),
        'iva'   : str(list(recibos.values_list('iva', flat = True))),
        'p_total'   : str(list(recibos.values_list('prima_total', flat = True))),
        'comision'   : str(list(recibos.values_list('comision', flat = True))),
        'is_cat'   : str(list(recibos.values_list('conducto_de_pago', flat = True))),
        'clave__clave'   : str(list(clave)),
        'clave__clave_f'   : str(list(clave)),
        '_id'   : str(list(recibos.values_list('id', flat = True))),
        'observations'   : str(list([(((((((x).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')) if x else '' for x in recibos.values_list('poliza__observations', flat = True)])),
        # 'vendor__first_name'   : str(list(recibos.values_list('fianza__vendor__first_name', flat = True))),
        # 'vendor__last_name'   : str(list(recibos.values_list('fianza__vendor__last_name', flat = True))),
        'created_at'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in recibos.values_list('created_at', flat = True) ]))  ,        
        'clave__name'   : str(list(recibos.values_list('poliza__clave__name', flat = True))),
        'sucursal__sucursal_name'   : str(list(recibos.values_list('poliza__sucursal__sucursal_name', flat = True))),
        'asegurado'   : str(list(asegurado)),
        'referenciador'   : str(list(referenciador)),
        'antiguedad'   : str(list(antiguedad)),
        'creadopor'   : str(list(creadopor)),
        'collection'   : str(list(collection)),
        'user_pay'   : str(list(userpay)),
        'responsable'   : str(list(responsable)),
        'contratante'   : str(list(contract)),
        'contratanteE'   : str(list(contractE)),
        'contratanteP'   : str(list(contractP)),
        'contratanteG'   : str(list(contractG)),
        'celula'   : str(list(celulaC)),
        # ----
        'grupo1'   : str(list(grupo1)) ,
        'grupo2'   : str(list(grupo2)) ,
        'nivelAg'   : str(list(nivelAg)) ,
        'grupo3'   : str(list(grupo3)) ,
        'grupo4'   : str(list(grupo4)) ,
        'clasifica'   : str(list(clasifica)) ,
        'businessLine'   : str(list(businessLine)) ,
        'cancelacionr'   : str(list(cancelacionr)) ,
        'cancelacionp'   : str(list(cancelacionp)) ,
        'tipo_reporte': tipo_reporte,
        'email_org':info_org['email'],
        'phone_org':info_org['phone'],
        'webpage_org':info_org['webpage'],
        'address_org':info_org['address'],
        'urlname_org':info_org['name'],
        'campo_celula':campo_celula,
        'campo_agrupacion':campo_agrupacion,
        'campo_lineanegocio':campo_lineanegocio
        }   
    obj['columns'] = str(list(columns))
    obj['imagen'] = archivo_imagen
    obj['valueCom'] = valueCom
    obj['registros'] = len(recibos)
    obj['verReferenciadores'] = verReferenciadores
    obj['moduleName'] = moduleName
    if campo_lineanegocio == 'False' or campo_lineanegocio == False:
        if 'businessLine' in obj:
            del obj['businessLine'] 
    if campo_celula == 'False' or campo_celula == False:
        if 'celula' in obj:
            del obj['celula'] 
    if campo_agrupacion == 'False' or campo_agrupacion == False:
        if 'nivelAg' in obj:
            del obj['nivelAg'] 
        if 'grupo3' in obj:
            del obj['grupo3'] 
        if 'grupo4' in obj:
            del obj['grupo4'] 
    r = requests.post(settings.SERVICEEXCEL_URL + 'get-CobranzaExcel/', obj,
    # headers = {
    # 'Authorization':'Bearer %s'%request.user.user_info.fi_token_refresh,
    # # 'Content-Type':'application/json' 
    # }, 
    stream=True)
    response_data= r.text

    response = HttpResponse(r.content,content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

    return response
# Reporte folios cobranza list
@api_view(['POST'])
@permission_classes((IsAuthenticatedV2, IsOrgMemberV2))
def Service_FoliosExcel(request):   
    valueCom = True
    try:
        valueCom = comisions(request)
    except Exception as ers:
        valueCom =  True
    folio = request.data['folio']
    tipo_folio = request.data['tipo_folio']
    usuarios = request.data['usuarios']
    inicio = request.data['inicial']
    final = request.data['final']
    if usuarios:
        users = list(User.objects.filter(pk__in = (usuarios)).values_list('pk', flat=True))    
    else:
        users = list(User.objects.values_list('pk', flat=True))

    try:
        f = "%d/%m/%Y %H:%M:%S" 
        if inicio:       
            inicio = datetime.strptime(inicio , f)
            final = datetime.strptime(final , f)
    except Exception as e:
        f = "%m/%d/%Y %H:%M:%S" 
        if inicio:       
            inicio = datetime.strptime(inicio , f)
            final = datetime.strptime(final , f)

    if int(tipo_folio) == 1:
        tipo_folio = ' de Pago'
        f_number = folio 
        # De pago
        recibos = Recibos.objects.filter(org_name = request.GET.get('org'), folio_pago = folio).exclude(status__in = [0])
        if inicio:
            date_filters = [Q(pay_date__gte=inicio),Q(pay_date__lte = final)]
            recibos = recibos.filter(reduce(operator.and_, date_filters), org_name = request.GET.get('org'),owner__in = users)
        else:
            recibos = recibos.filter(org_name = request.GET.get('org'),owner__in = users)

    else:
        # De liquidación
        tipo_folio = ' de Liquidación'
        f_number = folio 
        recibos = Recibos.objects.filter(org_name = request.GET.get('org'), liquidacion_folio = folio).exclude(status__in = [0])
        if inicio:
            date_filters = [Q(liquidacion_date__gte=inicio),Q(liquidacion_date__lte = final)]
            recibos = recibos.filter(reduce(operator.and_, date_filters), org_name = request.GET.get('org'),owner__in = users)
        else:
            recibos = recibos.filter(org_name = request.GET.get('org'),owner__in = users)
    info_org = getInfoOrg(request)
    try:
        dataToFilter = getDataForPerfilRestricted(request, request.GET.get('org'))
    except Exception as er:
        dataToFilter = {}
    if dataToFilter:
        # Contratantes***
        polizas = Polizas.objects.filter(document_type__in = [1,3,11,7,8,10], org_name = request.GET.get('org')).exclude(status = 0)
        polizasToF = Polizas.objects.filter(document_type__in = [1,3,11,7,8,10], org_name = request.GET.get('org')).exclude(status = 0)
        polizasCol = Polizas.objects.filter(document_type__in = [12], org_name = request.GET.get('org'))
        polizasGCer = Polizas.objects.filter(document_type__in = [6], org_name = request.GET.get('org'))
        if dataToFilter['ccpr']:
            polizasToF = polizasToF.filter(contractor__in = list(dataToFilter['ccpr']))
        if dataToFilter['cgpr']:
            polizasToF = polizasToF.filter(contractor__group__in = list(dataToFilter['cgpr']))
        if dataToFilter['ccepr']:
            polizasToF = polizasToF.filter(contractor__cellule__in = list(dataToFilter['ccepr']))
        if dataToFilter['crpr']:
            polizasToF = polizasToF.filter(contractor__vendor__in = list(dataToFilter['crpr']))
        if dataToFilter['cspr']:
            polizasToF = polizasToF.filter(contractor__sucursal__in = list(dataToFilter['cspr']))
        # Pólizas ****
        if dataToFilter['pppr']:
            polizasToF = polizasToF.filter(pk__in = list(dataToFilter['pppr']))
        if dataToFilter['pgpr']:
            polizasToF = polizasToF.filter(contractor__group__in = list(dataToFilter['pgpr']))
        if dataToFilter['pcepr']:
            polizasToF = polizasToF.filter(celula__in = list(dataToFilter['pcepr']))
        if dataToFilter['prpr']:
            polizasToF = polizasToF.filter(ref_policy__referenciador__in = list(dataToFilter['prpr']))
        if dataToFilter['pspr']:
            polizasToF = polizasToF.filter(sucursal__in = list(dataToFilter['pspr']))
        if dataToFilter['papr']:
            polizasToF = polizasToF.filter(groupinglevel__in = list(dataToFilter['papr']))
        if dataToFilter['pcapr']:
            polizasToF = polizasToF.filter(clave__in = list(dataToFilter['pcapr']))
        if dataToFilter['psrpr']:
            polizasToF = polizasToF.filter(subramo__subramo_code__in = list(dataToFilter['psrpr']))
        if dataToFilter['paspr']:
            polizasToF = polizasToF.filter(aseguradora__in = list(dataToFilter['paspr']))
        if dataToFilter['pstpr']:
            polizasToF = polizasToF.filter(status__in = list(dataToFilter['pstpr']))
        
        polizasCT = polizasCol.filter(document_type = 12, parent__in = list(polizasToF))
        polizasGT = polizasGCer.filter(document_type = 6, parent__parent__parent__in = list(polizasToF))
        polizasFin = list(polizasToF.values_list('pk', flat = True)) + list(polizasCT.values_list('pk', flat = True)) + list(polizasGT.values_list('pk', flat = True))       
        polizas = polizas.filter(pk__in = list(polizasFin))
        recibos = recibos.filter(poliza__in = list(polizas))

    if len(info_org['logo']) != 0:
        archivo_imagen = 'https://miurabox-public.s3.amazonaws.com/cas/' + info_org['logo']
        # archivo_imagen = get_presigned_url("cas/{url}".format(url=info_org['logo']),28800) 
    else:
        archivo_imagen = 'saam.jpg'
    if f_number:
        tipo_reporte = "Reporte de Folios " + str(tipo_folio) +', folio: '+str(f_number)
    else:
        tipo_reporte = "Reporte de Folios " + str(tipo_folio)
    columns = ['No.Recibo','Estatus', 'Prima Neta', 'RPF', 'Derecho', 'IVA', 'Prima Total', 'Comisión', 
                   'Fecha Inicio', 'Fecha Fin', 'Vencimiento', 'Domiciliado', 'Tipo', 'No.Póliza', 'No.Endoso', 
                   'Contratante', 'Email', 'Teléfono', 'Aseguradora', 'Subramo', 'Forma de Pago', 'Estatus Póliza', 
                   'Inicio Póliza', 'Fin Póliza', 'Clave', 'Asegurado', 'Referenciador','Fecha liquidación','Fecha pago','Folio Liquidación','Folio pago']

    asegurado = []
    antiguedad = []
    referenciador = []
    responsable = []
    collection = []
    userpay = []
    creadopor = []
    contract = []
    contractE = []
    contractP = []
    contractG= []
    poliza_number = []
    fin = []
    inicio = []
    aseguradora = []
    subramo = []
    clave = []
    currency = []
    # recibos = recibos.order_by('poliza__contractor__full_name','poliza__juridical__j_name','fianza__natural__full_name','fianza__juridical__j_name','poliza__ramo__ramo_name','fianza__ramo__ramo_name','poliza__aseguradora__compania','fianza__aseguradora__compania')
    recibos = recibos.order_by('id')
    for r in recibos:
        contratantex=''
        contratanteE=''
        contratanteP=''
        contratanteG=''
        grupo1_=''
        grupo1_=''
        fc =1
        pnumber = ''
        ini = ''
        fi = ''
        ase = ''
        sr = ''
        cve = ''
        pnumber = ''
        antig = get_antiguedad(r.fecha_inicio)
        if r.user_pay:
            val_userpay = r.user_pay.first_name + ' '+ str(r.user_pay.last_name)
        else:
            val_userpay = ''
        if r.owner:
            val_owner = r.owner.first_name + ' '+ str(r.owner.last_name)
        else:
            val_owner = ''
        if r.poliza:
            pnumber = r.poliza.poliza_number
            if r.poliza.document_type == 6:
                try:
                    ini = str(r.poliza.parent.parent.parent.start_of_validity.strftime('%d/%m/%Y'))
                    fi = str(r.poliza.parent.parent.parent.end_of_validity.strftime('%d/%m/%Y'))
                except Exception as rt:
                    ini = ''
                    fi = ''
                pnumber = r.poliza.parent.parent.parent.poliza_number
                fc = r.poliza.parent.parent.parent.f_currency
                ase = r.poliza.parent.parent.parent.aseguradora.alias
                sr = r.poliza.parent.parent.parent.subramo.subramo_name
                try:
                    cve = r.poliza.parent.parent.parent.clave.name +' '+str(r.poliza.parent.parent.parent.clave.clave)
                    cve =((((((cve).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                except Exception as re:
                    cve = ''
                if r.poliza.parent.parent.parent.contractor:
                    contratantex =((((((r.poliza.parent.parent.parent.contractor.full_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    contratanteE = r.poliza.parent.parent.parent.contractor.email
                    contratanteP = r.poliza.parent.parent.parent.contractor.phone_number
                    contratanteG = ((((((r.poliza.parent.parent.parent.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')     
                    # contratanteG = r.poliza.parent.parent.parent.contractor.group.group_name
                    try:
                        if r.poliza.parent.parent.parent.contractor.group:
                            if r.poliza.parent.parent.parent.contractor.group.type_group == 1:
                                contratanteG = ((((((r.poliza.parent.parent.parent.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo1_ = ''
                                grupo1_ = ''
                            elif r.poliza.parent.parent.parent.contractor.group.type_group == 2:
                                grupotype1 = Group.objects.get(pk = r.poliza.parent.parent.parent.contractor.group.parent.id)
                                contratanteG = ((((((grupotype1.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo1_ = ((((((r.poliza.parent.parent.parent.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo1_ = ''
                            elif r.poliza.parent.parent.parent.contractor.group.type_group == 3:
                                grupotype1 = Group.objects.get(pk = r.poliza.parent.parent.parent.contractor.group.parent.parent.id)
                                contratanteG = ((((((grupotype1.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                subgrupotype2 = Group.objects.get(pk = r.poliza.parent.parent.parent.contractor.group.parent.id)
                                grupo1_ = ((((((subgrupotype2.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo1_ = ((((((r.poliza.parent.parent.parent.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        else:
                            contratanteG = ''
                            grupo1_ = ''
                            grupo1_ = ''  
                    except Exception as e:
                        contratanteG = ''
                        grupo1_ = ''
                        grupo1_ = '' 
                
            elif r.poliza.document_type == 4:
                try:
                    ini = str(r.poliza.parent.start_of_validity.strftime('%d/%m/%Y'))
                    fi = str(r.poliza.parent.end_of_validity.strftime('%d/%m/%Y'))
                except Exception as rt:
                    ini = ''
                    fi = ''
                pnumber = r.poliza.parent.poliza_number
                fc = r.poliza.parent.f_currency
                ase = r.poliza.parent.aseguradora.alias
                try:
                    cve = r.poliza.parent.clave.name +' '+str(r.poliza.parent.clave.clave)
                    cve = ((((((cve).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                except Exception as re:
                    cve = ''
                sr = r.poliza.parent.subramo.subramo_name
                if r.poliza.parent.contractor:
                    contratantex =((((((r.poliza.parent.contractor.full_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    contratanteE = r.poliza.parent.contractor.email
                    contratanteP = r.poliza.parent.contractor.phone_number
                    contratanteG = ((((((r.poliza.parent.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')     
                    # contratanteG = r.poliza.parent.contractor.group.group_name
                    try:
                        if r.poliza.parent.contractor.group:
                            if r.poliza.parent.contractor.group.type_group == 1:
                                contratanteG = ((((((r.poliza.parent.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo1_ = ''
                                grupo1_ = ''
                            elif r.poliza.parent.contractor.group.type_group == 2:
                                grupotype1 = Group.objects.get(pk = r.poliza.parent.contractor.group.parent.id)
                                contratanteG = ((((((grupotype1.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo1_ = ((((((r.poliza.parent.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo1_ = ''
                            elif r.poliza.parent.contractor.group.type_group == 3:
                                grupotype1 = Group.objects.get(pk = r.poliza.parent.contractor.group.parent.parent.id)
                                contratanteG = ((((((grupotype1.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                subgrupotype2 = Group.objects.get(pk = r.poliza.parent.contractor.group.parent.id)
                                grupo1_ = ((((((subgrupotype2.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo1_ = ((((((r.poliza.parent.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        else:
                            contratanteG = ''
                            grupo1_ = ''
                            grupo1_ = ''  
                    except Exception as e:
                        contratanteG = ''
                        grupo1_ = ''
                        grupo1_ = '' 
            else:
                try:
                    ini = str(r.poliza.start_of_validity.strftime('%d/%m/%Y'))
                    fi = str(r.poliza.end_of_validity.strftime('%d/%m/%Y'))
                except Exception as rt:
                    ini = ''
                    fi = ''
                pnumber = r.poliza.poliza_number                
                fc = r.poliza.f_currency                
                ase = r.poliza.aseguradora.alias
                sr = r.poliza.subramo.subramo_name
                try:
                    cve = r.poliza.clave.name +' '+str(r.poliza.clave.clave)
                    cve = ((((((cve).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                except Exception as re:
                    cve = ''
                if r.poliza.contractor:
                    contratantex = ((((((r.poliza.contractor.full_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    contratanteE = r.poliza.contractor.email
                    contratanteP = r.poliza.contractor.phone_number
                    contratanteG = ((((((r.poliza.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')     
                    # contratanteG = r.poliza.contractor.group.group_name
                    try:
                        if r.poliza.contractor.group:
                            if r.poliza.contractor.group.type_group == 1:
                                contratanteG = ((((((r.poliza.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo1_ = ''
                                grupo1_ = ''
                            elif r.poliza.contractor.group.type_group == 2:
                                grupotype1 = Group.objects.get(pk = r.poliza.contractor.group.parent.id)
                                contratanteG = ((((((grupotype1.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo1_ = ((((((r.poliza.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo1_ = ''
                            elif r.poliza.contractor.group.type_group == 3:
                                grupotype1 = Group.objects.get(pk = r.poliza.contractor.group.parent.parent.id)
                                contratanteG = ((((((grupotype1.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                subgrupotype2 = Group.objects.get(pk = r.poliza.contractor.group.parent.id)
                                grupo1_ = ((((((subgrupotype2.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo1_ = ((((((r.poliza.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        else:
                            contratanteG = ''
                            grupo1_ = ''
                            grupo1_ = ''  
                    except Exception as e:
                        contratanteG = ''
                        grupo1_ = ''
                        grupo1_ = '' 
            if r.poliza.responsable:
                val_resp = r.poliza.responsable.first_name + ' '+ str(r.poliza.responsable.last_name)
            else:
                val_resp = ''
            if r.poliza.collection_executive:
                val_cexe = r.poliza.collection_executive.first_name + ' '+ str(r.poliza.collection_executive.last_name)
            else:
                val_cexe = ''
            try:
                refs_policy = ReferenciadoresInvolved.objects.filter(policy = r.poliza.id,is_changed=False).values_list('referenciador__first_name','referenciador__last_name')
                if len(refs_policy):
                    v = []
                    try:
                        for it in refs_policy:
                            v.append(it[0] +' '+ str(it[1])+str('-'))
                        referenc = v
                    except Exception as y:
                        v = []
                        referenc = []
                else:
                    v = []
                    referenc = []
            except Exception as e:
                v = []
                referenc = []
            if r.poliza.ramo:
                if r.poliza.ramo.ramo_code == 1:
                    form = Life.objects.filter(policy = r.poliza.id)
                    try:
                        if form:
                            value = form[0].personal.full_name
                        else:
                            value = ''
                    except Exception as rt:
                       value = ''
                elif r.poliza.ramo.ramo_code == 2:
                    form = AccidentsDiseases.objects.filter(policy = r.poliza.id)
                    if form:
                        value = form[0].personal.full_name
                    else:
                        value = ''
                elif r.poliza.subramo.subramo_code == 9:
                    form = AutomobilesDamages.objects.filter(policy = r.poliza.id)
                    if form:
                        try:
                            form[0].model = ((((((form[0].model).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                            form[0].version = ((((((form[0].version).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        except Exception as ers:
                            form[0].model = form[0].model
                            form[0].version = form[0].version
                        value = str(form[0].brand) + '-' + str(form[0].model) + '-' + str(form[0].version)+ '-' + str(form[0].serial)
                    else:
                        value = ''
                elif r.poliza.ramo.ramo_code == 3 and not r.poliza.subramo.subramo_code == 9:
                    form = Damages.objects.filter(policy = r.poliza.id)
                    if form:
                        value = form[0].insured_item
                    else:
                        value = ''
                else:
                    value = 'Sin asegurado'
            else:
                value = 'Sin asegurado'
        else:
            value = 'Sin asegurado'
            val_resp = 'Sin responsable'
            val_cexe = 'Sin ejecutivo'
        
        if value:
            value = ((((((value).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'') 
        else:
            value = value
        asegurado.append(value)
        referenciador.append(referenc)
        antiguedad.append(antig)
        responsable.append(val_resp)
        collection.append(val_cexe)
        userpay.append(val_userpay)
        creadopor.append(val_owner)
        contract.append(contratantex)
        contractE.append(contratanteE)
        contractP.append(contratanteP)
        contractG.append(contratanteG)
        inicio.append(ini)
        fin.append(fi)
        poliza_number.append(pnumber)
        aseguradora.append(ase)
        subramo.append(sr)
        clave.append(cve)
        currency.append(fc)
    obj = {
        'document_type'   : str(list(recibos.values_list('poliza__document_type', flat = True))),
        'receipttype'   : str(list(recibos.values_list('receipt_type', flat = True))),
        'recibo'   : str(list(recibos.values_list('recibo_numero', flat = True))),
        'endoso_number'   : str(list(recibos.values_list('endorsement__number_endorsement', flat = True))),
        'poliza_number'   : str(list(poliza_number)),
        'aseguradora__compania'   : str(list(aseguradora)),
        'subramo__subramo_name'   : str(list(subramo)),
        'forma_de_pago'   : str(list(recibos.values_list('poliza__forma_de_pago', flat = True))),
        'status'   : str(list(recibos.values_list('status', flat = True))),
        'status_p'   : str(list(recibos.values_list('poliza__status', flat = True))),
        'fecha_inicio'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in recibos.values_list('fecha_inicio', flat = True) ])) ,
        'fecha_fin'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in recibos.values_list('fecha_fin', flat = True) ])) ,
        'vencimiento'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in recibos.values_list('vencimiento', flat = True) ])) ,
        'fecha_pago'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in recibos.values_list('liquidacion_date', flat = True) ])) ,
        'liquidacion_date'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in recibos.values_list('pay_date', flat = True) ])) ,
        'liquidacion_folio'   : str(list(recibos.values_list('liquidacion_folio', flat = True))) ,
        'folio_pago'   : str(list(recibos.values_list('folio_pago', flat = True))) ,
        'start_of_validity'   : str(list(inicio)) ,
        'end_of_validity'   : str(list(fin)) ,
        'f_currency'   : str(list(currency)),
        'p_neta'   : str(list(recibos.values_list('prima_neta', flat = True))),
        'rpf'   : str(list(recibos.values_list('rpf', flat = True))),
        'derecho'   : str(list(recibos.values_list('derecho', flat = True))),
        'iva'   : str(list(recibos.values_list('iva', flat = True))),
        'p_total'   : str(list(recibos.values_list('prima_total', flat = True))),
        'comision'   : str(list(recibos.values_list('comision', flat = True))),
        'is_cat'   : str(list(recibos.values_list('conducto_de_pago', flat = True))),
        'clave__clave'   : str(list(clave)),
        '_id'   : str(list(recibos.values_list('id', flat = True))),
        'observations'   : str(list([(((((((x).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')) if x else '' for x in recibos.values_list('poliza__observations', flat = True)])),
        'created_at'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in recibos.values_list('created_at', flat = True) ]))  ,
        'clave__name'   : str(list(recibos.values_list('poliza__clave__name', flat = True))),        
        'contratante'   : str(list(contract)),
        'contratanteE'   : str(list(contractE)),
        'contratanteP'   : str(list(contractP)),
        'contratanteG'   : str(list(contractG)),
        'sucursal__sucursal_name'   : str(list(recibos.values_list('poliza__sucursal__sucursal_name', flat = True))),
        'asegurado'   : str(list(asegurado)),
        'referenciador'   : str(list(referenciador)),
        'antiguedad'   : str(list(antiguedad)),
        'creadopor'   : str(list(creadopor)),
        'collection'   : str(list(collection)),
        'user_pay'   : str(list(userpay)),
        'responsable'   : str(list(responsable)),
        'tipo_reporte': tipo_reporte,
        'email_org':info_org['email'],
        'phone_org':info_org['phone'],
        'webpage_org':info_org['webpage'],
        'address_org':info_org['address'],
        'urlname_org':info_org['name'],
    }   
    obj['columns'] = str(list(columns))
    obj['imagen'] = archivo_imagen
    obj['valueCom'] = valueCom
    obj['registros'] = len(recibos)
    r = requests.post(settings.SERVICEEXCEL_URL + 'get-FoliosListExcel/', obj,
    # headers = {
    # 'Authorization':'Bearer %s'%request.user.user_info.fi_token_refresh,
    # # 'Content-Type':'application/json' 
    # }, 
    stream=True)
    response_data= r.text

    response = HttpResponse(r.content,content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

    return response
# Reporte folios cobranza list
@api_view(['POST'])
@permission_classes((IsAuthenticatedV2, IsOrgMemberV2))
def Service_BonosExcel(request):   
    f = "%d/%m/%Y"        
    since = request.data['from']
    until = request.data['until']
    since = datetime.strptime(since , f)
    until = datetime.strptime(until , f)
    org_name = request.GET.get('org')

    report_by = request.data['report_by']

    if report_by == 3:
        date_filters = [Q(pay_date__gte=since),Q(pay_date__lte = until)]
    elif report_by == 4:
        date_filters = [Q(liquidacion_date__gte=since),Q(liquidacion_date__lte = until)]
    elif report_by == 2:
        date_filters = [Q(vencimiento__gte=since),Q(vencimiento__lte = until)]
    elif report_by == 6:
        date_filters = [Q(updated_at__gte=since),Q(updated_at__lte = until)]
    elif report_by == 5:
        date_filters = [Q(conciliacion_date__gte=since),Q(conciliacion_date__lte = until)]
    else:
        date_filters = [Q(fecha_inicio__gte=since),Q(fecha_inicio__lte = until)]
        
    recibos = Recibos.objects.filter(reduce(operator.and_, date_filters),org_name = org).exclude(bono__isnull = True).exclude(status__in = [0]).values_list('bono')

    if request.data['provider'] == 0 or request.GET.get('provider') == 0: 
        bonos = Bonos.objects.filter(pk__in = recibos,org_name = org_name)
        # return bonos           
    else:
        provider = request.data['provider'].split(',')
        bonos = Bonos.objects.filter(pk__in = recibos,aseguradora__in=list(provider),org_name = org)
    info_org = getInfoOrg(request)
    if len(info_org['logo']) != 0:
        archivo_imagen = 'https://miurabox-public.s3.amazonaws.com/cas/' + info_org['logo']
        # archivo_imagen = get_presigned_url("cas/{url}".format(url=info_org['logo']),28800) 
    else:
        archivo_imagen = 'saam.jpg'
    columns = ['Aseguradora','Clave agente','Vigencia Inicio','Vigencia Fin', 'Cantidad','Factura','Tipo de cambio', 'Tipo de bono','Usuario que la creó','Fecha de Conciliación', 'Referenciador']

    tipo_reporte = 'Reporte Bonos'
    referenciador = []
    creadopor = []
    fecha_coc = []
    status_bon = []
    bonos = bonos.order_by('aseguradora__compania')
    for r in bonos:
        antig = get_antiguedad(r.start_validity)        
        if r.owner:
            val_owner = r.owner.first_name + ' '+ str(r.owner.last_name)
        else:
            val_owner = ''    
        if r.vendor:
            val_vendor = r.vendor.first_name + ' '+ str(r.vendor.last_name)
        else:
            val_vendor = ''
        if r.id:
            val_status = Recibos.objects.filter(org_name = org_name).exclude(bono__isnull = True).exclude(status__in = [0]).values_list('status')[0]
            val_fecha = Recibos.objects.filter(org_name = org_name).exclude(bono__isnull = True).exclude(status__in = [0]).values_list('conciliacion_date')[0]
        else:
            val_status = ''  
            val_fecha = ''  

        creadopor.append(val_owner)
        status_bon.append(val_status)
        referenciador.append(val_vendor)
        fecha_coc.append(val_fecha)
    obj = {
        'aseguradora'   : str(list(bonos.values_list('aseguradora__alias', flat = True))),
        'clave'   : str(list(bonos.values_list('clave__clave', flat = True))),
        'fecha_inicio'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in bonos.values_list('start_validity', flat = True) ])) ,
        'fecha_fin'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in bonos.values_list('end_validity', flat = True) ])) ,
        'cantidad'   : str(list(bonos.values_list('cantidad', flat = True))),
        'factura'   : str(list(bonos.values_list('factura_number', flat = True))),
        'tipo_cambio'   : str(list(bonos.values_list('tipo_cambio', flat = True))),
        'tipo_bono'   : str(list(bonos.values_list('type_bono', flat = True))),
        'creadopor'   : str(list(creadopor)),
        'referenciador'   : str(list(referenciador)),
        'status'   : str(list(status_bon)),
        'fecha_conciliacion'   : str(list(fecha_coc)),
        'tipo_reporte': tipo_reporte,
        'email_org':info_org['email'],
        'phone_org':info_org['phone'],
        'webpage_org':info_org['webpage'],
        'address_org':info_org['address'],
        'urlname_org':info_org['name'],
    }   
    obj['columns'] = str(list(columns))
    obj['imagen'] = archivo_imagen
    obj['registros'] = len(bonos)
    r = requests.post(settings.SERVICEEXCEL_URL + 'get-BonosExcel/', obj,
    # headers = {
    # 'Authorization':'Bearer %s'%request.user.user_info.fi_token_refresh,
    # # 'Content-Type':'application/json' 
    # }, 
    stream=True)
    response_data= r.text

    response = HttpResponse(r.content,content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

    return response
# Reporte claves list
@api_view(['GET'])
@permission_classes((IsAuthenticatedV2, IsOrgMemberV2,))
def Service_ClavesExcel(request):   
    claves = Claves.objects.filter(org_name = request.GET.get('org')).order_by('aseguradora__compania')
    try:
        dataToFilter = getDataForPerfilRestricted(request, request.GET.get('org'))
    except Exception as er:
        dataToFilter = {}
    if dataToFilter:
        if dataToFilter['pcapr']:
            claves = claves.filter(pk__in = list(dataToFilter['pcapr']))
        if dataToFilter['paspr']:
            claves = claves.filter(aseguradora__in = list(dataToFilter['paspr']))

    tipo_reporte = 'Reporte Claves de Agente'
    info_org = getInfoOrg(request)
    if len(info_org['logo']) != 0:
        archivo_imagen = 'https://miurabox-public.s3.amazonaws.com/cas/' + info_org['logo']
        # archivo_imagen = get_presigned_url("cas/{url}".format(url=info_org['logo']),28800) 
    else:
        archivo_imagen = 'saam.jpg'
    columns = ['Compañia', 'Nombre', 'Clave']
    compania = []
    c = ''
    cve = []
    name = []
    clav = []
    for p in claves:
        try:
            c = ((((((p.aseguradora.compania).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')    
        except Exception as eror:
            try:
                c = ((((((p.aseguradora.alias).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
            except Exception as err:
                c = 'Sin nombre'
        try:
            nam = ((((((p.name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')    
        except Exception as ee:
            nam = 'sin nombre'
        try:
            cv = ((((((p.clave).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')    
        except Exception as ee:
            cv = 'sin clave'
        compania.append(c)  
        name.append(nam)  
        clav.append(cv)  
    obj = {
        'aseguradora'   : str(list(compania)),
        'name'   : str(list(name)),
        'clave'   : str(list(clav)),
        'tipo_reporte': tipo_reporte,
        'email_org':info_org['email'],
        'phone_org':info_org['phone'],
        'webpage_org':info_org['webpage'],
        'address_org':info_org['address'],
        'urlname_org':info_org['name'],
    }   
    obj['columns'] = str(list(columns))
    obj['imagen'] = archivo_imagen
    obj['registros'] = len(claves)
    r = requests.post(settings.SERVICEEXCEL_URL + 'get-ClavesExcel/', obj,
    # headers = {
    # 'Authorization':'Bearer %s'%request.user.user_info.fi_token_refresh,
    # # 'Content-Type':'application/json' 
    # }, 
    stream=True)
    response_data= r.text

    response = HttpResponse(r.content,content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

    return response
# Reporte aseguradoras excel
@api_view(['POST'])
@permission_classes((IsAuthenticatedV2, IsOrgMemberV2,))
def Service_AseguradorasExcel(request):   
    provider = Provider.objects.filter(org_name = request.GET.get('org'))    
    claves = Claves.objects.filter(org_name = request.GET.get('org')).order_by('aseguradora__compania')
    try:
        dataToFilter = getDataForPerfilRestricted(request, request.GET.get('org'))
    except Exception as er:
        dataToFilter = {}
    if dataToFilter:
        if dataToFilter['pcapr']:
            claves = claves.filter(pk__in = list(dataToFilter['pcapr']))
            provider = provider.filter(pk__in = list(claves.values_list('aseguradora', flat = True)))
        if dataToFilter['paspr']:
            provider = provider.filter(aseguradora__in = list(dataToFilter['paspr']))

    tipo_reporte = 'Reporte Aseguradoras'
    info_org = getInfoOrg(request)
    if len(info_org['logo']) != 0:
        archivo_imagen = 'https://miurabox-public.s3.amazonaws.com/cas/' + info_org['logo']
        # archivo_imagen = get_presigned_url("cas/{url}".format(url=info_org['logo']),28800) 
    else:
        archivo_imagen = 'saam.jpg'
    columns = ['Nombre', 'Alias', 'RFC']
    compania = []
    c = ''
    for p in provider:
        c = ((((((p.compania).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')    
        compania.append(c)    
    
    obj = {
        'compania'   : str(list(compania)),
        'nombre'   : str(list(provider.values_list('alias', flat = True))),
        'rfc'   : str(list(provider.values_list('rfc', flat = True))),
        'tipo_reporte': tipo_reporte,
        'email_org':info_org['email'],
        'phone_org':info_org['phone'],
        'webpage_org':info_org['webpage'],
        'address_org':info_org['address'],
        'urlname_org':info_org['name'],
    }   
    obj['columns'] = str(list(columns))
    obj['imagen'] = archivo_imagen
    obj['registros'] = len(provider)
    r = requests.post(settings.SERVICEEXCEL_URL + 'get-AseguradorasExcel/', obj,
    # headers = {
    # 'Authorization':'Bearer %s'%request.user.user_info.fi_token_refresh,
    # # 'Content-Type':'application/json' 
    # }, 
    stream=True)
    response_data= r.text

    response = HttpResponse(r.content,content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

    return response
@api_view(['POST'])
@permission_classes((IsAuthenticatedV2, IsOrgMemberV2,))
def Service_seekerAseguradorasExcel(request):   
    user = request.META['user']
    org =  user['org']['name']

    prov_filters = [Q(compania__icontains = str(request.data['cadena'])), 
                                    Q(alias__icontains = str(request.data['cadena'])),
                                    Q(rfc__icontains = str(request.data['cadena']))]
    providers = Provider.objects.filter(reduce(OR, prov_filters),org_name = org).distinct('compania')
    queryset = providers  
    provider = queryset         
    columns = ['Nombre', 'Alias', 'RFC']
    
    tipo_reporte = 'Reporte Aseguradoras'
    info_org = getInfoOrg(request)
    if len(info_org['logo']) != 0:
        archivo_imagen = 'https://miurabox-public.s3.amazonaws.com/cas/' + info_org['logo']
        # archivo_imagen = get_presigned_url("cas/{url}".format(url=info_org['logo']),28800) 
    else:
        archivo_imagen = 'saam.jpg'
    columns = ['Nombre', 'Alias', 'RFC']
    compania = []
    c = ''
    for p in provider:
        c = ((((((p.compania).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')    
        compania.append(c)    
    
    obj = {
        'compania'   : str(list(compania)),
        'nombre'   : str(list(provider.values_list('alias', flat = True))),
        'rfc'   : str(list(provider.values_list('rfc', flat = True))),
        'tipo_reporte': tipo_reporte,
        'email_org':info_org['email'],
        'phone_org':info_org['phone'],
        'webpage_org':info_org['webpage'],
        'address_org':info_org['address'],
        'urlname_org':info_org['name'],
    }   
    obj['columns'] = str(list(columns))
    obj['imagen'] = archivo_imagen
    obj['registros'] = len(provider)
    r = requests.post(settings.SERVICEEXCEL_URL + 'get-AseguradorasExcel/', obj,
    # headers = {
    # 'Authorization':'Bearer %s'%request.user.user_info.fi_token_refresh,
    # # 'Content-Type':'application/json' 
    # }, 
    stream=True)
    response_data= r.text

    response = HttpResponse(r.content,content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

    return response
# Reporte paquetes excel
@api_view(['GET'])
@permission_classes((IsAuthenticatedV2, IsOrgMemberV2, )) 
def Service_PaquetesExcel(request):
    user = request.META['user']
    org =  user['org']['name']
    tipo_reporte = 'Reporte Paquetes'
    try:
        if len(request.GET.get('cadena')) > 0:
            prov_filters = [Q(compania__icontains = str(request.GET.get('cadena'))), 
                                        Q(alias__icontains = str(request.GET.get('cadena'))),
                                        Q(rfc__icontains = str(request.GET.get('cadena')))]
            providers = Provider.objects.filter(reduce(OR, prov_filters),org_name = org).distinct('id').values_list('pk', flat=True)
            ramos = Ramos.objects.filter(ramo_name__icontains = str(request.GET.get('cadena'))).values_list('pk', flat=True)
            subramos = SubRamos.objects.filter(subramo_name__icontains = str(request.GET.get('cadena')),org_name = org).values_list('pk', flat=True)
            pack_filters = [Q(provider__in = list(providers)), 
                                            Q(package_name__icontains = str(request.GET.get('cadena'))),
                                            Q(ramo__in = list(ramos)),
                                            Q(subramo__in = list(subramos))]
            packages = Package.objects.filter(reduce(OR, pack_filters),org_name = org, type_package =1)
        else:
            packages = Package.objects.filter(org_name=org, type_package =1)
    except Exception as e:
        packages = Package.objects.filter(org_name=org, type_package =1)
    claves = Claves.objects.filter(org_name=request.GET.get('org'), aseguradora__in = list(packages.values_list('provider', flat=True)))
    try:
        dataToFilter = getDataForPerfilRestricted(request, request.GET.get('org'))
    except Exception as er:
        dataToFilter = {}
    if dataToFilter:
        if dataToFilter['pcapr']:
            claves = claves.filter(pk__in = list(dataToFilter['pcapr']))
            packages = packages.filter(provider__in = list(claves.values_list('aseguradora', flat=True)))
        if dataToFilter['paspr']:
            packages = packages.filter(provider__in = list(dataToFilter['paspr']))
    # Empieza insertado de imagen
    packages = packages.order_by('subramo__subramo_name')
    info_org = getInfoOrg(request)
    if len(info_org['logo']) != 0:
        archivo_imagen = 'https://miurabox-public.s3.amazonaws.com/cas/' + info_org['logo']
        # archivo_imagen = get_presigned_url("cas/{url}".format(url=info_org['logo']),28800) 
    else:
        archivo_imagen = 'saam.jpg'
    columns = ['Compañia', 'Paquete', 'Subramo']
    obj = {
        'compania'   : str(list(packages.values_list('provider__alias', flat = True))),
        'nombre'   : str(list(packages.values_list('package_name', flat = True))),
        'subramo'   : str(list(packages.values_list('subramo__subramo_name', flat = True))),
        'tipo_reporte': tipo_reporte,
        'email_org':info_org['email'],
        'phone_org':info_org['phone'],
        'webpage_org':info_org['webpage'],
        'address_org':info_org['address'],
        'urlname_org':info_org['name'],
    }   
    obj['columns'] = str(list(columns))
    obj['imagen'] = archivo_imagen
    obj['total'] = len(packages)
    obj['registros'] = len(packages)
    r = requests.post(settings.SERVICEEXCEL_URL + 'get-PaquetesExcel/', obj,
    # headers = {
    # 'Authorization':'Bearer %s'%request.user.user_info.fi_token_refresh,
    # # 'Content-Type':'application/json' 
    # }, 
    stream=True)
    response_data= r.text

    response = HttpResponse(r.content,content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

    return response
# Reporte siniestros lista
@api_view(['POST'])
@permission_classes((IsAuthenticatedV2, IsOrgMemberV2,))
def Service_SiniestrosExcel(request):   
    status = request.data['status']
    ramo = request.data['ramo']
    contratante = request.data['contratante']
    type_person = request.data['type_contractor']
    tipo_fecha = request.data['fechas']
    since = request.data['since']
    until = request.data['until']
    affected_full_name = request.data['affected_full_name']
    numero_siniestro = request.data['numero_siniestro']
    num_poliza = request.data['num_poliza']
    certificado = request.data['num_certificado']
    folio_c = request.data['folio']
    tipo = request.data['tipo']
    bsLine = request.data['businessLine']
    #Consulta de todos los objetos
    siniestro = Siniestros.objects.filter(org_name = request.GET.get('org'))
    try:
        onlyCaratula = request.data['only_caratula']
    except:
        onlyCaratula = 0
    #FILTROS
    #Si tiene un numero de poliza
    if numero_siniestro:
        siniestro = siniestro.filter(numero_siniestro__icontains = numero_siniestro)

    if num_poliza:
        id_pol = Polizas.objects.filter(poliza_number__icontains = num_poliza, org_name = request.GET.get('org')).values_list('id')
        if certificado:
            id_pol = Polizas.objects.filter(poliza_number__icontains = num_poliza,certificate_number__icontains = certificado, org_name = request.GET.get('org')).values_list('id')
        siniestro = siniestro.filter(poliza =  id_pol)
    if int(bsLine) > 0:
        if int(bsLine) == 3:
            siniestro = siniestro.filter(poliza__business_line = 0) 
        else:
            siniestro = siniestro.filter(poliza__business_line = bsLine)
    # Si folio comania es diferente de 0
    if folio_c:
        siniestro = siniestro.filter(folio_compania__icontains=folio_c)

    #Si un estatus es seleccionado agrega un filtro tomando en cuenta el estatus
    if status:
        siniestro = siniestro.filter(status=status)

    if int(tipo) > 0 and int(ramo) and int(ramo) == 2:
            accidente = Accidentes.objects.filter(tipo_siniestro = tipo).values('siniestro__id')
            siniestro = siniestro.filter(pk__in = accidente)

    #Si un ramo es seleccionado agrega un filtro tomando en cuenta el ramo 
    if ramo:
        siniestro = siniestro.filter(tipo_siniestro_general=ramo)
        if int(ramo) == 2 and affected_full_name is not None:
            accidente = Accidentes.objects.filter(affected_full_name__icontains=affected_full_name).values('siniestro')
            lista=[]
            for x in accidente:
                lista.append(x['siniestro'])    
                siniestro = siniestro.filter(id__in=lista)
    #Si un contratante es seleccionado
    if int(contratante) > 0:
        #hace una consulta para buscar las plizas que tiene ese contratante
        consulta_poliza = Polizas.objects.filter(contractor = contratante,org_name = request.GET.get('org')).values_list('id')
        #con los id's de las polizas busco los siniestros que contienen 
        siniestro = siniestro.filter(poliza__icontains=consulta_poliza)
    # filtro solo caratula y sus polizas 12 y 11
    if int(onlyCaratula) != 0:
        siniestro = siniestro.filter(Q(poliza__id=onlyCaratula) | Q(poliza__parent__id=onlyCaratula), poliza__document_type__in = list([11,12]))
    else:
        siniestro = siniestro
    #Si las fechas no son vacias agrega el filtro de rango de fechas
    if since and until:
        try:
            f = "%d/%m/%Y"        
            since = datetime.strptime(since , f)
            until = datetime.strptime(until , f)
        except:
            f = "%m/%d/%Y"        
            since = datetime.strptime(since , f)
            until = datetime.strptime(until , f)
        #Este filtro depende si el rango de fechas es por fecha de ingreso o por fecha de siniestro
        if tipo_fecha == 1:
            siniestro = siniestro.filter(fecha_ingreso__gte = since, fecha_ingreso__lte = until)
        elif tipo_fecha == 2:
            siniestro = siniestro.filter(fecha_siniestro__gte = since, fecha_siniestro__lte = until)
    try:
        dataToFilter = getDataForPerfilRestricted(request, request.GET.get('org'))
    except Exception as er:
        dataToFilter = {}
    if dataToFilter:
        # Contratantes***
        polizas = Polizas.objects.filter(document_type__in = [1,3,11,12,6], org_name = request.GET.get('org'))
        polizasToF = Polizas.objects.filter(document_type__in = [1,3,11], org_name = request.GET.get('org'))
        if dataToFilter['ccpr']:
            polizasToF = polizasToF.filter(contractor__in = list(dataToFilter['ccpr']))
        if dataToFilter['cgpr']:
            polizasToF = polizasToF.filter(contractor__group__in = list(dataToFilter['cgpr']))
        if dataToFilter['ccepr']:
            polizasToF = polizasToF.filter(contractor__cellule__in = list(dataToFilter['ccepr']))
        if dataToFilter['crpr']:
            polizasToF = polizasToF.filter(contractor__vendor__in = list(dataToFilter['crpr']))
        if dataToFilter['cspr']:
            polizasToF = polizasToF.filter(contractor__sucursal__in = list(dataToFilter['cspr']))
        # Pólizas ****
        if dataToFilter['pppr']:
            polizasToF = polizasToF.filter(pk__in = list(dataToFilter['pppr']))
        if dataToFilter['pgpr']:
            polizasToF = polizasToF.filter(contractor__group__in = list(dataToFilter['pgpr']))
        if dataToFilter['pcepr']:
            polizasToF = polizasToF.filter(celula__in = list(dataToFilter['pcepr']))
        if dataToFilter['prpr']:
            polizasToF = polizasToF.filter(ref_policy__referenciador__in = list(dataToFilter['prpr']))
        if dataToFilter['pspr']:
            polizasToF = polizasToF.filter(sucursal__in = list(dataToFilter['pspr']))
        if dataToFilter['papr']:
            polizasToF = polizasToF.filter(groupinglevel__in = list(dataToFilter['papr']))
        if dataToFilter['pcapr']:
            polizasToF = polizasToF.filter(clave__in = list(dataToFilter['pcapr']))
        if dataToFilter['psrpr']:
            polizasToF = polizasToF.filter(subramo__subramo_code__in = list(dataToFilter['psrpr']))
        if dataToFilter['paspr']:
            polizasToF = polizasToF.filter(aseguradora__in = list(dataToFilter['paspr']))
        if dataToFilter['pstpr']:
            polizasToF = polizasToF.filter(status__in = list(dataToFilter['pstpr']))
        
        polizasGT = polizas.filter(document_type = 6, parent__parent__parent__in = list(polizasToF.filter(document_type = 3)))
        polizasCT = polizas.filter(document_type = 12, parent__in = list(polizasToF))
        polizasFin = list(polizasToF.values_list('pk', flat = True)) + list(polizasCT.values_list('pk', flat = True)) +list(polizasGT.values_list('pk', flat = True))
        siniestro = siniestro.filter(poliza__in = list(polizasFin))
    # siniestro = siniestro.order_by('poliza__document_type')
    # siniestro = siniestro.order_by('poliza__id','poliza__contractor__full_name','poliza__juridical__j_name')
    try:
        siniestro = siniestro.exclude(poliza__status=0)
    except:
        siniestro = siniestro
    siniestro = siniestro.order_by('id')

    tipo_reporte = 'Reporte Siniestros'
    info_org = getInfoOrg(request)
    if len(info_org['logo']) != 0:
        archivo_imagen = 'https://miurabox-public.s3.amazonaws.com/cas/' + info_org['logo']
        # archivo_imagen = get_presigned_url("cas/{url}".format(url=info_org['logo']),28800) 
    else:
        archivo_imagen = 'saam.jpg'
    columns = ['No. Siniestro','Folio Interno','Estatus','Fecha Ocurrio','Fecha Ingreso','No. Poliza','Contratante','Aseguradora',
                'Subramo','Inicio Poliza','Fin Poliza','Tipo']
    contract = []
    contractE = []
    contractP = []
    contractG= []
    tipopagosin=[]
    contratantex = ''
    for r in siniestro:
        contratanteE = ''
        contratanteP = ''
        contratanteG = ''
        if r.poliza:
            if r.poliza.document_type == 6:
                if r.poliza.parent.parent and r.poliza.parent.parent.parent:      
                    if r.poliza.parent.parent.parent.contractor:
                        contratantex = ((((((r.poliza.parent.parent.parent.contractor.full_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        contratanteE = r.poliza.parent.parent.parent.contractor.email
                        contratanteP = r.poliza.parent.parent.parent.contractor.phone_number
                        contratanteG = ((((((r.poliza.parent.parent.parent.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')     
                           
            elif r.poliza.document_type == 4:
                if r.poliza.parent.contractor:
                    contratantex = ((((((r.poliza.parent.contractor.full_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    contratanteE = r.poliza.parent.contractor.email
                    contratanteP = r.poliza.parent.contractor.phone_number
                    contratanteG = ((((((r.poliza.parent.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')     
                    
            else:
                if r.poliza.contractor:
                    contratantex = ((((((r.poliza.contractor.full_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    contratanteE = r.poliza.contractor.email
                    contratanteP = r.poliza.contractor.phone_number
                    contratanteG = ((((((r.poliza.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')     
                    #
        else:
            contratanteE = ''
            contratanteP = ''
            contratanteG = ''
        contract.append(contratantex)
        contractE.append(contratanteE)
        contractP.append(contratanteP)
        contractG.append(contratanteG)

    statuses = {
      3:'Completada/Procedente',
      5:'Rechazada/ No Procedente',
      6:'En espera/ Solicitud de Información',
      1: 'Pendiente', 
      2:  'En Trámite', 
      4: 'Cancelada', 
      7: 'Reproceso', 
      8: 'Inconformidad'
    }

    obj = {
        'no_siniestro'   : str(list(siniestro.values_list('numero_siniestro', flat = True))),
        'folio'   : str(list(siniestro.values_list('folio_interno', flat = True))),
        'status'   : str([ statuses[sin.status] if sin.poliza and sin.poliza.ramo.ramo_code in [1,2] else sin.get_status_display() for sin in siniestro]),
        'fecha_siniestro'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in siniestro.values_list('fecha_siniestro', flat = True) ])),
        'fecha_ingreso'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in siniestro.values_list('fecha_ingreso', flat = True) ])),
        'fecha_terminacion'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in siniestro.values_list('fecha_terminacion', flat = True) ])),
        'poliza_number'   : str(list(siniestro.values_list('poliza__poliza_number', flat = True))),
        'natural'   : str(list(contract)),
        'aseguradora'   : str(list(siniestro.values_list('poliza__aseguradora__alias', flat = True))),
        'subramo'   : str(list(siniestro.values_list('poliza__subramo__subramo_name', flat = True))),
        'ramo'   : str(list(siniestro.values_list('poliza__ramo__ramo_code', flat = True))),
        'start_policy'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in siniestro.values_list('poliza__start_of_validity', flat = True) ])),
        'end_policy'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in siniestro.values_list('poliza__end_of_validity', flat = True) ])),
        'tipo'   : str(list(siniestro.values_list('accidente_sinister__initial', flat = True))),
        'tipo_reporte': tipo_reporte,
        'email_org':info_org['email'],
        'phone_org':info_org['phone'],
        'webpage_org':info_org['webpage'],
        'address_org':info_org['address'],
        'urlname_org':info_org['name'],
    }   
    obj['columns'] = str(list(columns))
    obj['imagen'] = archivo_imagen
    obj['total'] = len(siniestro)
    obj['registros'] = len(siniestro)
    r = requests.post(settings.SERVICEEXCEL_URL + 'get-SiniestrosExcel/', obj,
    # headers = {
    # 'Authorization':'Bearer %s'%request.user.user_info.fi_token_refresh,
    # # 'Content-Type':'application/json' 
    # }, 
    stream=True)
    response_data= r.text

    response = HttpResponse(r.content,content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

    return response
# Reporte Comisiones listado
@api_view(['GET'])
@permission_classes((IsAuthenticatedV2, IsOrgMemberV2))
def Service_ComisionExcel(request):
    request.request = request
    valueCom = True
    try:
        valueCom = comisions(request)
    except Exception as ers:
        valueCom =  True
    recibos =  get_comision_recibos_claves(request)
    try:
        dataToFilter = getDataForPerfilRestricted(request, request.GET.get('org'))
    except Exception as er:
        dataToFilter = {}
    if dataToFilter:
        # Contratantes**
        polizasCl = Polizas.objects.filter(document_type__in = [1,3,11,7,8,12,6,4], org_name = request.GET.get('org'))
        polizasToF = Polizas.objects.filter(document_type__in = [1,3,11,7,8], org_name = request.GET.get('org'))
        if dataToFilter['ccpr']:
            polizasToF = polizasToF.filter(contractor__in = list(dataToFilter['ccpr']))
        if dataToFilter['cgpr']:
            polizasToF = polizasToF.filter(contractor__group__in = list(dataToFilter['cgpr']))
        if dataToFilter['ccepr']:
            polizasToF = polizasToF.filter(contractor__cellule__in = list(dataToFilter['ccepr']))
        if dataToFilter['crpr']:
            polizasToF = polizasToF.filter(contractor__vendor__in = list(dataToFilter['crpr']))
        if dataToFilter['cspr']:
            polizasToF = polizasToF.filter(contractor__sucursal__in = list(dataToFilter['cspr']))
        # Pólizas ****
        if dataToFilter['pppr']:
            polizasToF = polizasToF.filter(pk__in = list(dataToFilter['pppr']))
        if dataToFilter['pgpr']:
            polizasToF = polizasToF.filter(contractor__group__in = list(dataToFilter['pgpr']))
        if dataToFilter['pcepr']:
            polizasToF = polizasToF.filter(celula__in = list(dataToFilter['pcepr']))
        if dataToFilter['prpr']:
            polizasToF = polizasToF.filter(ref_policy__referenciador__in = list(dataToFilter['prpr']))
        if dataToFilter['pspr']:
            polizasToF = polizasToF.filter(sucursal__in = list(dataToFilter['pspr']))
        if dataToFilter['papr']:
            polizasToF = polizasToF.filter(groupinglevel__in = list(dataToFilter['papr']))
        if dataToFilter['pcapr']:
            polizasToF = polizasToF.filter(clave__in = list(dataToFilter['pcapr']))
        if dataToFilter['psrpr']:
            polizasToF = polizasToF.filter(subramo__subramo_code__in = list(dataToFilter['psrpr']))
        if dataToFilter['paspr']:
            polizasToF = polizasToF.filter(aseguradora__in = list(dataToFilter['paspr']))
        if dataToFilter['pstpr']:
            polizasToF = polizasToF.filter(status__in = list(dataToFilter['pstpr']))
        
        polizasCT = polizasCl.filter(document_type = 12, parent__in = list(polizasToF))
        polizasGT = polizasCl.filter(document_type = 6, parent__parent__parent__in = list(polizasToF))
        polizasFin = list(polizasToF.values_list('pk', flat = True)) + list(polizasCT.values_list('pk', flat = True)) + list(polizasGT.values_list('pk', flat = True))
        polizas = polizasFin
        recibos = recibos.filter(poliza__in = list(polizas))
    columns = ['Contratante','No.Póliza/Fianza','No.Endoso','No.Recibo', 'Prima Neta','Prima Total', 'Moneda' ,'Estatus',
                 'Comisión Conciliada', 'Fecha Inicio', 'Fecha Fin', 'Fecha liquidación', 'Fecha pago','Proveedor', 'Clave','Domiciliado',
                 'Tipo', 'Subramo', 'Forma de Pago', 'Estatus', 'Inicio Póliza/Fianza/Bono', 'Fin Póliza/Fianza/Bono','Email', 
                 'Teléfono','Asegurado','RPF', 'Derecho', 'IVA', 'Vencimiento','Referenciador', 'Grupo', 'Responsable']

    # Empieza insertado de imagen
    info_org = getInfoOrg(request)

    if len(info_org['logo']) != 0:
        archivo_imagen = 'https://miurabox-public.s3.amazonaws.com/cas/' + info_org['logo']
        # archivo_imagen = get_presigned_url("cas/{url}".format(url=info_org['logo']),28800) 
    else:
        archivo_imagen = 'saam.jpg'

    tipo_reporte = "Reporte de Recibos Comisión"

    asegurado = []
    antiguedad = []
    referenciador = []
    responsable = []
    collection = []
    userpay = []
    creadopor = []
    contract = []
    contractE = []
    contractP = []
    contractG= []
    inicio = []
    fin = []
    aseguradora = []
    clave = []
    poliza_number = []
    inc = ''
    fn = ''
    aseg = ''
    cve = ''
    pnumber = ''
    subramo = []
    receipttype = []
    currency = []
    celulaC = []
    grupo1 = []
    grupo2 = []
    nivelAg = []
    grupo3 = []
    grupo4 = []
    clasifica = []
    businessLine = []
    # recibos = recibos.order_by('poliza__contractor__full_name','poliza__juridical__j_name','fianza__natural__full_name','fianza__juridical__j_name','poliza__ramo__ramo_name','fianza__ramo__ramo_name','poliza__aseguradora__compania','fianza__aseguradora__compania')
    recibos = recibos.order_by('id')
    for r in recibos:
        grupo1_ = ''
        grupo2_ = ''
        nivelAg_ = ''
        grupo3_ = ''
        grupo4_ = ''
        receipt1 = ''
        fc = 1
        inc = ''
        fn = ''
        aseg = ''
        cve = ''
        pnumber = ''
        sramo = ''
        cel = ''
        contratantex = ''
        contratanteE = ''
        contratanteP = ''
        contratanteG = ''
        antig = get_antiguedad(r.fecha_inicio)
        if r.user_pay:
            val_userpay = r.user_pay.first_name + ' '+ str(r.user_pay.last_name)
        else:
            val_userpay = ''
        if r.owner:
            val_owner = r.owner.first_name + ' '+ str(r.owner.last_name)
        else:
            val_owner = ''
        if r.poliza:
            if r.poliza.document_type == 6:
                if r.poliza.parent.parent.parent.business_line:
                    if int(r.poliza.parent.parent.parent.business_line) ==1:
                        businessLine_ = 'Comercial'
                    elif int(r.poliza.parent.parent.parent.business_line) ==2:
                        businessLine_ = 'Personal'
                    elif int(r.poliza.parent.parent.parent.business_line) ==0:
                        businessLine_ = 'Otro'
                    else:
                        businessLine_ = ''
                else:
                    try:
                        if int(r.poliza.parent.parent.parent.business_line) ==0:
                            businessLine_ = 'Otro'
                        else:
                            businessLine_ = ''
                    except:
                        businessLine_ = ''
                receipt1 = 'Categoría'
                try:
                    sramo = r.poliza.parent.parent.parent.subramo.subramo_name
                    fc = r.poliza.parent.parent.parent.f_currency
                    pnumber = r.poliza.parent.parent.parent.poliza_number
                    inc = r.poliza.parent.parent.parent.start_of_validity.strftime("%d/%m/%Y")
                    fn =r.poliza.parent.parent.parent.end_of_validity.strftime("%d/%m/%Y")
                    try:
                        cve = r.poliza.parent.parent.parent.clave.name +' '+str(r.poliza.parent.parent.parent.clave.clave)
                        cve = ((((((cve).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    except Exception as ers:
                        cve =''
                    aseg = r.poliza.parent.parent.parent.aseguradora.alias
                except Exception as fd:
                    inc = ''
                    fn = ''
                    aseg = ''
                    cve = ''
                    pnumber = ''
                    sramo = ''
                    fc = 1
                if r.poliza.parent.parent.parent.contractor:
                    contratantex = ((((((r.poliza.parent.parent.parent.contractor.full_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    contratanteE = r.poliza.parent.parent.parent.contractor.email
                    contratanteP = r.poliza.parent.parent.parent.contractor.phone_number
                    contratanteG = ((((((r.poliza.parent.parent.parent.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')     
                    # contratanteG = r.parent.parent.parent.contractor.group.group_name                    
                    try:
                        if r.poliza.parent.parent.parent.contractor.group.type_group == 1:
                            contratanteG = ((((((r.poliza.parent.parent.parent.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                            grupo1_ = ''
                            grupo2_ = ''
                        elif r.poliza.parent.parent.parent.contractor.group.type_group == 2:
                            grupotype1 = Group.objects.get(pk = r.poliza.parent.parent.parent.contractor.group.parent.id)
                            contratanteG = ((((((grupotype1.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                            grupo1_ = ((((((r.poliza.parent.parent.parent.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                            grupo2_ = ''
                        elif r.poliza.parent.parent.parent.contractor.group.type_group == 3:
                            grupotype1 = Group.objects.get(pk = r.poliza.parent.parent.parent.contractor.group.parent.parent.id)
                            contratanteG = ((((((grupotype1.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                            subgrupotype2 = Group.objects.get(pk = r.poliza.parent.parent.parent.contractor.group.parent.id)
                            grupo1_ = ((((((subgrupotype2.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                            grupo2_ = ((((((r.poliza.parent.parent.parent.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    except Exception as e:
                        contratanteG = ''
                        grupo1_ = ''
                        grupo2_ = ''
                    try:
                        if r.poliza.parent.parent.parent.groupinglevel:
                            if r.poliza.parent.parent.parent.groupinglevel.type_grouping == 1:
                                nivelAg_ = ((((((r.poliza.parent.parent.parent.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo3_ = ''
                                grupo4_ = ''
                            elif r.poliza.parent.parent.parent.groupinglevel.type_grouping == 2:
                                grupotype1 = GroupingLevel.objects.get(pk = r.poliza.parent.parent.parent.groupinglevel.parent.id)
                                nivelAg_ = ((((((grupotype1.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo3_ = ((((((r.poliza.parent.parent.parent.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo4_ = ''
                            elif r.poliza.parent.parent.parent.groupinglevel.type_grouping == 3:
                                grupotype1 = GroupingLevel.objects.get(pk = r.poliza.parent.parent.parent.groupinglevel.parent.parent.id)
                                nivelAg_ = ((((((grupotype1.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                subgrupotype2 = GroupingLevel.objects.get(pk = r.poliza.parent.parent.parent.groupinglevel.parent.id)
                                grupo3_ = ((((((subgrupotype2.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo4_ = ((((((r.poliza.parent.parent.parent.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        else:
                            nivelAg_ = ''
                            grupo3_ = ''
                            grupo4_ = ''  
                    except Exception as e:
                        nivelAg_ = ''
                        grupo3_ = ''
                        grupo4_ = '' 
         
                    if r.poliza.parent.parent.parent.contractor.classification:
                        clasifica_ = r.poliza.parent.parent.parent.contractor.classification.classification_name  
                    else:
                        clasifica_='-----'
                    if r.poliza.parent.parent.parent.celula:
                        cel = r.poliza.parent.parent.parent.celula.celula_name  
                    else:
                        cel='-----'
                else:
                    contratantex = ''
                    contratanteE = ''
                    contratanteP = ''
                    contratanteG = ''    
                    # contratanteG = r.parent.parent.parent.juridical.group.group_name
                    
                    contratanteG = ''
                    grupo1_ = ''
                    grupo2_ = ''
                    nivelAg_ = ''
                    grupo3_ = ''
                    grupo4_ = ''          
                    clasifica_='-----'
                    cel='-----'
            elif r.poliza.document_type == 4:
                if r.poliza.parent.business_line:
                    if int(r.poliza.parent.business_line) ==1:
                        businessLine_ = 'Comercial'
                    elif int(r.poliza.parent.business_line) ==2:
                        businessLine_ = 'Personal'
                    elif int(r.poliza.parent.business_line) ==0:
                        businessLine_ = 'Otro'
                    else:
                        businessLine_ = ''
                else:
                    try:
                        if int(r.poliza.parent.business_line) ==0:
                            businessLine_ = 'Otro'
                        else:
                            businessLine_ = ''
                    except:
                        businessLine_ = ''
                receipt1 = 'Subgrupo'
                try:
                    sramo = r.poliza.parent.subramo.subramo_name
                    fc = r.poliza.parent.f_currency
                    pnumber = r.poliza.parent.poliza_number
                    inc = r.poliza.parent.start_of_validity.strftime("%d/%m/%Y")
                    fn =r.poliza.parent.end_of_validity.strftime("%d/%m/%Y")
                    try:
                        cve = r.poliza.parent.clave.name +' '+str(r.poliza.parent.clave.clave)
                        cve = ((((((cve).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    except Exception as eaa:
                        cve =''
                    aseg = r.poliza.parent.aseguradora.alias
                except Exception as fd:
                    inc = ''
                    fn = ''
                    aseg = ''
                    cve = ''
                    pnumber = ''
                    sramo = ''
                    fc = 1
                if r.poliza.parent.contractor:
                    contratantex = ((((((r.poliza.parent.contractor.full_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    contratanteE = r.poliza.parent.contractor.email
                    contratanteP = r.poliza.parent.contractor.phone_number
                    contratanteG = ((((((r.poliza.parent.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')     
                    # contratanteG = r.poliza.parent.contractor.group.group_name
                    
                    try:
                        if r.poliza.parent.contractor.group.type_group == 1:
                            contratanteG = ((((((r.poliza.parent.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                            grupo1_ = ''
                            grupo2_ = ''
                        elif r.poliza.parent.contractor.group.type_group == 2:
                            grupotype1 = Group.objects.get(pk = r.poliza.parent.contractor.group.parent.id)
                            contratanteG = ((((((grupotype1.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                            grupo1_ = ((((((r.poliza.parent.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                            grupo2_ = ''
                        elif r.poliza.parent.contractor.group.type_group == 3:
                            grupotype1 = Group.objects.get(pk = r.poliza.parent.contractor.group.parent.id)
                            contratanteG = ((((((grupotype1.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                            subgrupotype2 = Group.objects.get(pk = r.poliza.parent.contractor.group.parent.id)
                            grupo1_ = ((((((subgrupotype2.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                            grupo2_ = ((((((r.poliza.parent.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    except Exception as e:
                        contratanteG = ''
                        grupo1_ = ''
                        grupo2_ = ''
                    try:
                        if r.poliza.parent.groupinglevel:
                            if r.poliza.parent.groupinglevel.type_grouping == 1:
                                nivelAg_ = ((((((r.poliza.parent.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo3_ = ''
                                grupo4_ = ''
                            elif r.poliza.parent.groupinglevel.type_grouping == 2:
                                grupotype1 = GroupingLevel.objects.get(pk = r.poliza.parent.groupinglevel.parent.id)
                                nivelAg_ = ((((((grupotype1.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo3_ = ((((((r.poliza.parent.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo4_ = ''
                            elif r.poliza.parent.groupinglevel.type_grouping == 3:
                                grupotype1 = GroupingLevel.objects.get(pk = r.poliza.parent.groupinglevel.parent.id)
                                nivelAg_ = ((((((grupotype1.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                subgrupotype2 = GroupingLevel.objects.get(pk = r.poliza.parent.groupinglevel.parent.id)
                                grupo3_ = ((((((subgrupotype2.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo4_ = ((((((r.poliza.parent.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        else:
                            nivelAg_ = ''
                            grupo3_ = ''
                            grupo4_ = ''  
                    except Exception as e:
                        nivelAg_ = ''
                        grupo3_ = ''
                        grupo4_ = '' 
         
                    if r.poliza.parent.contractor.classification:
                        clasifica_ = r.poliza.parent.contractor.classification.classification_name  
                    else:
                        clasifica_='-----'
                    if r.poliza.parent.celula:
                        cel = r.poliza.parent.celula.celula_name  
                    else:
                        cel='-----'
                else:
                    contratantex = ''
                    contratanteE = ''
                    contratanteP =''
                    contratanteG = ''     
                    contratanteG = ''
                    grupo1_ = ''
                    grupo2_ = ''
                    nivelAg_ = ''
                    grupo3_ = ''
                    grupo4_ = ''  
                    clasifica_='-----'
                    cel='-----'
            else:
                receipt1 = 'Póliza'  
                if r.poliza.business_line:
                    if int(r.poliza.business_line) ==1:
                        businessLine_ = 'Comercial'
                    elif int(r.poliza.business_line) ==2:
                        businessLine_ = 'Personal'
                    elif int(r.poliza.business_line) ==0:
                        businessLine_ = 'Otro'
                    else:
                        businessLine_ = ''
                else:
                    if r.poliza.business_line in [0, '0', None]:
                      businessLine_ = 'Otro'
                    else:
                      businessLine_ = ''              
                if r.poliza.document_type == 7:
                    receipt1 = 'Fianza'
                if r.poliza.document_type == 8:
                    receipt1 = 'Fianza Colectiva'
                if r.poliza.document_type == 11:
                    receipt1 = 'Colectividad'
                if r.poliza.document_type == 12:
                    receipt1 = 'Póliza de Colectividad'
                if r.poliza.document_type == 3:
                    receipt1 = 'Póliza de Grupo'
                try:
                    sramo = r.poliza.subramo.subramo_name
                    fc = r.poliza.f_currency
                    pnumber = r.poliza.poliza_number
                    inc = r.poliza.start_of_validity.strftime("%d/%m/%Y")
                    fn =r.poliza.end_of_validity.strftime("%d/%m/%Y")
                    try:
                        cve = r.poliza.clave.name +' '+str(r.poliza.clave.clave)
                        cve = ((((((cve).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    except Exception as es:
                        cve =''
                    aseg = r.poliza.aseguradora.alias
                except Exception as fd:
                    inc = ''
                    fn = ''
                    aseg = ''
                    cve = ''
                    pnumber = ''
                    fc = 1
                if r.poliza.contractor:
                    contratantex = ((((((r.poliza.contractor.full_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    contratanteE = r.poliza.contractor.email
                    contratanteP = r.poliza.contractor.phone_number
                    
                    try:
                        if r.poliza.contractor.group.type_group == 1:
                            contratanteG = ((((((r.poliza.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                            grupo1_ = ''
                            grupo2_ = ''
                        elif r.poliza.contractor.group.type_group == 2:
                            grupotype1 = Group.objects.get(pk = r.poliza.contractor.group.parent.id)
                            contratanteG = ((((((grupotype1.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                            grupo1_ = ((((((r.poliza.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                            grupo2_ = ''
                        elif r.poliza.contractor.group.type_group == 3:
                            grupotype1 = Group.objects.get(pk = r.poliza.contractor.group.parent.parent.id)
                            contratanteG = ((((((grupotype1.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                            subgrupotype2 = Group.objects.get(pk = r.poliza.contractor.group.parent.id)
                            grupo1_ = ((((((subgrupotype2.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                            grupo2_ = ((((((r.poliza.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    except Exception as e:
                        contratanteG = ''
                        grupo1_ = ''
                        grupo2_ = ''
                    try:
                        if r.poliza.groupinglevel:
                            if r.poliza.groupinglevel.type_grouping == 1:
                                nivelAg_ = ((((((r.poliza.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo3_ = ''
                                grupo4_ = ''
                            elif r.poliza.groupinglevel.type_grouping == 2:
                                grupotype1 = GroupingLevel.objects.get(pk = r.poliza.groupinglevel.parent.id)
                                nivelAg_ = ((((((grupotype1.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo3_ = ((((((r.poliza.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo4_ = ''
                            elif r.poliza.groupinglevel.type_grouping == 3:
                                grupotype1 = GroupingLevel.objects.get(pk = r.poliza.groupinglevel.parent.parent.id)
                                nivelAg_ = ((((((grupotype1.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                subgrupotype2 = GroupingLevel.objects.get(pk = r.poliza.groupinglevel.parent.id)
                                grupo3_ = ((((((subgrupotype2.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo4_ = ((((((r.poliza.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        else:
                            nivelAg_ = ''
                            grupo3_ = ''
                            grupo4_ = ''  
                    except Exception as e:
                        nivelAg_ = ''
                        grupo3_ = ''
                        grupo4_ = '' 
         
                    if r.poliza.contractor.classification:
                        clasifica_ = r.poliza.contractor.classification.classification_name  
                    else:
                        clasifica_='-----'
                    if r.poliza.celula:
                        cel = r.poliza.celula.celula_name  
                    else:
                        cel='-----'
                else:
                    contratantex = ''
                    contratanteE = ''
                    contratanteP =''
                    contratanteG = ''     
                    contratanteG = ''
                    grupo1_ = ''
                    grupo2_ = ''
                    nivelAg_ = ''
                    grupo3_ = ''
                    grupo4_ = ''  
                    clasifica_='-----'
                    cel='-----'
            if r.poliza.responsable:
                val_resp = r.poliza.responsable.first_name + ' '+ str(r.poliza.responsable.last_name)
            else:
                val_resp = ''
            if r.poliza.collection_executive:
                val_cexe = r.poliza.collection_executive.first_name + ' '+ str(r.poliza.collection_executive.last_name)
            else:
                val_cexe = ''
            try:
                refs_policy = ReferenciadoresInvolved.objects.filter(policy = r.poliza.id,is_changed=False).values_list('referenciador__first_name','referenciador__last_name')
                if len(refs_policy):
                    v = []
                    try:
                        for it in refs_policy:
                            v.append(it[0] +' '+ str(it[1])+str('-'))
                        referenc = v
                    except Exception as y:
                        v = []
                        referenc = []
                else:
                    v = []
                    referenc = []
            except Exception as e:
                v = []
                referenc = [] 
            if r.poliza.ramo:
                if r.poliza.ramo.ramo_code == 1:
                    form = Life.objects.filter(policy = r.poliza.id)
                    try:
                        if form:
                            value = form[0].personal.full_name
                        else:
                            value = ''
                    except Exception as rt:
                       value = ''
                elif r.poliza.ramo.ramo_code == 2:
                    form = AccidentsDiseases.objects.filter(policy = r.poliza.id)
                    if form:
                        value = form[0].personal.full_name
                    else:
                        value = ''
                elif r.poliza.subramo.subramo_code == 9:
                    form = AutomobilesDamages.objects.filter(policy = r.poliza.id)
                    if form:
                        try:
                            form[0].model = ((((((form[0].model).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                            form[0].version = ((((((form[0].version).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        except Exception as ers:
                            form[0].model = form[0].model
                            form[0].version = form[0].version
                        value = str(form[0].brand) + '-' + str(form[0].model) + '-' + str(form[0].version)+ '-' + str(form[0].serial)
                    else:
                        value = ''
                elif r.poliza.ramo.ramo_code == 3 and not r.poliza.subramo.subramo_code == 9:
                    form = Damages.objects.filter(policy = r.poliza.id)
                    if form:
                        value = form[0].insured_item
                    else:
                        value = ''
                else:
                    value = 'Sin asegurado'
            else:
                value = 'Sin asegurado'

        else:
            value = 'Sin asegurado'
            val_resp = 'Sin responsable'
            val_cexe = 'Sin ejecutivo'
        if r.bono:
            receipt1 = 'Bono'
            try:
                cve = r.bono.clave.name +' '+str(r.bono.clave.clave)
                cve = ((((((cve).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
            except Exception as easS:
                cve =''
            aseg = r.bono.aseguradora.alias
            fc = r.bono.tipo_cambio
            pnumber = r.bono.factura_number
            if r.bono.vendor:
                referenc = [r.bono.vendor.first_name + ' '+ str(r.bono.vendor.last_name)]
            else:
                referenc = []
        if r.receipt_type == 3:
            receipt1 = 'Nota de Crédito'
        elif r.receipt_type == 2:
            receipt1 = 'Endoso'
        if value:
            value = ((((((value).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'') 
        else:
            value = value
        asegurado.append(value)
        receipttype.append(receipt1)
        referenciador.append(referenc)
        antiguedad.append(antig)
        responsable.append(val_resp)
        collection.append(val_cexe)
        userpay.append(val_userpay)
        creadopor.append(val_owner)
        contract.append(contratantex)
        contractE.append(contratanteE)
        contractP.append(contratanteP)
        contractG.append(contratanteG)
        aseguradora.append(aseg)
        inicio.append(inc)
        fin.append(fn)
        poliza_number.append(pnumber)
        clave.append(cve)
        subramo.append(sramo)
        currency.append(fc)
        grupo1.append(grupo1_)
        grupo2.append(grupo2_)
        nivelAg.append(nivelAg_)
        grupo3.append(grupo3_)
        grupo4.append(grupo4_)
        clasifica.append(clasifica_)
        businessLine.append(businessLine_)
        celulaC.append(cel)
    
    campo_celula, campo_agrupacion, campo_lineanegocio, moduleName = getOrgInfo(request)
    obj = {
        'document_type'   : str(list(recibos.values_list('poliza__document_type', flat = True))),
        'receipttype'   : str(list(receipttype)),
        'recibo'   : str(list(recibos.values_list('recibo_numero', flat = True))),
        'endoso_number'   : str(list(recibos.values_list('endorsement__number_endorsement', flat = True))),
        'poliza_number'   : str(list(poliza_number)),
        'aseguradora__compania'   : str(list(aseguradora)),
        'subramo__subramo_name'   : str(list(subramo)),
        'forma_de_pago'   : str(list(recibos.values_list('poliza__forma_de_pago', flat = True))),
        'status'   : str(list(recibos.values_list('status', flat = True))),
        'status_p'   : str(list(recibos.values_list('poliza__status', flat = True))),
        'fecha_inicio'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in recibos.values_list('fecha_inicio', flat = True) ])) ,
        'fecha_fin'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in recibos.values_list('fecha_fin', flat = True) ])) ,
        'vencimiento'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in recibos.values_list('vencimiento', flat = True) ])) ,
        'fecha_pago'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in recibos.values_list('pay_date', flat = True) ])) ,
        'liquidacion_folio'   : str(list(recibos.values_list('liquidacion_folio', flat = True))) ,
        'start_of_validity'   : str(list(inicio)) ,
        'end_of_validity'   : str(list(fin)) ,
        'f_currency'   : str(list(currency)),
        'p_neta'   : str(list(recibos.values_list('prima_neta', flat = True))),
        'rpf'   : str(list(recibos.values_list('rpf', flat = True))),
        'derecho'   : str(list(recibos.values_list('derecho', flat = True))),
        'iva'   : str(list(recibos.values_list('iva', flat = True))),
        'p_total'   : str(list(recibos.values_list('prima_total', flat = True))),
        'comision'   : str(list(recibos.values_list('comision', flat = True))),
        'is_cat'   : str(list(recibos.values_list('conducto_de_pago', flat = True))),
        'clave__clave'   : str(list(clave)),
        '_id'   : str(list(recibos.values_list('id', flat = True))),
        'observations'   : str(list([(((((((x).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')) if x else '' for x in recibos.values_list('poliza__observations', flat = True)])),
        'created_at'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in recibos.values_list('created_at', flat = True) ]))  ,        
        'clave__name'   : str(list(recibos.values_list('poliza__clave__name', flat = True))),
        'sucursal__sucursal_name'   : str(list(recibos.values_list('poliza__sucursal__sucursal_name', flat = True))),
        'asegurado'   : str(list(asegurado)),
        'referenciador'   : str(list(referenciador)),
        'antiguedad'   : str(list(antiguedad)),
        'creadopor'   : str(list(creadopor)),
        'collection'   : str(list(collection)),
        'user_pay'   : str(list(userpay)),
        'responsable'   : str(list(responsable)),
        'contratante'   : str(list(contract)),
        'contratanteE'   : str(list(contractE)),
        'contratanteP'   : str(list(contractP)),
        'contratanteG'   : str(list(contractG)),
        'grupo1'   : str(list(grupo1)) ,
        'grupo2'   : str(list(grupo2)) ,
        'nivelAg'   : str(list(nivelAg)) ,
        'grupo3'   : str(list(grupo3)) ,
        'grupo4'   : str(list(grupo4)) ,
        'clasifica'   : str(list(clasifica)) ,
        'businessLine'   : str(list(businessLine)) ,
        'celula'   : str(list(celulaC)) ,
        'tipo_reporte': tipo_reporte,
        'email_org':info_org['email'],
        'phone_org':info_org['phone'],
        'webpage_org':info_org['webpage'],
        'address_org':info_org['address'],
        'urlname_org':info_org['name'],
        'campo_celula':campo_celula,
        'campo_agrupacion':campo_agrupacion,
        'campo_lineanegocio':campo_lineanegocio
        }   
    obj['columns'] = str(list(columns))
    obj['imagen'] = archivo_imagen
    obj['valueCom'] = valueCom
    obj['registros'] = len(recibos)    
    r = requests.post(settings.SERVICEEXCEL_URL + 'get-CobranzaExcel/', obj,
    # headers = {
    # 'Authorization':'Bearer %s'%request.user.user_info.fi_token_refresh,
    # # 'Content-Type':'application/json' 
    # }, 
    stream=True)
    response_data= r.text

    response = HttpResponse(r.content,content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

    return response
# Reporte Conciliados listado
@api_view(['POST'])
@permission_classes((IsAuthenticatedV2, IsOrgMemberV2))
def Service_ConciliadosExcel(request):
    folio = request.data['folio']
    contratante = (request.data['contratante'])
    type_contractor = (request.data['type_contractor'])
    clave = (request.data['cve'])
    folio_conciliacion = (request.data['folio_conciliacion'])
    grupo = (request.data['grupo'])
    provider = (request.data['provider'])
    ramo = (request.data['ramo'])
    subramo = (request.data['subramo'])
    since = (request.data['since'])
    until = (request.data['until'])
    date_selected = (request.data['date_selected'])
    
    campo_celula, campo_agrupacion, campo_lineanegocio, moduleName = getOrgInfo(request)
    if int(ramo) > 0 :
        ramos = list(Ramos.objects.filter(id = int(ramo)).values_list('pk', flat=True))
    else:
        ramos = list(Ramos.objects.filter(org_name = request.GET.get('org')).values_list('pk', flat=True))
    
    if int(subramo) > 0 :
        subramos = list(SubRamos.objects.filter(id = int(subramo)).values_list('pk', flat=True))
    else:
        subramos = list(SubRamos.objects.filter(org_name = request.GET.get('org'), ramo__in = ramos).values_list('pk', flat=True))
            
    if int(provider) == 0:
        providers = list(Provider.objects.filter(org_name = request.GET.get('org')).values_list('pk', flat=True))
    else:
        providers = [int(provider)]

    if int(grupo) > 0:
        grupos = Group.objects.get(pk = int(grupo))
    else:
        grupos = Group.objects.filter(org_name = request.GET.get('org'))

    if int(clave) != 0:
        cves = list(Claves.objects.filter(id = clave, org_name = request.GET.get('org')).values_list('pk', flat=True))
    else:
        cves = list(Claves.objects.filter(org_name = request.GET.get('org')).values_list('pk', flat=True))

    recibos = Recibos.objects.filter(status = 6).filter(receipt_type__in = [1,2,3,4])
    bonos = Bonos.objects.filter(org_name = request.GET.get('org'), aseguradora__in = providers)  
    if int(contratante) != 0:
        contratanten = list( Contractor.objects.filter(group = grupos, pk = int(contratante)).values_list('pk', flat = True) )
        contratantej = None  
        polizas = Polizas.objects.exclude(status__in = [0]).filter(contractor__in = contratanten,org_name=request.GET.get('org'),ramo__in = ramos, subramo__in = subramos, aseguradora__in = providers,clave__in  = cves).values_list('pk', flat=True)
        # subgrupo
        parents = polizas.filter(document_type = 3)
        subgrupos = Polizas.objects.filter(parent__in = parents, document_type = 4, org_name = request.GET.get('org')).values_list('id', flat = True)
        polizas = list(polizas) + list(subgrupos)
        # sungrupo
        recibos = Recibos.objects.filter(status = 6).filter(Q(poliza__in = polizas) | Q(bono__in = bonos))
        # recibos = Recibos.objects.filter(Q(poliza__in =polizas) | Q(bono__in = bonos),status = 6)

    else:
        polizas = Polizas.objects.exclude(status__in = [0]).filter(org_name=request.GET.get('org'),ramo__in = ramos, subramo__in = subramos, aseguradora__in = providers,clave__in  = cves).values_list('pk', flat=True)
        # recibos = recibos.filter(reduce(operator.and_, date_filters), org_name = request.GET.get('org')).order_by('owner')
        # recibos = Recibos.objects.filter(Q(poliza__in =polizas) | Q(bono__in = bonos),status = 6)
        # subgrupo
        parents = polizas.filter(document_type = 3)
        subgrupos = Polizas.objects.filter(parent__in = parents, document_type = 4, org_name = request.GET.get('org')).values_list('id', flat = True)
        polizas = list(polizas) + list(subgrupos)
        # sungrupo
        recibos = Recibos.objects.filter(status = 6).filter(Q(poliza__in = polizas) | Q(bono__in = bonos))
    try:
        dataToFilter = getDataForPerfilRestricted(request, request.GET.get('org'))
    except Exception as er:
        dataToFilter = {}
    if dataToFilter:
        # Contratantes***
        polizasCl = Polizas.objects.filter(document_type__in = [1,3,11,7,8,12,6,4], org_name = request.GET.get('org'))
        polizasToF = Polizas.objects.filter(document_type__in = [1,3,11,7,8], org_name = request.GET.get('org'))
        if dataToFilter['ccpr']:
            polizasToF = polizasToF.filter(contractor__in = list(dataToFilter['ccpr']))
        if dataToFilter['cgpr']:
            polizasToF = polizasToF.filter(contractor__group__in = list(dataToFilter['cgpr']))
        if dataToFilter['ccepr']:
            polizasToF = polizasToF.filter(contractor__cellule__in = list(dataToFilter['ccepr']))
        if dataToFilter['crpr']:
            polizasToF = polizasToF.filter(contractor__vendor__in = list(dataToFilter['crpr']))
        if dataToFilter['cspr']:
            polizasToF = polizasToF.filter(contractor__sucursal__in = list(dataToFilter['cspr']))
        # Pólizas ****
        if dataToFilter['pppr']:
            polizasToF = polizasToF.filter(pk__in = list(dataToFilter['pppr']))
        if dataToFilter['pgpr']:
            polizasToF = polizasToF.filter(contractor__group__in = list(dataToFilter['pgpr']))
        if dataToFilter['pcepr']:
            polizasToF = polizasToF.filter(celula__in = list(dataToFilter['pcepr']))
        if dataToFilter['prpr']:
            polizasToF = polizasToF.filter(ref_policy__referenciador__in = list(dataToFilter['prpr']))
        if dataToFilter['pspr']:
            polizasToF = polizasToF.filter(sucursal__in = list(dataToFilter['pspr']))
        if dataToFilter['papr']:
            polizasToF = polizasToF.filter(groupinglevel__in = list(dataToFilter['papr']))
        if dataToFilter['pcapr']:
            polizasToF = polizasToF.filter(clave__in = list(dataToFilter['pcapr']))
        if dataToFilter['psrpr']:
            polizasToF = polizasToF.filter(subramo__subramo_code__in = list(dataToFilter['psrpr']))
        if dataToFilter['paspr']:
            polizasToF = polizasToF.filter(aseguradora__in = list(dataToFilter['paspr']))
        if dataToFilter['pstpr']:
            polizasToF = polizasToF.filter(status__in = list(dataToFilter['pstpr']))
        
        polizasCT = polizasCl.filter(document_type = 12, parent__in = list(polizasToF))
        polizasGT = polizasCl.filter(document_type = 6, parent__parent__parent__in = list(polizasToF))
        polizasFin = list(polizasToF.values_list('pk', flat = True)) + list(polizasCT.values_list('pk', flat = True)) + list(polizasGT.values_list('pk', flat = True))
        recibos = recibos.filter(poliza__in = list(polizasFin))
    if int(date_selected) == 1:
        try:
            f = "%d/%m/%Y %H:%M:%S"        
            since = datetime.strptime(since , f)
            until = datetime.strptime(until , f)
        except:
            f = "%m/%d/%Y %H:%M:%S"        
            since = datetime.strptime(since , f)
            until = datetime.strptime(until , f) 
        # gte __desde inicio lte__hasta fi
        date_filters = [Q(fecha_inicio__gte=since),Q(fecha_inicio__lte = until)] 
        recibos = recibos.filter(reduce(operator.and_, date_filters), org_name = request.GET.get('org'))

    elif int(date_selected) == 2:
        try:
            f = "%d/%m/%Y %H:%M:%S"        
            since = datetime.strptime(since , f)
            until = datetime.strptime(until , f)
        except:
            f = "%m/%d/%Y %H:%M:%S"        
            since = datetime.strptime(since , f)
            until = datetime.strptime(until , f) 
        # gte __desde inicio lte__hasta fin
        date_filters = [Q(conciliacion_date__gte=since),Q(conciliacion_date__lte = until)] 
        recibos = recibos.filter(reduce(operator.and_, date_filters), org_name = request.GET.get('org'))

    if int(folio) != 0:
        recibos = recibos.filter(conciliacion_folio = folio, org_name = request.GET.get('org'))

    verReferenciadores=is_perm_ver_referenciadores(request)
    if verReferenciadores:
        columns = ['Contratante','No.Póliza/Fianza','No.Endoso','No.Recibo', 'Prima Neta','Prima Total', 'Moneda' ,'Estatus',
                    'Comisión Conciliada', 'Fecha Inicio', 'Fecha Fin', 'Fecha liquidación', 'Fecha pago','Proveedor', 'Clave','Domiciliado',
                    'Tipo', 'Subramo', 'Forma de Pago', 'Estatus', 'Inicio Póliza/Fianza/Bono', 'Fin Póliza/Fianza/Bono','Email', 
                    'Teléfono','Asegurado','RPF', 'Derecho', 'IVA', 'Vencimiento','Referenciador', 'Grupo', 'Responsable']
    else:
        columns = ['Contratante','No.Póliza/Fianza','No.Endoso','No.Recibo', 'Prima Neta','Prima Total', 'Moneda' ,'Estatus',
                    'Comisión Conciliada', 'Fecha Inicio', 'Fecha Fin', 'Fecha liquidación', 'Fecha pago','Proveedor', 'Clave','Domiciliado',
                    'Tipo', 'Subramo', 'Forma de Pago', 'Estatus', 'Inicio Póliza/Fianza/Bono', 'Fin Póliza/Fianza/Bono','Email', 
                    'Teléfono','Asegurado','RPF', 'Derecho', 'IVA', 'Vencimiento','', 'Grupo', 'Responsable']

    # Empieza insertado de imagen
    info_org = getInfoOrg(request)

    if len(info_org['logo']) != 0:
        archivo_imagen = 'https://miurabox-public.s3.amazonaws.com/cas/' + info_org['logo']
        # archivo_imagen = get_presigned_url("cas/{url}".format(url=info_org['logo']),28800) 
    else:
        archivo_imagen = 'saam.jpg'

    tipo_reporte = "Reporte de Recibos Conciliados"
    
    asegurado = []
    antiguedad = []
    referenciador = []
    responsable = []
    collection = []
    userpay = []
    creadopor = []
    contract = []
    contractE = []
    contractP = []
    contractG= []
    inicio = []
    fin = []
    aseguradora = []
    clave = []
    poliza_number = []
    inc = ''
    fn = ''
    aseg = ''
    cve = ''
    pnumber = ''
    subramo = []
    receipttype = []
    currency = []
    # ----

    grupo1 = []
    grupo2 = []
    nivelAg = []
    grupo3 = []
    grupo4 = []
    clasifica = []
    businessLine = []

    # recibos = recibos.order_by('poliza__contractor__full_name','poliza__juridical__j_name','fianza__natural__full_name','fianza__juridical__j_name','poliza__ramo__ramo_name','fianza__ramo__ramo_name','poliza__aseguradora__compania','fianza__aseguradora__compania')
    recibos = recibos.order_by('id')
    for r in recibos:
        fc = 1
        receipt1 = ''
        inc = ''
        fn = ''
        aseg = ''
        cve = ''
        pnumber = ''
        sramo = ''
        contratantex = ''
        contratanteE = ''
        contratanteP = ''
        contratanteG = ''
        antig = get_antiguedad(r.fecha_inicio)
        if r.user_pay:
            val_userpay = r.user_pay.first_name + ' '+ str(r.user_pay.last_name)
        else:
            val_userpay = ''
        if r.owner:
            val_owner = r.owner.first_name + ' '+ str(r.owner.last_name)
        else:
            val_owner = ''
        if r.poliza:
            if r.poliza.document_type == 6:
                receipt1 = 'Categoría'
                try:
                    sramo = r.poliza.parent.parent.parent.subramo.subramo_name
                    fc = r.poliza.parent.parent.parent.f_currency
                    pnumber = r.poliza.parent.parent.parent.poliza_number
                    inc = r.poliza.parent.parent.parent.start_of_validity.strftime("%d/%m/%Y")
                    fn =r.poliza.parent.parent.parent.end_of_validity.strftime("%d/%m/%Y")
                    try:
                        cve = r.poliza.parent.parent.parent.clave.name +' '+str(r.poliza.parent.parent.parent.clave.clave)
                        cve = ((((((cve).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    except Exception as ee:
                        cve =''
                    aseg = r.poliza.parent.parent.parent.aseguradora.alias
                except Exception as fd:
                    inc = ''
                    fc = 1
                    fn = ''
                    aseg = ''
                    cve = ''
                    pnumber = ''
                    sramo = ''
                if r.poliza.parent.parent.parent.contractor:
                    contratantex = ((((((r.poliza.parent.parent.parent.contractor.full_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    contratanteE = r.poliza.parent.parent.parent.contractor.email
                    contratanteP = r.poliza.parent.parent.parent.contractor.phone_number
                    contratanteG = ((((((r.poliza.parent.parent.parent.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')     
                    
                    if r.poliza.parent.parent.parent.business_line:
                        if int(r.poliza.parent.parent.parent.business_line) ==1:
                            businessLine_ = 'Comercial'
                        elif int(r.poliza.parent.parent.parent.business_line) ==2:
                            businessLine_ = 'Personal'
                        elif int(r.poliza.parent.parent.parent.business_line) ==0:
                            businessLine_ = 'Otro'
                        else:
                            businessLine_ = ''
                    else:
                        try:
                            if int(r.poliza.parent.parent.parent.business_line) ==0:
                                businessLine_ = 'Otro'
                            else:
                                businessLine_ = ''
                        except:
                            businessLine_ = ''
                    try:
                        if r.poliza.parent.parent.parent.contractor.group.type_group == 1:
                            contratanteG = ((((((r.poliza.parent.parent.parent.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                            grupo1_ = ''
                            grupo2_ = ''
                        elif r.poliza.parent.parent.parent.contractor.group.type_group == 2:
                            grupotype1 = Group.objects.get(pk = r.poliza.parent.parent.parent.contractor.group.parent.id)
                            contratanteG = ((((((grupotype1.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                            grupo1_ = ((((((r.poliza.parent.parent.parent.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                            grupo2_ = ''
                        elif r.poliza.parent.parent.parent.contractor.group.type_group == 3:
                            grupotype1 = Group.objects.get(pk = r.poliza.parent.parent.parent.contractor.group.parent.parent.id)
                            contratanteG = ((((((grupotype1.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                            subgrupotype2 = Group.objects.get(pk = r.poliza.parent.parent.parent.contractor.group.parent.id)
                            grupo1_ = ((((((subgrupotype2.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                            grupo2_ = ((((((r.poliza.parent.parent.parent.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    except Exception as e:
                        contratanteG = ''
                        grupo1_ = ''
                        grupo2_ = ''
                    try:
                        if r.poliza.parent.parent.parent.groupinglevel:
                            if r.poliza.parent.parent.parent.groupinglevel.type_grouping == 1:
                                nivelAg_ = ((((((r.poliza.parent.parent.parent.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo3_ = ''
                                grupo4_ = ''
                            elif r.poliza.parent.parent.parent.groupinglevel.type_grouping == 2:
                                grupotype1 = GroupingLevel.objects.get(pk = r.poliza.parent.parent.parent.groupinglevel.parent.id)
                                nivelAg_ = ((((((grupotype1.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo3_ = ((((((r.poliza.parent.parent.parent.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo4_ = ''
                            elif r.poliza.parent.parent.parent.groupinglevel.type_grouping == 3:
                                grupotype1 = GroupingLevel.objects.get(pk = r.poliza.parent.parent.parent.groupinglevel.parent.parent.id)
                                nivelAg_ = ((((((grupotype1.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                subgrupotype2 = GroupingLevel.objects.get(pk = r.poliza.parent.parent.parent.groupinglevel.parent.id)
                                grupo3_ = ((((((subgrupotype2.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo4_ = ((((((r.poliza.parent.parent.parent.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        else:
                            nivelAg_ = ''
                            grupo3_ = ''
                            grupo4_ = ''  
                    except Exception as e:
                        nivelAg_ = ''
                        grupo3_ = ''
                        grupo4_ = '' 
         
                    if r.poliza.parent.parent.parent.contractor.classification:
                        clasifica_ = r.poliza.parent.parent.parent.contractor.classification.classification_name  
                    else:
                        clasifica_='-----'

                    # contratanteG = r.parent.parent.parent.contractor.group.group_name
                else:
                    contratantex = ''
                    contratanteE = ''
                    contratanteP = ''
                    contratanteG = '' 
                    contratanteG = ''
                    grupo1_ = ''
                    grupo2_ = ''
                    nivelAg_ = ''
                    grupo3_ = ''
                    grupo4_ = '' 
                    clasifica_='-----'
            elif r.poliza.document_type == 4:
                receipt1 = 'Subgrupo'
                try:
                    sramo = r.poliza.parent.subramo.subramo_name
                    fc = r.poliza.parent.f_currency
                    pnumber = r.poliza.parent.poliza_number
                    inc = r.poliza.parent.start_of_validity.strftime("%d/%m/%Y")
                    fn =r.poliza.parent.end_of_validity.strftime("%d/%m/%Y")
                    try:
                        cve = r.poliza.parent.clave.name +' '+str(r.poliza.parent.clave.clave)
                        cve = ((((((cve).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    except Exception as ere:
                        cve =''
                    aseg = r.poliza.parent.aseguradora.alias
                except Exception as fd:
                    inc = ''
                    fn = ''
                    aseg = ''
                    cve = ''
                    pnumber = ''
                    sramo = ''
                    fc = 1
                if r.poliza.parent.contractor:
                    contratantex = ((((((r.poliza.parent.contractor.full_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    contratanteE = r.poliza.parent.contractor.email
                    contratanteP = r.poliza.parent.contractor.phone_number
                    contratanteG = ((((((r.poliza.parent.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')     
                    if r.poliza.parent.business_line:
                        if int(r.poliza.parent.business_line) ==1:
                            businessLine_ = 'Comercial'
                        elif int(r.poliza.parent.business_line) ==2:
                            businessLine_ = 'Personal'
                        elif int(r.poliza.parent.business_line) ==0:
                            businessLine_ = 'Otro'
                        else:
                            businessLine_ = ''
                    else:
                        try:
                            if int(r.poliza.parent.business_line) ==0:
                                businessLine_ = 'Otro'
                            else:
                                businessLine_ = ''
                        except:
                            businessLine_ = ''
                    try:
                        if r.poliza.parent.contractor.group.type_group == 1:
                            contratanteG = ((((((r.poliza.parent.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                            grupo1_ = ''
                            grupo2_ = ''
                        elif r.poliza.parent.contractor.group.type_group == 2:
                            grupotype1 = Group.objects.get(pk = r.poliza.parent.contractor.group.parent.id)
                            contratanteG = ((((((grupotype1.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                            grupo1_ = ((((((r.poliza.parent.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                            grupo2_ = ''
                        elif r.poliza.parent.contractor.group.type_group == 3:
                            grupotype1 = Group.objects.get(pk = r.poliza.parent.contractor.group.parent.parent.id)
                            contratanteG = ((((((grupotype1.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                            subgrupotype2 = Group.objects.get(pk = r.poliza.parent.contractor.group.parent.id)
                            grupo1_ = ((((((subgrupotype2.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                            grupo2_ = ((((((r.poliza.parent.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    except Exception as e:
                        contratanteG = ''
                        grupo1_ = ''
                        grupo2_ = ''
                    try:
                        if r.poliza.parent.groupinglevel:
                            if r.poliza.parent.groupinglevel.type_grouping == 1:
                                nivelAg_ = ((((((r.poliza.parent.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo3_ = ''
                                grupo4_ = ''
                            elif r.poliza.parent.groupinglevel.type_grouping == 2:
                                grupotype1 = GroupingLevel.objects.get(pk = r.poliza.parent.groupinglevel.parent.id)
                                nivelAg_ = ((((((grupotype1.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo3_ = ((((((r.poliza.parent.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo4_ = ''
                            elif r.poliza.parent.groupinglevel.type_grouping == 3:
                                grupotype1 = GroupingLevel.objects.get(pk = r.poliza.parent.groupinglevel.parent.parent.id)
                                nivelAg_ = ((((((grupotype1.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                subgrupotype2 = GroupingLevel.objects.get(pk = r.poliza.parent.groupinglevel.parent.id)
                                grupo3_ = ((((((subgrupotype2.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo4_ = ((((((r.poliza.parent.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        else:
                            nivelAg_ = ''
                            grupo3_ = ''
                            grupo4_ = ''  
                    except Exception as e:
                        nivelAg_ = ''
                        grupo3_ = ''
                        grupo4_ = '' 
         
                    if r.poliza.parent.contractor.classification:
                        clasifica_ = r.poliza.parent.contractor.classification.classification_name  
                    else:
                        clasifica_='-----'
                    # contratanteG = r.poliza.parent.contractor.group.group_name
                else:
                    contratantex = ''
                    contratanteE = ''
                    contratanteP = ''
                    contratanteG = '' 
                    contratanteG = ''
                    grupo1_ = ''
                    grupo2_ = ''
                    nivelAg_ = ''
                    grupo3_ = ''
                    grupo4_ = '' 
                    clasifica_='-----'
            else:
                receipt1 = 'Póliza'
                if r.poliza.document_type == 7:
                    receipt1 = 'Fianza'
                if r.poliza.document_type == 8:
                    receipt1 = 'Fianza Colectiva'
                if r.poliza.document_type == 11:
                    receipt1 = 'Colectividad'
                if r.poliza.document_type == 12:
                    receipt1 = 'Póliza de Colectividad'
                if r.poliza.document_type == 3:
                    receipt1 = 'Póliza de Grupo'
                try:
                    sramo = r.poliza.subramo.subramo_name
                    fc = r.poliza.f_currency
                    pnumber = r.poliza.poliza_number
                    inc = r.poliza.start_of_validity.strftime("%d/%m/%Y")
                    fn =r.poliza.end_of_validity.strftime("%d/%m/%Y")
                    try:
                        cve = r.poliza.clave.name +' '+str(r.poliza.clave.clave)
                        cve = ((((((cve).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    except Exception as e:
                        cve = ''
                    aseg = r.poliza.aseguradora.alias
                except Exception as fd:
                    inc = ''
                    fn = ''
                    aseg = ''
                    cve = ''
                    pnumber = ''
                    fc = 1
                if r.poliza.contractor:
                    contratantex = ((((((r.poliza.contractor.full_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    contratanteE = r.poliza.contractor.email
                    contratanteP = r.poliza.contractor.phone_number
                    contratanteG = ((((((r.poliza.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')     
                    if r.poliza.business_line:
                        if int(r.poliza.business_line) ==1:
                            businessLine_ = 'Comercial'
                        elif int(r.poliza.business_line) ==2:
                            businessLine_ = 'Personal'
                        elif int(r.poliza.business_line) ==0:
                            businessLine_ = 'Otro'
                        else:
                            businessLine_ = ''
                    else:
                        if r.poliza.business_line in [0, '0', None]:
                          businessLine_ = 'Otro'
                        else:
                          businessLine_ = ''
                    try:
                        if r.poliza.contractor.group.type_group == 1:
                            contratanteG = ((((((r.poliza.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                            grupo1_ = ''
                            grupo2_ = ''
                        elif r.poliza.contractor.group.type_group == 2:
                            grupotype1 = Group.objects.get(pk = r.poliza.contractor.group.parent.id)
                            contratanteG = ((((((grupotype1.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                            grupo1_ = ((((((r.poliza.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                            grupo2_ = ''
                        elif r.poliza.contractor.group.type_group == 3:
                            grupotype1 = Group.objects.get(pk = r.poliza.contractor.group.parent.parent.id)
                            contratanteG = ((((((grupotype1.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                            subgrupotype2 = Group.objects.get(pk = r.poliza.contractor.group.parent.id)
                            grupo1_ = ((((((subgrupotype2.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                            grupo2_ = ((((((r.poliza.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    except Exception as e:
                        contratanteG = ''
                        grupo1_ = ''
                        grupo2_ = ''
                    try:
                        if r.poliza.groupinglevel:
                            if r.poliza.groupinglevel.type_grouping == 1:
                                nivelAg_ = ((((((r.poliza.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo3_ = ''
                                grupo4_ = ''
                            elif r.poliza.groupinglevel.type_grouping == 2:
                                grupotype1 = GroupingLevel.objects.get(pk = r.poliza.groupinglevel.parent.id)
                                nivelAg_ = ((((((grupotype1.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo3_ = ((((((r.poliza.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo4_ = ''
                            elif r.poliza.groupinglevel.type_grouping == 3:
                                grupotype1 = GroupingLevel.objects.get(pk = r.poliza.groupinglevel.parent.parent.id)
                                nivelAg_ = ((((((grupotype1.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                subgrupotype2 = GroupingLevel.objects.get(pk = r.poliza.groupinglevel.parent.id)
                                grupo3_ = ((((((subgrupotype2.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo4_ = ((((((r.poliza.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        else:
                            nivelAg_ = ''
                            grupo3_ = ''
                            grupo4_ = ''  
                    except Exception as e:
                        nivelAg_ = ''
                        grupo3_ = ''
                        grupo4_ = '' 
         
                    if r.poliza.contractor.classification:
                        clasifica_ = r.poliza.contractor.classification.classification_name  
                    else:
                        clasifica_='-----'
                    # contratanteG = r.poliza.contractor.group.group_name
                else:
                    contratantex = ''
                    contratanteE = ''
                    contratanteP = ''
                    contratanteG = '' 
                    contratanteG = ''
                    grupo1_ = ''
                    grupo2_ = ''
                    nivelAg_ = ''
                    grupo3_ = ''
                    grupo4_ = '' 
                    clasifica_='-----'
         
                    # contratanteG = r.poliza.juridical.group.group_name
            if r.poliza.responsable:
                val_resp = r.poliza.responsable.first_name + ' '+ str(r.poliza.responsable.last_name)
            else:
                val_resp = ''
            if r.poliza.collection_executive:
                val_cexe = r.poliza.collection_executive.first_name + ' '+ str(r.poliza.collection_executive.last_name)
            else:
                val_cexe = ''
            try:
                refs_policy = ReferenciadoresInvolved.objects.filter(policy = r.poliza.id,is_changed=False).values_list('referenciador__first_name','referenciador__last_name')
                if len(refs_policy):
                    v = []
                    try:
                        for it in refs_policy:
                            v.append(it[0] +' '+ str(it[1])+str('-'))
                        referenc = v
                    except Exception as y:
                        v = []
                        referenc = []
                else:
                    v = []
                    referenc = []
            except Exception as e:
                v = []
                referenc = [] 
            if r.poliza.ramo:
                if r.poliza.ramo.ramo_code == 1:
                    form = Life.objects.filter(policy = r.poliza.id)
                    try:
                        if form:
                            value = form[0].personal.full_name
                        else:
                            value = ''
                    except Exception as rt:
                       value = ''
                elif r.poliza.ramo.ramo_code == 2:
                    form = AccidentsDiseases.objects.filter(policy = r.poliza.id)
                    if form:
                        value = form[0].personal.full_name
                    else:
                        value = ''
                elif r.poliza.subramo.subramo_code == 9:
                    form = AutomobilesDamages.objects.filter(policy = r.poliza.id)
                    if form:
                        try:
                            form[0].model = ((((((form[0].model).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                            form[0].version = ((((((form[0].version).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        except Exception as ers:
                            form[0].model = form[0].model
                            form[0].version = form[0].version
                        value = str(form[0].brand) + '-' + str(form[0].model) + '-' + str(form[0].version)+ '-' + str(form[0].serial)
                    else:
                        value = ''
                elif r.poliza.ramo.ramo_code == 3 and not r.poliza.subramo.subramo_code == 9:
                    form = Damages.objects.filter(policy = r.poliza.id)
                    if form:
                        value = form[0].insured_item
                    else:
                        value = ''
                else:
                    value = 'Sin asegurado'
            else:
                value = 'Sin asegurado'

        else:
            value = 'Sin asegurado'
            val_resp = 'Sin responsable'
            val_cexe = 'Sin ejecutivo'
        if r.bono:
            receipt1 = 'Bono'
            try:
                cve = r.bono.clave.name +' '+str(r.bono.clave.clave)
                cve = ((((((cve).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
            except Exception as dds:
                cve =''
            aseg = r.bono.aseguradora.alias
            pnumber = r.bono.factura_number
            fc = r.bono.tipo_cambio
            if r.bono.vendor:
                referenc = [r.bono.vendor.first_name + ' '+ str(r.bono.vendor.last_name)]
            else:
                referenc = []
        if r.receipt_type == 3:
            receipt1 = 'Nota de Crédito'
        elif r.receipt_type == 2:
            receipt1 = 'Endoso'
        if value:
            value = ((((((value).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'') 
        else:
            value = value
        asegurado.append(value)
        receipttype.append(receipt1)
        referenciador.append(referenc)
        antiguedad.append(antig)
        responsable.append(val_resp)
        collection.append(val_cexe)
        userpay.append(val_userpay)
        creadopor.append(val_owner)
        contract.append(contratantex)
        contractE.append(contratanteE)
        contractP.append(contratanteP)
        contractG.append(contratanteG)
        aseguradora.append(aseg)
        inicio.append(inc)
        fin.append(fn)
        poliza_number.append(pnumber)
        clave.append(cve)
        subramo.append(sramo)
        currency.append(fc)
        # ---
        grupo1.append(grupo1_)
        grupo2.append(grupo2_)
        nivelAg.append(nivelAg_)
        grupo3.append(grupo3_)
        grupo4.append(grupo4_)
        clasifica.append(clasifica_)
        businessLine.append(businessLine_)
    obj = {
        'document_type'   : str(list(recibos.values_list('poliza__document_type', flat = True))),
        'receipttype'   : str(list(receipttype)),
        'recibo'   : str(list(recibos.values_list('recibo_numero', flat = True))),
        'endoso_number'   : str(list(recibos.values_list('endorsement__number_endorsement', flat = True))),
        'poliza_number'   : str(list(poliza_number)),
        'aseguradora__compania'   : str(list(aseguradora)),
        'subramo__subramo_name'   : str(list(subramo)),
        'forma_de_pago'   : str(list(recibos.values_list('poliza__forma_de_pago', flat = True))),
        'status'   : str(list(recibos.values_list('status', flat = True))),
        'status_p'   : str(list(recibos.values_list('poliza__status', flat = True))),
        'fecha_inicio'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in recibos.values_list('fecha_inicio', flat = True) ])) ,
        'fecha_fin'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in recibos.values_list('fecha_fin', flat = True) ])) ,
        'vencimiento'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in recibos.values_list('vencimiento', flat = True) ])) ,
        'fecha_pago'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in recibos.values_list('pay_date', flat = True) ])) ,
        'liquidacion_folio'   : str(list(recibos.values_list('liquidacion_folio', flat = True))) ,
        'start_of_validity'   : str(list(inicio)) ,
        'end_of_validity'   : str(list(fin)) ,
        'f_currency'   : str(list(currency)),
        'p_neta'   : str(list(recibos.values_list('prima_neta', flat = True))),
        'rpf'   : str(list(recibos.values_list('rpf', flat = True))),
        'derecho'   : str(list(recibos.values_list('derecho', flat = True))),
        'iva'   : str(list(recibos.values_list('iva', flat = True))),
        'p_total'   : str(list(recibos.values_list('prima_total', flat = True))),
        'comision'   : str(list(recibos.values_list('comision', flat = True))),
        'is_cat'   : str(list(recibos.values_list('conducto_de_pago', flat = True))),
        'clave__clave'   : str(list(clave)),
        '_id'   : str(list(recibos.values_list('id', flat = True))),
        'observations'   : str(list([(((((((x).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')) if x else '' for x in recibos.values_list('poliza__observations', flat = True)])),
        'created_at'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in recibos.values_list('created_at', flat = True) ]))  ,        
        'clave__name'   : str(list(recibos.values_list('poliza__clave__name', flat = True))),
        'sucursal__sucursal_name'   : str(list(recibos.values_list('poliza__sucursal__sucursal_name', flat = True))),
        'asegurado'   : str(list(asegurado)),
        'referenciador'   : str(list(referenciador)),
        'antiguedad'   : str(list(antiguedad)),
        'creadopor'   : str(list(creadopor)),
        'collection'   : str(list(collection)),
        'user_pay'   : str(list(userpay)),
        'responsable'   : str(list(responsable)),
        'contratante'   : str(list(contract)),
        'contratanteE'   : str(list(contractE)),
        'contratanteP'   : str(list(contractP)),
        'contratanteG'   : str(list(contractG)),
        'grupo1'   : str(list(grupo1)) ,
        'grupo2'   : str(list(grupo2)) ,
        'nivelAg'   : str(list(nivelAg)) ,
        'grupo3'   : str(list(grupo3)) ,
        'grupo4'   : str(list(grupo4)) ,
        'clasifica'   : str(list(clasifica)) ,
        'businessLine'   : str(list(businessLine)) ,
        'tipo_reporte': tipo_reporte,
        'email_org':info_org['email'],
        'phone_org':info_org['phone'],
        'webpage_org':info_org['webpage'],
        'address_org':info_org['address'],
        'urlname_org':info_org['name'],
        'campo_celula':campo_celula,
        'campo_agrupacion':campo_agrupacion,
        'campo_lineanegocio':campo_lineanegocio
        }   
    obj['columns'] = str(list(columns))
    obj['imagen'] = archivo_imagen
    obj['registros'] = len(recibos)
    obj['verReferenciadores'] = verReferenciadores
    
    r = requests.post(settings.SERVICEEXCEL_URL + 'get-CobranzaExcel/', obj,
    # headers = {
    # 'Authorization':'Bearer %s'%request.user.user_info.fi_token_refresh,
    # # 'Content-Type':'application/json' 
    # }, 
    stream=True)
    response_data= r.text

    response = HttpResponse(r.content,content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

    return response
# Reporte Recibos vendedor listado
@api_view(['GET'])
@permission_classes((IsAuthenticatedV2, IsOrgMemberV2))
def Service_VendedorReceiptsExcel(request):    
    request.request = request
    valueCom = True
    try:
        valueCom = comisions(request)
    except Exception as ers:
        valueCom =  True
    recibos =  get_comision_recibos(request)
    vendedor = int(request.GET['vendedor'])
    ui = UserInfo.objects.get(user = vendedor)
    # vendedor_info = Vendedor.objects.get(user = ui)
    vendedor_info = Vendedor.objects.filter(user=ui).order_by('-id').first()

    columns = ['Contratante','No.Póliza', 'No.Endoso', 'No.Recibo', 'Tipo recibo', 'Fecha Inicio', 'Fecha Fin', 'Vencimiento', 
               'Prima Neta', 'Comisión', 'Comision Conciliada', 'Fecha Conciliación', 'Porcentaje Vendedor','Total al vendedor', 'Vendedor', 
               'Proveedor', 'Ramo', 'Subramo', 'Concepto', 'Moneda']

    # Empieza insertado de imagen
    info_org = getInfoOrg(request)

    if len(info_org['logo']) != 0:
        archivo_imagen = 'https://miurabox-public.s3.amazonaws.com/cas/' + info_org['logo']
        # archivo_imagen = get_presigned_url("cas/{url}".format(url=info_org['logo']),28800) 
    else:
        archivo_imagen = 'saam.jpg'

    tipo_reporte = "Reporte de Recibos Comisión"

    asegurado = []
    antiguedad = []
    referenciador = []
    responsable = []
    collection = []
    userpay = []
    creadopor = []
    porcVendedor = []
    totalVendedor = []
    contratante = []
    contratanteEm = []
    contratantePh = []
    contratanteGr = []
    receipttype=[]
    currency = []
    # recibos = recibos.order_by('poliza__contractor__full_name','poliza__juridical__j_name','fianza__natural__full_name','fianza__juridical__j_name',)
    recibos = recibos.order_by('id',)
    for r in recibos:
        fc = 1
        receipt1=''
        antig = get_antiguedad(r.fecha_inicio)
        if r.user_pay:
            val_userpay = r.user_pay.first_name + ' '+ str(r.user_pay.last_name)
        else:
            val_userpay = ''
        if r.owner:
            val_owner = r.owner.first_name + ' '+ str(r.owner.last_name)
        else:
            val_owner = ''
        if r.poliza:
            receipt1='Póliza'
            if r.poliza.document_type == 6:
                fc = r.poliza.parent.parent.parent.f_currency
                if r.poliza.parent.parent.parent.contractor:
                    contratantex = ((((((r.poliza.parent.parent.parent.contractor.full_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    contratanteE = r.poliza.parent.parent.parent.contractor.email
                    contratanteP = r.poliza.parent.parent.parent.contractor.phone_number
                    contratanteG = ((((((r.poliza.parent.parent.parent.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')     
                    # contratanteG = r.parent.parent.parent.contractor.group.group_name
                else:
                    contratantex =''
                    contratanteE = ''
                    contratanteP = ''
                    contratanteG = ''     
                    # contratanteG = r.parent.parent.parent.juridical.group.group_name
            elif r.poliza.document_type == 4:
                fc =r.poliza.parent.f_currency
                receipt1='Subgrupo'
                if r.poliza.parent.contractor:
                    contratantex = ((((((r.poliza.parent.contractor.full_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    contratanteE = r.poliza.parent.contractor.email
                    contratanteP = r.poliza.parent.contractor.phone_number
                    contratanteG = ((((((r.poliza.parent.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')     
                    # contratanteG = r.parent.contractor.group.group_name
                else:
                    contratantex =''
                    contratanteE = ''
                    contratanteP = ''
                    contratanteG = '' 
            else:
                fc = r.poliza.f_currency                
                if r.poliza.document_type == 7:
                    receipt1 = 'Fianza'
                if r.poliza.document_type == 8:
                    receipt1 = 'Fianza Colectiva'
                if r.poliza.document_type == 11:
                    receipt1 = 'Colectividad'
                if r.poliza.document_type == 12:
                    receipt1 = 'Póliza de Colectividad'
                if r.poliza.document_type == 3:
                    receipt1 = 'Póliza de Grupo'
                if r.poliza.contractor:
                    contratantex = ((((((r.poliza.contractor.full_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    contratanteE = r.poliza.contractor.email
                    contratanteP = r.poliza.contractor.phone_number
                    contratanteG = ((((((r.poliza.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')     
                    # contratanteG = r.poliza.contractor.group.group_name
                else:
                    contratantex =''
                    contratanteE = ''
                    contratanteP = ''
                    contratanteG = '' 
            value_perc = str(get_comission_poliza(Recibos.objects.get(pk = r.id), vendedor))                
            porcentaje = str(get_comission_poliza(Recibos.objects.get(pk = r.id), vendedor)) 
            if porcentaje != 'No existe subramo':
                try:
                    value_total = float(r.comision_conciliada) * (float(porcentaje) / 100)   
                except Exception as error_to:
                    value_total = '0.00'
            else:
                value_total = '0.00'
            if r.cambiar_comision_al_vendedor:
                if r.comision_al_vendedor:
                    try:
                        value_total = float(r.comision_al_vendedor)
                    except:
                        value_total = '0.00'
            if r.poliza.responsable:
                val_resp = r.poliza.responsable.first_name + ' '+ str(r.poliza.responsable.last_name)
            else:
                val_resp = ''
            if r.poliza.collection_executive:
                val_cexe = r.poliza.collection_executive.first_name + ' '+ str(r.poliza.collection_executive.last_name)
            else:
                val_cexe = ''
            
            referenc = ui.user.first_name + ' '+ str(ui.user.last_name) 
            if r.poliza.ramo.ramo_code == 1:
                form = Life.objects.filter(policy = r.poliza.id)
                try:
                    if form:
                        value = form[0].personal.full_name
                    else:
                        value = ''
                except Exception as rt:
                   value = ''
            elif r.poliza.ramo.ramo_code == 2:
                form = AccidentsDiseases.objects.filter(policy = r.poliza.id)
                if form:
                    value = form[0].personal.full_name
                else:
                    value = ''
            elif r.poliza.subramo.subramo_code == 9:
                form = AutomobilesDamages.objects.filter(policy = r.poliza.id)
                if form:
                    try:
                        form[0].model = ((((((form[0].model).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        form[0].version = ((((((form[0].version).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    except Exception as ers:
                        form[0].model = form[0].model
                        form[0].version = form[0].version
                    value = str(form[0].brand) + '-' + str(form[0].model) + '-' +str( form[0].version)+ '-' + str(form[0].serial)
                else:
                    value = ''
            elif r.poliza.ramo.ramo_code == 3 and not r.poliza.subramo.subramo_code == 9:
                form = Damages.objects.filter(policy = r.poliza.id)
                if form:
                    value = form[0].insured_item
                else:
                    value = ''
            else:
                value = 'Sin asegurado'
        else:
            value_perc = str('0.00')+ '%'
            value_total = str('0.00')
            value = 'Sin asegurado'
            val_resp = 'Sin responsable'
            val_cexe = 'Sin ejecutivo'
            referenc = ''
            contratantex =''
            contratanteE = ''
            contratanteP = ''
            contratanteG = '' 
        if r.receipt_type == 3:
            receipt1 = 'Nota de Crédito'
        elif r.receipt_type == 2:
            receipt1 = 'Endoso'
        if value:
            value = ((((((value).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'') 
        else:
            value = value
        asegurado.append(value)
        receipttype.append(receipt1)
        referenciador.append(referenc)
        antiguedad.append(antig)
        responsable.append(val_resp)
        collection.append(val_cexe)
        userpay.append(val_userpay)
        creadopor.append(val_owner)
        porcVendedor.append(value_perc)
        totalVendedor.append(value_total)
        contratante.append(contratantex)
        contratanteEm.append(contratanteE)
        contratantePh.append(contratanteP)
        contratanteGr.append(contratanteG)
        currency.append(fc)
        
    obj = {
        'document_type'   : str(list(recibos.values_list('poliza__document_type', flat = True))),
        'receipttype'   : str(list(receipttype)),
        'recibo'   : str(list(recibos.values_list('recibo_numero', flat = True))),
        'endoso_number'   : str(list(recibos.values_list('endorsement__number_endorsement', flat = True))),
        'f_currency'   : str(list(recibos.values_list('poliza__f_currency', flat = True))),
        'poliza_number'   : str(list(recibos.values_list('poliza__poliza_number', flat = True))),
        'aseguradora__compania'   : str(list(recibos.values_list('poliza__aseguradora__alias', flat = True))),
        'ramo__ramo_name'   : str(list(recibos.values_list('poliza__ramo__ramo_name', flat = True))),
        'subramo__subramo_name'   : str(list(recibos.values_list('poliza__subramo__subramo_name', flat = True))),
        'forma_de_pago'   : str(list(recibos.values_list('poliza__forma_de_pago', flat = True))),
        'status'   : str(list(recibos.values_list('status', flat = True))),
        'status_p'   : str(list(recibos.values_list('poliza__status', flat = True))),
        'conciliacion_date'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in recibos.values_list('conciliacion_date', flat = True) ])) ,
        'fecha_inicio'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in recibos.values_list('fecha_inicio', flat = True) ])) ,
        'fecha_fin'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in recibos.values_list('fecha_fin', flat = True) ])) ,
        'vencimiento'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in recibos.values_list('vencimiento', flat = True) ])) ,
        'fecha_pago'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in recibos.values_list('pay_date', flat = True) ])) ,
        'liquidacion_folio'   : str(list(recibos.values_list('liquidacion_folio', flat = True))) ,
        'start_of_validity'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in recibos.values_list('poliza__start_of_validity', flat = True) ])) ,
        'end_of_validity'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in recibos.values_list('poliza__end_of_validity', flat = True) ])) ,
        'f_currency'   : str(list(currency)),
        'p_neta'   : str(list(recibos.values_list('prima_neta', flat = True))),
        'rpf'   : str(list(recibos.values_list('rpf', flat = True))),
        'derecho'   : str(list(recibos.values_list('derecho', flat = True))),
        'iva'   : str(list(recibos.values_list('iva', flat = True))),
        'p_total'   : str(list(recibos.values_list('prima_total', flat = True))),
        'comision'   : str(list(recibos.values_list('comision', flat = True))),
        'comision_conciliada'   : str(list(recibos.values_list('comision_conciliada', flat = True))),
        'is_cat'   : str(list(recibos.values_list('conducto_de_pago', flat = True))),
        'clave__clave'   : str(list(recibos.values_list('poliza__clave__clave', flat = True))),
        '_id'   : str(list(recibos.values_list('id', flat = True))),
        'observations'   : str(list([(((((((x).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')) if x else '' for x in recibos.values_list('poliza__observations', flat = True)])),
        'created_at'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in recibos.values_list('created_at', flat = True) ]))  ,        
        'clave__name'   : str(list(recibos.values_list('poliza__clave__name', flat = True))),        
        'sucursal__sucursal_name'   : str(list(recibos.values_list('poliza__sucursal__sucursal_name', flat = True))),
        'contratante'   : str(list(contratante)),
        'contratanteE'   : str(list(contratanteEm)),
        'contratantePh'   : str(list(contratantePh)),
        'contratanteGr'   : str(list(contratanteGr)),
        'asegurado'   : str(list(asegurado)),
        'referenciador'   : str(list(referenciador)),
        'antiguedad'   : str(list(antiguedad)),
        'creadopor'   : str(list(creadopor)),
        'porcVendedor'   : str(list(porcVendedor)),
        'totalVendedor'   : str(list(totalVendedor)),
        'collection'   : str(list(collection)),
        'user_pay'   : str(list(userpay)),
        'responsable'   : str(list(responsable)),
        'tipo_reporte': "Reporte Recibos Vendedor",
        'email_org':info_org['email'],
        'phone_org':info_org['phone'],
        'webpage_org':info_org['webpage'],
        'address_org':info_org['address'],
        'urlname_org':info_org['name'],
        }   
    obj['columns'] = str(list(columns))
    obj['imagen'] = archivo_imagen
    obj['valueCom'] = valueCom
    obj['registros'] = len(recibos)

    r = requests.post(settings.SERVICEEXCEL_URL + 'get-RecibosVendedorExcel/', obj,
    # headers = {
    # 'Authorization':'Bearer %s'%request.user.user_info.fi_token_refresh,
    # # 'Content-Type':'application/json' 
    # }, 
    stream=True)
    response_data= r.text

    response = HttpResponse(r.content,content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

    return response
# Reporte Vendedores listado
@api_view(['GET'])
@permission_classes((IsAuthenticatedV2, IsOrgMemberV2))
def Service_VendedoresExcel(request):    
    vendedores = Vendedor.objects.filter(org_name = request.GET.get('org'))
    
    columns = ['Nombre', 'Contratación', 'Email', 'Banco', 'Dirección', 'Gastos %', 'Pago', 'Número de referencia', 'Vendedor', 'Responsable']
    # Empieza insertado de imagen
    info_org = getInfoOrg(request)

    if len(info_org['logo']) != 0:
        archivo_imagen = 'https://miurabox-public.s3.amazonaws.com/cas/' + info_org['logo']
        # archivo_imagen = get_presigned_url("cas/{url}".format(url=info_org['logo']),28800) 
    else:
        archivo_imagen = 'saam.jpg'

    tipo_reporte = "Reporte Vendedores"

    vname = []
    address = []
    phonevendedor=[]
    vendedores = vendedores.order_by('user__user__first_name','user__user__last_name')
    for r in vendedores:
        name = r.user.user.first_name +' '+str(r.user.user.last_name)
        vname.append(name)
        phones = Phone.objects.filter(vendedor = r).values_list('phone',flat=True)
        phonevendedor.append(phones)
        addr = r.address if r.address else ''
        addr = (((((((addr).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",''))
        address.append(addr)
    obj = {       
        'phonesvendedor'   : str(list(phonevendedor)),        
        'name'   : str(list(vname)),        
        'contratacion'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in vendedores.values_list('hired_date', flat = True) ])) ,
        'email'   : str(list(vendedores.values_list('email', flat = True))),
        'banco'   : str(list(vendedores.values_list('bank__alias', flat = True))) , 
        'address'   : str(list(address)) , 
        'gastos_operacion'   : str(list(vendedores.values_list('gastos_operacion', flat = True))) , 
        'tipo_pago'   : str(list(vendedores.values_list('tipo_pago', flat = True))) , 
        'reference_number'   : str(list(vendedores.values_list('reference_number', flat = True))) , 
        'user_vendedor'   : str(list(vendedores.values_list('user__is_vendedor', flat = True))) , 
        'user_active'   : str(list(vendedores.values_list('user__is_active', flat = True))) , 
        'tipo_reporte': "Reporte Vendedores",
        'email_org':info_org['email'],
        'phone_org':info_org['phone'],
        'webpage_org':info_org['webpage'],
        'address_org':info_org['address'],
        'urlname_org':info_org['name'],
        }   
    obj['columns'] = str(list(columns))
    obj['imagen'] = archivo_imagen
    obj['registros'] = len(vendedores)
    r = requests.post(settings.SERVICEEXCEL_URL + 'get-VendedoresExcel/', obj,
    # headers = {
    # 'Authorization':'Bearer %s'%request.user.user_info.fi_token_refresh,
    # # 'Content-Type':'application/json' 
    # }, 
    stream=True)
    response_data= r.text

    response = HttpResponse(r.content,content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

    return response
# Reporte Recibos Edo Cuenta listado
@api_view(['POST'])
@permission_classes((IsAuthenticatedV2, IsOrgMemberV2))
def Service_VendedorEdoCuentaExcel(request):    
    request.request = request
    vendedor = request.data['vendedor']

    vendedor_ = int(vendedor)
    ui = UserInfo.objects.get(user = vendedor_)
    # vendedor_info = Vendedor.objects.get(user = ui)
    vendedor_info = Vendedor.objects.filter(user=ui).order_by('-id').first()

    account = AccountState.objects.filter(vendedor__user__user__id = int(vendedor),status__in = [1,3], org_name = request.GET.get('org'))
    accReferenciador = AccountState.objects.filter(vendedor__user__user__id = int(vendedor),status__in = [1,3], org_name = request.GET.get('org')).values_list('pk', flat=True)
    # recibos_in_account = Recibos.objects.filter(Q(account_state__in = list(accReferenciador)) | Q(account_states__in = list(accReferenciador))).order_by('account_states__folio')
    # recibos_in_account = recibos_in_account.filter(Q(account_states__vendedor__user__user__id = vendedor))
    recibos_in_account = Recibos.objects.filter(Q(account_states__in = list(accReferenciador))).order_by('account_states__folio')
    try:
        dataToFilter = getDataForPerfilRestricted(request, request.GET.get('org'))
    except Exception as er:
        dataToFilter = {}
    if dataToFilter:
        # Contratantes***
        polizasCl = Polizas.objects.filter(document_type__in = [1,3,11,7,8,12,6,4], org_name = request.GET.get('org'))
        polizasToF = Polizas.objects.filter(document_type__in = [1,3,11,7,8], org_name = request.GET.get('org'))
        if dataToFilter['ccpr']:
            polizasToF = polizasToF.filter(contractor__in = list(dataToFilter['ccpr']))
        if dataToFilter['cgpr']:
            polizasToF = polizasToF.filter(contractor__group__in = list(dataToFilter['cgpr']))
        if dataToFilter['ccepr']:
            polizasToF = polizasToF.filter(contractor__cellule__in = list(dataToFilter['ccepr']))
        if dataToFilter['crpr']:
            polizasToF = polizasToF.filter(contractor__vendor__in = list(dataToFilter['crpr']))
        if dataToFilter['cspr']:
            polizasToF = polizasToF.filter(contractor__sucursal__in = list(dataToFilter['cspr']))
        # Pólizas ****
        if dataToFilter['pppr']:
            polizasToF = polizasToF.filter(pk__in = list(dataToFilter['pppr']))
        if dataToFilter['pgpr']:
            polizasToF = polizasToF.filter(contractor__group__in = list(dataToFilter['pgpr']))
        if dataToFilter['pcepr']:
            polizasToF = polizasToF.filter(celula__in = list(dataToFilter['pcepr']))
        if dataToFilter['prpr']:
            polizasToF = polizasToF.filter(ref_policy__referenciador__in = list(dataToFilter['prpr']))
        if dataToFilter['pspr']:
            polizasToF = polizasToF.filter(sucursal__in = list(dataToFilter['pspr']))
        if dataToFilter['papr']:
            polizasToF = polizasToF.filter(groupinglevel__in = list(dataToFilter['papr']))
        if dataToFilter['pcapr']:
            polizasToF = polizasToF.filter(clave__in = list(dataToFilter['pcapr']))
        if dataToFilter['psrpr']:
            polizasToF = polizasToF.filter(subramo__subramo_code__in = list(dataToFilter['psrpr']))
        if dataToFilter['paspr']:
            polizasToF = polizasToF.filter(aseguradora__in = list(dataToFilter['paspr']))
        if dataToFilter['pstpr']:
            polizasToF = polizasToF.filter(status__in = list(dataToFilter['pstpr']))
        
        polizasCT = polizasCl.filter(document_type = 12, parent__in = list(polizasToF))
        polizasGT = polizasCl.filter(document_type = 6, parent__parent__parent__in = list(polizasToF))
        polizasFin = list(polizasToF.values_list('pk', flat = True)) + list(polizasCT.values_list('pk', flat = True)) + list(polizasGT.values_list('pk', flat = True))
        recibos_in_account = recibos_in_account.filter(poliza__in = list(polizasFin)) 
    recibos_in_account = recibos_in_account.filter(Q(account_states__vendedor__user__user__id = vendedor))
    recibos = recibos_in_account

    columns = ['Contratante','No.Póliza', 'No.Endoso', 'No.Recibo', 'Tipo recibo', 'Fecha Inicio', 'Fecha Fin', 'Vencimiento', 
               'Prima Neta', 'Comisión', 'Comision Conciliada', 'Fecha Conciliación', 'Referenciador', 
               'Proveedor', 'Ramo', 'Subramo', 'Concepto', 'Moneda','Estatus Edo.Cuenta','Folio Edo.Cuenta','Total Edo.Cuenta']


    # Empieza insertado de imagen
    info_org = getInfoOrg(request)

    if len(info_org['logo']) != 0:
        archivo_imagen = 'https://miurabox-public.s3.amazonaws.com/cas/' + info_org['logo']
        # archivo_imagen = get_presigned_url("cas/{url}".format(url=info_org['logo']),28800) 
    else:
        archivo_imagen = 'saam.jpg'

    tipo_reporte = "Reporte de Recibos Edo. Cuenta"

    asegurado = []
    antiguedad = []
    referenciador = []
    responsable = []
    collection = []
    userpay = []
    creadopor = []
    porcVendedor = []
    totalVendedor = []
    accountStatus = []
    accountFolio = []
    accountTotal = []
    contract = []
    contractE = []
    contractP = []
    contractG= []
    currency = []
    # recibos = recibos.order_by('poliza__contractor__full_name','poliza__juridical__j_name','fianza__natural__full_name','fianza__juridical__j_name',)
    recibos = recibos.order_by('id').distinct('id')

    for r in recibos:  
        fc = 1      
        referenc = ui.user.first_name + ' '+ str(ui.user.last_name) 
        if r.account_states != None:
            acc = AccountState.objects.filter (vendedor__user__user__id = int(vendedor))
            if acc:
                accStatus = acc[0].status
                accFolio = acc[0].folio
                accTotal = acc[0].total
            else:
                try:
                    accStatus = r.account_states.status
                    accFolio = r.account_states.folio
                    accTotal = r.account_states.total
                except Exception as erracc:
                    accStatus = 0
                    accFolio = 0
                    accTotal = 0
        antig = get_antiguedad(r.fecha_inicio)
        if r.user_pay:
            val_userpay = r.user_pay.first_name + ' '+ str(r.user_pay.last_name)
        else:
            val_userpay = ''
        if r.owner:
            val_owner = r.owner.first_name + ' '+ str(r.owner.last_name)
        else:
            val_owner = ''
        if r.poliza:
            if r.poliza.document_type == 6:
                fc = r.poliza.parent.parent.parent.f_currency
                if r.poliza.parent.parent.parent.contractor:
                    contratantex =((((((r.poliza.parent.parent.parent.contractor.full_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    contratanteE = r.poliza.parent.parent.parent.contractor.email
                    contratanteP = r.poliza.parent.parent.parent.contractor.phone_number
                    contratanteG = ((((((r.poliza.parent.parent.parent.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')     
                    # contratanteG = r.parent.parent.parent.contractor.group.group_name
                else:
                    contratantex =''
                    contratanteE = ''
                    contratanteP = ''
                    contratanteG = ''     
                    # contratanteG = r.parent.parent.parent.juridical.group.group_name
            elif r.poliza.document_type == 4:
                fc = r.poliza.parent.f_currency
                if r.poliza.parent.contractor:
                    contratantex = ((((((r.poliza.parent.contractor.full_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    contratanteE = r.poliza.parent.contractor.email
                    contratanteP = r.poliza.parent.contractor.phone_number
                    contratanteG = ((((((r.poliza.parent.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')     
                    # contratanteG = r.parent.contractor.group.group_name
                else:
                    contratantex =''
                    contratanteE = ''
                    contratanteP = ''
                    contratanteG = '' 
            else:
                fc = r.poliza.f_currency
                if r.poliza.contractor:
                    contratantex = ((((((r.poliza.contractor.full_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    contratanteE = r.poliza.contractor.email
                    contratanteP = r.poliza.contractor.phone_number
                    contratanteG = ((((((r.poliza.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')     
                    # contratanteG = r.poliza.contractor.group.group_name
                else:
                    contratantex =''
                    contratanteE = ''
                    contratanteP = ''
                    contratanteG = '' 
            value_perc = str(get_comission_poliza(Recibos.objects.get(pk = r.id), vendedor))                
            porcentaje = str(get_comission_poliza(Recibos.objects.get(pk = r.id), vendedor)) 
            if porcentaje != 'No existe subramo':
                try:
                    value_total = float(r.comision_conciliada) * (float(porcentaje) / 100)   
                except Exception as error_to:
                    value_total = '0.00'
            else:
                value_total = '0.00'
            if r.poliza.responsable:
                val_resp = r.poliza.responsable.first_name + ' '+ str(r.poliza.responsable.last_name)
            else:
                val_resp = ''
            if r.poliza.collection_executive:
                val_cexe = r.poliza.collection_executive.first_name + ' '+ str(r.poliza.collection_executive.last_name)
            else:
                val_cexe = ''
            
            referenc = ui.user.first_name + ' '+ str(ui.user.last_name) 
            if r.poliza.ramo.ramo_code == 1:
                form = Life.objects.filter(policy = r.poliza.id)
                try:
                    if form:
                        value = form[0].personal.full_name
                    else:
                        value = ''
                except Exception as rt:
                   value = ''
            elif r.poliza.ramo.ramo_code == 2:
                form = AccidentsDiseases.objects.filter(policy = r.poliza.id)
                if form:
                    value = form[0].personal.full_name
                else:
                    value = ''
            elif r.poliza.subramo.subramo_code == 9:
                form = AutomobilesDamages.objects.filter(policy = r.poliza.id)
                if form:
                    try:
                        form[0].model = ((((((form[0].model).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        form[0].version = ((((((form[0].version).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    except Exception as ers:
                        form[0].model = form[0].model
                        form[0].version = form[0].version
                    value = str(form[0].brand) + '-' + str(form[0].model) + '-' + str(form[0].version)+ '-' + str(form[0].serial)
                else:
                    value = ''
            elif r.poliza.ramo.ramo_code == 3 and not r.poliza.subramo.subramo_code == 9:
                form = Damages.objects.filter(policy = r.poliza.id)
                if form:
                    value = form[0].insured_item
                else:
                    value = ''
            else:
                value = 'Sin asegurado'
        if value:
            value = ((((((value).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'') 
        else:
            value = value
        asegurado.append(value)
        referenciador.append(referenc)
        antiguedad.append(antig)
        responsable.append(val_resp)
        collection.append(val_cexe)
        userpay.append(val_userpay)
        creadopor.append(val_owner)
        porcVendedor.append(value_perc)
        totalVendedor.append(value_total)
        accountStatus.append(accStatus)
        accountFolio.append(accFolio)
        accountTotal.append(accTotal)
        contract.append(contratantex)
        contractE.append(contratanteE)
        contractP.append(contratanteP)
        contractG.append(contratanteG)
        currency.append(fc)
    obj = {
        # 'identifier'   : str(list(recibos.values_list('poliza__identifier', flat = True))),
        'identifier'   : str(list([(((((((x).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')) if x else '' for x in recibos.values_list('poliza__identifier', flat = True)])),  
        'document_type'   : str(list(recibos.values_list('poliza__document_type', flat = True))),
        'receipttype'   : str(list(recibos.values_list('receipt_type', flat = True))),
        'recibo'   : str(list(recibos.values_list('recibo_numero', flat = True))),
        'endoso_number'   : str(list(recibos.values_list('endorsement__number_endorsement', flat = True))),
        'f_currency'   : str(list(recibos.values_list('poliza__f_currency', flat = True))),
        'poliza_number'   : str(list(recibos.values_list('poliza__poliza_number', flat = True))),
        'aseguradora__compania'   : str(list(recibos.values_list('poliza__aseguradora__alias', flat = True))),
        'ramo__ramo_name'   : str(list(recibos.values_list('poliza__ramo__ramo_name', flat = True))),
        'subramo__subramo_name'   : str(list(recibos.values_list('poliza__subramo__subramo_name', flat = True))),
        'forma_de_pago'   : str(list(recibos.values_list('poliza__forma_de_pago', flat = True))),
        'status'   : str(list(recibos.values_list('status', flat = True))),
        'status_p'   : str(list(recibos.values_list('poliza__status', flat = True))),
        'conciliacion_date'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in recibos.values_list('conciliacion_date', flat = True) ])) ,
        'fecha_inicio'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in recibos.values_list('fecha_inicio', flat = True) ])) ,
        'fecha_fin'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in recibos.values_list('fecha_fin', flat = True) ])) ,
        'vencimiento'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in recibos.values_list('vencimiento', flat = True) ])) ,
        'fecha_pago'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in recibos.values_list('pay_date', flat = True) ])) ,
        'liquidacion_folio'   : str(list(recibos.values_list('liquidacion_folio', flat = True))) ,
        'start_of_validity'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in recibos.values_list('poliza__start_of_validity', flat = True) ])) ,
        'end_of_validity'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in recibos.values_list('poliza__end_of_validity', flat = True) ])) ,
        'f_currency'   : str(list(currency)),
        'p_neta'   : str(list(recibos.values_list('prima_neta', flat = True))),
        'rpf'   : str(list(recibos.values_list('rpf', flat = True))),
        'derecho'   : str(list(recibos.values_list('derecho', flat = True))),
        'iva'   : str(list(recibos.values_list('iva', flat = True))),
        'p_total'   : str(list(recibos.values_list('prima_total', flat = True))),
        'comision'   : str(list(recibos.values_list('comision', flat = True))),
        'comision_conciliada'   : str(list(recibos.values_list('comision_conciliada', flat = True))),
        'is_cat'   : str(list(recibos.values_list('conducto_de_pago', flat = True))),
        'clave__clave'   : str(list(recibos.values_list('poliza__clave__clave', flat = True))),
        '_id'   : str(list(recibos.values_list('id', flat = True))),
        'observations'   : str(list([(((((((x).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')) if x else '' for x in recibos.values_list('poliza__observations', flat = True)])),
        'created_at'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in recibos.values_list('created_at', flat = True) ]))  ,
        'clave__name'   : str(list(recibos.values_list('poliza__clave__name', flat = True))),
        'sucursal__sucursal_name'   : str(list(recibos.values_list('poliza__sucursal__sucursal_name', flat = True))),
        'asegurado'   : str(list(asegurado)),
        'accStatus'   : str(list(accountStatus)),
        'accFolio'   : str(list(accountFolio)),
        'referenciador'   : str(list(referenciador)),
        'antiguedad'   : str(list(antiguedad)),
        'creadopor'   : str(list(creadopor)),
        'porcVendedor'   : str(list(porcVendedor)),
        'totalVendedor'   : str(list(totalVendedor)),
        'totalAccount'   : str(list(accountTotal)),
        'collection'   : str(list(collection)),
        'user_pay'   : str(list(userpay)),
        'responsable'   : str(list(responsable)),
        'contratante'   : str(list(contract)),
        'contratanteE'   : str(list(contractE)),
        'contratanteP'   : str(list(contractP)),
        'contratanteG'   : str(list(contractG)),
        'tipo_reporte': "Reporte Recibos Edo. Cuenta",
        'email_org':info_org['email'],
        'phone_org':info_org['phone'],
        'webpage_org':info_org['webpage'],
        'address_org':info_org['address'],
        'urlname_org':info_org['name'],
        }   
    obj['columns'] = str(list(columns))
    obj['imagen'] = archivo_imagen
    obj['registros'] = len(recibos)

    r = requests.post(settings.SERVICEEXCEL_URL + 'get-RecibosEdoCuentaExcel/', obj,
    # headers = {
    # 'Authorization':'Bearer %s'%request.user.user_info.fi_token_refresh,
    # # 'Content-Type':'application/json' 
    # }, 
    stream=True)
    response_data= r.text

    response = HttpResponse(r.content,content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

    return response
# Reporte Ots Endosos Dash
@api_view(['GET'])
@permission_classes((IsAuthenticatedV2, IsOrgMemberV2))
def Service_OtsEndososExcel(request):
    org = request.GET.get('org')
    response = {
    'insurances': [],
    'endo': []
    }
    pendingGreen = []
    pendingGreenE = []

    ot_dash = []
    end = []
    verReferenciadores=is_perm_ver_referenciadores(request)
    tipo = (request.GET.get('tipo'))
    try:
        cadena = request.GET.get('cadena')
        natural_filters = [Q(full_name__icontains = cadena)]
        naturals = Contractor.objects.filter(reduce(OR, natural_filters), org_name = org).values_list('pk', flat=True)

        ramos = Ramos.objects.filter(ramo_name__icontains = cadena).values_list('pk', flat=True)
        subramos = SubRamos.objects.filter(subramo_name__icontains = cadena).values_list('pk', flat=True)

        prov_filters = [Q(compania__icontains = cadena), 
                            Q(alias__icontains = cadena),
                            Q(rfc__icontains = cadena)]
        providers = Provider.objects.filter(reduce(OR, prov_filters), org_name = org).distinct('id').values_list('pk', flat=True)

        ot_filters = [Q(internal_number__icontains = cadena), Q(contractor__in = list(naturals)), 
                    Q(poliza_number__icontains = cadena), Q(ramo__in = list(ramos)), Q(subramo__in = list(subramos)), Q(aseguradora__in = providers)]

        policy_endo = Polizas.objects.filter(reduce(OR, ot_filters),document_type__in=list([1,3]), org_name=request.GET.get('org'))
        endo_filters = [Q(policy__in = list(policy_endo))]

        polizas = Polizas.objects.filter(reduce(OR, ot_filters), document_type__in=list([1,3]), status = 1, org_name=request.GET.get('org')).order_by('created_at')

        endosos = Endorsement.objects.filter(reduce(OR, endo_filters), status__in = [1, 5], org_name=request.GET.get('org'))
        try:
            dataToFilter = getDataForPerfilRestricted(request, request.GET.get('org'))
        except Exception as er:
            dataToFilter = {}
        if dataToFilter:
            # Contratantes***
            if dataToFilter['ccpr']:
                polizas = polizas.filter(contractor__in = list(dataToFilter['ccpr']))
                endosos = endosos.filter(policy__contractor__in = list(dataToFilter['ccpr']))
            if dataToFilter['cgpr']:
                polizas = polizas.filter(contractor__group__in = list(dataToFilter['cgpr']))
                endosos = endosos.filter(policy__contractor__group__in = list(dataToFilter['cgpr']))
            if dataToFilter['ccepr']:
                polizas = polizas.filter(contractor__cellule__in = list(dataToFilter['ccepr']))
                endosos = endosos.filter(policy__contractor__cellule__in = list(dataToFilter['ccepr']))
            if dataToFilter['crpr']:
                polizas = polizas.filter(contractor__vendor__in = list(dataToFilter['crpr']))
                endosos = endosos.filter(policy__contractor__vendor__in = list(dataToFilter['crpr']))
            if dataToFilter['cspr']:
                polizas = polizas.filter(contractor__sucursal__in = list(dataToFilter['cspr']))
                endosos = endosos.filter(policy__contractor__sucursal__in = list(dataToFilter['cspr']))
            # Pólizas ****
            if dataToFilter['pppr']:
                polizas = polizas.filter(pk__in = list(dataToFilter['pppr']))
                endosos = endosos.filter(policy__pk__in = list(dataToFilter['pppr']))
            if dataToFilter['pgpr']:
                polizas = polizas.filter(contractor__group__in = list(dataToFilter['pgpr']))
                endosos = endosos.filter(policy__contractor__group__in = list(dataToFilter['pgpr']))
            if dataToFilter['pcepr']:
                polizas = polizas.filter(celula__in = list(dataToFilter['pcepr']))
                endosos = endosos.filter(policy__celula__in = list(dataToFilter['pcepr']))
            if dataToFilter['prpr']:
                polizas = polizas.filter(ref_policy__referenciador__in = list(dataToFilter['prpr']))
                endosos = endosos.filter(policy__ref_policy__referenciador__in = list(dataToFilter['prpr']))
            if dataToFilter['pspr']:
                polizas = polizas.filter(sucursal__in = list(dataToFilter['pspr']))
                endosos = endosos.filter(policy__sucursal__in = list(dataToFilter['pspr']))
            if dataToFilter['papr']:
                polizas = polizas.filter(groupinglevel__in = list(dataToFilter['papr']))
                endosos = endosos.filter(policy__groupinglevel__in = list(dataToFilter['papr']))
            if dataToFilter['pcapr']:
                polizas = polizas.filter(clave__in = list(dataToFilter['pcapr']))
                endosos = endosos.filter(policy__clave__in = list(dataToFilter['pcapr']))
            if dataToFilter['psrpr']:
                polizas = polizas.filter(subramo__subramo_code__in = list(dataToFilter['psrpr']))
                endosos = endosos.filter(policy__subramo__subramo_code__in = list(dataToFilter['psrpr']))
            if dataToFilter['paspr']:
                polizas = polizas.filter(aseguradora__in = list(dataToFilter['paspr']))
                endosos = endosos.filter(policy__aseguradora__in = list(dataToFilter['paspr']))
            if dataToFilter['pstpr']:
                polizas = polizas.filter(status__in = list(dataToFilter['pstpr']))
                endosos = endosos.filter(policy__status__in = list(dataToFilter['pstpr']))   
        
        try:
          config_chart = Graphics.objects.get(org_name=request.GET.get('org'), type_graphic = 1)
          days_green = config_chart.green
          days_yellow = config_chart.yellow
          days_orange = config_chart.orange
          days_red = config_chart.red
        except:
          config_chart = None
          days_green = 6
          days_yellow = 13
          days_orange = 20
          days_red = 1000

        today = datetime.today()
        orange_days = timedelta(days = days_orange)
        yellow_days = timedelta(days = days_yellow)
        green_days = timedelta(days = days_green)
        red_days = timedelta(days = days_red)

        diasO = today - orange_days
        diasY = today - yellow_days
        diasG = today - green_days
        diasR = today - red_days
        # ----------
        subramos = UserInfo.objects.filter(user = request.user)
        if subramos.exists() and subramos.first() and subramos.first().subramos_dashboard:
            subramos = subramos.first().subramos_dashboard        
            polizas = polizas.filter(subramo__subramo_code__in = subramos)
        # https://miurabox.atlassian.net/browse/DES-680
        tipopoliza=UserInfo.objects.filter(user = request.user)
        if tipopoliza.exists() and tipopoliza.first() and tipopoliza.first().tipopoliza_dashboard:
            tipopoliza_list = tipopoliza.first().tipopoliza_dashboard    
            if 3 in tipopoliza_list: #si esta las pólizas de grupo
                tipopoliza_list.extend([4, 6])  # agregar los de subgrupo y certificados
            if 7 in tipopoliza_list: #si fianza en los filtros
                tipopoliza_list.extend([8])  # agregar las fianzas colectivas
            if 11 in tipopoliza_list: #si colectiva en los filtros
                tipopoliza_list.extend([12])  # agregar las pólizas de colectividad
            if not 0 in tipopoliza_list:  
                polizas = polizas.filter(document_type__in = tipopoliza_list)
        # -------------
        pendingGreen = polizas.filter(document_type__in=list([1,3]), status = 1, org_name=request.GET.get('org'), created_at__lte = today, created_at__gt = diasG)
        pendingYellow = polizas.filter(document_type__in=list([1,3]), status = 1, org_name=request.GET.get('org'), created_at__lte = diasG, created_at__gt = diasY)
        pendingOrange = polizas.filter(document_type__in=list([1,3]), status = 1, org_name=request.GET.get('org'), created_at__lte = diasY, created_at__gt = diasO)
        pendingRed = polizas.filter(document_type__in=list([1,3]), status = 1, org_name=request.GET.get('org'), created_at__lte = diasO)

        ots_all = polizas.filter(document_type__in=list([1,3]), status = 1, org_name=request.GET.get('org'), created_at__lte = today, created_at__gte = diasR)
        # Endoso
        pendingGreenE = endosos.filter(org_name=request.GET.get('org'), created_at__lte = today, created_at__gt = diasG)
        pendingYellowE = endosos.filter(org_name=request.GET.get('org'), created_at__lte = diasG, created_at__gt = diasY)
        pendingOrangeE = endosos.filter(org_name=request.GET.get('org'), created_at__lte = diasY, created_at__gt = diasO)
        pendingRedE = endosos.filter(org_name=request.GET.get('org'), created_at__lte = diasO)

        endo_all = endosos.filter(org_name=request.GET.get('org'), created_at__lte = today, created_at__gte = diasR)

        try:
            tipo = int(tipo)
            if tipo == 1:  
                ots = pendingGreen
                serializer_ot = PolizaResumeGraphicSerializer(ots,context={'request':request},many=True)
                response['insurances'] = serializer_ot.data
            elif tipo == 2:
                ots = pendingYellow
                serializer_ot = PolizaResumeGraphicSerializer(ots,context={'request':request},many=True)
                response['insurances'] = serializer_ot.data
            elif tipo ==3:    
                ots = pendingOrange
                serializer_ot = PolizaResumeGraphicSerializer(ots,context={'request':request},many=True)
                response['insurances'] = serializer_ot.data
            elif tipo == 4:    
                ots = pendingRed
                serializer_ot = PolizaResumeGraphicSerializer(ots,context={'request':request},many=True)
                response['insurances'] = serializer_ot.data
            else :  
                ots = ots_all
                serializer_ot = PolizaResumeGraphicSerializer(ots,context={'request':request},many=True)
                response['insurances'] = serializer_ot.data
        except Exception as e:
            if tipo == 'green':  
                ots = pendingGreen
                serializer_ot = PolizaResumeGraphicSerializer(ots,context={'request':request},many=True)
                response['insurances'] = serializer_ot.data
            elif tipo == 'yellow':
                ots = pendingYellow
                serializer_ot = PolizaResumeGraphicSerializer(ots,context={'request':request},many=True)
                response['insurances'] = serializer_ot.data
            elif tipo == 'orange':    
                ots = pendingOrange
                serializer_ot = PolizaResumeGraphicSerializer(ots,context={'request':request},many=True)
                response['insurances'] = serializer_ot.data
            elif tipo == 'red':    
                ots = pendingRed
                serializer_ot = PolizaResumeGraphicSerializer(ots,context={'request':request},many=True)
                response['insurances'] = serializer_ot.data
            else:  
                ots = ots_all
                serializer_ot = PolizaResumeGraphicSerializer(ots,context={'request':request},many=True)
                response['insurances'] = serializer_ot.data

    except Exception as e:
        org_name = request.GET.get('org')
        order = int(request.GET.get('order'))
        asc = int(request.GET.get('asc'))
        tipo = request.GET.get('tipo')
        request = request
        
        if order == 1:
            if asc == 1:
                polizas = Polizas.objects.filter(document_type__in=list([1,3]), org_name=org_name).order_by('document_type')
            else:
                polizas = Polizas.objects.filter(document_type__in=list([1,3]), org_name=org_name).order_by('-document_type')

        elif order == 2:
            if asc == 1:
                polizas = Polizas.objects.filter(document_type__in=list([1,3]), org_name=org_name).order_by('folio')
            else:
                polizas = Polizas.objects.filter(document_type__in=list([1,3]), org_name=org_name).order_by('-folio')
        
        elif order == 3:
            if asc == 1:
                polizas = Polizas.objects.filter(document_type__in=list([1,3]), org_name=org_name).order_by('internal_number')
            else:
                polizas = Polizas.objects.filter(document_type__in=list([1,3]), org_name=org_name).order_by('-internal_number')
        
        elif order == 4:
            if asc == 1:
                polizas = Polizas.objects.filter(document_type__in=list([1,3]), org_name=org_name).order_by('contractor__full_name')
            else:
                polizas = Polizas.objects.filter(document_type__in=list([1,3]), org_name=org_name).order_by('-contractor__full_name')
        
        elif order == 5:
            if asc == 1:
                polizas = Polizas.objects.filter(document_type__in=list([1,3]), org_name=org_name).order_by('subramo__subramo_name')
            else:
                polizas = Polizas.objects.filter(document_type__in=list([1,3]), org_name=org_name).order_by('-subramo__subramo_name')

        elif order == 6:
            if asc == 1:
                polizas = Polizas.objects.filter(document_type__in=list([1,3]), org_name=org_name).order_by('aseguradora__compania')
            else:
                polizas = Polizas.objects.filter(document_type__in=list([1,3]), org_name=org_name).order_by('-aseguradora__compania')
        
        elif order == 7:
            if asc == 1:
                polizas = Polizas.objects.filter(document_type__in=list([1,3]), org_name=org_name).order_by('created_at')
            else:
                polizas = Polizas.objects.filter(document_type__in=list([1,3]), org_name=org_name).order_by('-created_at')
        else:
            polizas = Polizas.objects.filter(document_type__in=list([1,3]), org_name=org_name).order_by('created_at')


        try:
            config_chart = Graphics.objects.get(org_name =  request.GET.get('org'), type_graphic = 1)
            days_green = config_chart.green
            days_yellow = config_chart.yellow
            days_orange = config_chart.orange
            days_red = config_chart.red
        except:
            config_chart = None
            days_green = 6
            days_yellow = 13
            days_orange = 20
            days_red = 1000

        today = datetime.today()
        orange_days = timedelta(days = days_orange)
        yellow_days = timedelta(days = days_yellow)
        green_days = timedelta(days = days_green)

        diasO = today - orange_days
        diasY = today - yellow_days
        diasG = today - green_days
        ots_all  =polizas  
        # ----------
        subramos = UserInfo.objects.filter(user = request.user)
        if subramos.exists() and subramos.first() and subramos.first().subramos_dashboard:
            subramos = subramos.first().subramos_dashboard        
            polizas = polizas.filter(subramo__subramo_code__in = subramos)
        # https://miurabox.atlassian.net/browse/DES-680
        tipopoliza=UserInfo.objects.filter(user = request.user)
        if tipopoliza.exists() and tipopoliza.first() and tipopoliza.first().tipopoliza_dashboard:
            tipopoliza_list = tipopoliza.first().tipopoliza_dashboard    
            if 3 in tipopoliza_list: #si esta las pólizas de grupo
                tipopoliza_list.extend([4, 6])  # agregar los de subgrupo y certificados
            if 7 in tipopoliza_list: #si fianza en los filtros
                tipopoliza_list.extend([8])  # agregar las fianzas colectivas
            if 11 in tipopoliza_list: #si colectiva en los filtros
                tipopoliza_list.extend([12])  # agregar las pólizas de colectividad
            if not 0 in tipopoliza_list:  
                polizas = polizas.filter(document_type__in = tipopoliza_list)
        # -------------
        pendingGreen = polizas.filter(document_type__in=list([1,3]), status = 1, org_name =  request.GET.get('org'), created_at__lte = today, created_at__gt = diasG)
        pendingYellow = polizas.filter(document_type__in=list([1,3]), status = 1, org_name =  request.GET.get('org'), created_at__lte = diasG, created_at__gt = diasY)
        pendingOrange = polizas.filter(document_type__in=list([1,3]), status = 1, org_name =  request.GET.get('org'), created_at__lte = diasY, created_at__gt = diasO)
        pendingRed = polizas.filter(document_type__in=list([1,3]), status = 1, org_name =  request.GET.get('org'), created_at__lte = diasO)
        try:
            ots_all = list((pendingGreen).values_list('pk', flat=True)) + list((pendingYellow).values_list('pk', flat=True)) +list((pendingOrange).values_list('pk', flat=True)) +list((pendingRed).values_list('pk', flat=True))
            ots_all = Polizas.objects.filter(pk__in = list(ots_all))
        except:
            ots_all = Polizas.objects.filter(Q(pk__in = list(pendingGreen)) | Q(pk__in = list(pendingOrange)) | Q(pk__in = list(pendingYellow)) | Q(pk__in = list(pendingRed)))

        try:
            dataToFilter = getDataForPerfilRestricted(request, request.GET.get('org'))
        except Exception as er:
            dataToFilter = {}
        if dataToFilter:
            if dataToFilter['ccpr']:
                pendingGreen = pendingGreen.filter(contractor__in = list(dataToFilter['ccpr']))
                pendingYellow = pendingYellow.filter(contractor__in = list(dataToFilter['ccpr']))
                pendingOrange = pendingOrange.filter(contractor__in = list(dataToFilter['ccpr']))
                pendingRed = pendingRed.filter(contractor__in = list(dataToFilter['ccpr']))
                polizas = polizas.filter(contractor__in = list(dataToFilter['ccpr']))
            if dataToFilter['cgpr']:
                pendingGreen = pendingGreen.filter(contractor__group__in = list(dataToFilter['cgpr']))
                pendingYellow = pendingYellow.filter(contractor__group__in = list(dataToFilter['cgpr']))
                pendingOrange = pendingOrange.filter(contractor__group__in = list(dataToFilter['cgpr']))
                pendingRed = pendingRed.filter(contractor__group__in = list(dataToFilter['cgpr']))
                polizas = polizas.filter(contractor__group__in = list(dataToFilter['cgpr']))
            if dataToFilter['ccepr']:
                pendingGreen = pendingGreen.filter(contractor__cellule__in = list(dataToFilter['ccepr']))
                pendingYellow = pendingYellow.filter(contractor__cellule__in = list(dataToFilter['ccepr']))
                pendingOrange = pendingOrange.filter(contractor__cellule__in = list(dataToFilter['ccepr']))
                pendingRed = pendingRed.filter(contractor__cellule__in = list(dataToFilter['ccepr']))
                polizas = polizas.filter(contractor__cellule__in = list(dataToFilter['ccepr']))
            if dataToFilter['crpr']:
                pendingGreen = pendingGreen.filter(contractor__vendor__in = list(dataToFilter['crpr']))
                pendingYellow = pendingYellow.filter(contractor__vendor__in = list(dataToFilter['crpr']))
                pendingOrange = pendingOrange.filter(contractor__vendor__in = list(dataToFilter['crpr']))
                pendingRed = pendingRed.filter(contractor__vendor__in = list(dataToFilter['crpr']))
                polizas = polizas.filter(contractor__vendor__in = list(dataToFilter['crpr']))
            if dataToFilter['cspr']:
                pendingGreen = pendingGreen.filter(contractor__sucursal__in = list(dataToFilter['cspr']))
                pendingYellow = pendingYellow.filter(contractor__sucursal__in = list(dataToFilter['cspr']))
                pendingOrange = pendingOrange.filter(contractor__sucursal__in = list(dataToFilter['cspr']))
                pendingRed = pendingRed.filter(contractor__sucursal__in = list(dataToFilter['cspr']))
                polizas = polizas.filter(contractor__sucursal__in = list(dataToFilter['cspr']))
            # Pólizas**
            # Pólizas ****
            if dataToFilter['pppr']:
                pendingGreen = pendingGreen.filter(pk__in = list(dataToFilter['pppr']))
                pendingYellow = pendingYellow.filter(pk__in = list(dataToFilter['pppr']))
                pendingOrange = pendingOrange.filter(pk__in = list(dataToFilter['pppr']))
                pendingRed = pendingRed.filter(pk__in = list(dataToFilter['pppr']))
                polizas = polizas.filter(pk__in = list(dataToFilter['pppr']))
            if dataToFilter['pgpr']:
                pendingGreen = pendingGreen.filter(contractor__group__in = list(dataToFilter['pgpr']))
                pendingYellow = pendingYellow.filter(contractor__group__in = list(dataToFilter['pgpr']))
                pendingOrange = pendingOrange.filter(contractor__group__in = list(dataToFilter['pgpr']))
                pendingRed = pendingRed.filter(contractor__group__in = list(dataToFilter['pgpr']))
                polizas = polizas.filter(contractor__group__in = list(dataToFilter['pgpr']))
            if dataToFilter['pcepr']:
                pendingGreen = pendingGreen.filter(celula__in = list(dataToFilter['pcepr']))
                pendingYellow = pendingYellow.filter(celula__in = list(dataToFilter['pcepr']))
                pendingOrange = pendingOrange.filter(celula__in = list(dataToFilter['pcepr']))
                pendingRed = pendingRed.filter(celula__in = list(dataToFilter['pcepr']))
                polizas = polizas.filter(celula__in = list(dataToFilter['pcepr']))
                
            if dataToFilter['prpr']:
                pendingGreen = pendingGreen.filter(ref_policy__referenciador__in = list(dataToFilter['prpr']))
                pendingYellow = pendingYellow.filter(ref_policy__referenciador__in = list(dataToFilter['prpr']))
                pendingOrange = pendingOrange.filter(ref_policy__referenciador__in = list(dataToFilter['prpr']))
                pendingRed = pendingRed.filter(ref_policy__referenciador__in = list(dataToFilter['prpr']))
                polizas = polizas.filter(ref_policy__referenciador__in = list(dataToFilter['prpr']))
            if dataToFilter['pspr']:
                pendingGreen = pendingGreen.filter(sucursal__in = list(dataToFilter['pspr']))
                pendingYellow = pendingYellow.filter(sucursal__in = list(dataToFilter['pspr']))
                pendingOrange = pendingOrange.filter(sucursal__in = list(dataToFilter['pspr']))
                pendingRed = pendingRed.filter(sucursal__in = list(dataToFilter['pspr']))           
                polizas = polizas.filter(sucursal__in = list(dataToFilter['pspr']))           
            if dataToFilter['papr']:
                pendingGreen = pendingGreen.filter(groupinglevel__in = list(dataToFilter['papr']))
                pendingYellow = pendingYellow.filter(groupinglevel__in = list(dataToFilter['papr']))
                pendingOrange = pendingOrange.filter(groupinglevel__in = list(dataToFilter['papr']))
                pendingRed = pendingRed.filter(groupinglevel__in = list(dataToFilter['papr']))
                polizas = polizas.filter(groupinglevel__in = list(dataToFilter['papr']))
            if dataToFilter['pcapr']:
                pendingGreen = pendingGreen.filter(clave__in = list(dataToFilter['pcapr']))
                pendingYellow = pendingYellow.filter(clave__in = list(dataToFilter['pcapr']))
                pendingOrange = pendingOrange.filter(clave__in = list(dataToFilter['pcapr']))
                pendingRed = pendingRed.filter(clave__in = list(dataToFilter['pcapr']))
                polizas = polizas.filter(clave__in = list(dataToFilter['pcapr']))
            if dataToFilter['psrpr']:
                pendingGreen = pendingGreen.filter(subramo__subramo_code__in = list(dataToFilter['psrpr']))
                pendingYellow = pendingYellow.filter(subramo__subramo_code__in = list(dataToFilter['psrpr']))
                pendingOrange = pendingOrange.filter(subramo__subramo_code__in = list(dataToFilter['psrpr']))
                pendingRed = pendingRed.filter(subramo__subramo_code__in = list(dataToFilter['psrpr']))
            if dataToFilter['paspr']:
                pendingGreen = pendingGreen.filter(aseguradora__in = list(dataToFilter['paspr']))
                pendingYellow = pendingYellow.filter(aseguradora__in = list(dataToFilter['paspr']))
                pendingOrange = pendingOrange.filter(aseguradora__in = list(dataToFilter['paspr']))
                pendingRed = pendingRed.filter(aseguradora__in = list(dataToFilter['paspr']))
                polizas = polizas.filter(aseguradora__in = list(dataToFilter['paspr']))
            if dataToFilter['pstpr']:
                pendingGreen = pendingGreen.filter(status__in = list(dataToFilter['pstpr']))
                pendingYellow = pendingYellow.filter(status__in = list(dataToFilter['pstpr']))
                pendingOrange = pendingOrange.filter(status__in = list(dataToFilter['pstpr']))
                pendingRed = pendingRed.filter(status__in = list(dataToFilter['pstpr']))
                polizas = polizas.filter(status__in = list(dataToFilter['pstpr']))
            # ots_all = polizas       
            try:
                ots_all = list((pendingGreen).values_list('pk', flat=True)) + list((pendingYellow).values_list('pk', flat=True)) +list((pendingOrange).values_list('pk', flat=True)) +list((pendingRed).values_list('pk', flat=True))
                ots_all = Polizas.objects.filter(pk__in = list(ots_all))
            except:
                try:
                    ots_all = Polizas.objects.filter(Q(pk__in = list(pendingGreen)) | Q(pk__in = list(pendingOrange)) | Q(pk__in = list(pendingYellow)) | Q(pk__in = list(pendingRed)))
                except:
                    ots_all = polizas      
        try:
            tipo = int(tipo)
            if tipo == 1:  
                ots = pendingGreen
            elif tipo == 2:
                ots = pendingYellow
            elif tipo == 3:    
                ots = pendingOrange
            elif tipo == 4:    
                ots = pendingRed
            else:  
                ots = ots_all
        except Exception as e:
            if tipo == 'green':  
                ots = pendingGreen
            elif tipo == 'yellow':
                ots = pendingYellow
            elif tipo == 'orange':    
                ots = pendingOrange
            elif tipo == 'red':    
                ots = pendingRed
            else:  
                ots = ots_all


    # Endosos
    try:
        order = int(request.GET.get('order'))
        asc = int(request.GET.get('asc'))
        tipo = (request.GET.get('tipo'))
        cadena = request.GET.get('cadena')
        org_name = request.GET.get('org')
        natural_filters = [Q(full_name__icontains = cadena)]
        naturals = Contractor.objects.filter(reduce(OR, natural_filters), org_name = org).values_list('pk', flat=True)

        ramos = Ramos.objects.filter(ramo_name__icontains = cadena).values_list('pk', flat=True)
        subramos = SubRamos.objects.filter(subramo_name__icontains = cadena).values_list('pk', flat=True)

        prov_filters = [Q(compania__icontains = cadena), 
                            Q(alias__icontains = cadena),
                            Q(rfc__icontains = cadena)]
        providers = Provider.objects.filter(reduce(OR, prov_filters), org_name = org).distinct('id').values_list('pk', flat=True)

        ot_filters = [Q(internal_number__icontains = cadena), Q(contractor__in = list(naturals)), 
                    Q(poliza_number__icontains = cadena), Q(ramo__in = list(ramos)), Q(subramo__in = list(subramos)), Q(aseguradora__in = providers)]

        policy_endo = Polizas.objects.filter(reduce(OR, ot_filters),document_type__in=list([1,3]), org_name=request.GET.get('org'))
        endo_filters = [Q(policy__in = list(policy_endo))]

        polizas_endo1 = Polizas.objects.filter(reduce(OR, ot_filters), document_type__in=list([1,3]), status = 1, org_name=request.GET.get('org')).order_by('created_at')

        try:
            dataToFilter = getDataForPerfilRestricted(request, request.GET.get('org'))
        except Exception as er:
            dataToFilter = {}
        if dataToFilter:
            # Contratantes***
            if dataToFilter['ccpr']:
                polizas_endo1 = polizas_endo1.filter(contractor__in = list(dataToFilter['ccpr']))
            if dataToFilter['cgpr']:
                polizas_endo1 = polizas_endo1.filter(contractor__group__in = list(dataToFilter['cgpr']))
            if dataToFilter['ccepr']:
                polizas_endo1 = polizas_endo1.filter(contractor__cellule__in = list(dataToFilter['ccepr']))
            if dataToFilter['crpr']:
                polizas_endo1 = polizas_endo1.filter(contractor__vendor__in = list(dataToFilter['crpr']))
            if dataToFilter['cspr']:
                polizas_endo1 = polizas_endo1.filter(contractor__sucursal__in = list(dataToFilter['cspr']))
            # Pólizas ****
            if dataToFilter['pppr']:
                polizas_endo1 = polizas_endo1.filter(pk__in = list(dataToFilter['pppr']))
            if dataToFilter['pgpr']:
                polizas_endo1 = polizas_endo1.filter(contractor__group__in = list(dataToFilter['pgpr']))
            if dataToFilter['pcepr']:
                polizas_endo1 = polizas_endo1.filter(celula__in = list(dataToFilter['pcepr']))
            if dataToFilter['prpr']:
                polizas_endo1 = polizas_endo1.filter(ref_policy__referenciador__in = list(dataToFilter['prpr']))
            if dataToFilter['pspr']:
                polizas_endo1 = polizas_endo1.filter(sucursal__in = list(dataToFilter['pspr']))
            if dataToFilter['papr']:
                polizas_endo1 = polizas_endo1.filter(groupinglevel__in = list(dataToFilter['papr']))
            if dataToFilter['pcapr']:
                polizas_endo1 = polizas_endo1.filter(clave__in = list(dataToFilter['pcapr']))
            if dataToFilter['psrpr']:
                polizas_endo1 = polizas_endo1.filter(subramo__subramo_code__in = list(dataToFilter['psrpr']))
            if dataToFilter['paspr']:
                polizas_endo1 = polizas_endo1.filter(aseguradora__in = list(dataToFilter['paspr']))
            if dataToFilter['pstpr']:
                polizas_endo1 = polizas_endo1.filter(status__in = list(dataToFilter['pstpr']))

        # endosos = Endorsement.objects.filter(reduce(OR, endo_filters), status__in = [1, 5], org_name=request.GET.get('org'))
        try:
          config_chart = Graphics.objects.get(org_name=request.GET.get('org'), type_graphic = 1)
          days_green = config_chart.green
          days_yellow = config_chart.yellow
          days_orange = config_chart.orange
          days_red = config_chart.red
        except:
          config_chart = None
          days_green = 6
          days_yellow = 13
          days_orange = 20
          days_red = 1000

        today = datetime.today()
        orange_days = timedelta(days = days_orange)
        yellow_days = timedelta(days = days_yellow)
        green_days = timedelta(days = days_green)
        red_days = timedelta(days = days_red)

        diasO = today - orange_days
        diasY = today - yellow_days
        diasG = today - green_days
        diasR = today - red_days        
        # Endosos----
        endosos = Endorsement.objects.filter(status__in = [1, 5],internal_number__icontains = cadena, org_name=request.GET.get('org'))
        try:
            dataToFilter = getDataForPerfilRestricted(request, request.GET.get('org'))
        except Exception as er:
            dataToFilter = {}
        if dataToFilter:
            # Contratantes***
            if dataToFilter['ccpr']:
                endosos = endosos.filter(policy__contractor__in = list(dataToFilter['ccpr']))
            if dataToFilter['cgpr']:
                endosos = endosos.filter(policy__contractor__group__in = list(dataToFilter['cgpr']))
            if dataToFilter['ccepr']:
                endosos = endosos.filter(policy__contractor__cellule__in = list(dataToFilter['ccepr']))
            if dataToFilter['crpr']:
                endosos = endosos.filter(policy__contractor__vendor__in = list(dataToFilter['crpr']))
            if dataToFilter['cspr']:
                endosos = endosos.filter(policy__contractor__sucursal__in = list(dataToFilter['cspr']))
            # Pólizas ****
            if dataToFilter['pppr']:
                endosos = endosos.filter(policy__pk__in = list(dataToFilter['pppr']))
            if dataToFilter['pgpr']:
                endosos = endosos.filter(policy__contractor__group__in = list(dataToFilter['pgpr']))
            if dataToFilter['pcepr']:
                endosos = endosos.filter(policy__celula__in = list(dataToFilter['pcepr']))
            if dataToFilter['prpr']:
                endosos = endosos.filter(policy__ref_policy__referenciador__in = list(dataToFilter['prpr']))
            if dataToFilter['pspr']:
                endosos = endosos.filter(policy__sucursal__in = list(dataToFilter['pspr']))
            if dataToFilter['papr']:
                endosos = endosos.filter(policy__groupinglevel__in = list(dataToFilter['papr']))
            if dataToFilter['pcapr']:
                endosos = endosos.filter(policy__clave__in = list(dataToFilter['pcapr']))
            if dataToFilter['psrpr']:
                endosos = endosos.filter(policy__subramo__subramo_code__in = list(dataToFilter['psrpr']))
            if dataToFilter['paspr']:
                endosos = endosos.filter(policy__aseguradora__in = list(dataToFilter['paspr']))
            if dataToFilter['pstpr']:
                endosos = endosos.filter(policy__status__in = list(dataToFilter['pstpr']))  

        
        pendingGreenE = endosos.filter(status__in = [1, 5], org_name=request.GET.get('org'), created_at__lte = today, created_at__gt = diasG)
        pendingYellowE = endosos.filter(status__in = [1, 5], org_name=request.GET.get('org'), created_at__lte = diasG, created_at__gt = diasY)
        pendingOrangeE = endosos.filter(status__in = [1, 5], org_name=request.GET.get('org'), created_at__lte = diasY, created_at__gt = diasO)
        pendingRedE = endosos.filter(status__in = [1, 5], org_name=request.GET.get('org'), created_at__lte = diasO)
        endo_all = endosos.filter(org_name=request.GET.get('org'), created_at__lte = today, created_at__gte = diasR)

        if tipo == 'green':
          endosos = pendingGreenE
        elif tipo == 'yellow':
          endosos = pendingYellowE
        elif tipo == 'orange':    
          endosos = pendingOrangeE
        elif tipo == 'red':    
          endosos = pendingRedE
        else:  
          endosos = endo_all
    except Exception as e:
        order = int(request.GET.get('order'))
        asc = int(request.GET.get('asc'))
        tipo = request.GET.get('tipo')
        request = request
        
        if order == 1:
            if asc == 1:
                polizas_endo1 = Endorsement.objects.filter(status__in = [1, 5], org_name=request.GET.get('org')).order_by('endorsement_type')
            else:
                polizas_endo1 = Endorsement.objects.filter(status__in = [1, 5], org_name=request.GET.get('org')).order_by('-endorsement_type')

        elif order == 2:
            if asc == 1:
                polizas_endo1 = Endorsement.objects.filter(status__in = [1, 5], org_name=request.GET.get('org')).order_by('policy__contractor__full_name')
            else:
                polizas_endo1 = Endorsement.objects.filter(status__in = [1, 5], org_name=request.GET.get('org')).order_by('-policy__contractor__full_name')
        
        elif order == 3:
            if asc == 1:
                polizas_endo1 = Endorsement.objects.filter(status__in = [1, 5], org_name=request.GET.get('org')).order_by('policy__poliza_number')
            else:
                polizas_endo1 = Endorsement.objects.filter(status__in = [1, 5], org_name=request.GET.get('org')).order_by('-policy__poliza_number')
        
        elif order == 4:
            if asc == 1:
                polizas_endo1 = Endorsement.objects.filter(status__in = [1, 5], org_name=request.GET.get('org')).order_by('policy__aseguradora__compania')
            else:
                polizas_endo1 = Endorsement.objects.filter(status__in = [1, 5], org_name=request.GET.get('org')).order_by('-policy__aseguradora__compania')

        elif order == 5:
            if asc == 1:
                polizas_endo1 = Endorsement.objects.filter(status__in = [1, 5], org_name=request.GET.get('org')).order_by('created_at')
            else:
                polizas_endo1 = Endorsement.objects.filter(status__in = [1, 5], org_name=request.GET.get('org')).order_by('-created_at')
        else:
            polizas_endo1 = Endorsement.objects.filter(status__in = [1, 5], org_name=request.GET.get('org'))

        try:
            config_chart = Graphics.objects.get(org_name=request.GET.get('org'), type_graphic = 1)
            days_green = config_chart.green
            days_yellow = config_chart.yellow
            days_orange = config_chart.orange
            days_red = config_chart.red
        except:
            config_chart = None
            days_green = 6
            days_yellow = 13
            days_orange = 20
            days_red = 1000

        today = datetime.today()
        orange_days = timedelta(days = days_orange)
        yellow_days = timedelta(days = days_yellow)
        green_days = timedelta(days = days_green)

        diasO = today - orange_days
        diasY = today - yellow_days
        diasG = today - green_days
        try:
            dataToFilter = getDataForPerfilRestricted(request, request.GET.get('org'))
        except Exception as er:
            dataToFilter = {}
        if dataToFilter:
            # Contratantes***
            if dataToFilter['ccpr']:
                polizas_endo1 = polizas_endo1.filter(policy__contractor__in = list(dataToFilter['ccpr']))
            if dataToFilter['cgpr']:
                polizas_endo1 = polizas_endo1.filter(policy__contractor__group__in = list(dataToFilter['cgpr']))
            if dataToFilter['ccepr']:
                polizas_endo1 = polizas_endo1.filter(policy__contractor__cellule__in = list(dataToFilter['ccepr']))
            if dataToFilter['crpr']:
                polizas_endo1 = polizas_endo1.filter(policy__contractor__vendor__in = list(dataToFilter['crpr']))
            if dataToFilter['cspr']:
                polizas_endo1 = polizas_endo1.filter(policy__contractor__sucursal__in = list(dataToFilter['cspr']))
            # Pólizas ****
            if dataToFilter['pppr']:
                polizas_endo1 = polizas_endo1.filter(policy__pk__in = list(dataToFilter['pppr']))
            if dataToFilter['pgpr']:
                polizas_endo1 = polizas_endo1.filter(policy__contractor__group__in = list(dataToFilter['pgpr']))
            if dataToFilter['pcepr']:
                polizas_endo1 = polizas_endo1.filter(policy__celula__in = list(dataToFilter['pcepr']))
            if dataToFilter['prpr']:
                polizas_endo1 = polizas_endo1.filter(policy__ref_policy__referenciador__in = list(dataToFilter['prpr']))
            if dataToFilter['pspr']:
                polizas_endo1 = polizas_endo1.filter(policy__sucursal__in = list(dataToFilter['pspr']))
            if dataToFilter['papr']:
                polizas_endo1 = polizas_endo1.filter(policy__groupinglevel__in = list(dataToFilter['papr']))
            if dataToFilter['pcapr']:
                polizas_endo1 = polizas_endo1.filter(policy__clave__in = list(dataToFilter['pcapr']))
            if dataToFilter['psrpr']:
                polizas_endo1 = polizas_endo1.filter(policy__subramo__subramo_code__in = list(dataToFilter['psrpr']))
            if dataToFilter['paspr']:
                polizas_endo1 = polizas_endo1.filter(policy__aseguradora__in = list(dataToFilter['paspr']))
            if dataToFilter['pstpr']:
                polizas_endo1 = polizas_endo1.filter(policy__status__in = list(dataToFilter['pstpr']))  

        pendingGreen = polizas_endo1.filter(status__in = [1, 5], org_name=request.GET.get('org'), created_at__lte = today, created_at__gt = diasG)
        pendingYellow = polizas_endo1.filter(status__in = [1, 5], org_name=request.GET.get('org'), created_at__lte = diasG, created_at__gt = diasY)
        pendingOrange = polizas_endo1.filter(status__in = [1, 5], org_name=request.GET.get('org'), created_at__lte = diasY, created_at__gt = diasO)
        pendingRed = polizas_endo1.filter(status__in = [1, 5], org_name=request.GET.get('org'), created_at__lte = diasO)

        if tipo == 'green':
            endosos = pendingGreen
        elif tipo == 'yellow':
            endosos = pendingYellow
        elif tipo == 'orange':
            endosos = pendingOrange
        elif tipo == 'red':
            endosos = pendingRed
        else:
            endosos = polizas_endo1    
    # Empieza insertado de imagen
    info_org = getInfoOrg(request)

    if len(info_org['logo']) != 0:
        archivo_imagen = 'https://miurabox-public.s3.amazonaws.com/cas/' + info_org['logo']
        # archivo_imagen = get_presigned_url("cas/{url}".format(url=info_org['logo']),28800) 
    else:
        archivo_imagen = 'saam.jpg'
    # Sheet header, first row
    row_num = 10

    font_style = xlwt.XFStyle()
    font_style.font.bold = True

    columns = ['Tipo', 'Folio interno', 'Contratante', 'Email', 'Teléfono', 'Proveedor', 'Subramo', 'Forma de Pago', 'Estatus', 
               'Inicio Póliza', 'Fin Póliza', 'Moneda', 'Creado por', 'Fecha de creación','Antigüedad','Bitácora']
    
    columnsE = ['Tipo', 'No.Endoso', 'Contratante', 'Email', 'Teléfono', 'Proveedor', 'Subramo', 'Forma de Pago', 'Estatus', 
                 'Inicio Póliza', 'Fin Póliza', 'Moneda', 'Prima Neta', 'RPF', 'Derecho', 'IVA', 'Prima Total', 'Comisión Total',
                 'Clave', 'Asegurado', 'Observaciones', 'Referenciador', 'Fecha de creación', 'Creado por','Folio Interno','Antigüedad','No.Póliza']

    asegurado = []
    antiguedad = []
    referenciador = []
    responsable = []
    collection = []
    userpay = []
    creadopor = []
    clave = []
    contract = []
    contractemail = []
    contractphone = []
    contractgrupo = []
    nopolizae = []
    bitacoraa = []

    # ots = ots.order_by('natural__full_name','juridical__j_name')
    ots = ots.order_by('id')
    subramos = UserInfo.objects.filter(user = request.user)
    if subramos.exists() and subramos.first() and subramos.first().subramos_dashboard :
        subramos = subramos.first().subramos_dashboard
    else:
        subramos = list(SubRamos.objects.filter(org_name = request.GET.get('org')).distinct('subramo_code').values_list('subramo_code',flat=True))
    seguimiento=[]
    ots = ots.filter(subramo__subramo_code__in = subramos)
    for r in ots:
        try:
            comment_ = Comments.objects.filter(org_name=request.GET.get('org'), model = 1, id_model = r.id).order_by('-created_at')
            comment_ = comment_[0].content
            comment_ = ((((((comment_).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
        except Exception as errorr:
            comment_ = 'Sin comentario'
        if r.clave:
            try:
                cve = r.clave.clave + ' '+ str(r.clave.name)
                cve = ((((((cve).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
            except Exception as sdsa:
                cve =''
        else:
            cve = ''
        antig = get_antiguedad(r.created_at)
        if r.owner:
            val_owner = r.owner.first_name + ' '+ str(r.owner.last_name)
        else:
            val_owner = ''
        if r.document_type == 6:
            if r.parent.parent.parent.contractor:
                contratante = ((((((r.parent.parent.parent.contractor.full_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                contratanteE = r.parent.parent.parent.contractor.email
                contratanteP = r.parent.parent.parent.contractor.phone_number
            else:
                contratante =''
                contratanteE = ''
                contratanteP = ''
        else:
            if r.contractor:
                contratante = ((((((r.contractor.full_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                contratanteE = r.contractor.email
                contratanteP = r.contractor.phone_number
            else:
                contratante =''
                contratanteE = ''
                contratanteP = ''
        if r.responsable:
            val_resp = r.responsable.first_name + ' '+ str(r.responsable.last_name)
        else:
            val_resp = ''
        if r.collection_executive:
            val_cexe = r.collection_executive.first_name + ' '+ str(r.collection_executive.last_name)
        else:
            val_cexe = ''
        try:
            refs_policy = ReferenciadoresInvolved.objects.filter(policy = r.id,is_changed=False).values_list('referenciador__first_name','referenciador__last_name')
            if len(refs_policy):
                v = []
                try:
                    for rty in refs_policy:
                        v.append(rty[0] +' '+ str(rty[1])+str(', '))
                    referenc = v
                except Exception as y:
                    v = []
                    referenc = []
            else:
                v = []
                referenc = []
        except Exception as e:
            v = []
            referenc = []
        if r.ramo:
            if r.ramo.ramo_code == 1:
                form = Life.objects.filter(policy = r.id)
                try:
                    if form:
                        value = form[0].personal.full_name
                    else:
                        value = ''
                except Exception as rt:
                   value = ''
            elif r.ramo.ramo_code == 2:
                form = AccidentsDiseases.objects.filter(policy = r.id)
                if form:
                    value = form[0].personal.full_name
                else:
                    value = ''
            elif r.ramo.ramo_code == 3 and r.subramo and r.subramo.subramo_code == 9:
                form = AutomobilesDamages.objects.filter(policy = r.id)
                if form:
                    try:
                        form[0].model = ((((((form[0].model).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        form[0].version = ((((((form[0].version).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    except Exception as ers:
                        form[0].model = form[0].model
                        form[0].version = form[0].version
                    value = str(form[0].brand) + '-' + str(form[0].model) + '-' + str(form[0].version)+ '-' + str(form[0].serial)
                else:
                    value = ''
            elif r.ramo.ramo_code == 3 and r.subramo and not r.subramo.subramo_code == 9:
                form = Damages.objects.filter(policy = r.id)
                if form:
                    value = form[0].insured_item
                else:
                    value = ''
            else:
                value = 'Sin asegurado'
        else:
            value = 'Sin asegurado'
        if value:
            value = ((((((value).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'') 
        else:
            value = value
        if r.document_type in [1,3,12]:
            tab = ''
            try:
                if r.status ==1:
                    tablero =PromotoriaTablero.objects.filter(org_name=r.org_name,is_active=True)#config
                    if tablero:                        
                        confTab = tablero[0].polizas_ots
                        try:
                            confTab = json.loads(confTab)
                        except Exception as eee:
                            confTab = confTab
                            try:
                                confTab = eval(confTab)
                            except Exception as e:
                                pass
                        for ind,y in enumerate(confTab):
                            if r.id in y['polizas']:
                                tab=y['tablero']
                                break
            except:
                tab= ''
        else:
            tab= ''
        # seguimiento.append(tab)
        asegurado.append(value)
        referenciador.append(referenc)
        antiguedad.append(antig)
        responsable.append(val_resp)
        collection.append(val_cexe)
        creadopor.append(val_owner)
        clave.append(cve)
        contract.append(contratante)
        contractemail.append(contratanteE)
        contractphone.append(contratanteP)
        seguimiento.append(tab)
        bitacoraa.append(comment_)
    asegurado_e = []
    antiguedad_e = []
    referenciador_e = []
    responsable_e = []
    collection_e = []
    userpay_e = []
    creadopor_e = []
    clave_e = []
    contract_e = []
    contractemail_e = []
    contractphone_e = []
    contractgrupo_e = []
    subramo_e = []
    aseguradora_e = []
    start_e = []
    end_e = []
    currency = []
    seguimientoe=[]
    # endosos = endosos.order_by('policy__contractor__full_name','policy__juridical__j_name','fianza__natural__full_name','fianza__juridical__j_name')
    endosos = endosos.order_by('id')
    endosos = endosos.filter(policy__subramo__subramo_code__in = subramos)
    for r in endosos:
        fc = 1
        aseg_e = ''
        fn = ''
        inc = '' 
        antig_e = get_antiguedad(r.created_at)
        if r.owner:
            val_owner_e = r.owner.first_name + ' '+ str(r.owner.last_name)
        else:
            val_owner_e = ''
        if r.policy:
            try:
                aseg_e = r.policy.aseguradora.alias
            except Exception as fd:
                aseg_e = ''
            try:
                nope = r.policy.poliza_number
            except Exception as df:
                nope = ''
            try:
                inc = r.policy.start_of_validity.strftime("%d/%m/%Y")
                fn = r.policy.end_of_validity.strftime("%d/%m/%Y")
            except Exception as df:
                inc = ''
                fn = ''
            sramo_e = r.policy.subramo.subramo_name
            if r.policy.document_type == 6:
                fc = r.policy.parent.parent.parent.f_currency
                try:
                    aseg_e = r.policy.parent.parent.parent.aseguradora.alias
                except Exception as fd:
                    aseg_e = ''
                if r.policy.parent.parent.parent.contractor:
                    contratante_e = ((((((r.policy.parent.parent.parent.contractor.full_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    contratanteE_e = r.policy.parent.parent.parent.contractor.email
                    contratanteP_e = r.policy.parent.parent.parent.contractor.phone_number
                else:
                    contratante_e = ''
                    contratanteE_e = ''
                    contratanteP_e = ''
            else:
                fc = r.policy.f_currency
                try:
                    aseg_e = r.policy.aseguradora.alias
                except Exception as fd:
                    aseg_e = ''
                if r.policy.contractor:
                    contratante_e = ((((((r.policy.contractor.full_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    contratanteE_e = r.policy.contractor.email
                    contratanteP_e = r.policy.contractor.phone_number               
                else:
                    contratante_e = ''
                    contratanteE_e = ''
                    contratanteP_e = ''

            if r.policy.responsable:
                val_resp_e = r.policy.responsable.first_name + ' '+ str(r.policy.responsable.last_name)
            else:
                val_resp_e = ''
            if r.policy.clave:
                try:
                    cve_e = r.policy.clave.clave + ' '+ str(r.policy.clave.name)
                    cve_e = ((((((cve_e).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                except Exception as fs:
                    cve_e =''
            else:
                cve_e = ''
            if r.policy.collection_executive:
                val_cexe_e = r.policy.collection_executive.first_name + ' '+ str(r.policy.collection_executive.last_name)
            else:
                val_cexe_e = ''
            try:
                refs_policy = ReferenciadoresInvolved.objects.filter(policy = r.policy.id,is_changed=False).values_list('referenciador__first_name','referenciador__last_name')
                if len(refs_policy):
                    v = []
                    try:
                        for rty in refs_policy:
                            v.append(rty[0] +' '+ str(rty[1])+str(', '))
                        referenc_e = v
                    except Exception as y:
                        referenc_e = []
                else:
                    referenc_e = []
            except Exception as e:
                referenc_e = [] 
            if r.policy.ramo.ramo_code == 1:
                form = Life.objects.filter(policy = r.policy.id)
                try:
                    if form:
                        value_e = form[0].personal.full_name
                    else:
                        value_e = ''
                except Exception as rt:
                   value_e = ''
            elif r.policy.ramo.ramo_code == 2:
                form = AccidentsDiseases.objects.filter(policy = r.policy.id)
                if form:
                    value_e = form[0].personal.full_name
                else:
                    value_e = ''
            elif r.policy.subramo.subramo_code == 9:
                form = AutomobilesDamages.objects.filter(policy = r.policy.id)
                if form:
                    try:
                        form[0].model = ((((((form[0].model).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        form[0].version = ((((((form[0].version).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    except Exception as ers:
                        form[0].model = form[0].model
                        form[0].version = form[0].version
                    value_e = str(form[0].brand) + '-' + str(form[0].model )+ '-' + str(form[0].version)+ '-' +str( form[0].serial)
                else:
                    value_e = ''
            elif r.policy.ramo.ramo_code == 3 and not r.policy.subramo.subramo_code == 9:
                form = Damages.objects.filter(policy = r.policy.id)
                if form:
                    value_e = form[0].insured_item
                else:
                    value_e = ''
            else:
                value_e = 'Sin asegurado'
        else:
            aseg_e = ''
            inc = ''
            fn = ''
            contratante_e = ''
            contratanteE_e = ''
            contratanteP_e = ''
            cve_e = ''
            referenc_e = ''
            sramo_e = ''
            value_e = 'Sin asegurado'
            val_resp_e = 'Sin responsable'
            val_cexe_e = 'Sin ejecutivo'
            fc = 1
        if value_e:
            value_e = ((((((value_e).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'') 
        else:
            value_e = value_e
        tab = ''
        if r.policy.document_type in [1,3,12]:
            tab = ''
            try:
                if r.status ==5:
                    tablero =PromotoriaTablero.objects.filter(org_name=r.org_name,is_active=True)#config
                    if tablero:                        
                        confTab = tablero[0].polizas_ots
                        try:
                            confTab = json.loads(confTab)
                        except Exception as eee:
                            confTab = confTab
                            try:
                                confTab = eval(confTab)
                            except Exception as e:
                                pass
                        for ind,y in enumerate(confTab):
                            if 'endoso' in y:
                                if r.id in y['endoso']:
                                    tab=y['tablero']
                                    break
            except:
                tab= ''
        else:
            tab= ''
        seguimientoe.append(tab)
        asegurado_e.append(value_e)
        referenciador_e.append(referenc_e)
        antiguedad_e.append(antig_e)
        responsable_e.append(val_resp_e)
        collection_e.append(val_cexe_e)
        creadopor_e.append(val_owner_e)
        clave_e.append(cve_e)
        contract_e.append(contratante_e)
        contractemail_e.append(contratanteE_e)
        contractphone_e.append(contratanteP_e)
        subramo_e.append(sramo_e)
        aseguradora_e.append(aseg_e)
        start_e.append(inc)
        end_e.append(fn)
        currency.append(fc)
        nopolizae.append(nope)
    obj = {
        # OT
        'document_type'   : str(list(ots.values_list('document_type', flat = True))),        
        'folioInterno'   : str(list(ots.values_list('internal_number', flat = True))),      
        'poliza_number'   : str(list(ots.values_list('poliza_number', flat = True))),      
        'aseguradora__compania'   : str(list(ots.values_list('aseguradora__alias', flat = True))),
        'subramo'   : str(list(ots.values_list('subramo__subramo_name', flat = True))),
        'forma_de_pago'   : str(list(ots.values_list('forma_de_pago', flat = True))),
        'status'   : str(list(ots.values_list('status', flat = True))),
        'start_of_validity'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in ots.values_list('start_of_validity', flat = True) ])) ,
        'end_of_validity'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in ots.values_list('end_of_validity', flat = True) ])) ,
        'f_currency'   : str(list(ots.values_list('f_currency', flat = True))),        
        'created_at'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in ots.values_list('created_at', flat = True) ]))  ,       
        'asegurado'   : str(list(asegurado)),
        'bitacoraa'   : str(list(bitacoraa)),
        'referenciador'   : str(list(referenciador)),
        'antiguedad'   : str(list(antiguedad)),
        'creadopor'   : str(list(creadopor)),
        'collection'   : str(list(collection)),
        'user_pay'   : str(list(userpay)),
        'responsable'   : str(list(responsable)),
        'contract'   : str(list(contract)),
        'contractemail'   : str(list(contractemail)),
        'contractphone'   : str(list(contractphone)),
        'clave'   : str(list(clave)),
        'seguimiento'   : str(list(seguimiento)),
        # Endosos
        'document_type_e'   : str(list(endosos.values_list('policy__document_type', flat = True))),        
        'endosoType'   : str(list(endosos.values_list('endorsement_type', flat = True))),        
        'poliza_number_e'   : str(list(endosos.values_list('policy__poliza_number', flat = True))),
        'formaPago_e'   : str(list(endosos.values_list('policy__forma_de_pago', flat = True))),
        'aseguradora__compania_e'   : str(list(aseguradora_e)),
        'forma_de_pago_e'   : str(list(endosos.values_list('policy__forma_de_pago', flat = True))),
        'status_ep'   : str(list(endosos.values_list('policy__status', flat = True))),
        'status_e'   : str(list(endosos.values_list('status', flat = True))),
        'start_of_validity_e'   : str(list(start_e)) ,
        'end_of_validity_e'   : str(list(end_e)) ,
        'f_currency_e'   : str(list(currency)),        
        'created_at_e'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in endosos.values_list('created_at', flat = True) ]))  ,
        'number_endorsement'   : str(list(endosos.values_list('number_endorsement', flat = True))),           
        'pneta_e'   : str(list(endosos.values_list('p_neta', flat = True))),        
        'rpf_e'   : str(list(endosos.values_list('rpf', flat = True))),        
        'derecho_e'   : str(list(endosos.values_list('derecho', flat = True))),        
        'iva_e'   : str(list(endosos.values_list('iva', flat = True))),        
        'ptotal_e'   : str(list(endosos.values_list('p_total', flat = True))),        
        'comision_e'   : str(list(endosos.values_list('comision', flat = True))),      
        'seguimientoe'   : str(list(seguimientoe)),  
        'nopolizae'   : str(list(nopolizae)),  
        'internal_number_e'   : str(list(endosos.values_list('internal_number', flat = True))),        
        # 'observations_e'   : str(list(endosos.values_list('observations', flat = True))),
        'observations_e'   : str(list([(((((((x).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')) if x else '' for x in endosos.values_list('observations', flat = True)])),
        'asegurado_e'   : str(list(asegurado_e)),
        'referenciador_e'   : str(list(referenciador_e)),
        'antiguedad_e'   : str(list(antiguedad_e)),
        'creadopor_e'   : str(list(creadopor_e)),
        'collection_e'   : str(list(collection_e)),
        'user_pay_e'   : str(list(userpay_e)),
        'responsable_e'   : str(list(responsable_e)),
        'clave_e'   : str(list(clave_e)),        
        'contratact_e'   : str(list(contract_e)),
        'contractemail_e'   : str(list(contractemail_e)),
        'contractphone_e'   : str(list(contractphone_e)),
        'subramo_e'   : str(list(subramo_e)),
        # Gral
        'tipo_reporteE': 'Reporte Endosos Dashboard',
        'email_org':info_org['email'],
        'phone_org':info_org['phone'],
        'webpage_org':info_org['webpage'],
        'address_org':info_org['address'],
        'urlname_org':info_org['name'],
        }   
    obj['columns'] = str(list(columns))
    obj['imagen'] = archivo_imagen
    obj['lenots'] = len(ots)
    obj['lenendosos'] = len(endosos)
    obj['registros'] = len(ots)+len(endosos)
    obj['ver_referenciador']=verReferenciadores
    r = requests.post(settings.SERVICEEXCEL_URL + 'get-otsEndososDashExcel/', obj,
    # headers = {
    # 'Authorization':'Bearer %s'%request.user.user_info.fi_token_refresh,
    # # 'Content-Type':'application/json' 
    # }, 
    stream=True)
    response_data= r.text

    response = HttpResponse(r.content,content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

    return response
# Reporte Recibos Dash
@api_view(['GET'])
@permission_classes((IsAuthenticatedV2, IsOrgMemberV2))
def Service_RecibosDashExcel(request):    
    verReferenciadores = is_perm_ver_referenciadores(request)
    valueCom = True
    try:
        valueCom = comisions(request)
    except Exception as ers:
        valueCom =  True
    try:
        try:
            user = request['user']
            org = user['org']['name']
        except Exception as erty:
            org = request.GET.get('org')
        try:
            tipo = int(request.GET.get('tipo'))
        except Exception as e:
            tipo = request.GET.get('tipo')
        cadena = request.GET.get('cadena')
        try:
            serie = int(request.GET.get('serie'))
        except Exception as eres:
            serie = 0
        receipts = []

        natural_filters = [Q(full_name__icontains = cadena)]
        
        naturals = Contractor.objects.filter(reduce(OR, natural_filters), org_name = org).values_list('pk', flat=True)

        prov_filters = [Q(compania__icontains = cadena), 
                                                Q(alias__icontains = cadena),
                                                Q(rfc__icontains = cadena)]
        providers = Provider.objects.filter(reduce(OR, prov_filters), org_name = org).distinct('id').values_list('pk', flat=True)

        ramos = Ramos.objects.filter(ramo_name__icontains = cadena).values_list('pk', flat=True)
        subramos = SubRamos.objects.filter(subramo_name__icontains = cadena).values_list('pk', flat=True)

        ot_filters = [Q(contractor__in = list(naturals)), Q(aseguradora__in = list(providers)),
                                Q(poliza_number__icontains = cadena), Q(ramo__in = list(ramos)), Q(subramo__in = list(subramos))]

        polizas = Polizas.objects.filter(reduce(OR,ot_filters), org_name=request.GET.get('org')).exclude(status__in = [2,0,7]).exclude(document_type = 2)
        
        p = []
        p_dt2 = []
        for poliz in polizas:
            if poliz.document_type == 2:
                    p_dt2.append(poliz)
            else:
                    p.append(poliz.id)

        try:
            for pol in p:
                if pol.document_type == 2:
                        p_dt2.append(poliz)
        except Exception as ers:
            pass      
        polizas = p
        recibos = Recibos.objects.filter(poliza__in = polizas).filter(org_name = request.GET.get('org')).filter(receipt_type__in = [1,2,3])


        if not serie == 0:
            recibos = recibos.filter(recibo_numero = serie)
        try:
            # try:
            #     config_chart = Graphics.objects.get(owner=request.user, org_name = request.GET.get('org'), type_graphic = 2)
            # except:
            #     config_chart = Graphics.objects.get(org_name = request.GET.get('org'), type_graphic = 2)
            try:
                config_chart = Graphics.objects.filter(org_name=request.GET.get('org'), type_graphic = 2).order_by('-created_at')[0]
            except:
                config_chart = Graphics.objects.get(org_name=request.GET.get('org'), type_graphic = 2)
            days_green = config_chart.green
            days_yellow = config_chart.yellow
            days_orange = config_chart.orange
            days_red = config_chart.red
            filter_graphs =  config_chart.option_filter
        except:
            config_chart = None
            days_green = 45
            days_yellow = 30
            days_orange = 15
            days_red = 0
            filter_graphs = 2

        today = datetime.today()
        dt = datetime.today()
        try:
            newdatetime = dt.replace(hour=23, minute=59,second=59)
        except Exception as e:
            newdatetime = dt
        orange_days = timedelta(days = days_orange)
        yellow_days = timedelta(days = days_yellow)
        green_days = timedelta(days = days_green)

        diasO = today + orange_days
        diasY = today + yellow_days
        diasG = today + green_days

        if filter_graphs == 1:
            query_g = (Q(fecha_inicio__lt = diasG) & Q(fecha_inicio__gte = diasY))
            query_y = (Q(fecha_inicio__lt = diasY) & Q(fecha_inicio__gte = diasO))
            query_o = (Q(fecha_inicio__lt = diasO) & Q(fecha_inicio__gte = newdatetime))
            # query_r = (Q(fecha_inicio__lt = today))*
            if newdatetime:
                query_r = (Q(fecha_inicio__lte = newdatetime))
            else:
                query_r = (Q(fecha_inicio__lte = today))
            query = (Q(fecha_inicio__lte = diasG))
        else: 
            query_g = (Q(vencimiento__lt = diasG) & Q(vencimiento__gte = diasY))
            query_y= (Q(vencimiento__lt = diasY) & Q(vencimiento__gte = diasO))
            query_o = (Q(vencimiento__lt = diasO) & Q(vencimiento__gte = newdatetime))
            # query_r = (Q(vencimiento__lt = today))*
            if newdatetime:
                query_r = (Q(vencimiento__lte = newdatetime))
            else:
                query_r = (Q(vencimiento__lte = today))
            query = (Q(vencimiento__lte = diasG))
        
        polizas = list(Polizas.objects.filter(org_name = request.GET.get('org')).exclude(document_type = 2).exclude(status__in = [2,0,7]).exclude(document_type = 2).values_list('pk', flat=True))  
        #polizas = Polizas.objects.exclude(document_type = 2).exclude(status__in = [2,0,7]).filter(org_name=request.GET.get('org')).values_list('pk', flat=True)   
        fianzas = list(Polizas.objects.filter(org_name = request.GET.get('org'), document_type = 7).filter(status__in = [14,15]).values_list('pk', flat=True))
        # ----------
        subramos = UserInfo.objects.filter(user = request.user)
        if subramos.exists() and subramos.first() and subramos.first().subramos_dashboard:
            subramos = subramos.first().subramos_dashboard        
            polizas = polizas.filter(subramo__subramo_code__in = subramos)
            fianzas = fianzas.filter(subramo__subramo_code__in = subramos)
        # https://miurabox.atlassian.net/browse/DES-680
        tipopoliza=UserInfo.objects.filter(user = request.user)
        if tipopoliza.exists() and tipopoliza.first() and tipopoliza.first().tipopoliza_dashboard:
            tipopoliza_list = tipopoliza.first().tipopoliza_dashboard    
            if 3 in tipopoliza_list: #si esta las pólizas de grupo
                tipopoliza_list.extend([4, 6])  # agregar los de subgrupo y certificados
            if 7 in tipopoliza_list: #si fianza en los filtros
                tipopoliza_list.extend([8])  # agregar las fianzas colectivas
            if 11 in tipopoliza_list: #si colectiva en los filtros
                tipopoliza_list.extend([12])  # agregar las pólizas de colectividad
            if not 0 in tipopoliza_list:  
                polizas = polizas.filter(document_type__in = tipopoliza_list)
                fianzas = fianzas.filter(document_type__in = tipopoliza_list)
        # -------------
        try:
            dataToFilter = getDataForPerfilRestricted(request, request.GET.get('org'))
        except Exception as er:
            dataToFilter = {}
        if dataToFilter:
            # Contratantes***
            polizasCl = Polizas.objects.filter(pk__in = list(polizas)).filter(document_type__in = [12,6], org_name = request.GET.get('org'))
            polizasToF = Polizas.objects.filter(pk__in = list(polizas)).filter(document_type__in = [1,3,11,7,8], org_name = request.GET.get('org'))
            if dataToFilter['ccpr']:
                polizasToF = polizasToF.filter(contractor__in = list(dataToFilter['ccpr']))
                fianzas = fianzas.filter(contractor__in = list(dataToFilter['ccpr']))
            if dataToFilter['cgpr']:
                polizasToF = polizasToF.filter(contractor__group__in = list(dataToFilter['cgpr']))
                fianzas = fianzas.filter(contractor__group__in = list(dataToFilter['cgpr']))
            if dataToFilter['ccepr']:
                polizasToF = polizasToF.filter(contractor__cellule__in = list(dataToFilter['ccepr']))
                fianzas = fianzas.filter(contractor__cellule__in = list(dataToFilter['ccepr']))
            if dataToFilter['crpr']:
                polizasToF = polizasToF.filter(contractor__vendor__in = list(dataToFilter['crpr']))
                fianzas = fianzas.filter(contractor__vendor__in = list(dataToFilter['crpr']))
            if dataToFilter['cspr']:
                polizasToF = polizasToF.filter(contractor__sucursal__in = list(dataToFilter['cspr']))
                fianzas = fianzas.filter(contractor__sucursal__in = list(dataToFilter['cspr']))
            # Pólizas ****
            if dataToFilter['pppr']:
                polizasToF = polizasToF.filter(pk__in = list(dataToFilter['pppr']))
                fianzas = fianzas.filter(pk__in = list(dataToFilter['pppr']))
            if dataToFilter['pgpr']:
                polizasToF = polizasToF.filter(contractor__group__in = list(dataToFilter['pgpr']))
                fianzas = fianzas.filter(contractor__group__in = list(dataToFilter['pgpr']))
            if dataToFilter['pcepr']:
                polizasToF = polizasToF.filter(celula__in = list(dataToFilter['pcepr']))
                fianzas = fianzas.filter(celula__in = list(dataToFilter['pcepr']))
            if dataToFilter['prpr']:
                polizasToF = polizasToF.filter(ref_policy__referenciador__in = list(dataToFilter['prpr']))
                fianzas = fianzas.filter(ref_policy__referenciador__in = list(dataToFilter['prpr']))
            if dataToFilter['pspr']:
                polizasToF = polizasToF.filter(sucursal__in = list(dataToFilter['pspr']))
                fianzas = fianzas.filter(sucursal__in = list(dataToFilter['pspr']))
            if dataToFilter['papr']:
                polizasToF = polizasToF.filter(groupinglevel__in = list(dataToFilter['papr']))
                fianzas = fianzas.filter(groupinglevel__in = list(dataToFilter['papr']))
            if dataToFilter['pcapr']:
                polizasToF = polizasToF.filter(clave__in = list(dataToFilter['pcapr']))
                fianzas = fianzas.filter(clave__in = list(dataToFilter['pcapr']))
            if dataToFilter['psrpr']:
                polizasToF = polizasToF.filter(subramo__subramo_code__in = list(dataToFilter['psrpr']))
                fianzas = fianzas.filter(subramo__subramo_code__in = list(dataToFilter['psrpr']))
            if dataToFilter['paspr']:
                polizasToF = polizasToF.filter(aseguradora__in = list(dataToFilter['paspr']))
                fianzas = fianzas.filter(aseguradora__in = list(dataToFilter['paspr']))
            if dataToFilter['pstpr']:
                polizasToF = polizasToF.filter(status__in = list(dataToFilter['pstpr']))
                fianzas = fianzas.filter(status__in = list(dataToFilter['pstpr']))    
            
            polizasCT = polizasCl.filter(document_type = 12, parent__in = list(polizasToF))
            polizasGT = polizasCl.filter(document_type = 6, parent__parent__parent__in = list(polizasToF))
            polizasFin = list(polizasToF.values_list('pk', flat = True)) + list(polizasCT.values_list('pk', flat = True)) + list(polizasGT.values_list('pk', flat = True))
            polizas = polizasFin
            fianzas = list(fianzas.values_list('pk', flat = True))
        try:
            polizas = list(polizas.values_list('pk', flat = True))
        except Exception as df:
            polizas = polizas
        pendingGreen =  recibos.filter(Q(poliza__in = polizas) | Q(fianza__in = fianzas)).filter(query_g).filter(org_name = request.GET.get('org'), isActive = True, status__in = [3,4,9]).exclude(isCopy = True).filter(receipt_type__in=[1,2,3])
        pendingYellow = recibos.filter(Q(poliza__in = polizas) | Q(fianza__in = fianzas)).filter(query_y).filter(org_name = request.GET.get('org'), isActive = True, status__in = [3,4,9]).exclude(isCopy = True).filter(receipt_type__in=[1,2,3])
        pendingOrange = recibos.filter(Q(poliza__in = polizas) | Q(fianza__in = fianzas)).filter(query_o).filter(org_name = request.GET.get('org'), isActive = True, status__in = [3,4,9]).exclude(isCopy = True).filter(receipt_type__in=[1,2,3])
        pendingRed =    recibos.filter(Q(poliza__in = polizas) | Q(fianza__in = fianzas)).filter(query_r).filter(org_name = request.GET.get('org'), isActive = True, status__in = [3,4,9]).exclude(isCopy = True).filter(receipt_type__in=[1,2,3])
    
        # ------
        
        # *****************
        total_neto = 0
        try:
            tipo = int(tipo)
            if tipo == 1:
                recibos_dash = pendingGreen
                subType = "En tiempo"  
            elif tipo == 2:
                subType = "Se acerca su vencimiento" 
                recibos_dash = pendingYellow
            elif tipo == 3:
                subType = "Gestionar cobranza urgente"
                recibos_dash = pendingOrange
            elif tipo == 4:
                subType = "Recibos vencidos" 
                recibos_dash = pendingRed
            else:
                subType = "Todos" 
                recibos_dash_ = recibos.filter(org_name=request.GET.get('org'),  isActive = True, status__in = [3,4,9]).filter(query).exclude(status__in = [1,2,5,6,7,0]).exclude(isCopy = True) 
                recibos_dash = list((pendingGreen).values_list('pk', flat=True)) + list((pendingYellow).values_list('pk', flat=True)) +list((pendingOrange).values_list('pk', flat=True)) +list((pendingRed).values_list('pk', flat=True))
        except Exception as e:
            if tipo == 'green':
                recibos_dash = pendingGreen
                subType = "En tiempo"  
            elif tipo == 'yellow':
                subType = "Se acerca su vencimiento" 
                recibos_dash = pendingYellow
            elif tipo == 'orange':
                subType = "Gestionar cobranza urgente"
                recibos_dash = pendingOrange
            elif tipo == 'red':
                subType = "Recibos vencidos" 
                recibos_dash = pendingRed
            else:
                subType = "Todos" 
                recibos_dash_ = recibos.filter(org_name=request.GET.get('org'),  isActive = True, status__in = [3,4,9]).filter(query).exclude(status__in = [1,2,5,6,7,0]).exclude(isCopy = True) 
                recibos_dash = list((pendingGreen).values_list('pk', flat=True)) + list((pendingYellow).values_list('pk', flat=True)) +list((pendingOrange).values_list('pk', flat=True)) +list((pendingRed).values_list('pk', flat=True))
    except Exception as e:
        polizas = Polizas.objects.filter(org_name=request.GET.get('org')).exclude(status__in = [2,0,7]).exclude(document_type__in = [2])
        #polizas = Polizas.objects.filter(org_name = request.GET.get('org')).exclude(status__in = [2,0,7]).exclude(document_type__in = [2])
        fianzas = Polizas.objects.filter(document_type = 7).filter(status__in = [14,15]).filter(org_name=request.GET.get('org')).values_list('pk', flat=True)
        # ----------
        subramos = UserInfo.objects.filter(user = request.user)
        if subramos.exists() and subramos.first() and subramos.first().subramos_dashboard:
            subramos = subramos.first().subramos_dashboard        
            polizas = polizas.filter(subramo__subramo_code__in = subramos)
            fianzas = fianzas.filter(subramo__subramo_code__in = subramos)
        # https://miurabox.atlassian.net/browse/DES-680
        tipopoliza=UserInfo.objects.filter(user = request.user)
        if tipopoliza.exists() and tipopoliza.first() and tipopoliza.first().tipopoliza_dashboard:
            tipopoliza_list = tipopoliza.first().tipopoliza_dashboard    
            if 3 in tipopoliza_list: #si esta las pólizas de grupo
                tipopoliza_list.extend([4, 6])  # agregar los de subgrupo y certificados
            if 7 in tipopoliza_list: #si fianza en los filtros
                tipopoliza_list.extend([8])  # agregar las fianzas colectivas
            if 11 in tipopoliza_list: #si colectiva en los filtros
                tipopoliza_list.extend([12])  # agregar las pólizas de colectividad
            if not 0 in tipopoliza_list:  
                polizas = polizas.filter(document_type__in = tipopoliza_list)
                fianzas = fianzas.filter(document_type__in = tipopoliza_list)
        # -------------
        p = []
        p_dt2 = []
        for poliz in polizas:
            if poliz.document_type == 2:
                p_dt2.append(poliz)
            else:
                p.append(poliz.id)

        try:
            for pol in p:
                if pol.document_type == 2:
                    p_dt2.append(poliz)
        except Exception as ewr:
            pass

        polizas =p
        try:
            dataToFilter = getDataForPerfilRestricted(request, request.GET.get('org'))
        except Exception as er:
            dataToFilter = {}
        if dataToFilter:
            # Contratantes***
            polizasCl = Polizas.objects.filter(pk__in = list(polizas)).filter(document_type__in = [12,6], org_name = request.GET.get('org'))
            polizasToF = Polizas.objects.filter(pk__in = list(polizas)).filter(document_type__in = [1,3,11,7,8], org_name = request.GET.get('org'))
            if dataToFilter['ccpr']:
                polizasToF = polizasToF.filter(contractor__in = list(dataToFilter['ccpr']))
                fianzas = fianzas.filter(contractor__in = list(dataToFilter['ccpr']))
            if dataToFilter['cgpr']:
                polizasToF = polizasToF.filter(contractor__group__in = list(dataToFilter['cgpr']))
                fianzas = fianzas.filter(contractor__group__in = list(dataToFilter['cgpr']))
            if dataToFilter['ccepr']:
                polizasToF = polizasToF.filter(contractor__cellule__in = list(dataToFilter['ccepr']))
                fianzas = fianzas.filter(contractor__cellule__in = list(dataToFilter['ccepr']))
            if dataToFilter['crpr']:
                polizasToF = polizasToF.filter(contractor__vendor__in = list(dataToFilter['crpr']))
                fianzas = fianzas.filter(contractor__vendor__in = list(dataToFilter['crpr']))
            if dataToFilter['cspr']:
                polizasToF = polizasToF.filter(contractor__sucursal__in = list(dataToFilter['cspr']))
                fianzas = fianzas.filter(contractor__sucursal__in = list(dataToFilter['cspr']))
            # Pólizas ****
            if dataToFilter['pppr']:
                polizasToF = polizasToF.filter(pk__in = list(dataToFilter['pppr']))
                fianzas = fianzas.filter(pk__in = list(dataToFilter['pppr']))
            if dataToFilter['pgpr']:
                polizasToF = polizasToF.filter(contractor__group__in = list(dataToFilter['pgpr']))
                fianzas = fianzas.filter(contractor__group__in = list(dataToFilter['pgpr']))
            if dataToFilter['pcepr']:
                polizasToF = polizasToF.filter(celula__in = list(dataToFilter['pcepr']))
                fianzas = fianzas.filter(celula__in = list(dataToFilter['pcepr']))
            if dataToFilter['prpr']:
                polizasToF = polizasToF.filter(ref_policy__referenciador__in = list(dataToFilter['prpr']))
                fianzas = fianzas.filter(ref_policy__referenciador__in = list(dataToFilter['prpr']))
            if dataToFilter['pspr']:
                polizasToF = polizasToF.filter(sucursal__in = list(dataToFilter['pspr']))
                fianzas = fianzas.filter(sucursal__in = list(dataToFilter['pspr']))
            if dataToFilter['papr']:
                polizasToF = polizasToF.filter(groupinglevel__in = list(dataToFilter['papr']))
                fianzas = fianzas.filter(groupinglevel__in = list(dataToFilter['papr']))
            if dataToFilter['pcapr']:
                polizasToF = polizasToF.filter(clave__in = list(dataToFilter['pcapr']))
                fianzas = fianzas.filter(clave__in = list(dataToFilter['pcapr']))
            if dataToFilter['psrpr']:
                polizasToF = polizasToF.filter(subramo__subramo_code__in = list(dataToFilter['psrpr']))
                fianzas = fianzas.filter(subramo__subramo_code__in = list(dataToFilter['psrpr']))
            if dataToFilter['paspr']:
                polizasToF = polizasToF.filter(aseguradora__in = list(dataToFilter['paspr']))
                fianzas = fianzas.filter(aseguradora__in = list(dataToFilter['paspr']))
            if dataToFilter['pstpr']:
                polizasToF = polizasToF.filter(status__in = list(dataToFilter['pstpr']))
                fianzas = fianzas.filter(status__in = list(dataToFilter['pstpr']))    
            
            polizasCT = polizasCl.filter(document_type = 12, parent__in = list(polizasToF))
            polizasGT = polizasCl.filter(document_type = 6, parent__parent__parent__in = list(polizasToF))
            polizasFin = list(polizasToF.values_list('pk', flat = True)) + list(polizasCT.values_list('pk', flat = True)) + list(polizasGT.values_list('pk', flat = True))
            polizas = polizasFin
            fianzas = list(fianzas.values_list('pk', flat = True))
        try:
            polizas = list(polizas.values_list('pk', flat = True))
        except Exception as df:
            polizas = polizas
        order = int(request.GET.get('order'))
        asc = int(request.GET.get('asc'))
        try:
            serie = int(request.GET.get('serie'))
        except Exception as res:
            serie = 0
        tipo = request.GET.get('tipo')
        request = request
        
        if order == 1:
            if asc == 1:
                recibos = Recibos.objects.filter(poliza__in = polizas).filter(org_name = request.GET.get('org')).order_by('recibo_numero').filter(receipt_type__in = [1,2,3])
            else:
                recibos = Recibos.objects.filter(poliza__in = polizas).filter(org_name = request.GET.get('org')).order_by('-recibo_numero').filter(receipt_type__in = [1,2,3])
    
        elif order == 2:
            if asc == 1:
                recibos = Recibos.objects.filter(poliza__in = polizas).filter(org_name = request.GET.get('org')).order_by('poliza__contractor__full_name').filter(receipt_type__in = [1,2,3])
            else:
                recibos = Recibos.objects.filter(poliza__in = polizas).filter(org_name = request.GET.get('org')).order_by('-poliza__contractor__full_name').filter(receipt_type__in = [1,2,3])
        
        elif order == 3:
            if asc == 1:
                recibos = Recibos.objects.filter(poliza__in = polizas).filter(org_name = request.GET.get('org')).order_by('poliza__poliza_number').filter(receipt_type__in = [1,2,3])
            else:
                recibos = Recibos.objects.filter(poliza__in = polizas).filter(org_name = request.GET.get('org')).order_by('-poliza__poliza_number').filter(receipt_type__in = [1,2,3])
        
        elif order == 4:
            if asc == 1:
                recibos = Recibos.objects.filter(poliza__in = polizas).filter(org_name = request.GET.get('org')).order_by('fecha_inicio').filter(receipt_type__in = [1,2,3])
            else:
                recibos = Recibos.objects.filter(poliza__in = polizas).filter(org_name = request.GET.get('org')).order_by('-fecha_inicio').filter(receipt_type__in = [1,2,3])
        
        elif order == 5:
            if asc == 1:
                recibos = Recibos.objects.filter(poliza__in = polizas).filter(org_name = request.GET.get('org')).order_by('poliza__subramo__subramo_name').filter(receipt_type__in = [1,2,3])
            else:
                recibos = Recibos.objects.filter(poliza__in = polizas).filter(org_name = request.GET.get('org')).order_by('-poliza__subramo__subramo_name').filter(receipt_type__in = [1,2,3])


        elif order == 6:
            if asc == 1:
                recibos = Recibos.objects.filter(poliza__in = polizas).filter(org_name = request.GET.get('org')).order_by('poliza__aseguradora__compania').filter(receipt_type__in = [1,2,3])
            else:
                recibos = Recibos.objects.filter(poliza__in = polizas).filter(org_name = request.GET.get('org')).order_by('-poliza__aseguradora__compania').filter(receipt_type__in = [1,2,3])
        
        elif order == 7:
            if asc == 1:
                recibos = Recibos.objects.filter(poliza__in = polizas).filter(org_name = request.GET.get('org')).order_by('vencimiento').filter(receipt_type__in = [1,2,3])
            else:
                recibos = Recibos.objects.filter(poliza__in = polizas).filter(org_name = request.GET.get('org')).order_by('-vencimiento').filter(receipt_type__in = [1,2,3])

        elif order == 8:
            if asc == 1:
                recibos = Recibos.objects.filter(poliza__in = polizas).filter(org_name = request.GET.get('org')).order_by('prima_neta').filter(receipt_type__in = [1,2,3])
            else:
                recibos = Recibos.objects.filter(poliza__in = polizas).filter(org_name = request.GET.get('org')).order_by('-prima_neta').filter(receipt_type__in = [1,2,3])

        else:
            recibos = Recibos.objects.filter(poliza__in = polizas).filter(org_name = request.GET.get('org')).filter(receipt_type__in = [1,2,3]).order_by('id')

        if serie != 0:
            recibos = Recibos.objects.filter(recibo_numero = serie).filter(org_name = request.GET.get('org')).filter(receipt_type__in = [1,2,3])
        
        try:
            try:
                config_chart = Graphics.objects.filter(org_name=request.GET.get('org'), type_graphic = 2).order_by('-created_at')[0]
            except:
                config_chart = Graphics.objects.get(org_name=request.GET.get('org'), type_graphic = 2)
            days_green = config_chart.green
            days_yellow = config_chart.yellow
            days_orange = config_chart.orange
            days_red = config_chart.red
            filter_graphs =  config_chart.option_filter
        except:
            config_chart = None
            days_green = 45
            days_yellow = 30
            days_orange = 15
            days_red = 0
            filter_graphs = 2

        today = datetime.today()
        dt = datetime.today()
        try:
            newdatetime = dt.replace(hour=23, minute=59,second=59)
        except Exception as e:
            newdatetime = dt
        orange_days = timedelta(days = days_orange)
        yellow_days = timedelta(days = days_yellow)
        green_days = timedelta(days = days_green)

        diasO = today + orange_days
        diasY = today + yellow_days
        diasG = today + green_days

        if filter_graphs == 1:
            query_g = (Q(fecha_inicio__lt = diasG) & Q(fecha_inicio__gte = diasY))
            query_y = (Q(fecha_inicio__lt = diasY) & Q(fecha_inicio__gte = diasO))
            query_o = (Q(fecha_inicio__lt = diasO) & Q(fecha_inicio__gte = today))
            # query_r = (Q(fecha_inicio__lt = today))*
            if newdatetime:
                query_r = (Q(fecha_inicio__lte = newdatetime))
            else:
                query_r = (Q(fecha_inicio__lte = today))
            query = (Q(fecha_inicio__lte = diasG))
        else: 
            query_g = (Q(vencimiento__lt = diasG) & Q(vencimiento__gte = diasY))
            query_y= (Q(vencimiento__lt = diasY) & Q(vencimiento__gte = diasO))
            query_o = (Q(vencimiento__lt = diasO) & Q(vencimiento__gte = today))
            # query_r = (Q(vencimiento__lt = today))*
            if newdatetime:
                query_r = (Q(vencimiento__lte = newdatetime))
            else:
                query_r = (Q(vencimiento__lte = today))
            query = (Q(vencimiento__lte = diasG))
        
        polizas = list(Polizas.objects.filter(org_name = request.GET.get('org')).exclude(document_type = 2).exclude(status__in = [2,0,7]).exclude(document_type = 2).values_list('pk', flat=True))  
        #polizas = Polizas.objects.exclude(document_type = 2).exclude(status__in = [2,0,7]).filter(org_name = request.GET.get('org')).values_list('pk', flat=True)   
        fianzas = list(Polizas.objects.filter(org_name = request.GET.get('org'), document_type = 7).filter(status__in = [14,15]).values_list('pk', flat=True))
        pendingGreen =  recibos.filter(poliza__in = polizas).filter(query_g).filter(org_name = request.GET.get('org'), isActive = True, status__in = [3,4,9]).exclude(isCopy = True).filter(receipt_type__in=[1,2,3])
        pendingYellow = recibos.filter(poliza__in = polizas).filter(query_y).filter(org_name = request.GET.get('org'), isActive = True, status__in = [3,4,9]).exclude(isCopy = True).filter(receipt_type__in=[1,2,3])
        pendingOrange = recibos.filter(poliza__in = polizas).filter(query_o).filter(org_name = request.GET.get('org'), isActive = True, status__in = [3,4,9]).exclude(isCopy = True).filter(receipt_type__in=[1,2,3])
        pendingRed =    recibos.filter(poliza__in = polizas).filter(query_r).filter(org_name = request.GET.get('org'), isActive = True, status__in = [3,4,9]).exclude(isCopy = True).filter(receipt_type__in=[1,2,3])
    
        # ------
        # *****************
        try:
            tipo = int(tipo)
            if tipo == 1:
                recibos_dash = pendingGreen
                subType = "En tiempo"      
            elif tipo == 2:
                recibos_dash = pendingYellow
                subType = "Se acerca su vencimiento"
            elif tipo == 3:
                recibos_dash = pendingOrange
                subType = "Gestionar cobranza urgente" 
            elif tipo == 4:
                recibos_dash = pendingRed
                subType = "Recibos vencidos"     
            else:
                recibos_dash_ = recibos.filter(org_name=request.GET.get('org'),  isActive = True, status__in = [3,4,9]).filter(query).exclude(status__in = [1,2,5,6,7,0]).exclude(isCopy = True)  
                recibos_dash = list((pendingGreen).values_list('pk', flat=True)) + list((pendingYellow).values_list('pk', flat=True)) +list((pendingOrange).values_list('pk', flat=True)) +list((pendingRed).values_list('pk', flat=True))
                subType = "Todos"  
        except Exception as e:
            if tipo == 'green':
                recibos_dash = pendingGreen
                subType = "En tiempo"      
            elif tipo == 'yellow':
                recibos_dash = pendingYellow
                subType = "Se acerca su vencimiento"
            elif tipo == 'orange':
                recibos_dash = pendingOrange
                subType = "Gestionar cobranza urgente" 
            elif tipo == 'red':
                recibos_dash = pendingRed
                subType = "Recibos vencidos"     
            else:
                recibos_dash_ = recibos.filter(org_name=request.GET.get('org'),  isActive = True, status__in = [3,4,9]).filter(query).exclude(status__in = [1,2,5,6,7,0]).exclude(isCopy = True)   
                recibos_dash = list((pendingGreen).values_list('pk', flat=True)) + list((pendingYellow).values_list('pk', flat=True)) +list((pendingOrange).values_list('pk', flat=True)) +list((pendingRed).values_list('pk', flat=True))
                subType = "Todos"  
    if valueCom:
        columns = ['Tipo','No.Póliza/Fianza','Contratante','Inicio Póliza/Fianza','Fin Póliza/Fianza','No.Endoso','No.Recibo','Fecha Inicio',
                'Fecha Fin','Vencimiento','Estatus','Prima Neta','RPF','Derecho','IVA','Prima Total','Comisión','Dimiciliado',
                'Email','Teléfono','Aseguradora','Subramo','Forma de Pago','Estatus Póliza/Fianza','Clave','Asegurado','Referenciador','Moneda',
                'Grupo','Responsable','Comentario Final','Identificador Póliza/Fianza','Sucursal','Póliza del Recibo con Endoso(s) en Trámite','Pérdida Total']
    else:
        columns = ['Tipo','No.Póliza/Fianza','Contratante','Inicio Póliza/Fianza','Fin Póliza/Fianza','No.Endoso','No.Recibo','Fecha Inicio',
                'Fecha Fin','Vencimiento','Estatus','Prima Neta','RPF','Derecho','IVA','Prima Total','Dimiciliado',
                'Email','Teléfono','Aseguradora','Subramo','Forma de Pago','Estatus Póliza/Fianza','Clave','Asegurado','Referenciador','Moneda',
                'Grupo','Responsable','Comentario Final','Identificador Póliza/Fianza','Sucursal','Póliza del Recibo con Endoso(s) en Trámite','Pérdida Total']
    if verReferenciadores==False:
        if 'Referenciador' in columns:
            columns.remove('Referenciador')
    try:

        recibos_dash = recibos_dash.order_by('id')
    except Exception as esaa:
        recs = Recibos.objects.filter(pk__in = list(recibos_dash), receipt_type__in = [1,2,3])
        recibos_dash = recs.order_by('id')
    # recibos_dash = recibos_dash.order_by('id')
    asegurado_e = []
    antiguedad_e = []
    referenciador_e = []
    responsable_e = []
    collection_e = []
    userpay_e = []
    creadopor_e = []
    clave_e = []
    contract_e = []
    contractemail_e = []
    contractphone_e = []
    contractgrupo_e = []
    subramo_e = []
    grupoo_e = []
    comentario = []

    grupo1 = []
    grupo2 = []
    nivelAg = []
    grupo3 = []
    grupo4 = []
    clasifica = []
    businessLine = []
    celulaC = []
    info_org = getInfoOrg(request)

    campo_celula, campo_agrupacion, campo_lineanegocio, moduleName = getOrgInfo(request)
    if len(info_org['logo']) != 0:
        archivo_imagen = 'https://miurabox-public.s3.amazonaws.com/cas/' + info_org['logo']
        # archivo_imagen = get_presigned_url("cas/{url}".format(url=info_org['logo']),28800) 
    else:
        archivo_imagen = 'saam.jpg'
    poliza_number = []
    pnumb = ''
    aseguradora = []
    asegg = ''
    inicio = []
    inc = ''
    fin = []
    fn = ''
    clave = []
    cve = ''
    receipttype = []
    status_ = []
    currency = []
    endosotramite = []
    try:
        tipo_reporte = 'Reporte Recibos Dashboard : '+str(subType)
    except Exception as dfs:
        tipo_reporte = 'Reporte Recibos Dashboard'
    
    subramos = UserInfo.objects.filter(user = request.user)
    if subramos.exists() and subramos.first() and subramos.first().subramos_dashboard :
        subramos = subramos.first().subramos_dashboard
        # recibos_dash = recibos_dash.filter(poliza__subramo__subramo_code__in = subramos)
        recibos_dash = recibos_dash.filter(Q(poliza__subramo__subramo_code__in = subramos) | Q(poliza__parent__subramo__subramo_code__in = subramos))
    else:
        subramos = list(SubRamos.objects.filter(org_name = request.GET.get('org')).distinct('subramo_code').values_list('subramo_code',flat=True))

    siniestro_perdida = []
    addsiniestrop = True
    ids=[]
    for r in recibos_dash:
        ids.append(r.id)
        fc = 1
        sts = 1
        value_e =''
        sramo_e =''
        receipt1 = ''
        pnumb = ''
        asegg = ''
        inc = ''
        fn = ''
        cve_e = ''
        cv = ''
        try:
            poliza_aux = Endorsement.objects.filter(policy = r.poliza, status__in = [1,5], org_name = r.poliza.org_name).exists()    
            if poliza_aux:
                endosotramite.append('Si')
            else:
                endosotramite.append('No')
        except:
            endosotramite.append('No')        
        if r.poliza and r.poliza.subramo and r.poliza.subramo.subramo_code ==9:
            if addsiniestrop:            
                try:
                    siniestrop = Autos.objects.filter(tipo_siniestro =10,siniestro__poliza = r.poliza,org_name = r.org_name).order_by('-created_at')
                    if siniestrop:
                        estsp = checkStatusSin(siniestrop[0].siniestro.status)
                        vl = 'Si-' +str(siniestrop[0].siniestro.numero_siniestro if siniestrop[0].siniestro and siniestrop[0].siniestro.numero_siniestro else '')+'-'+str(estsp)
                        siniestro_perdida.append(vl)
                    else:
                        siniestro_perdida.append('')
                except Exception as ds:
                    print('error siniestro pérdida total--',ds)
                    siniestro_perdida.append('')
            else:
                siniestro_perdida.append('')
        else:
            siniestro_perdida.append('')
        try:
            comment = Comments.objects.filter(org_name=request.GET.get('org'), model = 4, id_model = r.id).order_by('-created_at')
            comment = comment[0].content
            comment = ((((((comment).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
        except Exception as errorr:
            comment = 'Sin comentario'
        antig_e = get_antiguedad(r.fecha_inicio)
        if r.owner:
            val_owner_e = r.owner.first_name + ' '+ str(r.owner.last_name)
        else:
            val_owner_e = ''
        if r.poliza:
          receipt1 = 'Póliza'
          if r.poliza.document_type == 6:
              sts = r.poliza.parent.parent.parent.status
              fc = r.poliza.parent.parent.parent.f_currency
              if r.poliza.parent.parent.parent.business_line:
                  if int(r.poliza.parent.parent.parent.business_line) ==1:
                      businessLine_ = 'Comercial'
                  elif int(r.poliza.parent.parent.parent.business_line) ==2:
                      businessLine_ = 'Personal'
                  elif int(r.poliza.parent.parent.parent.business_line) ==0:
                      businessLine_ = 'Otro'
                  else:
                      businessLine_ = ''
              else:
                try:
                      if int(r.poliza.parent.parent.parent.business_line) ==0:
                          businessLine_ = 'Otro'
                      else:
                          businessLine_ = ''
                except:
                    businessLine_ = ''
              try:
                  cve = r.poliza.parent.parent.parent.clave.name + ' '+str(r.poliza.parent.parent.parent.clave.clave)
                  cve = ((((((cve).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
              except Exception as ds:
                  cve = ''
              sramo_e = r.poliza.parent.parent.parent.subramo.subramo_name
              pnumb = r.poliza.parent.parent.parent.poliza_number
              try:
                  inc = r.poliza.start_of_validity.strftime("%d/%m/%Y")
                  fn = r.poliza.end_of_validity.strftime("%d/%m/%Y")
              except Exception as df:
                  inc = ''
                  fn = ''
              if r.poliza.parent.parent.parent.contractor:
                  contratante_e = ((((((r.poliza.parent.parent.parent.contractor.full_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                  contratanteE_e = r.poliza.parent.parent.parent.contractor.email
                  contratanteP_e = r.poliza.parent.parent.parent.contractor.phone_number
                  contratanteG_e = ((((((r.poliza.parent.parent.parent.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')     
                  # contratanteG_e = r.poliza.parent.parent.parent.contractor.group.group_name

                  try:
                      if r.poliza.parent.parent.parent.contractor.group.type_group == 1:
                          contratanteG_e = ((((((r.poliza.parent.parent.parent.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                          grupo1_ = ''
                          grupo2_ = ''
                      elif r.poliza.parent.parent.parent.contractor.group.type_group == 2:
                          grupotype1 = Group.objects.get(pk = r.poliza.parent.parent.parent.contractor.group.parent.id)
                          contratanteG_e = ((((((grupotype1.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                          grupo1_ = ((((((r.poliza.parent.parent.parent.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                          grupo2_ = ''
                      elif r.poliza.parent.parent.parent.contractor.group.type_group == 3:
                          grupotype1 = Group.objects.get(pk = r.poliza.parent.parent.parent.contractor.group.parent.parent.id)
                          contratanteG_e = ((((((grupotype1.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                          subgrupotype2 = Group.objects.get(pk = r.poliza.parent.parent.parent.contractor.group.parent.id)
                          grupo1_ = ((((((subgrupotype2.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                          grupo2_ = ((((((r.poliza.parent.parent.parent.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                  except Exception as e:
                      contratanteG_e = ''
                      grupo1_ = ''
                      grupo2_ = ''
                  try:
                      if r.poliza.parent.parent.parent.groupinglevel:
                          if r.poliza.parent.parent.parent.groupinglevel.type_grouping == 1:
                              nivelAg_ = ((((((r.poliza.parent.parent.parent.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                              grupo3_ = ''
                              grupo4_ = ''
                          elif r.poliza.parent.parent.parent.groupinglevel.type_grouping == 2:
                              grupotype1 = GroupingLevel.objects.get(pk = r.poliza.parent.parent.parent.groupinglevel.parent.id)
                              nivelAg_ = ((((((grupotype1.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                              grupo3_ = ((((((r.poliza.parent.parent.parent.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                              grupo4_ = ''
                          elif r.poliza.parent.parent.parent.groupinglevel.type_grouping == 3:
                              grupotype1 = GroupingLevel.objects.get(pk = r.poliza.parent.parent.parent.groupinglevel.parent.parent.id)
                              nivelAg_ = ((((((grupotype1.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                              subgrupotype2 = GroupingLevel.objects.get(pk = r.poliza.parent.parent.parent.groupinglevel.parent.id)
                              grupo3_ = ((((((subgrupotype2.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                              grupo4_ = ((((((r.poliza.parent.parent.parent.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                      else:
                          nivelAg_ = ''
                          grupo3_ = ''
                          grupo4_ = ''  
                  except Exception as e:
                      nivelAg_ = ''
                      grupo3_ = ''
                      grupo4_ = '' 
       
                  if r.poliza.parent.parent.parent.contractor.classification:
                      clasifica_ = r.poliza.parent.parent.parent.contractor.classification.classification_name  
                  else:
                      clasifica_='-----'
                  if r.poliza.parent.parent.parent.celula:
                      cel = r.poliza.parent.parent.parent.celula.celula_name  
                  else:
                      cel='-----'
              else:
                  contratante_e = ''
                  contratanteE_e = ''
                  contratanteP_e = ''                    
                  contratanteG_e = ''
                  grupo1_ = ''
                  grupo2_ = ''
                  nivelAg_ = ''
                  grupo3_ = ''
                  grupo4_ = ''  
                  clasifica_='-----'
                  cel='-----'
          elif r.poliza.document_type == 4:
              receipt1 = 'Subgrupo'
              if r.poliza.parent.business_line:
                  if int(r.poliza.parent.business_line) ==1:
                      businessLine_ = 'Comercial'
                  elif int(r.poliza.parent.business_line) ==2:
                      businessLine_ = 'Personal'
                  elif int(r.poliza.parent.business_line) ==0:
                      businessLine_ = 'Otro'
                  else:
                      businessLine_ = ''
              else:
                try:
                    if int(r.poliza.parent.business_line) ==0:
                        businessLine_ = 'Otro'
                    else:
                        businessLine_ = ''
                except:
                    businessLine_ = ''
              sts = r.poliza.parent.status                    
              fc = r.poliza.parent.f_currency                    
              sramo_e = r.poliza.parent.subramo.subramo_name
              if r.poliza.parent.clave:
                  try:
                      cve = r.poliza.parent.clave.name + ' '+ str(r.poliza.parent.clave.clave)
                      cve = ((((((cve).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                  except Exception as dsa:
                      cve =''
              else:
                  cve = ''
              pnumb = r.poliza.parent.poliza_number
              asegg = r.poliza.parent.aseguradora.alias
              if r.poliza.parent.contractor:
                  contratante_e =((((((r.poliza.parent.contractor.full_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                  contratanteE_e = r.poliza.parent.contractor.email
                  contratanteP_e = r.poliza.parent.contractor.phone_number
                  contratanteG_e = ((((((r.poliza.parent.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')     
                  # contratanteG_e = r.poliza.parent.contractor.group.group_name
                  try:
                      if r.poliza.parent.contractor.group.type_group == 1:
                          contratanteG_e = ((((((r.poliza.parent.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                          grupo1_ = ''
                          grupo2_ = ''
                      elif r.poliza.parent.contractor.group.type_group == 2:
                          grupotype1 = Group.objects.get(pk = r.poliza.parent.contractor.group.parent.id)
                          contratanteG_e = ((((((grupotype1.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                          grupo1_ = ((((((r.poliza.parent.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                          grupo2_ = ''
                      elif r.poliza.parent.contractor.group.type_group == 3:
                          grupotype1 = Group.objects.get(pk = r.poliza.parent.contractor.group.parent.parent.id)
                          contratanteG_e = ((((((grupotype1.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                          subgrupotype2 = Group.objects.get(pk = r.poliza.parent.contractor.group.parent.id)
                          grupo1_ = ((((((subgrupotype2.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                          grupo2_ = ((((((r.poliza.parent.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                  except Exception as e:
                      contratanteG_e = ''
                      grupo1_ = ''
                      grupo2_ = ''
                  try:
                      if r.poliza.parent.groupinglevel:
                          if r.poliza.parent.groupinglevel.type_grouping == 1:
                              nivelAg_ = ((((((r.poliza.parent.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                              grupo3_ = ''
                              grupo4_ = ''
                          elif r.poliza.parent.groupinglevel.type_grouping == 2:
                              grupotype1 = GroupingLevel.objects.get(pk = r.poliza.parent.groupinglevel.parent.id)
                              nivelAg_ = ((((((grupotype1.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                              grupo3_ = ((((((r.poliza.parent.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                              grupo4_ = ''
                          elif r.poliza.parent.groupinglevel.type_grouping == 3:
                              grupotype1 = GroupingLevel.objects.get(pk = r.poliza.parent.groupinglevel.parent.parent.id)
                              nivelAg_ = ((((((grupotype1.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                              subgrupotype2 = GroupingLevel.objects.get(pk = r.poliza.parent.groupinglevel.parent.id)
                              grupo3_ = ((((((subgrupotype2.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                              grupo4_ = ((((((r.poliza.parent.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                      else:
                          nivelAg_ = ''
                          grupo3_ = ''
                          grupo4_ = ''  
                  except Exception as e:
                      nivelAg_ = ''
                      grupo3_ = ''
                      grupo4_ = '' 
       
                  if r.poliza.parent.contractor.classification:
                      clasifica_ = r.poliza.parent.contractor.classification.classification_name  
                  else:
                      clasifica_='-----'
                  if r.poliza.parent.celula:
                      cel = r.poliza.parent.celula.celula_name  
                  else:
                      cel='-----'
              else:
                  contratante_e = ''
                  contratanteE_e = ''
                  contratanteP_e = ''                    
                  contratanteG_e = ''
                  grupo1_ = ''
                  grupo2_ = ''
                  nivelAg_ = ''
                  grupo3_ = ''
                  grupo4_ = ''  
                  clasifica_='-----'
                  cel='-----'
              try:
                  inc = r.poliza.parent.start_of_validity.strftime("%d/%m/%Y")
                  fn = r.poliza.parent.end_of_validity.strftime("%d/%m/%Y")
              except Exception as df:
                  inc = ''
                  fn = ''
          elif r.poliza.document_type == 3:                
              if r.poliza.business_line:
                  if int(r.poliza.business_line) ==1:
                      businessLine_ = 'Comercial'
                  elif int(r.poliza.business_line) ==2:
                      businessLine_ = 'Personal'
                  elif int(r.poliza.business_line) ==0:
                      businessLine_ = 'Otro'
                  else:
                      businessLine_ = ''
              else:
                  if r.poliza.business_line in [0, '0', None]:
                    businessLine_ = 'Otro'
                  else:
                    businessLine_ = ''
              try:
                  sramo_e = r.poliza.subramo.subramo_name
              except Exception as ere:
                  sramo_e = ''
              sts = r.poliza.status  
              receipt1 = 'Colectividad'
              if r.poliza.clave:
                  try:
                      cve = r.poliza.clave.name + ' '+ str(r.poliza.clave.clave)
                      cve = ((((((cve).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                  except Exception as dsa:
                      cve =''
              else:
                  cve = ''
              pnumb = r.poliza.poliza_number
              asegg = r.poliza.aseguradora.alias
              if r.poliza.contractor:
                  contratante_e =((((((r.poliza.contractor.full_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                  contratanteE_e = r.poliza.contractor.email
                  contratanteP_e = r.poliza.contractor.phone_number
                  try:
                      contratanteG_e = ((((((r.poliza.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')     
                  except Exception as df:
                      contratanteG_e = ''
                  try:
                      if r.poliza.contractor.group.type_group == 1:
                          contratanteG_e = ((((((r.poliza.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                          grupo1_ = ''
                          grupo2_ = ''
                      elif r.poliza.contractor.group.type_group == 2:
                          grupotype1 = Group.objects.get(pk = r.poliza.contractor.group.parent.id)
                          contratanteG_e = ((((((grupotype1.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                          grupo1_ = ((((((r.poliza.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                          grupo2_ = ''
                      elif r.poliza.contractor.group.type_group == 3:
                          grupotype1 = Group.objects.get(pk = r.poliza.contractor.group.parent.parent.id)
                          contratanteG_e = ((((((grupotype1.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                          subgrupotype2 = Group.objects.get(pk = r.poliza.contractor.group.parent.id)
                          grupo1_ = ((((((subgrupotype2.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                          grupo2_ = ((((((r.poliza.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                  except Exception as e:
                      contratanteG_e = ''
                      grupo1_ = ''
                      grupo2_ = ''
                  try:
                      if r.poliza.groupinglevel:
                          if r.poliza.groupinglevel.type_grouping == 1:
                              nivelAg_ = ((((((r.poliza.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                              grupo3_ = ''
                              grupo4_ = ''
                          elif r.poliza.groupinglevel.type_grouping == 2:
                              grupotype1 = GroupingLevel.objects.get(pk = r.poliza.groupinglevel.parent.id)
                              nivelAg_ = ((((((grupotype1.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                              grupo3_ = ((((((r.poliza.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                              grupo4_ = ''
                          elif r.poliza.groupinglevel.type_grouping == 3:
                              grupotype1 = GroupingLevel.objects.get(pk = r.poliza.groupinglevel.parent.parent.id)
                              nivelAg_ = ((((((grupotype1.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                              subgrupotype2 = GroupingLevel.objects.get(pk = r.poliza.groupinglevel.parent.id)
                              grupo3_ = ((((((subgrupotype2.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                              grupo4_ = ((((((r.poliza.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                      else:
                          nivelAg_ = ''
                          grupo3_ = ''
                          grupo4_ = ''  
                  except Exception as e:
                      nivelAg_ = ''
                      grupo3_ = ''
                      grupo4_ = ''  
       
                  if r.poliza.contractor.classification:
                      clasifica_ = r.poliza.contractor.classification.classification_name  
                  else:
                      clasifica_='-----'               
                  if r.poliza.celula:
                      cel = r.poliza.celula.celula_name  
                  else:
                      cel='-----'
                  # contratanteG_e = r.poliza.natural.group.group_name
              else:
                  contratante_e = ''
                  contratanteE_e = ''
                  contratanteP_e = ''                    
                  contratanteG_e = ''
                  grupo1_ = ''
                  grupo2_ = ''
                  nivelAg_ = ''
                  grupo3_ = ''
                  grupo4_ = ''  
                  clasifica_='-----'
                  cel='-----'
              try:
                  inc = r.poliza.start_of_validity.strftime("%d/%m/%Y")
                  fn = r.poliza.end_of_validity.strftime("%d/%m/%Y")
              except Exception as df:
                  inc = ''
                  fn = ''
          
          else:
              if r.poliza.document_type ==7:
                  receipt1 = 'Fianza'
              elif r.poliza.document_type == 8:
                  receipt1 = 'Fianza colectiva'
              elif r.poliza.document_type == 11:
                  receipt1 = 'Colectividad'
              elif r.poliza.document_type == 12:
                  receipt1 = 'Póliza de Colectividad'
              if r.poliza.document_type == 3:
                  receipt1 = 'Póliza de Grupo'
              else: 
                  receipt1 = 'Póliza'
              sts = r.poliza.status  
              fc = r.poliza.f_currency 
              if r.poliza.business_line:
                  if int(r.poliza.business_line) ==1:
                      businessLine_ = 'Comercial'
                  elif int(r.poliza.business_line) ==2:
                      businessLine_ = 'Personal'
                  elif int(r.poliza.business_line) ==0:
                      businessLine_ = 'Otro'
                  else:
                      businessLine_ = ''
              else:
                  if r.poliza.business_line in [0, '0', None]:
                    businessLine_ = 'Otro'
                  else:
                    businessLine_ = '' 
              try:
                  cve = r.poliza.clave.name + ' '+str(r.poliza.clave.clave)
                  cve = ((((((cve).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
              except Exception as ds:
                  cve = ''
              if r.poliza.subramo:
                  sramo_e = r.poliza.subramo.subramo_name
                  pnumb = r.poliza.poliza_number
                  try:
                      asegg = r.poliza.aseguradora.alias
                  except:
                      asegg=''
                  try:
                      inc = r.poliza.start_of_validity.strftime("%d/%m/%Y")
                      fn = r.poliza.end_of_validity.strftime("%d/%m/%Y")
                  except Exception as df:
                      inc = ''
                      fn = ''

              else:
                  try:
                      if r.poliza.document_type == 4:
                          sts = r.poliza.parent.status  
                          sramo_e = r.poliza.parent.subramo.subramo_name
                          pnumb = r.poliza.parent.poliza_number
                          asegg = r.poliza.parent.aseguradora.alias
                          if r.poliza.parent.clave:
                              try:
                                  cve = r.poliza.parent.clave.name + ' '+ str(r.poliza.parent.clave.clave)
                                  cve = ((((((cve).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                              except Exception as sada:
                                  cve = ''
                          else:
                              cve = ''
                  except Exception as rr:
                      sramo_e = ''
                      pnumb = ''
                      asegg = ''
              if r.poliza.contractor:
                  contratante_e = ((((((r.poliza.contractor.full_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                  contratanteE_e = r.poliza.contractor.email
                  contratanteP_e = r.poliza.contractor.phone_number
                  try:
                      contratanteG_e = ((((((r.poliza.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')     
                      # contratanteG_e = r.poliza.contractor.group.group_name
                  except Exception as d:
                      contratanteG_e = ''
                  try:
                      if r.poliza.contractor.group.type_group == 1:
                          contratanteG_e = ((((((r.poliza.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                          grupo1_ = ''
                          grupo2_ = ''
                      elif r.poliza.contractor.group.type_group == 2:
                          grupotype1 = Group.objects.get(pk = r.poliza.contractor.group.parent.id)
                          contratanteG_e = ((((((grupotype1.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                          grupo1_ = ((((((r.poliza.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                          grupo2_ = ''
                      elif r.poliza.contractor.group.type_group == 3:
                          grupotype1 = Group.objects.get(pk = r.poliza.contractor.group.parent.parent.id)
                          contratanteG_e = ((((((grupotype1.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                          subgrupotype2 = Group.objects.get(pk = r.poliza.contractor.group.parent.id)
                          grupo1_ = ((((((subgrupotype2.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                          grupo2_ = ((((((r.poliza.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                  except Exception as e:
                      contratanteG_e = ''
                      grupo1_ = ''
                      grupo2_ = ''
                  try:
                      if r.poliza.groupinglevel:
                          if r.poliza.groupinglevel.type_grouping == 1:
                              nivelAg_ = ((((((r.poliza.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                              grupo3_ = ''
                              grupo4_ = ''
                          elif r.poliza.groupinglevel.type_grouping == 2:
                              grupotype1 = GroupingLevel.objects.get(pk = r.poliza.groupinglevel.parent.id)
                              nivelAg_ = ((((((grupotype1.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                              grupo3_ = ((((((r.poliza.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                              grupo4_ = ''
                          elif r.poliza.groupinglevel.type_grouping == 3:
                              grupotype1 = GroupingLevel.objects.get(pk = r.poliza.groupinglevel.parent.parent.id)
                              nivelAg_ = ((((((grupotype1.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                              subgrupotype2 = GroupingLevel.objects.get(pk = r.poliza.groupinglevel.parent.id)
                              grupo3_ = ((((((subgrupotype2.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                              grupo4_ = ((((((r.poliza.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                      else:
                          nivelAg_ = ''
                          grupo3_ = ''
                          grupo4_ = ''  
                  except Exception as e:
                      nivelAg_ = ''
                      grupo3_ = ''
                      grupo4_ = '' 
       
                  if r.poliza.contractor.classification:
                      clasifica_ = r.poliza.contractor.classification.classification_name  
                  else:
                      clasifica_='-----'
                  if r.poliza.celula:
                      cel = r.poliza.celula.celula_name  
                  else:
                      cel='-----'
              else:
                  contratante_e = ''
                  contratanteE_e = ''
                  contratanteP_e = ''                    
                  contratanteG_e = ''
                  grupo1_ = ''
                  grupo2_ = ''
                  nivelAg_ = ''
                  grupo3_ = ''
                  grupo4_ = ''  
                  clasifica_='-----'
                  cel='-----'
          if r.poliza.responsable:
              val_resp_e = r.poliza.responsable.first_name + ' '+ str(r.poliza.responsable.last_name)
          else:
              val_resp_e = ''
          if r.poliza.document_type == 1:
              sts = r.poliza.status  
              if r.poliza.clave:
                  try:
                      cve = r.poliza.clave.name + ' '+ str(r.poliza.clave.clave)
                      cve = ((((((cve).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                  except Exception as adsa:
                      cve =''
              else:
                  cve = ''
          elif r.poliza.document_type !=1 and r.poliza.document_type !=6:
            value_e = ''
          if r.poliza.collection_executive:
              val_cexe_e = r.poliza.collection_executive.first_name + ' '+ str(r.poliza.collection_executive.last_name)
          else:
              val_cexe_e = ''
          try:
              refs_policy = ReferenciadoresInvolved.objects.filter(policy = r.poliza.id,is_changed=False).values_list('referenciador__first_name','referenciador__last_name')
              if len(refs_policy):
                  v = []
                  try:
                      for rty in refs_policy:
                          v.append(rty[0] +' '+ str(rty[1])+str(', '))
                      referenc_e = v
                  except Exception as y:
                      referenc_e = []
              else:
                  referenc_e = []
          except Exception as e:
              referenc = []
          if r.poliza.ramo:
              if r.poliza.ramo.ramo_code == 1:
                  form = Life.objects.filter(policy = r.poliza.id)
                  try:
                      if form:
                          value_e = form[0].personal.full_name
                      else:
                          value_e = ''
                  except Exception as rt:
                     value_e = ''
              elif r.poliza.ramo.ramo_code == 2:
                  form = AccidentsDiseases.objects.filter(policy = r.poliza.id)
                  try:
                    if form:
                      value_e = form[0].personal.full_name
                    else:
                      value_e = ''
                  except Exception as rt:
                    value_e = ''
              elif r.poliza.subramo.subramo_code == 9:
                  form = AutomobilesDamages.objects.filter(policy = r.poliza.id)
                  try:
                    if form:
                      try:
                          form[0].model = ((((((form[0].model).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                          form[0].version = ((((((form[0].version).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                      except Exception as ers:
                          form[0].model = form[0].model
                          form[0].version = form[0].version
                      value_e = str(form[0].brand )+ '-' + str(form[0].model) + '-' + str(form[0].version)+ '-' + str(form[0].serial)
                    else:
                      value_e = ''
                  except:
                    value_e = ''
              elif r.poliza.ramo.ramo_code == 3 and not r.poliza.subramo.subramo_code == 9:
                  form = Damages.objects.filter(policy = r.poliza.id)
                  if form:
                      value_e = form[0].insured_item
                  else:
                      value_e = ''
              else:
                  value_e = 'Sin asegurado'
          else:
              value_e = ''
        else:
          value_e = ''
        if r.bono:
          value_e = ''
        if r.receipt_type == 3:
            receipt1 = 'Nota de Crédito'
        if r.receipt_type == 4:
            receipt1 = 'Bono'
        elif r.receipt_type == 2:
            receipt1 = 'Endoso'
        try:
            if r.receipt_type == 1:
                if r.poliza.document_type ==7:
                    receipt1 = 'Fianza'
                elif r.poliza.document_type ==8:
                    receipt1 = 'Fianza Colectiva'
                elif r.poliza.document_type == 11:
                    receipt1 = 'Colectividad'
                elif r.poliza.document_type == 12:
                    receipt1 = 'Póliza de Colectividad'
                if r.poliza.document_type == 3:
                    receipt1 = 'Póliza de Grupo'
                else:
                    receipt1 = receipt1
        except Exception as eee:
            pass
        try:
          if value_e:
            value_e = ((((((value_e).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'') 
          else:
              value_e = value_e
        except Exception as eed:
          value_e = ''
        asegurado_e.append(value_e)
        receipttype.append(receipt1)
        referenciador_e.append(referenc_e)
        antiguedad_e.append(antig_e)
        responsable_e.append(val_resp_e)
        collection_e.append(val_cexe_e)
        creadopor_e.append(val_owner_e)
        clave_e.append(cve_e)
        contract_e.append(contratante_e)
        contractemail_e.append(contratanteE_e)
        contractphone_e.append(contratanteP_e)
        subramo_e.append(sramo_e)
        grupoo_e.append(contratanteG_e)
        comentario.append(comment)
        poliza_number.append(pnumb)
        aseguradora.append(asegg)
        inicio.append(inc)
        fin.append(fn)
        clave.append(cve)
        status_.append(sts)
        currency.append(fc)
        # ---
        grupo1.append(grupo1_)
        grupo2.append(grupo2_)
        nivelAg.append(nivelAg_)
        grupo3.append(grupo3_)
        grupo4.append(grupo4_)
        clasifica.append(clasifica_)
        celulaC.append(cel)
        businessLine.append(businessLine_)
    obj = {
        # Rec
        'endosotramite'   : str(list(endosotramite)),        
        'receipt_type'   : str(list(receipttype)),        
        'recibo'   : str(list(recibos_dash.values_list('recibo_numero', flat = True))),        
        'document_type_e'   : str(list(recibos_dash.values_list('poliza__document_type', flat = True))),        
        'sucursal'   : str(list(recibos_dash.values_list('poliza__sucursal__sucursal_name', flat = True))),     
        # 'identifier'   : str(list(recibos_dash.values_list('poliza__identifier', flat = True))),
        'identifier'   : str(list([(((((((x).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')) if x else '' for x in recibos_dash.values_list('poliza__identifier', flat = True)])),  
        'poliza_number_e'   : str(list(poliza_number)),
        'formaPago_e'   : str(list(recibos_dash.values_list('poliza__forma_de_pago', flat = True))),
        'sucursal'   : str(list(recibos_dash.values_list('poliza__sucursal__sucursal_name', flat = True))),
        'aseguradora__compania_e'   : str(list(aseguradora)),
        'forma_de_pago_e'   : str(list(recibos_dash.values_list('poliza__forma_de_pago', flat = True))),
        'status_ep'   : str(list(recibos_dash.values_list('poliza__status', flat = True))),
        'status_e'   : str(list(recibos_dash.values_list('status', flat = True))),
        'fecha_inicio'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in recibos_dash.values_list('fecha_inicio', flat = True) ])) ,
        'fecha_fin'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in recibos_dash.values_list('fecha_fin', flat = True) ])) ,
        'vencimiento'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in recibos_dash.values_list('vencimiento', flat = True) ])) ,
        'start_of_validity_e'   : str(list(inicio)) ,
        'end_of_validity_e'   : str(list(fin)) ,
        'f_currency_e'   : str(list(currency)),        
        'created_at_e'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in recibos_dash.values_list('created_at', flat = True) ]))  ,
        'number_endorsement'   : str(list(recibos_dash.values_list('endorsement__number_endorsement', flat = True))),           
        # 'domiciliado'   : str(list(recibos_dash.values_list('is_cat', flat = True))),        
        'domiciliado'   : str(list(recibos_dash.values_list('conducto_de_pago', flat = True))),        
        'pneta_e'   : str(list(recibos_dash.values_list('prima_neta', flat = True))),        
        'rpf_e'   : str(list(recibos_dash.values_list('rpf', flat = True))),        
        'derecho_e'   : str(list(recibos_dash.values_list('derecho', flat = True))),        
        'iva_e'   : str(list(recibos_dash.values_list('iva', flat = True))),        
        'ptotal_e'   : str(list(recibos_dash.values_list('prima_total', flat = True))),        
        'comision_e'   : str(list(recibos_dash.values_list('comision', flat = True))),           
        'asegurado_e'   : str(list(asegurado_e)),
        'referenciador_e'   : str(list(referenciador_e)),
        'antiguedad_e'   : str(list(antiguedad_e)),
        'creadopor_e'   : str(list(creadopor_e)),
        'collection_e'   : str(list(collection_e)),
        'user_pay_e'   : str(list(userpay_e)),
        'responsable_e'   : str(list(responsable_e)),
        'clave_e'   : str(list(clave)),        
        'contratact_e'   : str(list(contract_e)),
        'contractemail_e'   : str(list(contractemail_e)),
        'contractphone_e'   : str(list(contractphone_e)),
        'subramo_e'   : str(list(subramo_e)),
        'grupo_e'   : str(list(grupoo_e)),
        'comentario'   : str(list(comentario)),
        'statusPF'   : str(list(status_)),
        'celula'   : str(list(celulaC)),
        'ids'   : str(list(ids)),
        # ----
        'grupo1'   : str(list(grupo1)) ,
        'grupo2'   : str(list(grupo2)) ,
        'nivelAg'   : str(list(nivelAg)) ,
        'grupo3'   : str(list(grupo3)) ,
        'grupo4'   : str(list(grupo4)) ,
        'clasifica'   : str(list(clasifica)) ,
        'businessLine'   : str(list(businessLine)),
        'siniestro_perdida'   : str(list(siniestro_perdida)),
        # Gral
        'tipo_reporte': tipo_reporte,
        'email_org':info_org['email'],
        'phone_org':info_org['phone'],
        'webpage_org':info_org['webpage'],
        'address_org':info_org['address'],
        'urlname_org':info_org['name'],
        'campo_celula':campo_celula,
        'campo_agrupacion':campo_agrupacion,
        'campo_lineanegocio':campo_lineanegocio
        }   
    if campo_lineanegocio == 'False' or campo_lineanegocio == False:
        if 'businessLine' in obj:
            del obj['businessLine'] 
    if campo_celula == 'False' or campo_celula == False:
        if 'celula' in obj:
            del obj['celula'] 
    if campo_agrupacion == 'False' or campo_agrupacion == False:
        if 'nivelAg' in obj:
            del obj['nivelAg'] 
        if 'grupo3' in obj:
            del obj['grupo3'] 
        if 'grupo4' in obj:
            del obj['grupo4'] 
    obj['columns'] = str(list(columns))
    obj['imagen'] = archivo_imagen
    obj['valueCom'] = valueCom
    obj['lenots'] = len(recibos_dash)
    obj['registros'] = len(recibos_dash)
    obj['ver_referenciador']=verReferenciadores
    obj['moduleName'] = moduleName
    r = requests.post(settings.SERVICEEXCEL_URL + 'get-recibosDashExcel/', obj,
    # headers = {
    # 'Authorization':'Bearer %s'%request.user.user_info.fi_token_refresh,
    # # 'Content-Type':'application/json' 
    # }, 
    stream=True)
    response_data= r.text

    response = HttpResponse(r.content,content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

    return response
# Reporte renovaciones dash 
@api_view(['GET'])
@permission_classes((IsAuthenticatedV2, IsOrgMemberV2))
def Service_RenovacionesDashExcel(request):
    valueCom = True
    verReferenciadores = is_perm_ver_referenciadores(request)
    try:
        valueCom = comisions(request)
    except Exception as ers:
        valueCom =  True
    try:
        user = request.META['user']
        org = user['org']['name']
        tipo = (request.GET.get('tipo'))
        cadena = request.GET.get('cadena')
        renews = []

        natural_filters = [Q(full_name__icontains = cadena)]
        naturals = Contractor.objects.filter(reduce(OR, natural_filters), org_name = org).values_list('pk', flat=True)
        
        prov_filters = [Q(compania__icontains = cadena), 
                            Q(alias__icontains = cadena),
                            Q(rfc__icontains = cadena)]
        providers = Provider.objects.filter(reduce(OR, prov_filters), org_name = org).distinct('id').values_list('pk', flat=True)

        ramos = Ramos.objects.filter(ramo_name__icontains = cadena).values_list('pk', flat=True)
        subramos = SubRamos.objects.filter(subramo_name__icontains = cadena).values_list('pk', flat=True)

        ot_filters = [Q(contractor__in = list(naturals)), Q(aseguradora__in = list(providers)),
                    Q(poliza_number__icontains = cadena), Q(ramo__in = list(ramos)), Q(subramo__in = list(subramos))]

        polizas = Polizas.objects.filter(reduce(OR, ot_filters), document_type__in = list([1,3,7,8,11,12]), org_name = request.GET.get('org'), renewed_status__in=[0,2], is_renewable = 1)
        # ----------
        subramos = UserInfo.objects.filter(user = request.user)
        if subramos.exists() and subramos.first() and subramos.first().subramos_dashboard:
            subramos = subramos.first().subramos_dashboard        
            polizas = polizas.filter(subramo__subramo_code__in = subramos)
        # https://miurabox.atlassian.net/browse/DES-680
        tipopoliza=UserInfo.objects.filter(user = request.user)
        if tipopoliza.exists() and tipopoliza.first() and tipopoliza.first().tipopoliza_dashboard:
            tipopoliza_list = tipopoliza.first().tipopoliza_dashboard    
            if 3 in tipopoliza_list: #si esta las pólizas de grupo
                tipopoliza_list.extend([4, 6])  # agregar los de subgrupo y certificados
            if 7 in tipopoliza_list: #si fianza en los filtros
                tipopoliza_list.extend([8])  # agregar las fianzas colectivas
            if 11 in tipopoliza_list: #si colectiva en los filtros
                tipopoliza_list.extend([12])  # agregar las pólizas de colectividad
            if not 0 in tipopoliza_list:  
                polizas = polizas.filter(document_type__in = tipopoliza_list)
        # -------------
        try:
            config_chart = Graphics.objects.filter(org_name =  request.GET.get('org'), type_graphic = 3).order_by('-created_at')[0]            
            days_green = config_chart.green
            days_yellow = config_chart.yellow
            days_orange = config_chart.orange
            days_red = config_chart.red
        except Graphics.DoesNotExist:
            config_chart = None
            days_green = 60
            days_yellow = 40
            days_orange = 20
            days_red = 0
        except:
            config_chart = None
            days_green = 60
            days_yellow = 40
            days_orange = 20
            days_red = 0 

        today = datetime.today()
        orange_days = timedelta(days = days_orange)
        yellow_days = timedelta(days = days_yellow)
        green_days = timedelta(days = days_green)

        diasO = today + orange_days
        diasY = today + yellow_days
        diasG = today + green_days

        pendingGreen = polizas.filter(document_type__in = list([1,3,7,8,11,12]),org_name = request.GET.get('org'), renewed_status__in=[0,2], is_renewable = 1, status__in = [13,14], reason_ren = None, end_of_validity__gt = diasY, end_of_validity__lte = diasG)
        pendingYellow = polizas.filter(document_type__in = list([1,3,7,8,11,12]),org_name = request.GET.get('org'), renewed_status__in=[0,2], is_renewable = 1, status__in = [13,14], reason_ren = None, end_of_validity__gt = diasO, end_of_validity__lte = diasY)
        pendingOrange = polizas.filter(document_type__in = list([1,3,7,8,11,12]),org_name = request.GET.get('org'), renewed_status__in=[0,2], is_renewable = 1, status__in = [13,14], reason_ren = None, end_of_validity__gt = today, end_of_validity__lte = diasO)
        pendingRed = polizas.filter(document_type__in = list([1,3,7,8,11,12]),org_name = request.GET.get('org'), renewed_status__in=[0,2], is_renewable = 1, status__in = [13,14], reason_ren = None, end_of_validity__lte = today)

        policies_excel = pendingGreen
        todas = polizas.filter(document_type__in = list([1,3,7,8,11,12]),org_name=request.GET.get('org'), renewed_status__in=[0,2], is_renewable = 1, status__in = [13,14], reason_ren = None,end_of_validity__lte = diasG)
        
        try:
            tipo = int(tipo)
            if tipo == 1:
                policies_excel = pendingGreen
                subType = "En tiempo"
            elif tipo == 2:
                policies_excel = pendingYellow
                subType = "Se acerca su vencimiento"
            elif tipo == 3:
                policies_excel = pendingOrange
                subType = "Atención urgente" 
            elif tipo == 4:
                policies_excel = pendingRed
                subType = "Pólizas vencidas" 
            else:
                polizas_total = []
                for y in pendingGreen:
                    polizas_total.append(y.id)
                for u in pendingRed:
                    polizas_total.append(u.id)
                for x in pendingYellow:
                    polizas_total.append(x.id)
                for i in pendingOrange:
                    polizas_total.append(i.id)
                policies_excel = Polizas.objects.filter(id__in = polizas_total,org_name = request.GET.get('org'))
                # polizas = polizas.filter(document_type__in = list([1,3]),org_name=request.GET.get('org'), renewed_status__in=[0,2], is_renewable = 1, status__in = [13,14], reason_ren = None, end_of_validity__lte = diasG)
                # policies_excel = todas
                subType = "Todas" 
        except Exception as e:
            if tipo == 'green':
                policies_excel = pendingGreen
                subType = "En tiempo"
            elif tipo == 'yellow':
                policies_excel = pendingYellow
                subType = "Se acerca su vencimiento"
            elif tipo == 'orange':
                policies_excel = pendingOrange
                subType = "Atención urgente" 
            elif tipo == 'red':
                policies_excel = pendingRed
                subType = "Pólizas vencidas" 
            else:
                polizas_total = []
                for y in pendingGreen:
                    polizas_total.append(y.id)
                for u in pendingRed:
                    polizas_total.append(u.id)
                for x in pendingYellow:
                    polizas_total.append(x.id)
                for i in pendingOrange:
                    polizas_total.append(i.id)
                policies_excel = Polizas.objects.filter(id__in = polizas_total,org_name = request.GET.get('org'))
                # polizas = polizas.filter(document_type__in = list([1,3]),org_name=request.GET.get('org'), renewed_status__in=[0,2], is_renewable = 1, status__in = [13,14], reason_ren = None, end_of_validity__lte = diasG)
                # policies_excel = todas

                subType = "Todas" 
        try:
            dataToFilter = getDataForPerfilRestricted(request, request.GET.get('org'))
        except Exception as er:
            dataToFilter = {}
        if dataToFilter:
            if dataToFilter['ccpr']:
                policies_excel = policies_excel.filter(contractor__in = list(dataToFilter['ccpr']))
            if dataToFilter['cgpr']:
                policies_excel = policies_excel.filter(contractor__group__in = list(dataToFilter['cgpr']))
            if dataToFilter['ccepr']:
                policies_excel = policies_excel.filter(contractor__cellule__in = list(dataToFilter['ccepr']))
            if dataToFilter['crpr']:
                policies_excel = policies_excel.filter(contractor__vendor__in = list(dataToFilter['crpr']))
            if dataToFilter['cspr']:
                policies_excel = policies_excel.filter(contractor__sucursal__in = list(dataToFilter['cspr']))
            # Pólizas ****
            if dataToFilter['pppr']:
                policies_excel = policies_excel.filter(pk__in = list(dataToFilter['pppr']))
            if dataToFilter['pgpr']:
                policies_excel = policies_excel.filter(contractor__group__in = list(dataToFilter['pgpr']))
            if dataToFilter['pcepr']:
                policies_excel = policies_excel.filter(celula__in = list(dataToFilter['pcepr']))
            if dataToFilter['pspr']:
                policies_excel = policies_excel.filter(sucursal__in = list(dataToFilter['pspr']))    
            if dataToFilter['papr']:
                policies_excel = policies_excel.filter(groupinglevel__in = list(dataToFilter['papr']))
            if dataToFilter['pcapr']:
                policies_excel = policies_excel.filter(clave__in = list(dataToFilter['pcapr']))
            if dataToFilter['psrpr']:
                policies_excel = policies_excel.filter(subramo__subramo_code__in = list(dataToFilter['psrpr']))
            if dataToFilter['paspr']:
                policies_excel = policies_excel.filter(aseguradora__in = list(dataToFilter['paspr']))
            if dataToFilter['pstpr']:
                policies_excel = policies_excel.filter(status__in = list(dataToFilter['pstpr']))
        
    except Exception as e:
        order = int(request.GET.get('order'))
        asc = int(request.GET.get('asc'))
        tipo = request.GET.get('tipo')
        request = request

        if order == 1:
            if asc == 1:
                polizas = Polizas.objects.filter(document_type__in = list([1,3,7,8,11,12]), org_name=request.GET.get('org'), renewed_status__in=[0,2], is_renewable = 1).order_by('poliza_number')
            else:
                polizas = Polizas.objects.filter(document_type__in = list([1,3,7,8,11,12]), org_name=request.GET.get('org'), renewed_status__in=[0,2], is_renewable = 1).order_by('-poliza_number')

        elif order == 2:
            if asc == 1:
                polizas = Polizas.objects.filter(document_type__in = list([1,3,7,8,11,12]), org_name=request.GET.get('org'), renewed_status__in=[0,2], is_renewable = 1).order_by('contractor__full_name')
            else:
                polizas = Polizas.objects.filter(document_type__in = list([1,3,7,8,11,12]), org_name=request.GET.get('org'), renewed_status__in=[0,2], is_renewable = 1).order_by('-contractor__full_name')
        
        elif order == 3:
            if asc == 1:
                polizas = Polizas.objects.filter(document_type__in = list([1,3,7,8,11,12]), org_name=request.GET.get('org'), renewed_status__in=[0,2], is_renewable = 1).order_by('subramo__subramo_name')
            else:
                polizas = Polizas.objects.filter(document_type__in = list([1,3,7,8,11,12]), org_name=request.GET.get('org'), renewed_status__in=[0,2], is_renewable = 1).order_by('-subramo__subramo_name')
        
        elif order == 4:
            if asc == 1:
                polizas = Polizas.objects.filter(document_type__in = list([1,3,7,8,11,12]), org_name=request.GET.get('org'), renewed_status__in=[0,2], is_renewable = 1).order_by('aseguradora__compania')
            else:
                polizas = Polizas.objects.filter(document_type__in = list([1,3,7,8,11,12]), org_name=request.GET.get('org'), renewed_status__in=[0,2], is_renewable = 1).order_by('-aseguradora__compania')

        elif order == 5:
            if asc == 1:
                polizas = Polizas.objects.filter(document_type__in = list([1,3,7,8,11,12]), org_name=request.GET.get('org'), renewed_status__in=[0,2], is_renewable = 1).order_by('end_of_validity')
            else:
                polizas = Polizas.objects.filter(document_type__in = list([1,3,7,8,11,12]), org_name=request.GET.get('org'), renewed_status__in=[0,2], is_renewable = 1).order_by('-end_of_validity')
        else:
            polizas = Polizas.objects.filter(document_type__in = list([1,3,7,8,11,12]), org_name=request.GET.get('org'), renewed_status__in=[0,2], is_renewable = 1)
        
        try:
            config_chart = Graphics.objects.filter(org_name =  request.GET.get('org'), type_graphic = 3).order_by('-created_at')[0]            
            days_green = config_chart.green
            days_yellow = config_chart.yellow
            days_orange = config_chart.orange
            days_red = config_chart.red
        except Graphics.DoesNotExist:
            config_chart = None
            days_green = 60
            days_yellow = 40
            days_orange = 20
            days_red = 0
        except:
            config_chart = None
            days_green = 60
            days_yellow = 40
            days_orange = 20
            days_red = 0 

        today = datetime.today()
        orange_days = timedelta(days = days_orange)
        yellow_days = timedelta(days = days_yellow)
        green_days = timedelta(days = days_green)

        diasO = today + orange_days
        diasY = today + yellow_days
        diasG = today + green_days

        pendingGreen = polizas.filter(document_type__in = list([1,3,7,8,11,12]),org_name = request.GET.get('org'), renewed_status__in=[0,2], is_renewable = 1, status__in = [13,14], reason_ren = None, end_of_validity__gt = diasY, end_of_validity__lte = diasG)
        pendingYellow = polizas.filter(document_type__in = list([1,3,7,8,11,12]),org_name = request.GET.get('org'), renewed_status__in=[0,2], is_renewable = 1, status__in = [13,14], reason_ren = None, end_of_validity__gt = diasO, end_of_validity__lte = diasY)
        pendingOrange = polizas.filter(document_type__in = list([1,3,7,8,11,12]),org_name = request.GET.get('org'), renewed_status__in=[0,2], is_renewable = 1, status__in = [13,14], reason_ren = None, end_of_validity__gt = today, end_of_validity__lte = diasO)
        pendingRed = polizas.filter(document_type__in = list([1,3,7,8,11,12]),org_name = request.GET.get('org'), renewed_status__in=[0,2], is_renewable = 1, status__in = [13,14], reason_ren = None, end_of_validity__lte = today)

        todas = polizas.filter(document_type__in = list([1,3,7,8,11,12]),org_name = request.GET.get('org'), renewed_status__in=[0,2], is_renewable = 1, status__in = [13,14], reason_ren = None,end_of_validity__lte = diasG)
        try:
            tipo = int(tipo)
            if tipo == 1:
                policies_excel = pendingGreen
                subType = "En tiempo"
            elif tipo == 2:
                policies_excel = pendingYellow
                subType = "Se acerca su vencimiento" 
            elif tipo == 3:
                policies_excel = pendingOrange
                subType = "Atención urgente" 
            elif tipo == 4:
                policies_excel = pendingRed
                subType = "Pólizas vencidas" 
            else:
                subType = 'Todos'
                polizas_total = []
                for y in pendingGreen:
                    polizas_total.append(y.id)
                for u in pendingRed:
                    polizas_total.append(u.id)
                for x in pendingYellow:
                    polizas_total.append(x.id)
                for i in pendingOrange:
                    polizas_total.append(i.id)
                policies_excel = Polizas.objects.filter(id__in = polizas_total,org_name = request.GET.get('org'))
                # policies_excel = todas
        except Exception as e:
            if tipo == 'green':
                policies_excel = pendingGreen
                subType = "En tiempo"
            elif tipo == 'yellow':
                policies_excel = pendingYellow
                subType = "Se acerca su vencimiento" 
            elif tipo == 'orange':
                policies_excel = pendingOrange
                subType = "Atención urgente" 
            elif tipo == 'red':
                policies_excel = pendingRed
                subType = "Pólizas vencidas" 
            else:
                subType = 'Todos'
                polizas_total = []
                for y in pendingGreen:
                    polizas_total.append(y.id)
                for u in pendingRed:
                    polizas_total.append(u.id)
                for x in pendingYellow:
                    polizas_total.append(x.id)
                for i in pendingOrange:
                    polizas_total.append(i.id)
                policies_excel = Polizas.objects.filter(id__in = polizas_total,org_name = request.GET.get('org'))
                # policies_excel = todas

        try:
            dataToFilter = getDataForPerfilRestricted(request, request.GET.get('org'))
        except Exception as er:
            dataToFilter = {}
        if dataToFilter:
            if dataToFilter['ccpr']:
                policies_excel = policies_excel.filter(contractor__in = list(dataToFilter['ccpr']))
            if dataToFilter['cgpr']:
                policies_excel = policies_excel.filter(contractor__group__in = list(dataToFilter['cgpr']))
            if dataToFilter['ccepr']:
                policies_excel = policies_excel.filter(contractor__cellule__in = list(dataToFilter['ccepr']))
            if dataToFilter['crpr']:
                policies_excel = policies_excel.filter(contractor__vendor__in = list(dataToFilter['crpr']))
            if dataToFilter['cspr']:
                policies_excel = policies_excel.filter(contractor__sucursal__in = list(dataToFilter['cspr']))
            # Pólizas ****
            if dataToFilter['pppr']:
                policies_excel = policies_excel.filter(pk__in = list(dataToFilter['pppr']))
            if dataToFilter['pgpr']:
                policies_excel = policies_excel.filter(contractor__group__in = list(dataToFilter['pgpr']))
            if dataToFilter['pcepr']:
                policies_excel = policies_excel.filter(celula__in = list(dataToFilter['pcepr']))
            if dataToFilter['pspr']:
                policies_excel = policies_excel.filter(sucursal__in = list(dataToFilter['pspr']))    
            if dataToFilter['papr']:
                policies_excel = policies_excel.filter(groupinglevel__in = list(dataToFilter['papr']))
            if dataToFilter['pcapr']:
                policies_excel = policies_excel.filter(clave__in = list(dataToFilter['pcapr']))
            if dataToFilter['psrpr']:
                policies_excel = policies_excel.filter(subramo__subramo_code__in = list(dataToFilter['psrpr']))
            if dataToFilter['paspr']:
                policies_excel = policies_excel.filter(aseguradora__in = list(dataToFilter['paspr']))
            if dataToFilter['pstpr']:
                policies_excel = policies_excel.filter(status__in = list(dataToFilter['pstpr']))
    asegurado_e = []
    antiguedad = []
    referenciador_e = []
    responsable_e = []
    collection_e = []
    userpay_e = []
    creadopor_e = []
    clave_e = []
    contract_e = []
    contractemail_e = []
    contractphone_e = []
    contractgrupo_e = []
    subramo_e = []
    grupoo_e = []
    comentario = []
    fechaRenc = []    
    idsaam = []    
    info_org = getInfoOrg(request)
    try:
        tipo_reporte = 'Reporte Renovaciones Dashboard ' +str(subType)
    except Exception as rree:
        tipo_reporte = 'Reporte Renovaciones Dashboard'
    if len(info_org['logo']) != 0:
        archivo_imagen = 'https://miurabox-public.s3.amazonaws.com/cas/' + info_org['logo']
        # archivo_imagen = get_presigned_url("cas/{url}".format(url=info_org['logo']),28800) 
    else:
        archivo_imagen = 'saam.jpg'
    # policies_excel = policies_excel.order_by('natural__full_name','juridical__j_name')
    # policies_excel = policies_excel.order_by('natural__full_name','juridical__j_name','ramo__ramo_name','aseguradora__compania')
    policies_excel = policies_excel.order_by('id')

    subramos = UserInfo.objects.filter(user = request.user)
    
    
    if subramos.exists() and subramos.first() and subramos.first().subramos_dashboard :
        subramos = subramos.first().subramos_dashboard
    else:
        subramos = list(SubRamos.objects.filter(org_name = request.GET.get('org')).distinct('subramo_code').values_list('subramo_code',flat=True))

    policies_excel = policies_excel.filter(subramo__subramo_code__in = subramos)
    addsiniestrop = True
    siniestro_perdida = []
    status_poliza = []
    for r in policies_excel:
        idsaam.append(r.id)
        statusr = checkStatusPolicy(r.status)
        valR = False
        if OldPolicies.objects.filter(base_policy__id = r.id, new_policy__status = 1).exists():
            valR = True
        if r.org_name == 'ancora':
            if r.status ==13 and r.is_renewable==1 or (r.renewed_status ==2 and r.status ==13):
                statusr = statusr+' -En Proceso de Renovación'
        try:
            comment = Comments.objects.filter(org_name=request.GET.get('org'), model = 6, id_model = r.id).order_by('-created_at')
            comment = comment[0].content
            comment = ((((((comment).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
        except Exception as errorr:
            comment = 'Sin comentario'
        antig_e = get_antiguedad(r.start_of_validity)
        if r.owner:
            val_owner_e = r.owner.first_name + ' '+ str(r.owner.last_name)
        else:
            val_owner_e = ''
        if r.clave:
            try:
                cve = r.clave.name + ' '+ str(r.clave.clave)
                cve = ((((((cve).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
            except Exception as ada:
                cve =''
        else:
            cve = ''        
        if r:            
            if r and r.subramo and r.subramo.subramo_code ==9:
                if addsiniestrop:            
                    try:
                        siniestrop = Autos.objects.filter(tipo_siniestro =10,siniestro__poliza = r,org_name = r.org_name).order_by('-created_at')
                        if siniestrop:
                            estsp = checkStatusSin(siniestrop[0].siniestro.status)
                            vl = 'Si-' +str(siniestrop[0].siniestro.numero_siniestro if siniestrop[0].siniestro and siniestrop[0].siniestro.numero_siniestro else '')+'-'+str(estsp)
                            siniestro_perdida.append(vl)
                        else:
                            siniestro_perdida.append('')
                    except Exception as ds:
                        print('error siniestro pérdida total--',ds)
                        siniestro_perdida.append('')
                else:
                    siniestro_perdida.append('')
            else:
                siniestro_perdida.append('')
            fechaRen = 'Pendiente de renovar'
            try:
                refs_policy = ReferenciadoresInvolved.objects.filter(policy = r.id,is_changed=False).values_list('referenciador__first_name','referenciador__last_name')
                if len(refs_policy):
                    v = []
                    try:
                        for rty in refs_policy:
                            v.append(rty[0] +' '+ str(rty[1])+str(', '))
                        referenc = v
                    except Exception as y:
                        referenc = []
                else:
                    referenc = []
            except Exception as e:
                referenc = []
            if r.subramo:
                sramo_e = r.subramo.subramo_name
            else:
                sramo_e = ''
            if r.document_type == 6:
                if r.parent.parent.parent.contractor:
                    contratante_e = ((((((r.parent.parent.parent.contractor.full_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    contratanteE_e = r.parent.parent.parent.contractor.email
                    contratanteP_e = r.parent.parent.parent.contractor.phone_number
                    contratanteG_e = ((((((r.parent.parent.parent.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')     
                    # contratanteG_e = r.parent.parent.parent.contractor.group.group_name
                    try:
                        if r.parent.parent.parent.contractor.group:
                            if r.parent.parent.parent.contractor.group.type_group == 1:
                                contratanteG_e = ((((((r.parent.parent.parent.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo1_ = ''
                                grupo1_ = ''
                            elif r.parent.parent.parent.contractor.group.type_group == 2:
                                grupotype1 = Group.objects.get(pk = r.parent.parent.parent.contractor.group.parent.id)
                                contratanteG_e = ((((((grupotype1.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo1_ = ((((((r.parent.parent.parent.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo1_ = ''
                            elif r.parent.parent.parent.contractor.group.type_group == 3:
                                grupotype1 = Group.objects.get(pk = r.parent.parent.parent.contractor.group.parent.parent.id)
                                contratanteG_e = ((((((grupotype1.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                subgrupotype2 = Group.objects.get(pk = r.parent.parent.parent.contractor.group.parent.id)
                                grupo1_ = ((((((subgrupotype2.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo1_ = ((((((r.parent.parent.parent.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        else:
                            contratanteG_e = ''
                            grupo1_ = ''
                            grupo1_ = ''  
                    except Exception as e:
                        contratanteG_e = ''
                        grupo1_ = ''
                        grupo1_ = '' 
                    try:
                        if r.parent.parent.parent.groupinglevel:
                            if r.parent.parent.parent.groupinglevel.type_grouping == 1:
                                nivelAg_ = ((((((r.parent.parent.parent.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo3_ = ''
                                grupo4_ = ''
                            elif r.parent.parent.parent.groupinglevel.type_grouping == 2:
                                grupotype1 = GroupingLevel.objects.get(pk = r.parent.parent.parent.groupinglevel.parent.id)
                                nivelAg_ = ((((((grupotype1.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo3_ = ((((((r.parent.parent.parent.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo4_ = ''
                            elif r.parent.parent.parent.groupinglevel.type_grouping == 3:
                                grupotype1 = GroupingLevel.objects.get(pk = r.parent.parent.parent.groupinglevel.parent.parent.id)
                                nivelAg_ = ((((((grupotype1.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                subgrupotype2 = GroupingLevel.objects.get(pk = r.parent.parent.parent.groupinglevel.parent.id)
                                grupo3_ = ((((((subgrupotype2.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo4_ = ((((((r.parent.parent.parent.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        else:
                            nivelAg_ = ''
                            grupo3_ = ''
                            grupo4_ = ''  
                    except Exception as e:
                        nivelAg_ = ''
                        grupo3_ = ''
                        grupo4_ = '' 
                else:
                    contratante_e = ''
                    contratanteE_e = ''
                    contratanteP_e = ''
                    contratanteG_e = ''    
                    contratanteG_e = ''
                    grupo1_ = ''
                    grupo1_ = ''  
                    nivelAg_ = ''
                    grupo3_ = ''
                    grupo4_ = ''
            else:
                if r.contractor:
                    contratante_e = ((((((r.contractor.full_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    contratanteE_e = r.contractor.email
                    contratanteP_e = r.contractor.phone_number
                    try:
                        contratanteG_e = ((((((r.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')     
                    except:
                        contratanteG_e = '' 
                    # contratanteG_e = r.contractor.group.group_name
                    try:
                        if r.contractor.group:
                            if r.contractor.group.type_group == 1:
                                contratanteG_e = ((((((r.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo1_ = ''
                                grupo1_ = ''
                            elif r.contractor.group.type_group == 2:
                                grupotype1 = Group.objects.get(pk = r.contractor.group.parent.id)
                                contratanteG_e = ((((((grupotype1.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo1_ = ((((((r.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo1_ = ''
                            elif r.contractor.group.type_group == 3:
                                grupotype1 = Group.objects.get(pk = r.contractor.group.parent.parent.id)
                                contratanteG_e = ((((((grupotype1.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                subgrupotype2 = Group.objects.get(pk = r.contractor.group.parent.id)
                                grupo1_ = ((((((subgrupotype2.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo1_ = ((((((r.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        else:
                            contratanteG_e = ''
                            grupo1_ = ''
                            grupo1_ = ''  
                    except Exception as e:
                        contratanteG_e = ''
                        grupo1_ = ''
                        grupo1_ = '' 
                    try:
                        if r.contractor.groupinglevel:
                            if r.contractor.groupinglevel.type_grouping == 1:
                                nivelAg_ = ((((((r.contractor.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo3_ = ''
                                grupo4_ = ''
                            elif r.contractor.groupinglevel.type_grouping == 2:
                                grupotype1 = GroupingLevel.objects.get(pk = r.contractor.groupinglevel.parent.id)
                                nivelAg_ = ((((((grupotype1.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo3_ = ((((((r.contractor.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo4_ = ''
                            elif r.contractor.groupinglevel.type_grouping == 3:
                                grupotype1 = GroupingLevel.objects.get(pk = r.contractor.groupinglevel.parent.parent.id)
                                nivelAg_ = ((((((grupotype1.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                subgrupotype2 = GroupingLevel.objects.get(pk = r.contractor.groupinglevel.parent.id)
                                grupo3_ = ((((((subgrupotype2.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo4_ = ((((((r.contractor.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        else:
                            nivelAg_ = ''
                            grupo3_ = ''
                            grupo4_ = ''  
                    except Exception as e:
                        nivelAg_ = ''
                        grupo3_ = ''
                        grupo4_ = ''
                else:
                    contratante_e = ''
                    contratanteE_e = ''
                    contratanteP_e = ''
                    contratanteG_e = ''    
                    contratanteG_e = ''
                    grupo1_ = ''
                    grupo1_ = ''  
                    nivelAg_ = ''
                    grupo3_ = ''
                    grupo4_ = ''
            if r.ramo:
                if r.ramo.ramo_code == 1:
                    form = Life.objects.filter(policy = r.id)
                    try:
                        if form:
                            value_e = form[0].personal.full_name
                        else:
                            value_e = ''
                    except Exception as rt:
                       value_e = ''
                elif r.ramo.ramo_code == 2:
                    form = AccidentsDiseases.objects.filter(policy = r.id)
                    if form:
                        value_e = form[0].personal.full_name
                    else:
                        value_e = ''
                elif r.subramo.subramo_code == 9:
                    form = AutomobilesDamages.objects.filter(policy = r.id)
                    if form:
                        try:
                            form[0].model = ((((((form[0].model).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                            form[0].version = ((((((form[0].version).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        except Exception as ers:
                            form[0].model = form[0].model
                            form[0].version = form[0].version
                        value_e = str(form[0].brand) + '-' +str( form[0].model) + '-' + str(form[0].version)+ '-' + str(form[0].serial)
                    else:
                        value_e = ''
                elif r.ramo.ramo_code == 3 and not r.subramo.subramo_code == 9:
                    form = Damages.objects.filter(policy = r.id)
                    if form:
                        value_e = form[0].insured_item
                    else:
                        value_e = ''
                else:
                    value_e = 'Sin asegurado'
                    val_resp_e = 'Sin responsable'
                    val_cexe_e = 'Sin ejecutivo'
            else:
                value_e = 'Sin asegurado'
        if value_e:
            value_e = ((((((value_e).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'') 
        else:
            value_e = value_e
        comentario.append(comment)
        asegurado_e.append(value_e)
        creadopor_e.append(val_owner_e)
        contract_e.append(contratante_e)
        contractemail_e.append(contratanteE_e)
        contractphone_e.append(contratanteP_e)
        grupoo_e.append(contratanteG_e)
        antiguedad.append(antig_e)
        clave_e.append(cve)
        referenciador_e.append(referenc)
        fechaRenc.append(fechaRen)
        status_poliza.append(statusr)
    if valueCom:
        columns = ['Tipo', 'No.Póliza', 'Contratante', 'Email', 'Teléfono', 'Proveedor', 'Subramo', 'Forma de Pago', 'Estatus', 
               'Inicio Póliza', 'Fin Póliza', 'Moneda', 'Prima Neta', 'RPF', 'Derecho', 'IVA', 'Prima Total', 'Comisión',
               'Clave', 'Asegurado', 'Observaciones', 'Referenciador', 'Fecha de creación', 'Creado por', 'Fecha renovación','Comentario Final','Pérdida Total','ID SAAM']
    else:
        columns = ['Tipo', 'No.Póliza', 'Contratante', 'Email', 'Teléfono', 'Proveedor', 'Subramo', 'Forma de Pago', 'Estatus', 
               'Inicio Póliza', 'Fin Póliza', 'Moneda', 'Prima Neta', 'RPF', 'Derecho', 'IVA', 'Prima Total',
               'Clave', 'Asegurado', 'Observaciones', 'Referenciador', 'Fecha de creación', 'Creado por', 'Fecha renovación','Comentario Final','Pérdida Total','ID SAAM']
    
    if verReferenciadores==False or verReferenciadores=='False':
        index = columns.index('Referenciador')
        columns[index] = ''
    obj = {
        # Rec
        'idsaam'   : str(list(idsaam)),        
        'antiguedad'   : str(list(antiguedad)),        
        'status'   : str(list(status_poliza)),           
        'created_at'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in policies_excel.values_list('created_at', flat = True) ])) ,            
        'start'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in policies_excel.values_list('start_of_validity', flat = True) ])) ,            
        'end'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in policies_excel.values_list('end_of_validity', flat = True) ])) ,            
        'folio_interno'   : str(list(policies_excel.values_list('internal_number', flat = True) )) ,            
        'poliza_number'   : str(list([(((((((x).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')) if x else '' for x in policies_excel.values_list('poliza_number', flat = True)])),            
        'document_type'   : str(list(policies_excel.values_list('document_type', flat = True))) ,            
        'aseguradora'   : str(list(policies_excel.values_list('aseguradora__alias', flat = True) )) ,            
        'subramo'   : str(list(policies_excel.values_list('subramo__subramo_name', flat = True) )) ,            
        'forma_de_pago'   : str(list(policies_excel.values_list('forma_de_pago', flat = True) )) ,            
        'comision'   : str(list(policies_excel.values_list('comision', flat = True) )) ,            
        'f_currency'   : str(list(policies_excel.values_list('f_currency', flat = True) )) ,            
        'p_neta'   : str(list(policies_excel.values_list('p_neta', flat = True) )) ,            
        'rpf'   : str(list(policies_excel.values_list('rpf', flat = True) )) ,            
        'derecho'   : str(list(policies_excel.values_list('derecho', flat = True) )) ,            
        'iva'   : str(list(policies_excel.values_list('iva', flat = True) )) ,            
        'p_total'   : str(list(policies_excel.values_list('p_total', flat = True) )) ,            
        # 'observations'   : str(list(policies_excel.values_list('observations', flat = True) )) ,  
        'observations_e'   : str(list([(((((((x).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')) if x else '' for x in policies_excel.values_list('observations', flat = True)])),   
        'asegurado'   : str(list(asegurado_e)),
        'referenciador'   : str(list(referenciador_e)),
        'clave'   : str(list(clave_e)),
        'creadopor_e'   : str(list(creadopor_e)),       
        'contratact_e'   : str(list(contract_e)),
        'contractemail_e'   : str(list(contractemail_e)),
        'contractphone_e'   : str(list(contractphone_e)),
        'subramo_e'   : str(list(subramo_e)),
        'grupo_e'   : str(list(grupoo_e)),
        'comentario'   : str(list(comentario)),
        'fecha_ren'   : str(list(fechaRenc)),
        'siniestro_perdida'   : str(list(siniestro_perdida)),
        # Gral
        'tipo_reporte': tipo_reporte,
        'email_org':info_org['email'],
        'phone_org':info_org['phone'],
        'webpage_org':info_org['webpage'],
        'address_org':info_org['address'],
        'urlname_org':info_org['name'],
        }   
    obj['columns'] = str(list(columns))
    obj['imagen'] = archivo_imagen
    obj['valueCom'] = valueCom
    obj['lenots'] = len(policies_excel)
    obj['registros'] = len(policies_excel)
    obj['ver_referenciador']=verReferenciadores
    r = requests.post(settings.SERVICEEXCEL_URL + 'get-renovacionesDashExcel/', obj,
    # headers = {
    # 'Authorization':'Bearer %s'%request.user.user_info.fi_token_refresh,
    # # 'Content-Type':'application/json' 
    # }, 
    stream=True)
    response_data= r.text

    response = HttpResponse(r.content,content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

    return response
# Reporte siniestros dash 
@api_view(['GET'])
@permission_classes((IsAuthenticatedV2, IsOrgMemberV2))
def Service_SiniestrosDashExcel(request):

    order = int(request.GET.get('order'))
    asc = int(request.GET.get('asc'))
    tipo = request.GET.get('tipo')
    request = request
    user = request.META['user']
    org = user['org']['name']
    
    siniestros = Siniestros.objects.filter(org_name = org).exclude(status__in = list([3,4,5,7,8])).distinct('id')
    try:
        cadena = request.GET.get('cadena')
        sinister = []

        natural_filters = [Q(full_name__icontains = cadena)]
        naturals = Contractor.objects.filter(reduce(OR, natural_filters), org_name = org).values_list('pk', flat=True)        
      
        prov_filters = [Q(compania__icontains = cadena), 
                            Q(alias__icontains = cadena),
                            Q(rfc__icontains = cadena)]
        providers = Provider.objects.filter(reduce(OR, prov_filters), org_name = org).distinct('id').values_list('pk', flat=True)

        ramos = Ramos.objects.filter(ramo_name__icontains = cadena).values_list('pk', flat=True)
        subramos = SubRamos.objects.filter(subramo_name__icontains = cadena).values_list('pk', flat=True)

        ot_filters = [Q(contractor__in = list(naturals)), Q(aseguradora__in = list(providers)),
                    Q(poliza_number__icontains = cadena), Q(ramo__in = list(ramos)), Q(subramo__in = list(subramos))]

        polizas = Polizas.objects.filter(reduce(OR, ot_filters), document_type__in = list([1, 3, 6]), org_name=request.GET.get('org'))
        # ----------
        subramos = UserInfo.objects.filter(user = request.user)
        if subramos.exists() and subramos.first() and subramos.first().subramos_dashboard:
            subramos = subramos.first().subramos_dashboard        
            polizas = polizas.filter(subramo__subramo_code__in = subramos)
        # https://miurabox.atlassian.net/browse/DES-680
        tipopoliza=UserInfo.objects.filter(user = request.user)
        if tipopoliza.exists() and tipopoliza.first() and tipopoliza.first().tipopoliza_dashboard:
            tipopoliza_list = tipopoliza.first().tipopoliza_dashboard    
            if 3 in tipopoliza_list: #si esta las pólizas de grupo
                tipopoliza_list.extend([4, 6])  # agregar los de subgrupo y certificados
            if 7 in tipopoliza_list: #si fianza en los filtros
                tipopoliza_list.extend([8])  # agregar las fianzas colectivas
            if 11 in tipopoliza_list: #si colectiva en los filtros
                tipopoliza_list.extend([12])  # agregar las pólizas de colectividad
            if not 0 in tipopoliza_list:  
                polizas = polizas.filter(document_type__in = tipopoliza_list)
        # -------------
        try:
            dataToFilter = getDataForPerfilRestricted(request, request.GET.get('org'))
        except Exception as er:
            dataToFilter = {}
        if dataToFilter:
            # Contratantes***
            polizas_ = Polizas.objects.filter(document_type__in =[1,3,7,8,6,12],org_name=request.GET.get('org'))
            polizasToF = Polizas.objects.filter(document_type__in = [1,3,7,8],org_name=request.GET.get('org'))
            if dataToFilter['ccpr']:
                polizasToF = polizasToF.filter(contractor__in = list(dataToFilter['ccpr']))
            if dataToFilter['cgpr']:
                polizasToF = polizasToF.filter(contractor__group__in = list(dataToFilter['cgpr']))
            if dataToFilter['ccepr']:
                polizasToF = polizasToF.filter(contractor__cellule__in = list(dataToFilter['ccepr']))
            if dataToFilter['crpr']:
                polizasToF = polizasToF.filter(contractor__vendor__in = list(dataToFilter['crpr']))
            if dataToFilter['cspr']:
                polizasToF = polizasToF.filter(contractor__sucursal__in = list(dataToFilter['cspr']))
            # Pólizas ****
            if dataToFilter['pppr']:
                polizasToF = polizasToF.filter(pk__in = list(dataToFilter['pppr']))
            if dataToFilter['pgpr']:
                polizasToF = polizasToF.filter(contractor__group__in = list(dataToFilter['pgpr']))
            if dataToFilter['pcepr']:
                polizasToF = polizasToF.filter(celula__in = list(dataToFilter['pcepr']))
            if dataToFilter['prpr']:
                polizasToF = polizasToF.filter(ref_policy__referenciador__in = list(dataToFilter['prpr']))
            if dataToFilter['pspr']:
                polizasToF = polizasToF.filter(sucursal__in = list(dataToFilter['pspr']))
            if dataToFilter['papr']:
                polizasToF = polizasToF.filter(groupinglevel__in = list(dataToFilter['papr']))
            if dataToFilter['pcapr']:
                polizasToF = polizasToF.filter(clave__in = list(dataToFilter['pcapr']))
            if dataToFilter['psrpr']:
                polizasToF = polizasToF.filter(subramo__subramo_code__in = list(dataToFilter['psrpr']))
            if dataToFilter['paspr']:
                polizasToF = polizasToF.filter(aseguradora__in = list(dataToFilter['paspr']))
            if dataToFilter['pstpr']:
                polizasToF = polizasToF.filter(status__in = list(dataToFilter['pstpr']))
            
            polizasCT = polizas_.filter(document_type = 12, parent__in = list(polizasToF))
            polizasGT = polizas_.filter(document_type = 6, parent__parent__parent__in = list(polizasToF))
            polizasFin = list(polizasToF.values_list('pk', flat = True)) + list(polizasCT.values_list('pk', flat = True)) + list(polizasGT.values_list('pk', flat = True))
            polizas = polizasFin
        
        siniestros = Siniestros.objects.filter(poliza__in=list(polizas), org_name=request.GET.get('org')).distinct('id').exclude(status__in = list([3,4,5,7,8]))
        siniestros_ = Siniestros.objects.filter(Q(numero_siniestro__icontains = cadena) | Q(folio_interno__icontains = cadena), poliza__in=list(polizas),org_name = request.GET.get('org')).exclude(status__in = list([3,4,5]))

        if len(siniestros) == 0:
            siniestros = siniestros_
        try:
            # config_chart = Graphics.objects.get(org_name=request.GET.get('org'), type_graphic = 4)
            config_chart = Graphics.objects.filter(org_name=request.GET.get('org'), type_graphic = 4).order_by('-id')[0]
            days_green = config_chart.green
            days_yellow = config_chart.yellow
            days_orange = config_chart.orange
            days_red = config_chart.red
        except:
            config_chart = None
            days_green = 6
            days_yellow = 10
            days_orange = 14
            days_red = 1000

        today = datetime.today()
        orange_days = timedelta(days = days_orange)
        yellow_days = timedelta(days = days_yellow)
        green_days = timedelta(days = days_green)

        diasO = today - orange_days
        diasY = today - yellow_days
        diasG = today - green_days

        pendingGreen = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = today, fecha_ingreso__gt = diasG).exclude(status__in = list([3,4,5,7,8]))
        pendingYellow = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasG, fecha_ingreso__gt = diasY).exclude(status__in = list([3,4,5,7,8]))
        pendingOrange = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasY, fecha_ingreso__gt = diasO).exclude(status__in = list([3,4,5,7,8]))
        pendingRed = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasO).exclude(status__in = list([3,4,5,7,8]))
        
        todos = siniestros.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8]))
        # total_ = (pendingGreen) + (pendingYellow) + (pendingOrange) + (pendingRed)

        total_ = Siniestros.objects.filter((Q(pk__in=(pendingRed)) | Q(pk__in=(pendingGreen))) | Q(pk__in=(pendingOrange)) | Q(pk__in=(pendingYellow)))
        polizas = Polizas.objects.filter(document_type__in = [1,3,7,8,6,12], org_name=request.GET.get('org'))
        try:
            tipo = int(tipo)
            if tipo == 1:
                subType = "En tiempo"
                if order == 1:
                    if asc == 1:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('aux_affected')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = today, fecha_ingreso__gt = diasG).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingGreen.values_list('pk', flat=True)))
                    else:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('-aux_affected')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = today, fecha_ingreso__gt = diasG).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingGreen.values_list('pk', flat=True)))

                elif order == 2:
                    if asc == 1:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('poliza__contractor__full_name')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = today, fecha_ingreso__gt = diasG).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingGreen.values_list('pk', flat=True)))
                    else:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('-poliza__contractor__full_name')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = today, fecha_ingreso__gt = diasG).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingGreen.values_list('pk', flat=True)))

                elif order == 3:
                    if asc == 1:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('poliza__aseguradora__alias')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = today, fecha_ingreso__gt = diasG).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingGreen.values_list('pk', flat=True)))
                    else:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('-poliza__aseguradora__alias')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = today, fecha_ingreso__gt = diasG).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingGreen.values_list('pk', flat=True)))

                elif order == 4:
                    if asc == 1:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('poliza__poliza_number')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = today, fecha_ingreso__gt = diasG).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingGreen.values_list('pk', flat=True)))
                    else:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('-poliza__poliza_number')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = today, fecha_ingreso__gt = diasG).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingGreen.values_list('pk', flat=True)))

                elif order == 5:
                    if asc == 1:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('numero_siniestro')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = today, fecha_ingreso__gt = diasG).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingGreen.values_list('pk', flat=True)))
                    else:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('-numero_siniestro')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = today, fecha_ingreso__gt = diasG).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingGreen.values_list('pk', flat=True)))

                elif order == 6:
                    if asc == 1:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('poliza__subramo__subramo_name')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = today, fecha_ingreso__gt = diasG).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingGreen.values_list('pk', flat=True)))
                    else:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('-poliza__subramo__subramo_name')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = today, fecha_ingreso__gt = diasG).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingGreen.values_list('pk', flat=True)))

                elif order == 7:
                    if asc == 1:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('fecha_siniestro')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = today, fecha_ingreso__gt = diasG).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingGreen.values_list('pk', flat=True)))
                    else:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('-fecha_siniestro')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = today, fecha_ingreso__gt = diasG).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingGreen.values_list('pk', flat=True)))

                elif order == 9:
                    if asc == 1:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('status')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = today, fecha_ingreso__gt = diasG).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingGreen.values_list('pk', flat=True)))
                    else:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('-status')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = today, fecha_ingreso__gt = diasG).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingGreen.values_list('pk', flat=True)))
                else:
                    sinisters = pendingGreen         
            elif tipo == 2:
                subType = "Fuera de tiempo"  

                if order == 1:
                    if asc == 1:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('aux_affected')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasG, fecha_ingreso__gt = diasY).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingYellow.values_list('pk', flat=True)))
                    else:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('-aux_affected')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasG, fecha_ingreso__gt = diasY).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingYellow.values_list('pk', flat=True)))

                elif order == 2:
                    if asc == 1:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('poliza__contractor__full_name')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasG, fecha_ingreso__gt = diasY).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingYellow.values_list('pk', flat=True)))
                    else:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('-poliza__contractor__full_name')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasG, fecha_ingreso__gt = diasY).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingYellow.values_list('pk', flat=True)))

                elif order == 3:
                    if asc == 1:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('poliza__aseguradora__alias')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasG, fecha_ingreso__gt = diasY).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingYellow.values_list('pk', flat=True)))
                    else:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('-poliza__aseguradora__alias')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasG, fecha_ingreso__gt = diasY).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingYellow.values_list('pk', flat=True)))

                elif order == 4:
                    if asc == 1:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('poliza__poliza_number')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasG, fecha_ingreso__gt = diasY).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingYellow.values_list('pk', flat=True)))
                    else:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('-poliza__poliza_number')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasG, fecha_ingreso__gt = diasY).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingYellow.values_list('pk', flat=True)))

                elif order == 5:
                    if asc == 1:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('numero_siniestro')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasG, fecha_ingreso__gt = diasY).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingYellow.values_list('pk', flat=True)))
                    else:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('-numero_siniestro')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasG, fecha_ingreso__gt = diasY).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingYellow.values_list('pk', flat=True)))

                elif order == 6:
                    if asc == 1:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('poliza__subramo__subramo_name')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasG, fecha_ingreso__gt = diasY).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingYellow.values_list('pk', flat=True)))
                    else:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('-poliza__subramo__subramo_name')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasG, fecha_ingreso__gt = diasY).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingYellow.values_list('pk', flat=True)))

                elif order == 7:
                    if asc == 1:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('fecha_siniestro')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasG, fecha_ingreso__gt = diasY).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingYellow.values_list('pk', flat=True)))
                    else:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('-fecha_siniestro')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasG, fecha_ingreso__gt = diasY).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingYellow.values_list('pk', flat=True)))

                elif order == 9:
                    if asc == 1:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('status')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasG, fecha_ingreso__gt = diasY).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingYellow.values_list('pk', flat=True)))
                    else:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('-status')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasG, fecha_ingreso__gt = diasY).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingYellow.values_list('pk', flat=True)))
                else:
                    sinisters = pendingYellow
            elif tipo == 3:
                subType = "Con atraso importante"  
                if order == 1:
                    if asc == 1:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('aux_affected')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasY, fecha_ingreso__gt = diasO).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingOrange.values_list('pk', flat=True)))
                    else:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('-aux_affected')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasY, fecha_ingreso__gt = diasO).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingOrange.values_list('pk', flat=True)))

                elif order == 2:
                    if asc == 1:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('poliza__contractor__full_name')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasY, fecha_ingreso__gt = diasO).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingOrange.values_list('pk', flat=True)))
                    else:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('-poliza__contractor__full_name')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasY, fecha_ingreso__gt = diasO).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingOrange.values_list('pk', flat=True)))

                elif order == 3:
                    if asc == 1:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('poliza__aseguradora__alias')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasY, fecha_ingreso__gt = diasO).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingOrange.values_list('pk', flat=True)))
                    else:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('-poliza__aseguradora__alias')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasY, fecha_ingreso__gt = diasO).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingOrange.values_list('pk', flat=True)))

                elif order == 4:
                    if asc == 1:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('poliza__poliza_number')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasY, fecha_ingreso__gt = diasO).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingOrange.values_list('pk', flat=True)))
                    else:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('-poliza__poliza_number')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasY, fecha_ingreso__gt = diasO).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingOrange.values_list('pk', flat=True)))

                elif order == 5:
                    if asc == 1:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('numero_siniestro')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasY, fecha_ingreso__gt = diasO).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingOrange.values_list('pk', flat=True)))
                    else:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('-numero_siniestro')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasY, fecha_ingreso__gt = diasO).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingOrange.values_list('pk', flat=True)))

                elif order == 6:
                    if asc == 1:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('poliza__subramo__subramo_name')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasY, fecha_ingreso__gt = diasO).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingOrange.values_list('pk', flat=True)))
                    else:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('-poliza__subramo__subramo_name')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasY, fecha_ingreso__gt = diasO).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingOrange.values_list('pk', flat=True)))

                elif order == 7:
                    if asc == 1:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('fecha_siniestro')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasY, fecha_ingreso__gt = diasO).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingOrange.values_list('pk', flat=True)))
                    else:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('-fecha_siniestro')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasY, fecha_ingreso__gt = diasO).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingOrange.values_list('pk', flat=True)))

                elif order == 9:
                    if asc == 1:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('status')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasY, fecha_ingreso__gt = diasO).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingOrange.values_list('pk', flat=True)))
                    else:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('-status')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasY, fecha_ingreso__gt = diasO).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingOrange.values_list('pk', flat=True)))
                else:
                    sinisters = pendingOrange
            elif tipo == 4:
                subType = "Atención urgente"
                if order == 1:
                    if asc == 1:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('aux_affected')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasO).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingRed.values_list('pk', flat=True)))
                    else:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('-aux_affected')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasO).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingRed.values_list('pk', flat=True)))

                elif order == 2:
                    if asc == 1:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('poliza__contractor__full_name')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasO).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingRed.values_list('pk', flat=True)))
                    else:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('-poliza__contractor__full_name')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasO).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingRed.values_list('pk', flat=True)))

                elif order == 3:
                    if asc == 1:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('poliza__aseguradora__alias')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasO).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingRed.values_list('pk', flat=True)))
                    else:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('-poliza__aseguradora__alias')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasO).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingRed.values_list('pk', flat=True)))

                elif order == 4:
                    if asc == 1:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('poliza__poliza_number')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasO).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingRed.values_list('pk', flat=True)))
                    else:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('-poliza__poliza_number')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasO).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingRed.values_list('pk', flat=True)))

                elif order == 5:
                    if asc == 1:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('numero_siniestro')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasO).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingRed.values_list('pk', flat=True)))
                    else:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('-numero_siniestro')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasO).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingRed.values_list('pk', flat=True)))

                elif order == 6:
                    if asc == 1:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('poliza__subramo__subramo_name')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasO).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingRed.values_list('pk', flat=True)))
                    else:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('-poliza__subramo__subramo_name')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasO).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingRed.values_list('pk', flat=True)))

                elif order == 7:
                    if asc == 1:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('fecha_siniestro')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasO).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingRed.values_list('pk', flat=True)))
                    else:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('-fecha_siniestro')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasO).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingRed.values_list('pk', flat=True)))

                elif order == 9:
                    if asc == 1:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('status')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasO).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingRed.values_list('pk', flat=True)))
                    else:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('-status')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasO).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingRed.values_list('pk', flat=True)))
                else:
                    sinisters = sinisters
            else:
                sinisters = total_
                # sinisters = siniestros
                subType = "Todos"
        except Exception as e:
            if tipo == 'green':
                subType = "En tiempo"
                if order == 1:
                    if asc == 1:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('aux_affected')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = today, fecha_ingreso__gt = diasG).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingGreen.values_list('pk', flat=True)))
                    else:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('-aux_affected')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = today, fecha_ingreso__gt = diasG).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingGreen.values_list('pk', flat=True)))

                elif order == 2:
                    if asc == 1:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('poliza__contractor__full_name')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = today, fecha_ingreso__gt = diasG).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingGreen.values_list('pk', flat=True)))
                    else:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('-poliza__contractor__full_name')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = today, fecha_ingreso__gt = diasG).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingGreen.values_list('pk', flat=True)))

                elif order == 3:
                    if asc == 1:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('poliza__aseguradora__alias')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = today, fecha_ingreso__gt = diasG).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingGreen.values_list('pk', flat=True)))
                    else:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('-poliza__aseguradora__alias')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = today, fecha_ingreso__gt = diasG).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingGreen.values_list('pk', flat=True)))

                elif order == 4:
                    if asc == 1:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('poliza__poliza_number')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = today, fecha_ingreso__gt = diasG).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingGreen.values_list('pk', flat=True)))
                    else:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('-poliza__poliza_number')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = today, fecha_ingreso__gt = diasG).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingGreen.values_list('pk', flat=True)))

                elif order == 5:
                    if asc == 1:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('numero_siniestro')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = today, fecha_ingreso__gt = diasG).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingGreen.values_list('pk', flat=True)))
                    else:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('-numero_siniestro')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = today, fecha_ingreso__gt = diasG).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingGreen.values_list('pk', flat=True)))

                elif order == 6:
                    if asc == 1:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('poliza__subramo__subramo_name')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = today, fecha_ingreso__gt = diasG).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingGreen.values_list('pk', flat=True)))
                    else:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('-poliza__subramo__subramo_name')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = today, fecha_ingreso__gt = diasG).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingGreen.values_list('pk', flat=True)))

                elif order == 7:
                    if asc == 1:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('fecha_siniestro')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = today, fecha_ingreso__gt = diasG).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingGreen.values_list('pk', flat=True)))
                    else:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('-fecha_siniestro')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = today, fecha_ingreso__gt = diasG).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingGreen.values_list('pk', flat=True)))

                elif order == 9:
                    if asc == 1:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('status')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = today, fecha_ingreso__gt = diasG).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingGreen.values_list('pk', flat=True)))
                    else:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('-status')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = today, fecha_ingreso__gt = diasG).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingGreen.values_list('pk', flat=True)))
                else:
                    sinisters = pendingGreen         
            elif tipo == 'yellow':
                subType = "Fuera de tiempo"  

                if order == 1:
                    if asc == 1:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('aux_affected')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasG, fecha_ingreso__gt = diasY).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingYellow.values_list('pk', flat=True)))
                    else:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('-aux_affected')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasG, fecha_ingreso__gt = diasY).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingYellow.values_list('pk', flat=True)))

                elif order == 2:
                    if asc == 1:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('poliza__contractor__full_name')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasG, fecha_ingreso__gt = diasY).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingYellow.values_list('pk', flat=True)))
                    else:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('-poliza__contractor__full_name')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasG, fecha_ingreso__gt = diasY).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingYellow.values_list('pk', flat=True)))

                elif order == 3:
                    if asc == 1:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('poliza__aseguradora__alias')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasG, fecha_ingreso__gt = diasY).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingYellow.values_list('pk', flat=True)))
                    else:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('-poliza__aseguradora__alias')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasG, fecha_ingreso__gt = diasY).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingYellow.values_list('pk', flat=True)))

                elif order == 4:
                    if asc == 1:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('poliza__poliza_number')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasG, fecha_ingreso__gt = diasY).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingYellow.values_list('pk', flat=True)))
                    else:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('-poliza__poliza_number')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasG, fecha_ingreso__gt = diasY).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingYellow.values_list('pk', flat=True)))

                elif order == 5:
                    if asc == 1:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('numero_siniestro')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasG, fecha_ingreso__gt = diasY).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingYellow.values_list('pk', flat=True)))
                    else:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('-numero_siniestro')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasG, fecha_ingreso__gt = diasY).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingYellow.values_list('pk', flat=True)))

                elif order == 6:
                    if asc == 1:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('poliza__subramo__subramo_name')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasG, fecha_ingreso__gt = diasY).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingYellow.values_list('pk', flat=True)))
                    else:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('-poliza__subramo__subramo_name')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasG, fecha_ingreso__gt = diasY).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingYellow.values_list('pk', flat=True)))

                elif order == 7:
                    if asc == 1:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('fecha_siniestro')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasG, fecha_ingreso__gt = diasY).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingYellow.values_list('pk', flat=True)))
                    else:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('-fecha_siniestro')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasG, fecha_ingreso__gt = diasY).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingYellow.values_list('pk', flat=True)))

                elif order == 9:
                    if asc == 1:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('status')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasG, fecha_ingreso__gt = diasY).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingYellow.values_list('pk', flat=True)))
                    else:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('-status')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasG, fecha_ingreso__gt = diasY).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingYellow.values_list('pk', flat=True)))
                else:
                    sinisters = pendingYellow
            elif tipo == 'orange':
                subType = "Con atraso importante"  
                if order == 1:
                    if asc == 1:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('aux_affected')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasY, fecha_ingreso__gt = diasO).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingOrange.values_list('pk', flat=True)))
                    else:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('-aux_affected')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasY, fecha_ingreso__gt = diasO).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingOrange.values_list('pk', flat=True)))

                elif order == 2:
                    if asc == 1:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('poliza__contractor__full_name')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasY, fecha_ingreso__gt = diasO).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingOrange.values_list('pk', flat=True)))
                    else:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('-poliza__contractor__full_name')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasY, fecha_ingreso__gt = diasO).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingOrange.values_list('pk', flat=True)))

                elif order == 3:
                    if asc == 1:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('poliza__aseguradora__alias')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasY, fecha_ingreso__gt = diasO).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingOrange.values_list('pk', flat=True)))
                    else:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('-poliza__aseguradora__alias')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasY, fecha_ingreso__gt = diasO).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingOrange.values_list('pk', flat=True)))

                elif order == 4:
                    if asc == 1:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('poliza__poliza_number')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasY, fecha_ingreso__gt = diasO).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingOrange.values_list('pk', flat=True)))
                    else:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('-poliza__poliza_number')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasY, fecha_ingreso__gt = diasO).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingOrange.values_list('pk', flat=True)))

                elif order == 5:
                    if asc == 1:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('numero_siniestro')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasY, fecha_ingreso__gt = diasO).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingOrange.values_list('pk', flat=True)))
                    else:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('-numero_siniestro')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasY, fecha_ingreso__gt = diasO).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingOrange.values_list('pk', flat=True)))

                elif order == 6:
                    if asc == 1:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('poliza__subramo__subramo_name')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasY, fecha_ingreso__gt = diasO).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingOrange.values_list('pk', flat=True)))
                    else:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('-poliza__subramo__subramo_name')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasY, fecha_ingreso__gt = diasO).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingOrange.values_list('pk', flat=True)))

                elif order == 7:
                    if asc == 1:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('fecha_siniestro')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasY, fecha_ingreso__gt = diasO).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingOrange.values_list('pk', flat=True)))
                    else:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('-fecha_siniestro')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasY, fecha_ingreso__gt = diasO).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingOrange.values_list('pk', flat=True)))

                elif order == 9:
                    if asc == 1:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('status')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasY, fecha_ingreso__gt = diasO).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingOrange.values_list('pk', flat=True)))
                    else:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('-status')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasY, fecha_ingreso__gt = diasO).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingOrange.values_list('pk', flat=True)))
                else:
                    sinisters = pendingOrange
            elif tipo == 'red':
                subType = "Atención urgente" 
                if order == 1:
                    if asc == 1:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('aux_affected')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasO).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingRed.values_list('pk', flat=True)))
                    else:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('-aux_affected')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasO).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingRed.values_list('pk', flat=True)))

                elif order == 2:
                    if asc == 1:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('poliza__contractor__full_name')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasO).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingRed.values_list('pk', flat=True)))
                    else:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('-poliza__contractor__full_name')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasO).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingRed.values_list('pk', flat=True)))

                elif order == 3:
                    if asc == 1:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('poliza__aseguradora__alias')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasO).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingRed.values_list('pk', flat=True)))
                    else:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('-poliza__aseguradora__alias')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasO).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingRed.values_list('pk', flat=True)))

                elif order == 4:
                    if asc == 1:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('poliza__poliza_number')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasO).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingRed.values_list('pk', flat=True)))
                    else:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('-poliza__poliza_number')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasO).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingRed.values_list('pk', flat=True)))

                elif order == 5:
                    if asc == 1:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('numero_siniestro')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasO).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingRed.values_list('pk', flat=True)))
                    else:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('-numero_siniestro')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasO).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingRed.values_list('pk', flat=True)))

                elif order == 6:
                    if asc == 1:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('poliza__subramo__subramo_name')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasO).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingRed.values_list('pk', flat=True)))
                    else:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('-poliza__subramo__subramo_name')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasO).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingRed.values_list('pk', flat=True)))

                elif order == 7:
                    if asc == 1:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('fecha_siniestro')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasO).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingRed.values_list('pk', flat=True)))
                    else:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('-fecha_siniestro')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasO).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingRed.values_list('pk', flat=True)))

                elif order == 9:
                    if asc == 1:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('status')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasO).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingRed.values_list('pk', flat=True)))
                    else:
                        siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('-status')
                        # sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasO).exclude(status__in = list([3,4,5,7,8]))
                        sinisters = siniestros.filter(pk__in = list(pendingRed.values_list('pk', flat=True)))
                else:
                    sinisters = sinisters
            else:
                sinisters = total_
                # sinisters = siniestros
                subType = "Todos"
        sinisters = sinisters.filter(poliza__in = list(polizas))
    except Exception as e:
        try:
            config_chart = Graphics.objects.get(org_name=request.GET.get('org'), type_graphic = 4)
            days_green = config_chart.green
            days_yellow = config_chart.yellow
            days_orange = config_chart.orange
            days_red = config_chart.red
        except:
            config_chart = None
            days_green = 6
            days_yellow = 10
            days_orange = 14
            days_red = 1000

        today = datetime.today()
        orange_days = timedelta(days = days_orange)
        yellow_days = timedelta(days = days_yellow)
        green_days = timedelta(days = days_green)

        diasO = today - orange_days
        diasY = today - yellow_days
        diasG = today - green_days

        polizas = Polizas.objects.filter(document_type__in = [1,3,7,8,6,12], org_name=request.GET.get('org'))

        # ----------
        subramos = UserInfo.objects.filter(user = request.user)
        if subramos.exists() and subramos.first() and subramos.first().subramos_dashboard:
            subramos = subramos.first().subramos_dashboard        
            siniestros = siniestros.filter(poliza__subramo__subramo_code__in = subramos)
        # https://miurabox.atlassian.net/browse/DES-680
        tipopoliza=UserInfo.objects.filter(user = request.user)
        if tipopoliza.exists() and tipopoliza.first() and tipopoliza.first().tipopoliza_dashboard:
            tipopoliza_list = tipopoliza.first().tipopoliza_dashboard  
            if 3 in tipopoliza_list: #si esta las pólizas de grupo
                tipopoliza_list.extend([4, 6])  # agregar los de subgrupo y certificados
            if 7 in tipopoliza_list: #si fianza en los filtros
                tipopoliza_list.extend([8])  # agregar las fianzas colectivas
            if 11 in tipopoliza_list: #si colectiva en los filtros
                tipopoliza_list.extend([12])  # agregar las pólizas de colectividad
            if not 0 in tipopoliza_list:  
                siniestros = siniestros.filter(poliza__document_type__in = tipopoliza_list)
        # -------------
        pendingGreen = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = today, fecha_ingreso__gt = diasG).exclude(status__in = list([3,4,5,7,8]))
        pendingYellow = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasG, fecha_ingreso__gt = diasY).exclude(status__in = list([3,4,5,7,8]))
        pendingOrange = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasY, fecha_ingreso__gt = diasO).exclude(status__in = list([3,4,5,7,8]))
        pendingRed = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasO).exclude(status__in = list([3,4,5,7,8]))
        
        todos = siniestros.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8]))
        # total_ = (pendingGreen) + (pendingYellow) + (pendingOrange) + (pendingRed)
        total_ = Siniestros.objects.filter((Q(pk__in=(pendingRed)) | Q(pk__in=(pendingGreen))) | Q(pk__in=(pendingOrange)) | Q(pk__in=(pendingYellow)))
        try:
            dataToFilter = getDataForPerfilRestricted(request, request.GET.get('org'))
        except Exception as er:
            dataToFilter = {}
        if dataToFilter:
            # Contratantes***
            polizas_ = Polizas.objects.filter(document_type__in =[1,3,7,8,6,12], org_name=request.GET.get('org'))
            polizasToF = Polizas.objects.filter(document_type__in = [1,3,7,8], org_name=request.GET.get('org'))
            if dataToFilter['ccpr']:
                polizasToF = polizasToF.filter(contractor__in = list(dataToFilter['ccpr']))
            if dataToFilter['cgpr']:
                polizasToF = polizasToF.filter(contractor__group__in = list(dataToFilter['cgpr']))
            if dataToFilter['ccepr']:
                polizasToF = polizasToF.filter(contractor__cellule__in = list(dataToFilter['ccepr']))
            if dataToFilter['crpr']:
                polizasToF = polizasToF.filter(contractor__vendor__in = list(dataToFilter['crpr']))
            if dataToFilter['cspr']:
                polizasToF = polizasToF.filter(contractor__sucursal__in = list(dataToFilter['cspr']))
            # Pólizas ****
            if dataToFilter['pppr']:
                polizasToF = polizasToF.filter(pk__in = list(dataToFilter['pppr']))
            if dataToFilter['pgpr']:
                polizasToF = polizasToF.filter(contractor__group__in = list(dataToFilter['pgpr']))
            if dataToFilter['pcepr']:
                polizasToF = polizasToF.filter(celula__in = list(dataToFilter['pcepr']))
            if dataToFilter['prpr']:
                polizasToF = polizasToF.filter(ref_policy__referenciador__in = list(dataToFilter['prpr']))
            if dataToFilter['pspr']:
                polizasToF = polizasToF.filter(sucursal__in = list(dataToFilter['pspr']))
            if dataToFilter['papr']:
                polizasToF = polizasToF.filter(groupinglevel__in = list(dataToFilter['papr']))
            if dataToFilter['pcapr']:
                polizasToF = polizasToF.filter(clave__in = list(dataToFilter['pcapr']))
            if dataToFilter['psrpr']:
                polizasToF = polizasToF.filter(subramo__subramo_code__in = list(dataToFilter['psrpr']))
            if dataToFilter['paspr']:
                polizasToF = polizasToF.filter(aseguradora__in = list(dataToFilter['paspr']))
            if dataToFilter['pstpr']:
                polizasToF = polizasToF.filter(status__in = list(dataToFilter['pstpr']))
            
            polizasCT = polizas_.filter(document_type = 12, parent__in = list(polizasToF), org_name=request.GET.get('org'))
            polizasGT = polizas_.filter(document_type = 6, parent__parent__parent__in = list(polizasToF), org_name=request.GET.get('org'))
            polizasFin = list(polizasToF.values_list('pk', flat = True)) + list(polizasCT.values_list('pk', flat = True)) + list(polizasGT.values_list('pk', flat = True))
            polizas = polizasFin

    try:
        tipo = int(tipo)
        if tipo == 1:
            sinisters = pendingGreen
            subType = "En tiempo"
        elif tipo == 2: 
            sinisters = pendingYellow
            subType = "Fuera de tiempo"  
        elif tipo == 3:
            sinisters = pendingOrange
            subType = "Con atraso importante"  
        elif tipo == 4:
            sinisters = pendingRed
            subType = "Atención urgente" 
        else:
            # sinisters = todos
            sinisters = total_
            subType = "Todos"
    except Exception as e:
        print('errr',e)
        if tipo == 'green':
            subType = "En tiempo"
            if order == 1:
                if asc == 1:
                    siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('aux_affected')
                    sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = today, fecha_ingreso__gt = diasG).exclude(status__in = list([3,4,5,7,8]))
                else:
                    siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('-aux_affected')
                    sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = today, fecha_ingreso__gt = diasG).exclude(status__in = list([3,4,5,7,8]))

            elif order == 2:
                if asc == 1:
                    siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('poliza__contractor__full_name')
                    sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = today, fecha_ingreso__gt = diasG).exclude(status__in = list([3,4,5,7,8]))
                else:
                    siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('-poliza__contractor__full_name')
                    sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = today, fecha_ingreso__gt = diasG).exclude(status__in = list([3,4,5,7,8]))

            elif order == 3:
                if asc == 1:
                    siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('poliza__aseguradora__alias')
                    sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = today, fecha_ingreso__gt = diasG).exclude(status__in = list([3,4,5,7,8]))
                else:
                    siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('-poliza__aseguradora__alias')
                    sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = today, fecha_ingreso__gt = diasG).exclude(status__in = list([3,4,5,7,8]))

            elif order == 4:
                if asc == 1:
                    siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('poliza__poliza_number')
                    sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = today, fecha_ingreso__gt = diasG).exclude(status__in = list([3,4,5,7,8]))
                else:
                    siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('-poliza__poliza_number')
                    sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = today, fecha_ingreso__gt = diasG).exclude(status__in = list([3,4,5,7,8]))

            elif order == 5:
                if asc == 1:
                    siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('numero_siniestro')
                    sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = today, fecha_ingreso__gt = diasG).exclude(status__in = list([3,4,5,7,8]))
                else:
                    siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('-numero_siniestro')
                    sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = today, fecha_ingreso__gt = diasG).exclude(status__in = list([3,4,5,7,8]))

            elif order == 6:
                if asc == 1:
                    siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('poliza__subramo__subramo_name')
                    sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = today, fecha_ingreso__gt = diasG).exclude(status__in = list([3,4,5,7,8]))
                else:
                    siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('-poliza__subramo__subramo_name')
                    sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = today, fecha_ingreso__gt = diasG).exclude(status__in = list([3,4,5,7,8]))

            elif order == 7:
                if asc == 1:
                    siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('fecha_siniestro')
                    sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = today, fecha_ingreso__gt = diasG).exclude(status__in = list([3,4,5,7,8]))
                else:
                    siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('-fecha_siniestro')
                    sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = today, fecha_ingreso__gt = diasG).exclude(status__in = list([3,4,5,7,8]))

            elif order == 9:
                if asc == 1:
                    siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('status')
                    sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = today, fecha_ingreso__gt = diasG).exclude(status__in = list([3,4,5,7,8]))
                else:
                    siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('-status')
                    sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = today, fecha_ingreso__gt = diasG).exclude(status__in = list([3,4,5,7,8]))
            else:
                sinisters = pendingGreen         
        elif tipo == 'yellow':
            subType = "Fuera de tiempo"  

            if order == 1:
                if asc == 1:
                    siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('aux_affected')
                    sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasG, fecha_ingreso__gt = diasY).exclude(status__in = list([3,4,5,7,8]))
                else:
                    siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('-aux_affected')
                    sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasG, fecha_ingreso__gt = diasY).exclude(status__in = list([3,4,5,7,8]))

            elif order == 2:
                if asc == 1:
                    siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('poliza__contractor__full_name')
                    sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasG, fecha_ingreso__gt = diasY).exclude(status__in = list([3,4,5,7,8]))
                else:
                    siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('-poliza__contractor__full_name')
                    sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasG, fecha_ingreso__gt = diasY).exclude(status__in = list([3,4,5,7,8]))

            elif order == 3:
                if asc == 1:
                    siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('poliza__aseguradora__alias')
                    sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasG, fecha_ingreso__gt = diasY).exclude(status__in = list([3,4,5,7,8]))
                else:
                    siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('-poliza__aseguradora__alias')
                    sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasG, fecha_ingreso__gt = diasY).exclude(status__in = list([3,4,5,7,8]))

            elif order == 4:
                if asc == 1:
                    siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('poliza__poliza_number')
                    sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasG, fecha_ingreso__gt = diasY).exclude(status__in = list([3,4,5,7,8]))
                else:
                    siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('-poliza__poliza_number')
                    sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasG, fecha_ingreso__gt = diasY).exclude(status__in = list([3,4,5,7,8]))

            elif order == 5:
                if asc == 1:
                    siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('numero_siniestro')
                    sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasG, fecha_ingreso__gt = diasY).exclude(status__in = list([3,4,5,7,8]))
                else:
                    siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('-numero_siniestro')
                    sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasG, fecha_ingreso__gt = diasY).exclude(status__in = list([3,4,5,7,8]))

            elif order == 6:
                if asc == 1:
                    siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('poliza__subramo__subramo_name')
                    sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasG, fecha_ingreso__gt = diasY).exclude(status__in = list([3,4,5,7,8]))
                else:
                    siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('-poliza__subramo__subramo_name')
                    sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasG, fecha_ingreso__gt = diasY).exclude(status__in = list([3,4,5,7,8]))

            elif order == 7:
                if asc == 1:
                    siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('fecha_siniestro')
                    sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasG, fecha_ingreso__gt = diasY).exclude(status__in = list([3,4,5,7,8]))
                else:
                    siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('-fecha_siniestro')
                    sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasG, fecha_ingreso__gt = diasY).exclude(status__in = list([3,4,5,7,8]))

            elif order == 9:
                if asc == 1:
                    siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('status')
                    sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasG, fecha_ingreso__gt = diasY).exclude(status__in = list([3,4,5,7,8]))
                else:
                    siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('-status')
                    sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasG, fecha_ingreso__gt = diasY).exclude(status__in = list([3,4,5,7,8]))
            else:
                sinisters = pendingYellow
        elif tipo == 'orange':
            subType = "Con atraso importante"  
            if order == 1:
                if asc == 1:
                    siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('aux_affected')
                    sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasY, fecha_ingreso__gt = diasO).exclude(status__in = list([3,4,5,7,8]))
                else:
                    siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('-aux_affected')
                    sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasY, fecha_ingreso__gt = diasO).exclude(status__in = list([3,4,5,7,8]))

            elif order == 2:
                if asc == 1:
                    siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('poliza__contractor__full_name')
                    sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasY, fecha_ingreso__gt = diasO).exclude(status__in = list([3,4,5,7,8]))
                else:
                    siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('-poliza__contractor__full_name')
                    sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasY, fecha_ingreso__gt = diasO).exclude(status__in = list([3,4,5,7,8]))

            elif order == 3:
                if asc == 1:
                    siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('poliza__aseguradora__alias')
                    sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasY, fecha_ingreso__gt = diasO).exclude(status__in = list([3,4,5,7,8]))
                else:
                    siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('-poliza__aseguradora__alias')
                    sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasY, fecha_ingreso__gt = diasO).exclude(status__in = list([3,4,5,7,8]))

            elif order == 4:
                if asc == 1:
                    siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('poliza__poliza_number')
                    sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasY, fecha_ingreso__gt = diasO).exclude(status__in = list([3,4,5,7,8]))
                else:
                    siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('-poliza__poliza_number')
                    sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasY, fecha_ingreso__gt = diasO).exclude(status__in = list([3,4,5,7,8]))

            elif order == 5:
                if asc == 1:
                    siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('numero_siniestro')
                    sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasY, fecha_ingreso__gt = diasO).exclude(status__in = list([3,4,5,7,8]))
                else:
                    siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('-numero_siniestro')
                    sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasY, fecha_ingreso__gt = diasO).exclude(status__in = list([3,4,5,7,8]))

            elif order == 6:
                if asc == 1:
                    siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('poliza__subramo__subramo_name')
                    sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasY, fecha_ingreso__gt = diasO).exclude(status__in = list([3,4,5,7,8]))
                else:
                    siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('-poliza__subramo__subramo_name')
                    sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasY, fecha_ingreso__gt = diasO).exclude(status__in = list([3,4,5,7,8]))

            elif order == 7:
                if asc == 1:
                    siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('fecha_siniestro')
                    sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasY, fecha_ingreso__gt = diasO).exclude(status__in = list([3,4,5,7,8]))
                else:
                    siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('-fecha_siniestro')
                    sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasY, fecha_ingreso__gt = diasO).exclude(status__in = list([3,4,5,7,8]))

            elif order == 9:
                if asc == 1:
                    siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('status')
                    sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasY, fecha_ingreso__gt = diasO).exclude(status__in = list([3,4,5,7,8]))
                else:
                    siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('-status')
                    sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasY, fecha_ingreso__gt = diasO).exclude(status__in = list([3,4,5,7,8]))
            else:
                sinisters = pendingOrange
        elif tipo == 'red':
            subType = "Atención urgente" 
            if order == 1:
                if asc == 1:
                    siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('aux_affected')
                    sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasO).exclude(status__in = list([3,4,5,7,8]))
                else:
                    siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('-aux_affected')
                    sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasO).exclude(status__in = list([3,4,5,7,8]))

            elif order == 2:
                if asc == 1:
                    siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('poliza__contractor__full_name')
                    sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasO).exclude(status__in = list([3,4,5,7,8]))
                else:
                    siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('-poliza__contractor__full_name')
                    sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasO).exclude(status__in = list([3,4,5,7,8]))

            elif order == 3:
                if asc == 1:
                    siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('poliza__aseguradora__alias')
                    sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasO).exclude(status__in = list([3,4,5,7,8]))
                else:
                    siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('-poliza__aseguradora__alias')
                    sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasO).exclude(status__in = list([3,4,5,7,8]))

            elif order == 4:
                if asc == 1:
                    siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('poliza__poliza_number')
                    sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasO).exclude(status__in = list([3,4,5,7,8]))
                else:
                    siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('-poliza__poliza_number')
                    sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasO).exclude(status__in = list([3,4,5,7,8]))

            elif order == 5:
                if asc == 1:
                    siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('numero_siniestro')
                    sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasO).exclude(status__in = list([3,4,5,7,8]))
                else:
                    siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('-numero_siniestro')
                    sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasO).exclude(status__in = list([3,4,5,7,8]))

            elif order == 6:
                if asc == 1:
                    siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('poliza__subramo__subramo_name')
                    sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasO).exclude(status__in = list([3,4,5,7,8]))
                else:
                    siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('-poliza__subramo__subramo_name')
                    sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasO).exclude(status__in = list([3,4,5,7,8]))

            elif order == 7:
                if asc == 1:
                    siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('fecha_siniestro')
                    sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasO).exclude(status__in = list([3,4,5,7,8]))
                else:
                    siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('-fecha_siniestro')
                    sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasO).exclude(status__in = list([3,4,5,7,8]))

            elif order == 9:
                if asc == 1:
                    siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('status')
                    sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasO).exclude(status__in = list([3,4,5,7,8]))
                else:
                    siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8])).order_by('-status')
                    sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasO).exclude(status__in = list([3,4,5,7,8]))
            else:
                siniestros = Siniestros.objects.filter(org_name=request.GET.get('org')).exclude(status__in = list([3,4,5,7,8]))
                sinisters = siniestros.filter(org_name=request.GET.get('org'), fecha_ingreso__lte = diasO).exclude(status__in = list([3,4,5,7,8]))
                # sinisters = sinisters
        else:
            sinisters = total_
            # sinisters = siniestros
            subType = "Todos" 
    sinisters = sinisters.filter(poliza__in = list(polizas), org_name=request.GET.get('org'))
    asegurado_e = []
    antiguedad_e = []
    referenciador_e = []
    responsable_e = []
    collection_e = []
    userpay_e = []
    creadopor_e = []
    clave_e = []
    contract_e = []
    contractemail_e = []
    contractphone_e = []
    contractgrupo_e = []
    subramo_e = []
    grupoo_e = []
    comentario = []
    statusP = []
    totalRec = []
    tipoPago = []
    currency = []
    columns = ['Afectado', 'No Siniestro', 'Folio', 'Estatus', 'No.Póliza', 'Tipo', 'Contratante', 
               'Proveedor', 'Subramo', 'Inicio Póliza', 'Fin Póliza', 'Fecha de creación', 'Creado por']
    info_org = getInfoOrg(request)

    if len(info_org['logo']) != 0:
        archivo_imagen = 'https://miurabox-public.s3.amazonaws.com/cas/' + info_org['logo']
        # archivo_imagen = get_presigned_url("cas/{url}".format(url=info_org['logo']),28800) 
    else:
        archivo_imagen = 'saam.jpg'
    # sinisters = sinisters.order_by('poliza__id','poliza__contractor__full_name','poliza__juridical__j_name')
    # sinisters = sinisters.order_by('poliza__id','poliza__contractor__full_name','poliza__juridical__j_name')
    sinisters = sinisters.order_by('id')
    try:
        tipo_reporte = 'Reporte Siniestros Dashboard ' + str(subType)
    except Exception as ert:
        tipo_reporte = 'Reporte Siniestros Dashboard'
    aseguradora = []
    subram = []

    subramos = UserInfo.objects.filter(user = request.user)
    if subramos.exists() and subramos.first() and subramos.first().subramos_dashboard :
        subramos = subramos.first().subramos_dashboard
    else:
        subramos = list(SubRamos.objects.filter(org_name = request.GET.get('org')).distinct('subramo_code').values_list('subramo_code',flat=True))

    sinisters = sinisters.filter(poliza__subramo__subramo_code__in = subramos)
    # https://miurabox.atlassian.net/browse/DES-680
    tipopoliza=UserInfo.objects.filter(user = request.user)
    if tipopoliza.exists() and tipopoliza.first() and tipopoliza.first().tipopoliza_dashboard:
        tipopoliza_list = tipopoliza.first().tipopoliza_dashboard  
        if 3 in tipopoliza_list: #si esta las pólizas de grupo
            tipopoliza_list.extend([4, 6])  # agregar los de subgrupo y certificados
        if 7 in tipopoliza_list: #si fianza en los filtros
            tipopoliza_list.extend([8])  # agregar las fianzas colectivas
        if 11 in tipopoliza_list: #si colectiva en los filtros
            tipopoliza_list.extend([12])  # agregar las pólizas de colectividad
        if not 0 in tipopoliza_list:  
            sinisters = sinisters.filter(poliza__document_type__in = tipopoliza_list)
    print('leeeeeeeeeeee',len(sinisters),len(siniestros))
    # -------------
    for r in sinisters:
        aseg = ''
        fc = 1
        subr = ''
        totalR = 0
        tipop= ''
        stsP = 1
        antig_e = get_antiguedad(r.fecha_ingreso)
        if r.owner:
            val_owner_e = r.owner.first_name + ' '+ str(r.owner.last_name)
        else:
            val_owner_e = ''
        if r.poliza:
            sramo_e = r.poliza.subramo.subramo_name
            if r.poliza.document_type == 6:
                fc = r.poliza.parent.parent.parent.f_currency
                try:
                    aseg = r.poliza.parent.parent.parent.aseguradora.alias   
                    subr = r.poliza.parent.parent.parent.subramo.subramo_name  
                except Exception as e:
                    aseg = ''      
                    subr = ''       
                try:
                    stsP = checkStatusPolicy(r.poliza.parent.parent.parent.status)
                except Exception as dfd:
                    stsP = ''
                if r.poliza.parent.parent.parent.contractor:
                    contratante_e = ((((((r.poliza.parent.parent.parent.contractor.full_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    contratanteE_e = r.poliza.parent.parent.parent.contractor.email
                    contratanteP_e = r.poliza.parent.parent.parent.contractor.phone_number
                    contratanteG_e = ((((((r.poliza.parent.parent.parent.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')     
                    # contratanteG_e = r.poliza.parent.parent.parent.contractor.group.group_name
                else:
                    contratante_e = ''
                    contratanteE_e = ''
                    contratanteP_e = ''
                    contratanteG_e = ''     
                    # contratanteG_e = r.poliza.parent.parent.parent.juridical.group.group_name

            else:
                try:
                    aseg = r.poliza.aseguradora.alias   
                    fc = r.poliza.f_currency   
                    subr = r.poliza.subramo.subramo_name   
                except Exception as e:
                    aseg = ''  
                    subr = ''
                    fc = 1
                try:
                    stsP = checkStatusPolicy(r.poliza.status)                
                except Exception as gf:
                    stsP = ''
                if r.poliza.contractor:
                    contratante_e =((((((r.poliza.contractor.full_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    contratanteE_e = r.poliza.contractor.email
                    contratanteP_e = r.poliza.contractor.phone_number
                    contratanteG_e = ((((((r.poliza.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')     
                    # contratanteG_e = r.poliza.natural.group.group_name
                else:
                    contratante_e = ''
                    contratanteE_e = ''
                    contratanteP_e = ''
                    contratanteG_e = '' 

            if r.poliza.ramo.ramo_code == 1:
                form = Vida.objects.filter(siniestro = r.id)
                if form:
                    try:
                        tipop = checkPaySinV(int(form[0].tipo_pago))
                    except Exception as df:
                        tipop = ''
                    value_e = form[0].nombre_afectado
                else:
                    form = Life.objects.filter(policy = r.poliza.id)
                    try:
                        if form:
                            value_e = form[0].personal.full_name
                        else:
                            value_e = ''
                    except Exception as rt:
                       value_e = ''
                    
            elif r.poliza.ramo.ramo_code == 2:
                form = Accidentes.objects.filter(siniestro = r.id)
                if form:
                    if form[0].titular:
                        value_e = form[0].titular.full_name
                    elif form[0].dependiente:
                        value_e = form[0].dependiente.full_name
                    elif form[0].affected_full_name:
                        value_e = form[0].affected_full_name
                    elif r.aux_affected:
                        value_e = r.aux_affected
                    else:
                        value_e = ''
                    try:
                        totalR = form[0].total_reclamado
                    except Exception as pd:
                        totalR = 0
                    try:
                        tipop = checkPaySin(int(form[0].tipo_pago))
                    except Exception as df:
                        tipop = ''
                else:
                    form = AccidentsDiseases.objects.filter(policy = r.poliza.id)
                    if form:
                        value_e = form[0].personal.full_name
                    else:
                        value_e = ''
            elif r.poliza.subramo.subramo_code == 9:
                form = AutomobilesDamages.objects.filter(policy = r.poliza.id)
                if form:
                    try:
                        form[0].model = ((((((form[0].model).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        form[0].version = ((((((form[0].version).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    except Exception as ers:
                        form[0].model = form[0].model
                        form[0].version = form[0].version
                    value_e = str(form[0].brand) + '-' + str(form[0].model) + '-' + str(form[0].version)+ '-' + str(form[0].serial)
                elif r.aux_affected:
                    value_e = r.aux_affected
                else:
                    value_e = ''
            elif r.poliza.ramo.ramo_code == 3 and not r.poliza.subramo.subramo_code == 9:
                form = Damages.objects.filter(policy = r.poliza.id)
                if form:
                    value_e = form[0].insured_item
                else:
                    value_e = ''
            else:
                value_e = 'Sin asegurado'
                val_resp_e = 'Sin responsable'
                val_cexe_e = 'Sin ejecutivo'
        if value_e:
            value_e = ((((((value_e).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'') 
        else:
            value_e = value_e
        asegurado_e.append(value_e)
        creadopor_e.append(val_owner_e)
        contract_e.append(contratante_e)
        contractemail_e.append(contratanteE_e)
        contractphone_e.append(contratanteP_e)
        grupoo_e.append(contratanteG_e)
        statusP.append(stsP)
        totalRec.append(totalR)
        tipoPago.append(tipop)
        aseguradora.append(aseg)
        subram.append(subr)
        currency.append(fc)
    obj = {
        # Rec
        'numero_siniestro'   : str(list(sinisters.values_list('numero_siniestro', flat = True))),        
        'status_e'   : str(list(sinisters.values_list('status', flat = True))),
        'fecha_compromiso'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in sinisters.values_list('fecha_compromiso', flat = True) ])) ,            
        'fecha_ingreso'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in sinisters.values_list('fecha', flat = True) ])) ,            
        # 'fecha_ingreso'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in sinisters.values_list('fecha_ingreso', flat = True) ])) ,            
        'fecha_siniestro'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in sinisters.values_list('fecha_siniestro', flat = True) ])) ,            
        'created_at'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in sinisters.values_list('created_at', flat = True) ])) ,            
        'start'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in sinisters.values_list('poliza__start_of_validity', flat = True) ])) ,            
        'end'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in sinisters.values_list('poliza__end_of_validity', flat = True) ])) ,            
        'folio_interno'   : str(list(sinisters.values_list('folio_interno', flat = True) )) ,            
        'folio_compania'   : str(list(sinisters.values_list('folio_compania', flat = True) )) ,            
        'poliza_number'   : str(list(sinisters.values_list('poliza__poliza_number', flat = True) )) ,            
        'document_type'   : str(list(sinisters.values_list('poliza__document_type', flat = True))) ,            
        'aseguradora'   : str(list(aseguradora)) ,            
        'subramo'   : str(list(subram)) ,            
        'afectado'   : str(list(asegurado_e)),
        'creadopor_e'   : str(list(creadopor_e)),       
        'contratact_e'   : str(list(contract_e)),
        'contractemail_e'   : str(list(contractemail_e)),
        'contractphone_e'   : str(list(contractphone_e)),
        'subramo_e'   : str(list(subramo_e)),
        'grupo_e'   : str(list(grupoo_e)),
        'statusP'   : str(list(statusP)),
        'montoR'   : str(list(totalRec)),
        'tipoPago'   : str(list(tipoPago)),
        # Gral
        'tipo_reporte': tipo_reporte,
        'email_org':info_org['email'],
        'phone_org':info_org['phone'],
        'webpage_org':info_org['webpage'],
        'address_org':info_org['address'],
        'urlname_org':info_org['name'],
        }   
    obj['columns'] = str(list(columns))
    obj['imagen'] = archivo_imagen
    obj['lenots'] = len(sinisters)
    obj['registros'] = len(sinisters)
    r = requests.post(settings.SERVICEEXCEL_URL + 'get-siniestrosDashExcel/', obj,
    # headers = {
    # 'Authorization':'Bearer %s'%request.user.user_info.fi_token_refresh,
    # # 'Content-Type':'application/json' 
    # }, 
    stream=True)
    response_data= r.text

    response = HttpResponse(r.content,content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

    return response
# Reporte cotizaciones dash 
@api_view(['POST'])
@permission_classes((IsAuthenticatedV2, IsOrgMemberV2))
def Service_QuotationsExcel(request): 
    queryset = Cotizacion.objects.filter(org_name = request.GET.get('org'))
    try:
        if 'since' in request.data:
            desde =request.data['since']
            hasta =request.data['until']
            try:
                f = "%d/%m/%Y"        
                desde = datetime.strptime(desde , f)
                hasta = datetime.strptime(hasta , f)
            except:
                f = "%m/%d/%Y"        
                desde = datetime.strptime(desde , f)
                hasta = datetime.strptime(hasta , f)  
            queryset = queryset.filter(Q(created_at__gte=desde) & Q(created_at__lte=hasta))
    except:
        pass    
    if 'cadena' in request.data:
        cadena = request.data.get('cadena')
        cotizaciones_filtros = [Q(id__icontains = str(cadena)), 
                                Q(first_name__unaccent__icontains = str(cadena)),
                                Q(last_name__unaccent__icontains = str(cadena)),
                                Q(contractor__full_name__unaccent__icontains = str(cadena)),
                                Q(life__icontains = str(cadena)),
                                Q(accidents__icontains = str(cadena)),
                                Q(auto__icontains = str(cadena)),
                                Q(danios__icontains = str(cadena)),
                            ]
        queryset = queryset.filter(reduce(OR, cotizaciones_filtros))
    if 'status_ok' in request.data:
        if int(request.data['status_ok']) ==0:
            queryset = queryset.filter(status__in=[1,2])
        elif int(request.data['status_ok']) ==4:
            queryset = queryset.filter(status__in=[1,2,3])
        else:
            queryset = queryset.filter(status__in=[request.data['status_ok']])
    try:
        dataToFilter = getDataForPerfilRestricted(request, request.GET.get('org'))
    except Exception as er:
        dataToFilter = {}
    if dataToFilter:
        if dataToFilter['ccpr']:
            queryset = queryset.filter(contractor__in = list(dataToFilter['ccpr']))
        if dataToFilter['cgpr']:
            queryset = queryset.filter(contractor__group__in = list(dataToFilter['cgpr']))
        if dataToFilter['ccepr']:
            queryset = queryset.filter(contractor__cellule__in = list(dataToFilter['ccepr']))
        if dataToFilter['crpr']:
            queryset = queryset.filter(contractor__vendor__in = list(dataToFilter['crpr']))
        if dataToFilter['cspr']:
            queryset = queryset.filter(contractor__sucursal__in = list(dataToFilter['cspr']))
        if dataToFilter['paspr']:
            asegs = asegs.filter(pk__in = list(dataToFilter['paspr']))
            queryset = queryset.filter(pk__in = list(asegs))
    subramos = UserInfo.objects.filter(user = request.user)
    if subramos.exists() and subramos.first() and subramos.first().subramos_cotizaciones :
        subramos_cotizaciones = subramos.first().subramos_cotizaciones
        if subramos_cotizaciones:
            try:
                filtered_queryset = []
                for obj in queryset:
                    try:
                        if obj.subramo and not isinstance(obj.subramo, dict):
                            subramo = json.loads(obj.subramo.replace("'", '"'))
                        else:
                            subramo = obj.subramo
                        if subramo.get("value") in subramos_cotizaciones:
                            filtered_queryset.append(obj)
                    except (json.JSONDecodeError, AttributeError):
                        continue
                queryset=filtered_queryset
            except Exception as f:
                print('fffffffffff',f)
                pass
    
    columns = [
        'No. Folio',
        'Contratante',
        'Email',
        'Teléfono',
        'Ramo',
        'Subramo',
        'Aseguradora(s)',
        'Asegurado',
        'Estatus',
        'Creado por',
        'Primas de Aseguradora',
        'Póliza Asociada',
        'Tipo Póliza'
    ]

    info_org = getInfoOrg(request)

    if len(info_org['logo']) != 0:
        archivo_imagen = 'https://miurabox-public.s3.amazonaws.com/cas/' + info_org['logo']
        # archivo_imagen = get_presigned_url("cas/{url}".format(url=info_org['logo']),28800) 
    else:
        archivo_imagen = 'saam.jpg'

    status = [st.status for st in queryset]
    aseguradoras_emision = []
    try:
        id_ = str(list(queryset.values_list('id', flat=True)))
    except:
        id_ = str([obj.id for obj in filtered_queryset])
    created_at = []

    
    contratact = []
    asegurados = []
    creadopor = []
    contractemail = []
    contractphone = []
    subramos = []
    ramos = []
    resumens = []
    aseguradoras = []
    aseguradoras_primas_final = []
    nuevo_contratante = []
    polizaAsociada=[]
    tipoPoliza=[]
    x=0
    for c in queryset:
        if Polizas.objects.filter(cotizacion_asociada = c.id,org_name=c.org_name).exclude(status=0).exists():
            poliza_lista = Polizas.objects.filter(cotizacion_asociada = c.id,org_name=c.org_name).exclude(status=0)
            id_list = [str(y.poliza_number if y.poliza_number else y.internal_number) for y in poliza_lista]
            i = "-".join(id_list)
            polizaAsociada.append(i)
        else:
            polizaAsociada.append('')
        asegurado = ''
        resumen = ''
        auto=None
        life=None
        accidents = None
        danios = None
        if c.prospecto == 1:
            nuevo_contratante.append("Nuevo")
        else:
            nuevo_contratante.append("Existente")
        created_at.append(c.created_at.strftime("%d/%m/%Y"))
        if c.aseguradora_seleccionada:
            aseguradoras_emision.append(c.aseguradora_seleccionada)
        else:
            aseguradoras_emision.append('')

        asegurado = ''
        resumen=''
        if c.ramo and not isinstance(c.ramo, dict):
            ramo = json.loads(c.ramo.replace('\'','"')) 
        else:
            ramo = c.ramo
        if c.subramo and not isinstance(c.subramo, dict):
            subramo = json.loads(c.subramo.replace('\'','"'))
        else:
            subramo = c.subramo
        if asegurado =='':
            try:
                if c.life and ramo['value'] == 1:
                    try:
                        life = json.loads(c.life.replace('\'', '"'))
                        life = life['aseguradosList']
                        life = [ "%s %s %s"%(asegurado['first_name'],asegurado['last_name'],asegurado['second_last_name']) for asegurado in life]
                        resumen = life[0]['first_name'],life[0]['last_name'],life[0]['second_last_name']
                        asegurado =  ", ".join(life)
                    except Exception as er:
                        life = []
                        life =[]
                        life = []
                        asegurado =  ", ".join(life)
                else:
                    life = None
                    asegurado = ''
            except:
                life = None
                asegurado = ''
        if asegurado =='':
            try:
                if c.accidents and ramo['value'] == 2:
                    accidents = json.loads(c.accidents.replace('\'', '"'))
                    asegurado = "%s %s %s"%(accidents['first_name'], accidents['last_name'], accidents['second_last_name'])
                    resumen = asegurado
            except Exception as rs:
                print('rrrrrrrrrrrr',rs,c.accidents)
                accidents = None
                asegurado = ""

        if asegurado =='':
            try:
                if c.danios and ramo['value'] == 3 and subramo['value'] != 9:
                    danios = json.loads(c.danios.replace('\'', '"'))
                    asegurado = danios['insured_item']
                    resumen=asegurado
            except:
                danios = None
                asegurado = ""
        # try:
        # Ensure ramo and subramo are parsed as dictionaries
        try:
            if isinstance(ramo, str):  # If ramo is a JSON string
                ramo = json.loads(ramo.replace('\'', '"'))
            if isinstance(subramo, str):  # If subramo is a JSON string
                subramo = json.loads(subramo.replace('\'', '"'))
        except json.JSONDecodeError as e:
            print("Error parsing ramo or subramo as JSON:", e)
            ramo = {}
            subramo = {}

        if (ramo and subramo and isinstance(ramo, dict) and isinstance(subramo, dict) and ramo.get('value') == 3 and subramo.get('value') == 9 and isinstance(c.auto, str) and c.auto.strip()):
            if asegurado =='':
                try:
                    # Parse c.auto JSON string
                    auto = json.loads(c.auto.replace('\'', '"'))
                    x = x + 1
                    # Process auto dictionary
                    if isinstance(auto, dict) and 'selectedCar' in auto:
                        try:
                            asegurado = auto['brand']+' '+str(auto['model']) +' '+str(auto['year']) +' '+str(auto['serial'])
                            resumen =auto['brand']+' '+str(auto['model']) +' '+str(auto['year']) +' '+str(auto['serial'])
                        except Exception as e:
                            c=''
                            if auto and 'brand' in auto:
                                c = auto['brand']+' '+str(auto['model']) +' '+str(auto['year']) +' '+str(auto['serial'])
                            asegurado = c
                            resumen = c
                    else:
                        asegurado = ''
                        resumen = ''
                except json.JSONDecodeError as e:
                    auto = None
                    asegurado = ''
                    resumen = ''

        # except Exception as g:
        #     auto = None
        #     asegurado = ''
        #     resumen = ''


        # try:
        #     if ramo['value'] == 3 and subramo['value'] == 9 and c.auto:
        #         try:
        #             auto = json.loads(c.auto.replace('\'', '"'))                    
        #             if isinstance(auto, dict) and 'selectedCar' in auto:
        #                 try:
        #                     asegurado = auto['selectedCar'].get('val', '') 
        #                     resumen = str(auto.get('brand', ''))+'-'+str(auto.get('model', ''))+'-'+str(uto.get('year', ''))
        #                 except Exception as e:
        #                     print("Inner exception:", e)
        #                     asegurado = ''
        #             else:
        #                 asegurado = ''
        #         except Exception as e:
        #             print("Error parsing 'c.auto':", e)
        #             asegurado = ''
        #     else:
        #         auto = None
        #         asegurado = ''
        # except Exception as g:
        #     print('g**********+', g,c.auto,type(c.auto))
        #     auto = None
        #     asegurado = ''

        tipoPoliza.append('Póliza Individual' if c.document_type==1 else 'Póliza de Grupo')
        asegurados.append(asegurado.replace(',',''))
        resumens.append(resumen.replace(',','') if resumen else '')

        contratante = ''
        if c.prospecto == 1:
            contratante = "%s %s %s"%(c.first_name if c.first_name else '', c.last_name if c.last_name else '', c.second_last_name if c.second_last_name else '')
            contractemail.append('')
            contractphone.append('')
        if c.prospecto == 2:
            contratante = c.contractor.full_name
            contractemail.append(c.contractor.email)
            contractphone.append(c.contractor.phone_number)
        contratante = ((((((contratante).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'') 
        contratact.append(contratante)

        if c.owner:
            val_owner_e = c.owner.first_name + ' '+ str(c.owner.last_name)
        else:
            val_owner_e = ''

        creadopor.append(val_owner_e)

        if c.ramo and not isinstance(c.ramo, dict):
            ramo_ = json.loads(c.ramo.replace('\'','"'))
        else:
            ramo_ = c.ramo
        
        try:
            # Check if ramo_ is a dictionary or a JSON string
            if isinstance(ramo_, dict):
                ramos.append(ramo_['value'])
            else:
                ramo_ = json.loads(ramo_)
                ramos.append(ramo_['value'])
        except Exception as e:
            ramos.append('')
            print('fffffffffff',e)
            print('Error:', e)

        if c.subramo and not isinstance(c.subramo, dict):
            subramo_ = json.loads(c.subramo.replace('\'','"'))
        else:
            subramo_ = c.subramo
        # subramos.append(subramo_['value'])
        try:
            if isinstance(subramo_, dict):
                subramos.append(subramo_['value'])
            else:
                subramo_ = json.loads(subramo_)
                subramos.append(subramo_['value'])
        except Exception as e:
            subramos.append('')
            print('er2', e)


        aux = []
        aux_primas = []
        for aseguradora in c.aseguradora:
            aseguradora = aseguradora.replace('\\"','').replace('\\\\','')
            aseguradoras_ = json.loads((json.loads(aseguradora)).replace('\'','"'))
            if aseguradoras_:
                aseguradoras_ = aseguradoras_['alias']
            else:
                aseguradoras_ = ''
            aux.append(aseguradoras_)
            aux_primas.append(aseguradoras_)
        aux = " - ".join(aux)

        aseguradoras.append(aux)
        # print(aux_primas)
        aseguradoras_primas = AseguradorasCotizacionPrimas.objects.filter(
            cotizacion = c,
            checked = True,
            aseguradora__in = list(aux_primas)
        )

        primas = []
        for prima in aseguradoras_primas:
            a = "%s (%s)"%(prima.aseguradora, prima.prima)
            a = ((((((a).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'') 
            primas.append(a)
        primas =  " - ".join(primas)
        aseguradoras_primas_final.append(primas)
    obj = {
        # Rec
        'polizaAsociada':str(list(polizaAsociada)),
        'tipoPoliza':str(list(tipoPoliza)),
        'status'   : str(list(status)),
        'id_'   : id_,
        'nuevo_contratante': str(list(nuevo_contratante)),
        'created_at'   : str(list(created_at)),
        'aseguradoras'   : str(list(aseguradoras)),
        'aseguradoras_primas'   : str(list(aseguradoras_primas_final)),
        'aseguradoras_emision'   : str(list(aseguradoras_emision)),
        'asegurado'   : str(list(asegurados)),
        'creadopor'   : str(list(creadopor)),
        'contratact'   : str(list(contratact)),
        'contractemail'   : str(list(contractemail)),
        'contractphone'   : str(list(contractphone)),
        'subramo'   : str(list(subramos)),
        'ramo'   : str(list(ramos)),
        'resumen'   : str(list(resumens)),
        # Gral
        'tipo_reporte': 'Reporte Cotizaciones',
        'email_org':info_org['email'],
        'phone_org':info_org['phone'],
        'webpage_org':info_org['webpage'],
        'address_org':info_org['address'],
        'urlname_org':info_org['name'],
        }
    obj['columns'] = str(list(columns))
    obj['imagen'] = archivo_imagen
    obj['lenots'] = len(queryset)
    obj['registros'] = len(queryset)
    r = requests.post(settings.SERVICEEXCEL_URL + 'get-quotationsExcel/', obj,
    stream=True)
    response_data= r.text

    response = HttpResponse(r.content,content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

    return response
# Reporte Cerificados listado v2
@api_view(['POST'])
@permission_classes((IsAuthenticatedV2, IsOrgMemberV2))
def bajasLayoutPrimas(request):
    endoso = request.data['endoso']
    certEndosos =Endorsement.objects.get(pk = endoso,org_name=request.GET.get('org'))    
    certificadosBaja = json.loads(certEndosos.change)
    # return len(certificadosBaja)
    info_org = getInfoOrg(request)
    if len(info_org['logo']) != 0:
        archivo_imagen = 'https://miurabox-public.s3.amazonaws.com/cas/' + info_org['logo']
        # archivo_imagen = get_presigned_url("cas/{url}".format(url=info_org['logo']),28800) 
    else:
        archivo_imagen = 'saam.jpg'
    columns = ['ID','CERTIFICADO','NOMBRE','APELLIDO PATERNO','APELLIDO MATERNO',
                'FECHA_BAJA','PRIMA_NETA_NO_DEVENGADA','RPF_NO_DEVENGADA',
                'DERECHO_NO_DEVENGADA','IVA_NO_DEVENGADA','COMISIÓN_NO_DEVENGADA',
                'PRIMA_TOTAL_NO_DEVENGADA']
    ids =[]
    certs =[]
    nombres =[]
    apellidosp =[]
    apellidosm =[]
    fechab =[]
    netand =[]
    rpfnd =[]
    derechond =[]
    ivand =[]
    derechond  =[]
    comisionnd  =[]
    totalnd  =[]
    cporcnd = []
    descnd = []
    tipo =[]
    org_name = request.GET.get('org')
    for r in certificadosBaja:
        if not 'id' in r:
            certificado = Polizas.objects.filter(certificate_number=r['certificate_number'],parent__id = r['parent'],document_type =6)
        else:
            certificado = Polizas.objects.filter(id = r['id'],document_type =6)
        if certificado:
            if certEndosos.policy.ramo.ramo_code ==2:
                form = AccidentsDiseases.objects.filter(policy = certificado[0].id)
                if form: 
                    if 'tipo' in r:
                        if r['tipo'] == 1 or r['tipo'] =='1':
                            tipo.append('Titular')   
                            #titular          
                            ids.append(form[0].personal.id)
                            certs.append(form[0].personal.certificate  if form[0].personal.certificate else certificado[0].certificate_number)
                            nombres.append(form[0].personal.first_name)
                            apellidosp.append(form[0].personal.last_name)
                            apellidosm.append(form[0].personal.second_last_name)
                            fechab.append(form[0].personal.discharge_date.strftime('%d/%m/%Y') if form[0].personal.discharge_date else '')
                            netand.append(float(form[0].personal.p_neta_earned) if form[0].personal.p_neta_earned else 0)
                            rpfnd.append(float(form[0].personal.rpf_earned) if form[0].personal.rpf_earned else 0)
                            derechond.append(float(form[0].personal.derecho_earned) if form[0].personal.derecho_earned else 0)
                            ivand.append(float(form[0].personal.iva_earned) if form[0].personal.iva_earned else 0)
                            comisionnd.append(float(form[0].personal.comision_earned) if form[0].personal.comision_earned else 0)
                            totalnd.append(float(form[0].personal.p_total_earned) if form[0].personal.p_total_earned else 0)
                            cporcnd.append(float(form[0].personal.comision_percent_earned) if form[0].personal.comision_percent_earned else 0)
                            descnd.append(float(form[0].personal.descuento_earned) if form[0].personal.descuento_earned else 0)
                            deps = Relationship.objects.filter(accident = form[0])
                        elif r['tipo'] == 2 or r['tipo'] =='2':
                            deps = Relationship.objects.filter(certificate__iexact = r['certificate_number'], first_name__iexact=r['first_name'],last_name__iexact=r['last_name'],second_last_name__iexact=r['second_last_name'], accident__policy__caratula = str(certEndosos.policy.id))
                            if deps:
                                tipo.append('Dependiente')   
                                #titular         
                                ids.append(deps[0].id)
                                certs.append(deps[0].certificate  if deps[0].certificate else certificado[0].certificate_number)
                                nombres.append(deps[0].first_name)
                                apellidosp.append(deps[0].last_name)
                                apellidosm.append(deps[0].second_last_name)
                                fechab.append(deps[0].discharge_date.strftime('%d/%m/%Y') if deps[0].discharge_date else '')
                                netand.append(float(deps[0].p_neta_earned) if deps[0].p_neta_earned else 0)
                                rpfnd.append(float(deps[0].rpf_earned) if deps[0].rpf_earned else 0)
                                derechond.append(float(deps[0].derecho_earned) if deps[0].derecho_earned else 0)
                                ivand.append(float(deps[0].iva_earned) if deps[0].iva_earned else 0)
                                comisionnd.append(float(deps[0].comision_earned) if deps[0].comision_earned else 0)
                                totalnd.append(float(deps[0].p_total_earned) if deps[0].p_total_earned else 0)
                                cporcnd.append(float(deps[0].comision_percent_earned) if deps[0].comision_percent_earned else 0)
                                descnd.append(float(deps[0].descuento_earned) if deps[0].descuento_earned else 0)
                        else:
                            tipo.append('Titular')   
                            #titular          
                            ids.append(form[0].personal.id)
                            certs.append(form[0].personal.certificate  if form[0].personal.certificate else certificado[0].certificate_number)
                            nombres.append(form[0].personal.first_name)
                            apellidosp.append(form[0].personal.last_name)
                            apellidosm.append(form[0].personal.second_last_name)
                            fechab.append(form[0].personal.discharge_date.strftime('%d/%m/%Y') if form[0].personal.discharge_date else '')
                            netand.append(float(form[0].personal.p_neta_earned) if form[0].personal.p_neta_earned else 0)
                            rpfnd.append(float(form[0].personal.rpf_earned) if form[0].personal.rpf_earned else 0)
                            derechond.append(float(form[0].personal.derecho_earned) if form[0].personal.derecho_earned else 0)
                            ivand.append(float(form[0].personal.iva_earned) if form[0].personal.iva_earned else 0)
                            comisionnd.append(float(form[0].personal.comision_earned) if form[0].personal.comision_earned else 0)
                            totalnd.append(float(form[0].personal.p_total_earned) if form[0].personal.p_total_earned else 0)
                            cporcnd.append(float(form[0].personal.comision_percent_earned) if form[0].personal.comision_percent_earned else 0)
                            descnd.append(float(form[0].personal.descuento_earned) if form[0].personal.descuento_earned else 0)
                            deps = Relationship.objects.filter(accident = form[0])
                    else:
                        tipo.append('Titular')   
                        #titular          
                        ids.append(form[0].personal.id)
                        certs.append(form[0].personal.certificate  if form[0].personal.certificate else certificado[0].certificate_number)
                        nombres.append(form[0].personal.first_name)
                        apellidosp.append(form[0].personal.last_name)
                        apellidosm.append(form[0].personal.second_last_name)
                        fechab.append(form[0].personal.discharge_date.strftime('%d/%m/%Y') if form[0].personal.discharge_date else '')
                        netand.append(float(form[0].personal.p_neta_earned) if form[0].personal.p_neta_earned else 0)
                        rpfnd.append(float(form[0].personal.rpf_earned) if form[0].personal.rpf_earned else 0)
                        derechond.append(float(form[0].personal.derecho_earned) if form[0].personal.derecho_earned else 0)
                        ivand.append(float(form[0].personal.iva_earned) if form[0].personal.iva_earned else 0)
                        comisionnd.append(float(form[0].personal.comision_earned) if form[0].personal.comision_earned else 0)
                        totalnd.append(float(form[0].personal.p_total_earned) if form[0].personal.p_total_earned else 0)
                        cporcnd.append(float(form[0].personal.comision_percent_earned) if form[0].personal.comision_percent_earned else 0)
                        descnd.append(float(form[0].personal.descuento_earned) if form[0].personal.descuento_earned else 0)
                        deps = Relationship.objects.filter(accident = form[0])
                    if 'personal' in r:
                        if 'dependientes' in r['personal']:
                            if len(r['personal']['dependientes']) >0:                                
                                for de in r['personal']['dependientes']:
                                    rl = Relationship.objects.get(id = de['id'])                      
                                    tipo.append('Dependiente')   
                                    #titular          
                                    ids.append(rl.id)
                                    certs.append(certificado[0].certificate_number)
                                    nombres.append(rl.first_name)
                                    apellidosp.append(rl.last_name)
                                    apellidosm.append(rl.second_last_name)
                                    fechab.append(rl.discharge_date.strftime('%d/%m/%Y')  if rl.discharge_date else '')
                                    netand.append(float(rl.p_neta_earned) if rl.p_neta_earned else 0)
                                    rpfnd.append(float(rl.rpf_earned) if rl.rpf_earned else 0)
                                    derechond.append(float(rl.derecho_earned) if rl.derecho_earned else 0)
                                    ivand.append(float(rl.iva_earned) if rl.iva_earned else 0)
                                    comisionnd.append(float(rl.comision_earned) if rl.comision_earned else 0)
                                    totalnd.append(float(rl.p_total_earned) if rl.p_total_earned else 0)
                                    cporcnd.append(float(rl.comision_percent_earned) if rl.comision_percent_earned else 0)
                                    descnd.append(float(rl.descuento_earned) if rl.descuento_earned else 0)
                elif 'personal' in r:
                    form = Personal_Information.objects.get(id = r['personal']['id'])
                    if form: 
                        tipo.append('Titular')   
                        #titular          
                        ids.append(form.id)
                        certs.append(form.certificate  if form.certificate else r['certificate_number'])
                        nombres.append(form.first_name)
                        apellidosp.append(form.last_name)
                        apellidosm.append(form.second_last_name)
                        fechab.append(form.discharge_date.strftime('%d/%m/%Y') if form.discharge_date else '')
                        netand.append(float(form.p_neta_earned) if form.p_neta_earned else 0)
                        rpfnd.append(float(form.rpf_earned) if form.rpf_earned else 0)
                        derechond.append(float(form.derecho_earned) if form.derecho_earned else 0)
                        ivand.append(float(form.iva_earned) if form.iva_earned else 0)
                        comisionnd.append(float(form.comision_earned) if form.comision_earned else 0)
                        totalnd.append(float(form.p_total_earned) if form.p_total_earned else 0)
                        if 'dependientes' in r['personal']:
                            for de in r['personal']['dependientes']:
                                rl = Relationship.objects.get(id = de['id'])                      
                                tipo.append('Dependiente')   
                                #titular          
                                ids.append(rl.id)
                                certs.append(certificado[0].certificate_number)
                                nombres.append(rl.first_name)
                                apellidosp.append(rl.last_name)
                                apellidosm.append(rl.second_last_name)
                                fechab.append(rl.discharge_date.strftime("%d/%m/%Y") if rl.discharge_date else '')
                                netand.append(float(rl.p_neta_earned) if rl.p_neta_earned else 0)
                                rpfnd.append(float(rl.rpf_earned) if rl.rpf_earned else 0)
                                derechond.append(float(rl.derecho_earned) if rl.derecho_earned else 0)
                                ivand.append(float(rl.iva_earned) if rl.iva_earned else 0)
                                comisionnd.append(float(rl.comision_earned) if rl.comision_earned else 0)
                                totalnd.append(float(rl.p_total_earned) if rl.p_total_earned else 0)
                                cporcnd.append(float(rl.comision_percent_earned) if rl.comision_percent_earned else 0)
                                descnd.append(float(rl.descuento_earned) if rl.descuento_earned else 0)
                else:
                    tipo.append('Certificado')   
                    #titular          
                    ids.append(certificado[0].id)
                    certs.append(certificado.certificate_number if certificado.certificate_number else certificado[0].certificate_number)
                    nombres.append('')
                    apellidosp.append('')
                    apellidosm.append('')
                    fechab.append(certificado.discharge_date if certificado.discharge_date else '')
                    netand.append(certificado.p_neta_earned if certificado.p_neta_earned else 0)
                    rpfnd.append(certificado.rpf_earned if certificado.rpf_earned else 0)
                    derechond.append(certificado.derecho_earned if certificado.derecho_earned else 0)
                    ivand.append(certificado.iva_earned if certificado.iva_earned else 0)
                    comisionnd.append(certificado.comision_earned if certificado.comision_earned else 0)
                    totalnd.append(certificado.p_total_earned if certificado.p_total_earned else 0)
                    cporcnd.append(float(certificado.comision_percent_earned) if certificado.comision_percent_earned else 0)
                    descnd.append(float(certificado.descuento_earned) if certificado.descuento_earned else 0)
            elif certEndosos.policy.ramo.ramo_code ==1:
                form = Life.objects.filter(policy = certificado[0].id)
                if form: 
                    if r['tipo'] ==1 or r['tipo'] =='1':
                        tipo.append('Titular')   
                        #titular          
                        ids.append(form[0].personal.id)
                        certs.append(form[0].personal.certificate  if form[0].personal.certificate else certificado[0].certificate_number)
                        nombres.append(form[0].personal.first_name)
                        apellidosp.append(form[0].personal.last_name)
                        apellidosm.append(form[0].personal.second_last_name)
                        fechab.append(form[0].personal.discharge_date.strftime('%d/%m/%Y') if form[0].personal.discharge_date else '')
                        netand.append(float(form[0].personal.p_neta_earned) if form[0].personal.p_neta_earned else 0)
                        rpfnd.append(float(form[0].personal.rpf_earned) if form[0].personal.rpf_earned else 0)
                        derechond.append(float(form[0].personal.derecho_earned) if form[0].personal.derecho_earned else 0)
                        ivand.append(float(form[0].personal.iva_earned) if form[0].personal.iva_earned else 0)
                        comisionnd.append(float(form[0].personal.comision_earned) if form[0].personal.comision_earned else 0)
                        totalnd.append(float(form[0].personal.p_total_earned) if form[0].personal.p_total_earned else 0)
                        cporcnd.append(float(form[0].personal.comision_percent_earned) if form[0].personal.comision_percent_earned else 0)
                        descnd.append(float(form[0].personal.descuento_earned) if form[0].personal.descuento_earned else 0)
                    
        elif 'personal' in r:
                form = Personal_Information.objects.get(id = r['personal']['id'])
                if form: 
                    tipo.append('Titular')   
                    #titular          
                    ids.append(form.id)
                    certs.append(form.certificate  if form.certificate else r['certificate_number'])
                    nombres.append(form.first_name)
                    apellidosp.append(form.last_name)
                    apellidosm.append(form.second_last_name)
                    fechab.append(form.discharge_date.strftime("%d/%m/%Y") if form.discharge_date else '')
                    netand.append(float(form.p_neta_earned) if form.p_neta_earned else 0)
                    rpfnd.append(float(form.rpf_earned) if form.rpf_earned else 0)
                    derechond.append(float(form.derecho_earned) if form.derecho_earned else 0)
                    ivand.append(float(form.iva_earned) if form.iva_earned else 0)
                    comisionnd.append(float(form.comision_earned) if form.comision_earned else 0)
                    totalnd.append(float(form.p_total_earned) if form.p_total_earned else 0)
                    cporcnd.append(float(form.comision_percent_earned) if form.comision_percent_earned else 0)
                    descnd.append(float(form.descuento_earned) if form.descuento_earned else 0)
                    if 'dependientes' in r['personal']:
                        for de in r['personal']['dependientes']:
                            rl = Relationship.objects.get(id = de['id'])                      
                            tipo.append('Dependiente')   
                            #titular          
                            ids.append(rl.id)
                            certs.append(certificado[0].certificate_number)
                            nombres.append(rl.first_name)
                            apellidosp.append(rl.last_name)
                            apellidosm.append(rl.second_last_name)
                            fechab.append(rl.discharge_date.strftime('%d/%m/%Y')  if rl.discharge_date else '')
                            netand.append(float(rl.p_neta_earned) if rl.p_neta_earned else 0)
                            rpfnd.append(float(rl.rpf_earned) if rl.rpf_earned else 0)
                            derechond.append(float(rl.derecho_earned) if rl.derecho_earned else 0)
                            ivand.append(float(rl.iva_earned) if rl.iva_earned else 0)
                            comisionnd.append(float(rl.comision_earned) if rl.comision_earned else 0)
                            totalnd.append(float(rl.p_total_earned) if rl.p_total_earned else 0)
                            cporcnd.append(float(rl.comision_percent_earned) if rl.comision_percent_earned else 0)
                            descnd.append(float(rl.descuento_earned) if rl.descuento_earned else 0)
        else:            
            tipo.append('')   
            #titular          
            ids.append('')
            certs.append('')
            nombres.append('')
            apellidosp.append('')
            apellidosm.append('')
            fechab.append('')
            netand.append('')
            rpfnd.append('')
            derechond.append('')
            ivand.append('')
            comisionnd.append('')
            totalnd.append('')
            cporcnd.append(0)
            descnd.append(0)
        
    obj = {
        'cporcnd'   : str(list(cporcnd)),
        'descnd'   : str(list(descnd)),
        'tipo'   : str(list(tipo)),
        'ids'   : str(list(ids)),
        'certs'   : str(list(certs)),
        'nombres'   : str(list(nombres)),
        'apellidosp'   : str(list(apellidosp)),
        'apellidosm'   : str(list(apellidosm)),
        'fechab'   : str(list(fechab)),
        'netand'   : str(list(netand)),
        'rpfnd'   : str(list(rpfnd)),
        'derechond'   : str(list(derechond)),
        'ivand'   : str(list(ivand)),
        'totalnd'   : str(list(totalnd)),
        'comisionnd'   : str(list(comisionnd)),
        'email_org':info_org['email'],
        'phone_org':info_org['phone'],
        'webpage_org':info_org['webpage'],
        'address_org':info_org['address'],
        'urlname_org':info_org['name'],
        }   
    obj['columns'] = str(list(columns))
    obj['registros'] = len(certificadosBaja)
    r = requests.post(settings.SERVICEEXCEL_URL + 'get-certificatebajaExcel/', obj,
    stream=True)
    response_data= r.text
    response = HttpResponse(r.content,content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')
    return response



@api_view(['POST'])
@permission_classes((IsAuthenticatedV2, IsOrgMemberV2))
def pdf_cotizacion_excel(request): 
    
    
    tipo = request.data['tipo']
    emitida_por = request.data['emitida_por']
    cotizada_en = request.data['cotizada_en']
    subramos = request.data['subramos']
    
    fecha_ingreso_inicial = request.data['fecha_ingreso_inicial']
    fecha_ingreso_final = request.data['fecha_ingreso_final']

    fecha_ingreso_inicial  = datetime.strptime(fecha_ingreso_inicial, '%d/%m/%Y')
    fecha_ingreso_final = datetime.strptime(fecha_ingreso_final, '%d/%m/%Y')

    fecha_ingreso_final += timedelta(days=1)

    if not subramos:
        subramos = list(SubRamos.objects.filter(org_name = request.GET.get('org')).distinct('subramo_code').values_list('subramo_code',flat=True))
    else:
        subramos = list(subramos)
    


    if tipo and tipo == 1:
        tipo_filtro = [1,3]
    elif tipo and tipo == 2:
        tipo_filtro = [2]
    else:
        tipo_filtro = [1,2,3]


    if emitida_por:
        queryset = Cotizacion.objects.filter(
            org_name=request.GET.get('org'),
            created_at__gte = fecha_ingreso_inicial,
            created_at__lt = fecha_ingreso_final,
            status__in = list(tipo_filtro),
            aseguradora_seleccionada = emitida_por
        ).order_by('-created_at')

    else:
        queryset = Cotizacion.objects.filter(
            org_name=request.GET.get('org'),
            created_at__gte = fecha_ingreso_inicial,
            created_at__lt = fecha_ingreso_final,
            status__in = list(tipo_filtro)
        ).order_by('-created_at')
    


    queryset_final = []
    for q in queryset:
        if isinstance(q.subramo, dict):
            subramo =q.subramo
        else:
            subramo =json.loads(q.subramo.replace('\'','"'))

            
        if subramo['value'] and int(subramo['value']) in subramos:
            queryset_final.append(q)
        
    queryset = queryset_final

    if cotizada_en:
        queryset_final = []
        for q in queryset:
            for aseguradora in q.aseguradora:
                try:
                    a = json.loads((json.loads(json.loads(aseguradora)).replace('"','')).replace('\'','"') )
                    if a['alias']  in cotizada_en:
                        if not q in queryset_final:
                            queryset_final.append(q)
                except Exception as e:
                    continue
        queryset = queryset_final

    queryset = [q.id for q in queryset]
    queryset = Cotizacion.objects.filter(id__in = list(queryset))
    try:
        dataToFilter = getDataForPerfilRestricted(request, request.GET.get('org'))
    except Exception as er:
        dataToFilter = {}
    if dataToFilter:
        if dataToFilter['ccpr']:
            queryset = queryset.filter(contractor__in = list(dataToFilter['ccpr']))
        if dataToFilter['cgpr']:
            queryset = queryset.filter(contractor__group__in = list(dataToFilter['cgpr']))
        if dataToFilter['ccepr']:
            queryset = queryset.filter(contractor__cellule__in = list(dataToFilter['ccepr']))
        if dataToFilter['crpr']:
            queryset = queryset.filter(contractor__vendor__in = list(dataToFilter['crpr']))
        if dataToFilter['cspr']:
            queryset = queryset.filter(contractor__sucursal__in = list(dataToFilter['cspr']))
        if dataToFilter['paspr']:
            asegs = asegs.filter(pk__in = list(dataToFilter['paspr']))
            queryset = queryset.filter(pk__in = list(asegs))

    columns = [
        'No. Folio',
        'Contratante',
        'Email',
        'Teléfono',
        'Ramo',
        'Subramo',
        'Aseguradora(s)',
        'Asegurado',
        'Estatus',
        'Creado por',
        'Primas de Aseguradora'
    ]

    info_org = getInfoOrg(request)

    if len(info_org['logo']) != 0:
        archivo_imagen = 'https://miurabox-public.s3.amazonaws.com/cas/' + info_org['logo']
        # archivo_imagen = get_presigned_url("cas/{url}".format(url=info_org['logo']),28800) 
    else:
        archivo_imagen = 'saam.jpg'

    status = [st.status for st in queryset]
    aseguradoras_emision = []
    id_ = str(list(queryset.values_list('id', flat=True)))
    created_at = []

    
    contratact = []
    asegurados = []
    creadopor = []
    contractemail = []
    contractphone = []
    subramos = []
    ramos = []
    aseguradoras = []
    aseguradoras_primas_final = []
    nuevo_contratante = []
    for c in queryset:
        if c.prospecto == 1:
            nuevo_contratante.append("Nuevo")
        else:
            nuevo_contratante.append("Existente")
        created_at.append(c.created_at.strftime("%d/%m/%Y"))
        if c.aseguradora_seleccionada:
            aseguradoras_emision.append(c.aseguradora_seleccionada)
        else:
            aseguradoras_emision.append('')

        asegurado = ''

        if c.ramo and not isinstance(c.ramo, dict):
            ramo = json.loads(c.ramo.replace('\'','"')) 
        else:
            ramo = c.ramo
        if c.subramo and not isinstance(c.subramo, dict):
            subramo = json.loads(c.subramo.replace('\'','"'))
        else:
            subramo = c.subramo

        life = None
        accidents = None
        danios = None
        auto = None
        asegurado = ''
        
        if c.life and ramo['value'] == 1:
            life = json.loads(c.life.replace('\'', '"'))
            life = life['aseguradosList']
            life = [ "%s %s %s"%(asegurado['first_name'],asegurado['last_name'],asegurado['second_last_name']) for asegurado in life]
            asegurado =  ", ".join(life)

            

        if c.accidents and ramo['value'] == 2:
            accidents = json.loads(c.accidents.replace('\'', '"'))
            asegurado = "%s %s %s"%(accidents['first_name'], accidents['last_name'], accidents['second_last_name'])
       

        if c.danios and ramo['value'] == 3 and subramo['value'] != 9:
            danios = json.loads(c.danios.replace('\'', '"'))
            asegurado = danios['insured_item']
       

        if ramo['value'] == 3 and subramo['value'] == 9 and c.auto:
            auto = json.loads(c.auto.replace('\'', '"'))
            try:
                asegurado = auto['selectedCar']['val']
            except:
                asegurado = ''

        print(asegurado)
        asegurados.append(asegurado.replace(',',''))

        contratante = ''
        if c.prospecto == 1:
            contratante = "%s %s %s"%(c.first_name, c.last_name, c.second_last_name)
            contractemail.append('')
            contractphone.append('')
        if c.prospecto == 2:
            contratante = c.contractor.full_name
            contractemail.append(c.contractor.email)
            contractphone.append(c.contractor.phone_number)
        contratante = ((((((contratante).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'') 
        contratact.append(contratante)

        if c.owner:
            val_owner_e = c.owner.first_name + ' '+ str(c.owner.last_name)
        else:
            val_owner_e = ''

        creadopor.append(val_owner_e)

        if c.ramo and not isinstance(c.ramo, dict):
            ramo_ = json.loads(c.ramo.replace('\'','"'))
        else:
            ramo_ = c.ramo
        ramos.append(ramo_['value'])

        if c.subramo and not isinstance(c.subramo, dict):
            subramo_ = json.loads(c.subramo.replace('\'','"'))
        else:
            subramo_ = c.subramo
        subramos.append(subramo_['value'])


        aux = []
        aux_primas = []
        for aseguradora in c.aseguradora:
            aseguradora = aseguradora.replace('\\"','').replace('\\\\','')
            aseguradoras_ = json.loads((json.loads(aseguradora)).replace('\'','"'))
            aseguradoras_ = aseguradoras_['alias']
            aux.append(aseguradoras_)
            aux_primas.append(aseguradoras_)
        aux = " - ".join(aux)

        aseguradoras.append(aux)
        # print(aux_primas)
        aseguradoras_primas = AseguradorasCotizacionPrimas.objects.filter(
            cotizacion = c,
            checked = True,
            aseguradora__in = list(aux_primas)
        )

        primas = []
        for prima in aseguradoras_primas:
            a = "%s (%s)"%(prima.aseguradora, prima.prima)
            primas.append(a)
        primas =  " - ".join(primas)
        aseguradoras_primas_final.append(primas)

    obj = {
        # Rec
        'status'   : str(list(status)),
        'id_'   : id_,
        'nuevo_contratante': str(list(nuevo_contratante)),
        'created_at'   : str(list(created_at)),
        'aseguradoras'   : str(list(aseguradoras)),
        'aseguradoras_primas'   : str(list(aseguradoras_primas_final)),
        'aseguradoras_emision'   : str(list(aseguradoras_emision)),
        'asegurado'   : str(list(asegurados)),
        'creadopor'   : str(list(creadopor)),
        'contratact'   : str(list(contratact)),
        'contractemail'   : str(list(contractemail)),
        'contractphone'   : str(list(contractphone)),
        'subramo'   : str(list(subramos)),
        'ramo'   : str(list(ramos)),
        # Gral
        'tipo_reporte': 'Reporte Cotizaciones',
        'email_org':info_org['email'],
        'phone_org':info_org['phone'],
        'webpage_org':info_org['webpage'],
        'address_org':info_org['address'],
        'urlname_org':info_org['name'],
        }
    obj['columns'] = str(list(columns))
    obj['imagen'] = archivo_imagen
    obj['lenots'] = len(queryset)
    obj['registros'] = len(queryset)
    r = requests.post(settings.SERVICEEXCEL_URL + 'get-quotationsExcel/', obj,
    stream=True)
    response_data= r.text

    response = HttpResponse(r.content,content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

    return response
# Reporte Cerificados listado v2

@api_view(['POST'])
@permission_classes((IsAuthenticatedV2, IsOrgMemberV2))
def Service_CertificadosExcel(request):
    columns = ['Tipo', 'No.Certificado','No.Póliza','Subramo','Estatus', 
               'Vigencia Inicio', 'Vigencia Fin', 'Prima Neta', 'RPF', 'Derecho', 'IVA', 'Prima Total', 'Comisión',
               'Asegurado', 'Observaciones', 'Referenciador', 'Fecha de creación', 'Creado por','Compartido Email']
    try:
        org = request.GET.get('org')
        policy_filters = []

        parent_filters = [Q(poliza_number__icontains = str(request.data['cadena']))]
        parents = Polizas.objects.filter(reduce(OR, parent_filters), document_type = 3,org_name = org).values_list('id', flat = True)
        subgrupos = Polizas.objects.filter(parent__in = parents, document_type = 4,org_name = org).values_list('id', flat = True)
        categorias = Polizas.objects.filter(parent__in = subgrupos, document_type = 5,org_name = org).values_list('id', flat = True)

        policy_filters.append(Q(parent__in = categorias))
        policy_filters.append(Q(certificate_number__icontains = str(request.data['cadena'])))

        titular_filters = [Q(full_name__icontains = str(request.data['cadena'])), 
                                            Q(first_name__icontains = str(request.data['cadena'])),
                                            Q(last_name__icontains = str(request.data['cadena'])),
                                            Q(second_last_name__icontains = str(request.data['cadena']))]
        
        autos_filters = [Q(serial__icontains = str(request.data['cadena'])),
                            Q(driver__icontains = str(request.data['cadena'])),
                            Q(brand__icontains = str(request.data['cadena']))]  

        tit = Personal_Information.objects.filter(reduce(OR, titular_filters), org_name = request.GET.get('org')).values_list('id',flat = True)

        life = Life.objects.filter(personal__in = list(tit)).values_list('policy', flat = True)
        ad = AccidentsDiseases.objects.filter(personal__in = list(tit)).values_list('policy', flat = True)
        autos = AutomobilesDamages.objects.filter(reduce(OR, autos_filters), org_name = request.GET.get('org')).values_list('policy', flat = True)
                            
        
        relationship_filters = [Q(full_name__icontains = str(request.data['cadena'])), 
                                            Q(first_name__icontains = str(request.data['cadena'])),
                                            Q(last_name__icontains = str(request.data['cadena'])),
                                            Q(second_last_name__icontains = str(request.data['cadena']))]

        rel = Relationship.objects.filter(reduce(OR, relationship_filters), org_name = request.GET.get('org')).values_list('accident__policy',flat = True)
        
        
        beneficiaries_filters = [Q(full_name__icontains = str(request.data['cadena'])), 
                                            Q(first_name__icontains = str(request.data['cadena'])),
                                            Q(last_name__icontains = str(request.data['cadena'])),
                                            Q(second_last_name__icontains = str(request.data['cadena']))]

        ben = Beneficiaries.objects.filter(reduce(OR, beneficiaries_filters), org_name = request.GET.get('org')).values_list('life__policy',flat = True)
        
        policy_filters.append(Q(id__in = ben))

        policy_filters.append(Q(id__in = rel))
        policy_filters.append(Q(id__in = life))
        policy_filters.append(Q(id__in = ad))
        policy_filters.append(Q(id__in = autos))
        policy_filters.append(Q(folio__icontains = str(request.data['cadena'])))
        polizas_2 = []
        if  int(request.data['is_category']) == 0:
            polizas_2 = Polizas.objects.filter(reduce(OR, policy_filters), document_type = 6,org_name = org,caratula = request.data['parent']).exclude(status = 0).distinct('id')#.exclude(status__in = [1,2,0])
            certificates = Polizas.objects.filter(certificate_number__icontains = str(request.data['cadena']),org_name = org,
                                                document_type = 6,  caratula = request.data['parent']).exclude(status = 0)
        else:
            statusCert = ''
            try:
                if request.data['status']:
                    try:
                        if request.data['status'] == 'true':
                            statusCert = True
                        elif request.data['status'] == 'false':
                            statusCert = False
                        else:
                            statusCert = request.data['status']
                    except Exception as eds:
                        statusCert = request.data['status']
                if statusCert:
                    polizas_2 = Polizas.objects.filter(reduce(OR, policy_filters), document_type = 6,org_name = org,certificado_inciso_activo = statusCert, 
                                                        parent = int(request.data['parent'])).exclude(status = 0).distinct('id')#.exclude(status__in = [1,2,0])
                    certificates = Polizas.objects.filter(certificate_number__icontains = str(request.data['cadena']),org_name = org,certificado_inciso_activo = statusCert,
                                                document_type = 6, parent = int(request.data['parent'])).exclude(status = 0)
                else:
                    polizas_2 = Polizas.objects.filter(reduce(OR, policy_filters), document_type = 6,org_name = org,parent = int(request.data['parent'])).exclude(status = 0).distinct('id')#.exclude(status__in = [1,2,0])
                    certificates = Polizas.objects.filter(certificate_number__icontains = str(request.data['cadena']),org_name = org,document_type = 6, parent = int(request.data['parent'])).exclude(status = 0)
            except Exception as rts:
                polizas_2 = Polizas.objects.filter(reduce(OR, policy_filters), document_type = 6,org_name = org,parent = int(request.data['parent'])).exclude(status = 0).distinct('id')#.exclude(status__in = [1,2,0])
                certificates = Polizas.objects.filter(certificate_number__icontains = str(request.data['cadena']),org_name = org,document_type = 6, parent = int(request.data['parent'])).exclude(status = 0)
    
        for cert in certificates:
            if not cert in polizas_2:
                polizas_2.append(cert)
    except Exception as e:
        certificados = None
        polizas_2 = None
    certificados = polizas_2
    serializer = CertificateSerializer(certificados, context={'request': request}, many=True)
    try:
        pol_num = Polizas.objects.get(id=certificados[0].caratula).poliza_number
    except Exception as dfs:
        pol_num =''
    try:
        subBranch = certificados[0].subramo
    except Exception as e:
        subBranch = 'None'
    try:
        branch = certificados[0].ramo
    except Exception as e:
        branch = 'None'
    if str(subBranch) == 'Gastos Médicos' or str(subBranch) == 'Vida':
        columns = ['No. Póliza/ Colectividad','Subramo','Tipo de Administración (Autoadminsitrada, Detallada, Simplificada)',
                   'Compañía (Nombre corto)','Nombre Contratante','Poliza   Fecha Inicio','Poliza   Fecha Fin',
                   'No.Certificado (por Familia)','Estatus Certificado (Activo - Inactivo)','Tipo (Titular o Dependiente)',
                   'Parentesco (Titular, Conyuge, Hijo u Otro','Apellido Paterno','Apellido Materno','Nombre(s)','Genero (Sexo)',
                   'Fecha Nacimiento','Fecha de Alta (Fecha Movimiento)','Fecha de Antigüedad','Fecha de Baja (Fecha Movimiento)',
                   'Sueldo','Suma Asegurada','Fumador','Correo Electrónico','Subgrupo','Categoría','Paquete',
                   'Prima Neta','Derechos','RPF','Iva','Prima Total',
                   'Prima Neta por Baja','Derecho por Baja','RPF por Baja','Iva por Baja','Prima Total por Baja','Endoso Alta','Endoso Baja','Compartido Email']
    elif str(subBranch) == 'Automóviles':
        columns = ['No. Póliza','Nombre Contratante','Inciso','Estatus','Ini_Vigencia','Fecha De Baja','Asegurado',
                   'Conductor','Marca','Modelo','Año','Version','Serial','Motor','Color','Matricula','Suma_Asegurada',
                   'Adaptaciones','Monto_Adaptaciones','Equipamiento','Monto_Equipamiento','Servicio','Uso','Procedencia',
                   'Carga','Ben_Preferente','Ben_Direccion','Ben_Rfc','Subgrupo','Categoria','Paquete','Email','Prima_Neta',
                   'Derecho','RPF','IVA','Prima_Total','Comision','Contacto',
                   'Prima Neta por Baja','Derecho por Baja','RPF por Baja','Iva por Baja','Prima Total por Baja','Endoso Alta','Endoso Baja','Compartido Email']

        num = 38
    else:
        columns = []
    

    info_org = getInfoOrg(request)
    if len(info_org['logo']) != 0:
        archivo_imagen = 'https://miurabox-public.s3.amazonaws.com/cas/' + info_org['logo']
        # archivo_imagen = get_presigned_url("cas/{url}".format(url=info_org['logo']),28800) 
    else:
            archivo_imagen = 'saam.jpg'
    tipo_reporte = 'Reporte de Certificados'
    asegurado = []
    antiguedad = []
    referenciador = []
    creadopor = []
    dateRen = []
    otRen = []
    responsable = []
    contratante = []
    contratanteE = []
    contratanteP = []
    contratanteG = []
    collection = []
    clave = []
    cp = []
    paquete = []
    valueMA = []  
    valueModA = [] 
    valueVA = [] 
    valueYA = [] 
    valueLPA = [] 
    valueEA = [] 
    valueAdA = [] 
    valueDrA = []
    asegs = []
    tipoTit = []
    parentesco = []
    first_name = []
    last_name = []
    slast_name = []
    fechaN = []
    valueF = ''
    valueLn = ''
    valueSln = ''
    nac = ''
    movimiento = []
    mov = ''
    antiguedadI = []
    ant = ''
    salary = []
    slr = ''    
    sumAssured = []
    sumas = ''
    smoker = []
    smk = ''
    email  =[]
    em = ''
    genero  =[]
    sx = ''
    dependiente  =[]
    dpnd = ''
    valueCl = ''
    valueSer = '' 
    valueMAd ='' 
    valueEq ='' 
    valueMEq ='' 
    valueServ ='' 
    valueUs = ''
    valuePr =''
    valueCarg =''
    valueBPr ='' 
    valueBPra ='' 
    valueRfc ='' 

    valueClA = [] 
    valueSerA = []  
    valueMAdA = [] 
    valueEqA = []
    valueMEqA = []
    valueServA = []
    valueUsA = [] 
    valuePrA = []
    valueCargA = []
    valueBPrA = [] 
    valueBPraA = []
    valueRfcA = []
    subgrupo = []
    categoría = []
    paquetee = []
    certificate_number = []
    administration = []
    certificadoActive = []
    reasoncacel = [] 
    renewable = []
    fecha_baja_inciso = []
    document_type = []
    subramo__subramo_name = []
    ramo = []
    forma_de_pago = []
    status = []
    start_of_validity = []
    end_of_validity = []
    f_currency = []
    p_neta = []
    rpf = []
    derecho = []
    iva = []
    p_total = []
    comision = []
    _id = []
    observations = []
    created_at = []
    sucursal__sucursal_name = []
    renewed_status = []
    identifier = []
    address = []
    # certificados = certificados.order_by('natural__full_name','juridical__j_name')
    certificados = certificados.order_by('id')
    form = None
    formB = None
    lenBene = 0
    folio = ''
    folioInterno = []
    p_netaB = []
    rpfB = []
    derechoB = []
    ivaB = []
    p_totalB = []
    p_neta2 = str(0)
    rpf2 =str(0)
    derecho2= str(0)
    iva2=str(0)
    p_total2= str(0)
    fechaAlta= []
    endAlta= []
    endBaja= []
    endA = ''
    endB = ''
    fa = ''
    adjuntos = []
    contributoria = []
    rfccve = []
    rfchomocve = []
    dom_cp = []
    dom_poblacion = []
    dom_estado = []
    dom_callenum = []
    dom_colonia = []
    permiso_correos = False
    if request.user.is_superuser:
        permiso_correos = True
    session = Session.objects.get(username= request.user.username)
    pmscg = session.permissions['SAAM']['Pólizas']
    for pm in pmscg:
        if pm['name'] == 'Ver correo electrónico de asegurados':
            if pm['checked'] == True:
                permiso_correos = True

    compartido = []
    for r in certificados:
        adj = 'No'
        if PolizasFile.objects.filter(owner__id = r.id, org_name= r.org_name).exists():
            adj = 'Si'
        else:
            adj  ='No'
        shr = 'No'
        try:
            subgrupo1 =str(r.parent.parent.name)
        except Exception as er:
            subgrupo1 = ''
        try:
            categoría1 =str(r.parent.name)
        except Exception as erS:
            categoría1 = ''
        try:
            paquetee1 = str(r.paquete.package_name)
        except Exception as er:
            paquetee1 = ''
        certificate_number1 = str(r.certificate_number)

        try:
            administration1 = str(r.parent.parent.parent.administration_type)
        except:
            administration1 = ''

        certificadoActive1= str(r.certificado_inciso_activo)
        reasoncacel1 = str(r.reason_cancel)
        renewable1 = str(r.is_renewable)
        fecha_baja_inciso1 = str(r.fecha_baja_inciso.strftime("%d/%m/%Y") if r.fecha_baja_inciso else '' )
        fa = str(r.charge_date.strftime("%d/%m/%Y") if r.charge_date else '' )
        if fa == None:
          fa = str(r.created_at.strftime("%d/%m/%Y") if r.created_at else '' )      
        document_type1 = str(r.document_type)
        try:
            subramo__subramo_name1 = str(r.parent.parent.parent.subramo.subramo_name)
        except:
            subramo__subramo_name1 = ''

        ramo1= str(r.ramo.ramo_name)
        forma_de_pago1= str(r.forma_de_pago)
        status1=str(r.status)
        start_of_validity1=str(r.start_of_validity.strftime("%d/%m/%Y") if r.start_of_validity else '' )
        end_of_validity1= str(r.end_of_validity.strftime("%d/%m/%Y") if r.end_of_validity else '' )
        f_currency1= str(r.f_currency)
        
        p_neta1 = str(r.p_neta)
        rpf1 =str(r.rpf)
        derecho1= str(r.derecho)
        iva1=str(r.iva)
        p_total1= str(r.p_total)
        comision1= str(r.comision)
        
        _id1 =str(r.id)
        if r.certificado_inciso_activo ==False:
          p_neta2 = str(r.p_neta_earned)
          rpf2 =str(r.rpf_earned)
          derecho2= str(r.derecho_earned)
          iva2=str(r.iva_earned)
          p_total2= str(r.p_total_earned)
        else:
          p_neta2 = str(0)
          rpf2 =str(0)
          derecho2= str(0)
          iva2=str(0)
          p_total2= str(0)
        folio =str((((((((r.folio).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')) if r.folio else '')
        observations1 = str((((((((r.observations).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')) if r.observations else '')
        created_at1 = str(r.created_at.strftime("%d/%m/%Y") if r.created_at else '')
        try:
            sucursal__sucursal_name1 = str(r.sucursal.sucursal_name)
        except Exception as ere:
            sucursal__sucursal_name1 = 'Sin sucursal'
        renewed_status1=str(r.renewed_status)
        identifier1=str((((((((r.identifier).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')) if r.identifier else '')
        try:
            address1= str(r.address.administrative_area_level_1)
        except Exception as ert:
            address1 = 'Sin dirección'

        if r.address:
           pc = r.address.postal_code
        else:
           pc = ''
        antig = get_antiguedad(r.start_of_validity)
        if r.owner:
            val_owner = r.owner.first_name + ' '+ str(r.owner.last_name)
        else:
            val_owner = ''
        if r.paquete:
            pac = r.paquete.package_name
        else:
            pac = ''
        if r.responsable:
            val_resp = r.responsable.first_name + ' '+ str(r.responsable.last_name)
        else:
            val_resp = ''
        if r.collection_executive:
            val_col = r.collection_executive.first_name + ' '+ str(r.collection_executive.last_name)
        else:
            val_col = ''
        if r.clave:
            try:
                cve = r.clave.name + ' '+ str(r.clave.clave)
                cve = ((((((cve).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
            except Exception as dfs:
                cve =''
        else:
            cve = ''
        sramo_e = r.subramo.subramo_name
        try:
          relEndA = EndorsementCert.objects.filter(certificate = r, org_name = r.org_name, endorsement__endorsement_type = 'A', endorsement__status =2).order_by('-endorsement__id')
          if relEndA:
            endA = ((((((relEndA[0].endorsement.number_endorsement).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'') 
            fa = fa
          else:
            fa = ''
            endA = ''
        except Exception as e:
          fa = ''
          endA = ''
        try:
          relEndB = EndorsementCert.objects.filter(certificate = r, org_name = r.org_name, endorsement__endorsement_type = 'D', endorsement__status =2).order_by('-endorsement__id')
          if relEndB:
            endB = ((((((relEndB[0].endorsement.number_endorsement).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'') 
          else:
            endB = ''
        except Exception as e:
          endB = ''
        if r.document_type == 6:
            try:
                if r.parent.parent.parent.contractor:
                    contratante_e = ((((((r.parent.parent.parent.contractor.full_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    contratanteE_e = r.parent.parent.parent.contractor.email
                    contratanteP_e = r.parent.parent.parent.contractor.phone_number
                    contratanteG_e = ((((((r.parent.parent.parent.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')     
                    # contratanteG_e = r.parent.parent.parent.contractor.group.group_name
                    asg = r.parent.parent.parent.aseguradora.alias
                else:
                    contratante_e = ''
                    contratanteE_e = ''
                    contratanteP_e = ''
                    contratanteG_e = ''
                    asg = ''
            except:
                contratante_e = ''
                contratanteE_e = ''
                contratanteP_e = ''
                contratanteG_e = ''
                asg = ''

        else:
            if r.contractor:
                contratante_e = ((((((r.contractor.full_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                contratanteE_e = r.contractor.email
                contratanteP_e = r.contractor.phone_number
                contratanteG_e = ((((((r.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')     
                # contratanteG_e = r.contractor.group.group_name
                asg = r.aseguradora.alias                  

        try:
            old = OldPolicies.objects.filter(base_policy__id = r.id)
            try:
              date_renovacion = old[0].created_at.strftime("%d/%m/%Y")
            except Exception as rr:
                date_renovacion = 'Por renovar'
            try:
                ot_renovacion = old[0].new_policy.poliza_number if old[0].new_policy.poliza_number else old[0].new_policy.internal_number
            except Exception as rr:
                ot_renovacion = 'Por renovar'
        except Exception as dwe:
            date_renovacion = 'Por renovar'
            ot_renovacion = 'Por renovar'
        try:
            refs_policy = ReferenciadoresInvolved.objects.filter(policy = r.id,is_changed=False).values_list('referenciador__first_name','referenciador__last_name')
            if len(refs_policy):
                v = []
                try:
                    for it in refs_policy:
                        v.append(it[0] +' '+ str(it[1])+str('; '))
                    referenc = v
                except Exception as y:
                    referenc = []
            else:
                referenc = []
        except Exception as e:
            referenc = []
        if r.ramo.ramo_code == 1:
            form = Life.objects.filter(policy = r.id)
            if form:                
                value = form[0].personal.full_name
                p_neta1  = r.p_neta
                derecho1 = r.derecho
                rpf1  = r.rpf
                iva1 = r.iva
                p_total1 = r.p_total
                comision1 = r.comision
                
                if value:
                    value = ((((((value).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'') 
                else:
                    value = value
                valueF = form[0].personal.first_name
                valueLn = form[0].personal.last_name
                valueSln = form[0].personal.second_last_name
                try:
                    nac = (form[0].personal.birthdate).strftime("%d/%m/%Y")
                except Exception as fdf:
                    nac = (form[0].personal.birthdate)
                try:
                    mov = (form[0].personal.created_at).strftime("%d/%m/%Y")
                except Exception as fdf:
                    mov = (form[0].personal.created_at)
                try:
                    ant = (form[0].personal.antiguedad).strftime("%d/%m/%Y")
                except Exception as fdf:
                    ant = (form[0].personal.antiguedad)
                slr = form[0].personal.salary
                sumas = form[0].personal.sum_assured
                smk = form[0].personal.smoker
                if permiso_correos:
                    em = form[0].personal.email
                else:
                    em = ''
                sx = form[0].personal.sex                    

                if em:
                    if Pendients.objects.filter(poliza__id = r.id, email__iexact= em).exists():
                        shr = 'Si'
                    else:
                        shr  ='No'                                                          
                tipot = 'Titular'
                prt = 'Titular'
                valueM = '' 
                valueMod = '' 
                valueV = '' 
                valueY = ''
                valueLP = '' 
                valueE = '' 
                valueAd = '' 
                valueDr = ''
                if r.certificado_inciso_activo ==False:
                  p_neta2 = str(float(form[0].personal.p_neta_earned)*-1)
                  rpf2 =str(float(form[0].personal.rpf_earned)*-1)
                  derecho2= str(float(form[0].personal.derecho_earned)*-1)
                  iva2=str(float(form[0].personal.iva_earned)*-1)
                  p_total2= str(float(form[0].personal.p_total_earned)*-1)
                else:
                  p_neta2 = str(0)
                  rpf2 =str(0)
                  derecho2= str(0)
                  iva2=str(0)
                  p_total2= str(0)
                p_netaB.append(p_neta2)
                rpfB.append(rpf2)
                derechoB.append(derecho2)
                ivaB.append(iva2)
                p_totalB.append(p_total2)
                compartido.append(shr)
                # -------------- 
                asegurado.append(value)
                dateRen.append(date_renovacion)
                otRen.append(ot_renovacion)
                referenciador.append(referenc)
                antiguedad.append(antig)
                creadopor.append(val_owner)
                contratante.append(contratante_e)
                contratanteE.append(contratanteE_e)
                contratanteP.append(contratanteP_e)
                contratanteG.append(contratanteG_e)
                responsable.append(val_resp)
                collection.append(val_col)
                paquete.append(pac)
                clave.append(cve)
                cp.append(pc)
                valueMA.append(valueM) 
                valueModA.append(valueMod)  
                valueVA.append(valueV) 
                valueYA.append(valueY) 
                valueLPA.append(valueLP)  
                valueEA.append(valueE)  
                valueAdA.append(valueAd)  
                valueDrA.append(valueDr) 
                valueClA.append(valueCl) 
                valueSerA.append(valueSer)  
                valueMAdA.append(valueMAd) 
                valueEqA.append(valueEq)
                valueMEqA.append(valueMEq)
                valueServA.append(valueServ)
                valueUsA.append(valueUs) 
                valuePrA.append(valuePr)       
                valueCargA.append(valueCarg)
                valueBPrA.append(valueBPr)
                valueBPraA.append(valueBPra)
                valueRfcA.append(valueRfc)
                asegs.append(asg) 
                tipoTit.append(tipot) 
                parentesco.append(prt) 
                first_name.append(valueF)
                last_name.append(valueLn)
                slast_name.append(valueSln)
                fechaN.append(nac)
                movimiento.append(mov)
                antiguedadI.append(ant)
                salary.append(slr)
                sumAssured.append(sumas)
                smoker.append(smk)
                email.append(em)
                genero.append(sx)
                dependiente.append(dpnd)
                subgrupo.append(subgrupo1)
                categoría.append(categoría1)
                paquetee.append(paquetee1)
                certificate_number.append(certificate_number1)
                administration.append(administration1)
                certificadoActive.append(certificadoActive1)
                reasoncacel.append(reasoncacel1)
                renewable.append(renewable1)
                fecha_baja_inciso.append(fecha_baja_inciso1)
                fechaAlta.append(fa)
                document_type.append(document_type1)
                subramo__subramo_name.append(subramo__subramo_name1)
                ramo.append(ramo1)
                forma_de_pago.append(forma_de_pago1)
                status.append(status1)
                start_of_validity.append(start_of_validity1)
                end_of_validity.append(end_of_validity1)
                f_currency.append(f_currency1)
                p_neta.append(p_neta1)
                rpf.append(rpf1)
                derecho.append(derecho1)
                iva.append(iva1)
                p_total.append(p_total1)
                comision.append(comision1)
                _id.append(_id1)
                observations.append(observations1)
                created_at.append(created_at1)
                sucursal__sucursal_name.append(sucursal__sucursal_name1)
                renewed_status.append(renewed_status1)
                identifier.append(identifier1)
                address.append(address1)
                folioInterno.append(folio)
                endAlta.append(endA)
                endBaja.append(endB)
                formB = Beneficiaries.objects.filter(life = form[0])
                adjuntos.append(adj)
                vdp = []
                try:
                    for rty in formB:
                        lenBene +=1
                        try:
                            nac = (rty.birthdate).strftime("%d/%m/%Y")
                            d = (rty.birthdate).strftime("%d/%m/%Y")
                            mov = (rty.created_at).strftime("%d/%m/%Y")
                        except Exception as fdf:
                            nac = (rty.birthdate)
                            d = (rty.birthdate)
                            mov = (rty.created_at)
                        value = rty.full_name
                        valueF = rty.first_name
                        valueLn = rty.last_name
                        valueSln = rty.second_last_name
                        tipot = 'Beneficiario'           
                        valueM = '' 
                        valueMod = '' 
                        valueV = '' 
                        valueY = ''
                        valueLP = '' 
                        valueE = '' 
                        valueAd = '' 
                        valueDr = ''
                        sx = rty.sex
                        try:
                            prt = str(checkRelation(int(rty.optional_relationship))) 
                        except Exception as er:
                            prt = 'Otro'
                        try:
                            ant = (rty.antiguedad).strftime("%d/%m/%Y")
                        except Exception as fdf:
                            ant = (rty.antiguedad)
                        # --------------
                        if rty.is_active ==False:
                          p_neta2 = str(float(rty.p_neta_earned)*-1)
                          rpf2 =str(float(rty.rpf_earned)*-1)
                          derecho2= str(float(rty.derecho_earned)*-1)
                          iva2=str(float(rty.iva_earned)*-1)
                          p_total2= str(float(rty.p_total_earned)*-1)
                        else:
                          p_neta2 = str(0)
                          rpf2 =str(0)
                          derecho2= str(0)
                          iva2=str(0)
                          p_total2= str(0)
                        try:
                          relEndA = EndorsementCert.objects.filter(beneficiarie = rty, org_name = r.org_name, endorsement__endorsement_type = 'A', endorsement__status =2).order_by('-endorsement__id')
                          if relEndA:
                            endA = ((((((relEndA[0].endorsement.number_endorsement).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'') 
                            fa = fa
                          else:
                            fa = ''
                            endA = ''
                        except Exception as e:
                          fa = ''
                          endA = ''
                        try:
                          relEndB = EndorsementCert.objects.filter(beneficiarie = rty, org_name = r.org_name, endorsement__endorsement_type = 'D', endorsement__status =2).order_by('-endorsement__id')
                          if relEndB:
                            endB = ((((((relEndB[0].endorsement.number_endorsement).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'') 
                          else:
                            endB = ''
                        except Exception as e:
                          endB = ''
                        if not endA:
                          try:
                            relEndA = EndorsementCert.objects.filter(certificate = r, org_name = r.org_name, endorsement__endorsement_type = 'A', endorsement__status =2).order_by('-endorsement__id')
                            if relEndA:
                              endA = ((((((relEndA[0].endorsement.number_endorsement).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'') 
                            else:
                              fa = ''
                              endA = ''
                          except Exception as e:
                            fa = ''
                            endA = ''
                        if not endB:
                          try:
                            relEndB = EndorsementCert.objects.filter(certificate = r, org_name = r.org_name, endorsement__endorsement_type = 'D', endorsement__status =2).order_by('-endorsement__id')
                            if relEndB:
                              endB = ((((((relEndB[0].endorsement.number_endorsement).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'') 
                            else:
                              endB = ''
                          except Exception as e:
                            endB = ''
                        endAlta.append(endA)
                        endBaja.append(endB)
                        p_netaB.append(p_neta2)
                        rpfB.append(rpf2)
                        derechoB.append(derecho2)
                        ivaB.append(iva2)
                        p_totalB.append(p_total2)
                        dateRen.append(date_renovacion)
                        otRen.append(ot_renovacion)
                        referenciador.append('')
                        antiguedad.append('')
                        creadopor.append(val_owner)
                        contratante.append(contratante_e)
                        contratanteE.append(contratanteE_e)
                        contratanteP.append(contratanteP_e)
                        contratanteG.append(contratanteG_e)
                        responsable.append(val_resp)
                        collection.append(val_col)
                        paquete.append(pac)
                        clave.append(cve)
                        cp.append(pc)
                        valueMA.append(valueM) 
                        valueModA.append(valueMod)  
                        valueVA.append(valueV) 
                        valueYA.append(valueY) 
                        valueLPA.append(valueLP)  
                        valueEA.append(valueE)  
                        valueAdA.append(valueAd)  
                        valueDrA.append(valueDr) 
                        valueClA.append(valueCl) 
                        valueSerA.append(valueSer)  
                        valueMAdA.append(valueMAd) 
                        valueEqA.append(valueEq)
                        valueMEqA.append(valueMEq)
                        valueServA.append(valueServ)
                        valueUsA.append(valueUs) 
                        valuePrA.append(valuePr)       
                        valueCargA.append(valueCarg)
                        valueBPrA.append(valueBPr)
                        valueBPraA.append(valueBPra)
                        valueRfcA.append(valueRfc)
                        asegs.append(asg) 
                        tipoTit.append(tipot) 
                        parentesco.append(prt) 
                        first_name.append(valueF)
                        last_name.append(valueLn)
                        slast_name.append(valueSln)
                        fechaN.append(nac)
                        movimiento.append(mov)
                        antiguedadI.append(ant)
                        salary.append('')
                        sumAssured.append('')
                        smoker.append('')
                        email.append('')
                        genero.append(sx)
                        dependiente.append(dpnd)
                        subgrupo.append(subgrupo1)
                        categoría.append(categoría1)
                        paquetee.append(paquetee1)
                        certificate_number.append(certificate_number1)
                        administration.append(administration1)
                        certificadoActive.append(certificadoActive1)
                        reasoncacel.append(reasoncacel1)
                        renewable.append(renewable1)
                        fecha_baja_inciso.append(fecha_baja_inciso1)
                        fechaAlta.append(fa)
                        document_type.append(document_type1)
                        subramo__subramo_name.append(subramo__subramo_name1)
                        ramo.append(ramo1)
                        forma_de_pago.append(forma_de_pago1)
                        status.append(status1)
                        start_of_validity.append(start_of_validity1)
                        end_of_validity.append(end_of_validity1)
                        f_currency.append(f_currency1)
                        p_neta.append(p_neta1)
                        rpf.append(rpf1)
                        derecho.append(derecho1)
                        iva.append(iva1)
                        p_total.append(p_total1)
                        comision.append(comision1)
                        _id.append(_id1)
                        observations.append(observations1)
                        created_at.append(created_at1)
                        sucursal__sucursal_name.append(sucursal__sucursal_name1)
                        renewed_status.append(renewed_status1)
                        identifier.append(identifier1)
                        address.append(address1)
                        folioInterno.append(folio)
                        adjuntos.append(adj)
                        compartido.append(shr)
                        # try:
                        #     d = (rty.birthdate).strftime("%d/%m/%Y")
                        # except Exception as fdf:
                        #     d = (form[0].birthdate)
                        # vdp.append('Nombre: '+rty.first_name +' '+ str(rty.last_name)+' '+ str(rty.second_last_name)+', Fecha Nac.:'+str(d)+', Parentesco:'+str(checkRelation(int(rty.optional_relationship))))
                    dpnd = vdp
                except Exception as y:
                    dpnd = []
            else:
                value = ''
                valueM = '' 
                valueMod = '' 
                valueV = '' 
                valueY = ''
                valueLP = '' 
                valueE = '' 
                valueAd = '' 
                valueDr = ''
                tipot = ''  
                prt = ''   
                valueF = ''
                valueLn = ''
                valueSln = ''         
        elif r.ramo.ramo_code == 2:
            form = AccidentsDiseases.objects.filter(policy = r.id)
            if form:                
                value = form[0].personal.full_name
                p_neta1  = form[0].personal.p_neta
                derecho1 = form[0].personal.derecho
                rpf1  = form[0].personal.rpf
                iva1 = form[0].personal.iva
                p_total1 = form[0].personal.p_total
                comision1 = form[0].personal.comision
                if value:
                    value = ((((((value).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'') 
                else:
                    value = value
                valueF = form[0].personal.first_name
                valueLn = form[0].personal.last_name
                valueSln = form[0].personal.second_last_name
                try:
                    nac = (form[0].personal.birthdate).strftime("%d/%m/%Y")
                except Exception as fdf:
                    nac = (form[0].personal.birthdate)
                try:
                    mov = (form[0].personal.created_at).strftime("%d/%m/%Y")
                except Exception as fdf:
                    mov = (form[0].personal.created_at)
                try:
                    ant = (form[0].personal.antiguedad).strftime("%d/%m/%Y")
                except Exception as fdf:
                    ant = (form[0].personal.antiguedad)
                slr = form[0].personal.salary
                sumas = form[0].personal.sum_assured  
                smk = form[0].personal.smoker     
                if permiso_correos:
                    em = form[0].personal.email                                              
                else:
                    em = ''
                sx = form[0].personal.sex                                           
                if em:
                    if Pendients.objects.filter(poliza__id = r.id, email__iexact= em).exists():
                        shr = 'Si'
                    else:
                        shr  ='No'                                   
                tipot = 'Titular' 
                prt = 'Titular'               
                valueM = '' 
                valueMod = '' 
                valueV = '' 
                valueY = ''
                valueLP = '' 
                valueE = '' 
                valueAd = '' 
                valueDr = ''
                try:
                  fa = (form[0].personal.charge_date).strftime("%d/%m/%Y")
                except Exception as e:
                  fa = (form[0].personal.created_at).strftime("%d/%m/%Y")
                
                # --------------
                if r.certificado_inciso_activo ==False:
                  try: 
                    fecha_baja_inciso1 = (form[0].personal.discharge_date).strftime("%d/%m/%Y") if form[0].personal.discharge_date else ''
                  except Exception as e:
                    fecha_baja_inciso1 = str(r.fecha_baja_inciso.strftime("%d/%m/%Y") if r.fecha_baja_inciso else '' )
                  p_neta2 = str(float(form[0].personal.p_neta_earned)*-1)
                  rpf2 =str(float(form[0].personal.rpf_earned)*-1)
                  derecho2= str(float(form[0].personal.derecho_earned)*-1)
                  iva2=str(float(form[0].personal.iva_earned)*-1)
                  p_total2= str(float(form[0].personal.p_total_earned)*-1)
                else:
                  p_neta2 = str(0)
                  rpf2 =str(0)
                  derecho2= str(0)
                  iva2=str(0)
                  p_total2= str(0)
                try:
                  relEndA = EndorsementCert.objects.filter(certificate = r, org_name = r.org_name, endorsement__endorsement_type = 'A', endorsement__status =2).order_by('-endorsement__id')
                  if relEndA:
                    endA = ((((((relEndA[0].endorsement.number_endorsement).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'') 
                    fa = fa
                  else:
                    fa = ''
                    endA = ''
                except Exception as e:
                    fa = ''
                    endA = ''
                try:
                  relEndB = EndorsementCert.objects.filter(certificate = r, org_name = r.org_name, endorsement__endorsement_type = 'D', endorsement__status =2).order_by('-endorsement__id')
                  if relEndB:
                    endB = ((((((relEndB[0].endorsement.number_endorsement).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'') 
                  else:
                    endB = ''
                except Exception as e:
                  endB = ''
                
                if r.contributory:
                    contributoria.append('Si')
                else:
                    contributoria.append('No')
                rfccve.append(form[0].personal.rfc_cve)
                rfchomocve.append(form[0].personal.rfc_homocve)
                dom_cp.append(form[0].personal.dom_cp)
                dom_poblacion.append(form[0].personal.dom_poblacion)
                dom_estado.append(form[0].personal.dom_estado)
                dom_callenum.append(form[0].personal.dom_callenum)
                dom_colonia.append(form[0].personal.dom_colonia)
                compartido.append(shr)
                p_netaB.append(p_neta2)
                rpfB.append(rpf2)
                derechoB.append(derecho2)
                ivaB.append(iva2)
                p_totalB.append(p_total2)
                asegurado.append(value)
                dateRen.append(date_renovacion)
                otRen.append(ot_renovacion)
                referenciador.append(referenc)
                antiguedad.append(antig)
                creadopor.append(val_owner)
                contratante.append(contratante_e)
                contratanteE.append(contratanteE_e)
                contratanteP.append(contratanteP_e)
                contratanteG.append(contratanteG_e)
                responsable.append(val_resp)
                collection.append(val_col)
                paquete.append(pac)
                clave.append(cve)
                cp.append(pc)
                valueMA.append(valueM) 
                valueModA.append(valueMod)  
                valueVA.append(valueV) 
                valueYA.append(valueY) 
                valueLPA.append(valueLP)  
                valueEA.append(valueE)  
                valueAdA.append(valueAd)  
                valueDrA.append(valueDr) 
                valueClA.append(valueCl) 
                valueSerA.append(valueSer)  
                valueMAdA.append(valueMAd) 
                valueEqA.append(valueEq)
                valueMEqA.append(valueMEq)
                valueServA.append(valueServ)
                valueUsA.append(valueUs) 
                valuePrA.append(valuePr)       
                valueCargA.append(valueCarg)
                valueBPrA.append(valueBPr)
                valueBPraA.append(valueBPra)
                valueRfcA.append(valueRfc)
                asegs.append(asg) 
                tipoTit.append(tipot) 
                parentesco.append(prt) 
                first_name.append(valueF)
                last_name.append(valueLn)
                slast_name.append(valueSln)
                fechaN.append(nac)
                movimiento.append(mov)
                antiguedadI.append(ant)
                salary.append(slr)
                sumAssured.append(sumas)
                smoker.append(smk)
                email.append(em)
                genero.append(sx)
                dependiente.append(dpnd)
                subgrupo.append(subgrupo1)
                categoría.append(categoría1)
                paquetee.append(paquetee1)
                certificate_number.append(certificate_number1)
                administration.append(administration1)
                certificadoActive.append(certificadoActive1)
                reasoncacel.append(reasoncacel1)
                renewable.append(renewable1)
                fecha_baja_inciso.append(fecha_baja_inciso1)
                fechaAlta.append(fa)
                document_type.append(document_type1)
                subramo__subramo_name.append(subramo__subramo_name1)
                ramo.append(ramo1)
                forma_de_pago.append(forma_de_pago1)
                status.append(status1)
                start_of_validity.append(start_of_validity1)
                end_of_validity.append(end_of_validity1)
                f_currency.append(f_currency1)
                p_neta.append(p_neta1)
                rpf.append(rpf1)
                derecho.append(derecho1)
                iva.append(iva1)
                p_total.append(p_total1)
                comision.append(comision1)
                _id.append(_id1)
                observations.append(observations1)
                created_at.append(created_at1)
                sucursal__sucursal_name.append(sucursal__sucursal_name1)
                renewed_status.append(renewed_status1)
                identifier.append(identifier1)
                address.append(address1)
                folioInterno.append(folio)
                endAlta.append(endA)
                endBaja.append(endB)
                adjuntos.append(adj)
                formB = Relationship.objects.filter(accident = form[0])
                if formB:
                    vdp = []
                    try:
                        for rty in formB:
                            lenBene +=1
                            try: 
                              if rty.is_active ==False:
                                fecha_baja_inciso1 = (rty.discharge_date).strftime("%d/%m/%Y") if rty.discharge_date else ''
                            except Exception as e:
                              fecha_baja_inciso1 = str(r.fecha_baja_inciso.strftime("%d/%m/%Y") if r.fecha_baja_inciso else '' )
                            if rty.is_active ==False:
                              p_neta2 = str(float(rty.p_neta_earned)*-1)
                              rpf2 =str(float(rty.rpf_earned)*-1)
                              derecho2= str(float(rty.derecho_earned)*-1)
                              iva2=str(float(rty.iva_earned)*-1)
                              p_total2= str(float(rty.p_total_earned)*-1)
                            else:
                              p_neta2 = str(0)
                              rpf2 =str(0)
                              derecho2= str(0)
                              iva2=str(0)
                              p_total2= str(0)
                            try:
                                nac = (rty.birthdate).strftime("%d/%m/%Y")
                                d = (rty.birthdate).strftime("%d/%m/%Y")
                                mov = (rty.created_at).strftime("%d/%m/%Y")
                            except Exception as fdf:
                                nac = (rty.birthdate)
                                d = (rty.birthdate)
                                mov = (rty.created_at)
                            value = rty.full_name
                            valueF = rty.first_name
                            valueLn = rty.last_name
                            valueSln = rty.second_last_name
                            tipot = 'Dependiente'           
                            valueM = '' 
                            valueMod = '' 
                            valueV = '' 
                            valueY = ''
                            valueLP = '' 
                            valueE = '' 
                            valueAd = '' 
                            valueDr = ''
                            sx = rty.sex
                            try:
                                prt = str(checkRelation(rty.relationship)) 
                            except Exception as ee:
                                prt = 'Otro'
                            try:
                                ant = (rty.antiguedad).strftime("%d/%m/%Y")
                            except Exception as fdf:
                                ant = (rty.antiguedad)
                            try:
                              fa = (rty.charge_date).strftime("%d/%m/%Y")
                            except Exception as e:
                              fa = (rty.created_at).strftime("%d/%m/%Y")
                            try:
                              relEndA = EndorsementCert.objects.filter(relationship = rty, org_name = r.org_name, endorsement__endorsement_type = 'A', endorsement__status =2).order_by('-endorsement__id')
                              if relEndA:
                                endA = ((((((relEndA[0].endorsement.number_endorsement).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'') 
                                fa = fa
                              else:
                                fa = ''
                                endA = ''
                            except Exception as e:
                                fa = ''
                                endA = ''
                            try:
                              relEndB = EndorsementCert.objects.filter(relationship = rty, org_name = r.org_name, endorsement__endorsement_type = 'D', endorsement__status =2).order_by('-endorsement__id')
                              if relEndB:
                                endB = ((((((relEndB[0].endorsement.number_endorsement).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'') 
                              else:
                                endB = ''
                            except Exception as e:
                              endB = ''
                            if not endA:
                              try:
                                relEndA = EndorsementCert.objects.filter(certificate = r, org_name = r.org_name, endorsement__endorsement_type = 'A', endorsement__status =2).order_by('-endorsement__id')
                                if relEndA:
                                  endA = ((((((relEndA[0].endorsement.number_endorsement).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'') 
                                  fa = fa
                                else:
                                    fa = ''
                                    endA = ''
                              except Exception as e:
                                fa = ''
                                endA = ''
                            if not endB:
                              try:
                                relEndB = EndorsementCert.objects.filter(certificate = r, org_name = r.org_name, endorsement__endorsement_type = 'D', endorsement__status =2).order_by('-endorsement__id')
                                if relEndB:
                                  endB = ((((((relEndB[0].endorsement.number_endorsement).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'') 
                                else:
                                  endB = ''
                              except Exception as e:
                                endB = ''
                            endAlta.append(endA)
                            endBaja.append(endB)
                            compartido.append(shr)
                            # --------------
                            if r.contributory:
                                contributoria.append('Si')
                            else:
                                contributoria.append('No')
                            rfccve.append(rty.rfc_cve)
                            rfchomocve.append(rty.rfc_homocve)
                            dom_cp.append(rty.dom_cp)
                            dom_poblacion.append(rty.dom_poblacion)
                            dom_estado.append(rty.dom_estado)
                            dom_callenum.append(rty.dom_callenum)
                            dom_colonia.append(rty.dom_colonia)
                            dateRen.append(date_renovacion)
                            otRen.append(ot_renovacion)
                            referenciador.append('')
                            antiguedad.append('')
                            creadopor.append(val_owner)
                            contratante.append(contratante_e)
                            contratanteE.append(contratanteE_e)
                            contratanteP.append(contratanteP_e)
                            contratanteG.append(contratanteG_e)
                            responsable.append(val_resp)
                            collection.append(val_col)
                            paquete.append(pac)
                            clave.append(cve)
                            cp.append(pc)
                            valueMA.append(valueM) 
                            valueModA.append(valueMod)  
                            valueVA.append(valueV) 
                            valueYA.append(valueY) 
                            valueLPA.append(valueLP)  
                            valueEA.append(valueE)  
                            valueAdA.append(valueAd)  
                            valueDrA.append(valueDr) 
                            valueClA.append(valueCl) 
                            valueSerA.append(valueSer)  
                            valueMAdA.append(valueMAd) 
                            valueEqA.append(valueEq)
                            valueMEqA.append(valueMEq)
                            valueServA.append(valueServ)
                            valueUsA.append(valueUs) 
                            valuePrA.append(valuePr)       
                            valueCargA.append(valueCarg)
                            valueBPrA.append(valueBPr)
                            valueBPraA.append(valueBPra)
                            valueRfcA.append(valueRfc)
                            asegs.append(asg) 
                            tipoTit.append(tipot) 
                            parentesco.append(prt) 
                            first_name.append(valueF)
                            last_name.append(valueLn)
                            slast_name.append(valueSln)
                            fechaN.append(nac)
                            fechaAlta.append(fa)
                            movimiento.append(mov)
                            antiguedadI.append(ant)
                            salary.append('')
                            sumAssured.append('')
                            smoker.append('')
                            email.append('')
                            genero.append(sx)
                            dependiente.append(dpnd)
                            subgrupo.append(subgrupo1)
                            categoría.append(categoría1)
                            paquetee.append(paquetee1)
                            certificate_number.append(rty.certificate)
                            administration.append(administration1)
                            if certificadoActive1 == 'True'  or certificadoActive1 == True:
                                certificadoActive.append(rty.is_active)
                            else:
                                certificadoActive.append(certificadoActive1)
                            reasoncacel.append(reasoncacel1)
                            renewable.append(renewable1)
                            fecha_baja_inciso.append(fecha_baja_inciso1)
                            document_type.append(document_type1)
                            subramo__subramo_name.append(subramo__subramo_name1)
                            ramo.append(ramo1)
                            forma_de_pago.append(forma_de_pago1)
                            status.append(status1)
                            start_of_validity.append(start_of_validity1)
                            end_of_validity.append(end_of_validity1)
                            f_currency.append(f_currency1)
                            p_neta.append(rty.p_neta)
                            derecho.append(rty.derecho)
                            rpf.append(rty.rpf)
                            iva.append(rty.iva)
                            p_total.append(rty.p_total)
                            comision.append(rty.comision)
                            _id.append(_id1)
                            observations.append(observations1)
                            created_at.append(created_at1)
                            sucursal__sucursal_name.append(sucursal__sucursal_name1)
                            renewed_status.append(renewed_status1)
                            identifier.append(identifier1)
                            address.append(address1)
                            folioInterno.append(folio)
                            p_netaB.append(p_neta2)
                            rpfB.append(rpf2)
                            derechoB.append(derecho2)
                            ivaB.append(iva2)
                            p_totalB.append(p_total2)
                            adjuntos.append(adj)
                            # *******************+
                            # vdp.append('Nombre: '+rty.first_name +' '+ str(rty.last_name)+' '+ str(rty.second_last_name)+', Fecha Nac.:'+str(d)+', Parentesco:'+str(checkRelation(rty.relationship)))
                        dpnd = vdp
                    except Exception as y:
                        dpnd = []
                else:
                    dpnd = []
            else:
                value = ''
                valueM = '' 
                valueMod = '' 
                valueV = '' 
                valueY = ''
                valueLP = '' 
                valueE = '' 
                valueAd = '' 
                valueDr = ''
                tipot = ''  
                prt = ''   
                valueF = ''
                valueLn = ''
                valueSln = '' 
        elif r.subramo.subramo_code == 9:
            form = AutomobilesDamages.objects.filter(policy = r.id)
            if form:
                # value = form[0].brand + '-' + form[0].model + '-' + form[0].version+ '-' + form[0].serial
                value = form[0].beneficiary_name if form[0].beneficiary_name else form[0].driver
                if value:
                    value = ((((((value).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'') 
                else:
                    value = value
                valueM = form[0].brand 
                try:
                    valueMod = ((((((form[0].model).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    valueV = ((((((form[0].version).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                except Exception as ers:
                    valueMod = form[0].model
                    valueV = form[0].version
                valueY = form[0].year 
                valueLP = form[0].license_plates 
                valueE = form[0].engine 
                valueAd = form[0].adjustment 
                valueDr = form[0].driver 
                valueCl = form[0].color 
                valueSer = form[0].serial 
                valueMAd = form[0].mont_adjustment 
                valueEq = form[0].special_team 
                valueMEq = form[0].mont_special_team 
                valueServ = form[0].service 
                valueUs = checkUsage(form[0].usage if form[0].usage else 0)
                valuePr = checkProc(int(form[0].procedencia if form[0].procedencia else 0))
                valueCarg = checkCharge(int(form[0].charge_type if form[0].charge_type else 0))
                # valueBPr = ((((((form[0].preferential_benefiaciary).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                # valueBPra = form[0].beneficiary_address 
                # valueRfc = form[0].beneficiary_rfc 
                valueBPr = ((((((form[0].beneficiary_name if form[0].beneficiary_name else form[0].preferential_benefiaciary if form[0].preferential_benefiaciary else '').replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                valueBPra = ((((((form[0].beneficiary_address if form[0].beneficiary_address else '').replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                valueRfc = ((((((form[0].beneficiary_rfc if form[0].beneficiary_rfc else '').replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                
                em = form[0].email 
                if em:
                    if Pendients.objects.filter(poliza__id = r.id, email__iexact= em).exists():
                        shr = 'Si'
                    else:
                        shr  ='No' 
                tipot = 'Inciso'
                prt = 'Inciso'                
                try:
                    mov = (form[0].created_at).strftime("%d/%m/%Y")
                except Exception as fdf:
                    mov = (form[0].created_at)

                try:
                    ant = (form[0].antiguedad).strftime("%d/%m/%Y")
                except Exception as fdf:
                    ant = (form[0].created_at)
                if r.certificado_inciso_activo ==False:
                    try:
                        p_neta2 = str(float(r.p_neta_earned)*-1)
                    except:
                        p_neta2 = str(0)
                    try:
                        rpf2 =str(float(r.rpf_earned)*-1)
                    except:
                        rpf2 =str(0)
                    try:
                        derecho2= str(float(r.derecho_earned)*-1)
                    except:
                        derecho2= str(0)
                    try:
                        iva2=str(float(r.iva_earned)*-1)
                    except:
                        iva2=str(0)
                    try:
                        p_total2= str(float(r.p_total_earned)*-1)
                    except:
                        p_total2= str(0)
                else:
                  p_neta2 = str(0)
                  rpf2 =str(0)
                  derecho2= str(0)
                  iva2=str(0)
                  p_total2= str(0)
                try:
                  relEndA = EndorsementCert.objects.filter(certificate = r, org_name = r.org_name, endorsement__endorsement_type = 'A', endorsement__status =2).order_by('-endorsement__id')
                  if relEndA:
                    endA = ((((((relEndA[0].endorsement.number_endorsement).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'') 
                  else:
                    fa = ''
                    endA = ''
                except Exception as e:
                    fa = ''
                    endA = ''
                try:
                  relEndB = EndorsementCert.objects.filter(certificate = r, org_name = r.org_name, endorsement__endorsement_type = 'D', endorsement__status =2).order_by('-endorsement__id')
                  if relEndB:
                    endB = ((((((relEndB[0].endorsement.number_endorsement).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'') 
                  else:
                    endB = ''
                except Exception as e:
                  endB = ''
                
                compartido.append(shr)
                endAlta.append(endA)
                endBaja.append(endB)
                p_netaB.append(p_neta2)
                rpfB.append(rpf2)
                derechoB.append(derecho2)
                ivaB.append(iva2)
                p_totalB.append(p_total2)
                # --------------
                asegurado.append(value)
                dateRen.append(date_renovacion)
                otRen.append(ot_renovacion)
                referenciador.append(referenc)
                antiguedad.append(antig)
                creadopor.append(val_owner)
                contratante.append(contratante_e)
                contratanteE.append(contratanteE_e)
                contratanteP.append(contratanteP_e)
                contratanteG.append(contratanteG_e)
                responsable.append(val_resp)
                collection.append(val_col)
                paquete.append(pac)
                clave.append(cve)
                cp.append(pc)
                valueMA.append(valueM) 
                valueModA.append(valueMod)  
                valueVA.append(valueV) 
                valueYA.append(valueY) 
                valueLPA.append(valueLP)  
                valueEA.append(valueE)  
                valueAdA.append(valueAd)  
                valueDrA.append(valueDr) 
                valueClA.append(valueCl) 
                valueSerA.append(valueSer)  
                valueMAdA.append(valueMAd) 
                valueEqA.append(valueEq)
                valueMEqA.append(valueMEq)
                valueServA.append(valueServ)
                valueUsA.append(valueUs) 
                valuePrA.append(valuePr)       
                valueCargA.append(valueCarg)
                valueBPrA.append(valueBPr)
                valueBPraA.append(valueBPra)
                valueRfcA.append(valueRfc)
                asegs.append(asg) 
                tipoTit.append(tipot) 
                parentesco.append(prt) 
                first_name.append(valueF)
                last_name.append(valueLn)
                slast_name.append(valueSln)
                fechaN.append(nac)
                movimiento.append(mov)
                antiguedadI.append(ant)
                salary.append(slr)
                sumAssured.append(sumas)
                smoker.append(smk)
                email.append(em)
                genero.append(sx)
                dependiente.append(dpnd)
                subgrupo.append(subgrupo1)
                categoría.append(categoría1)
                paquetee.append(paquetee1)
                certificate_number.append(certificate_number1)
                administration.append(administration1)
                certificadoActive.append(certificadoActive1)
                reasoncacel.append(reasoncacel1)
                renewable.append(renewable1)
                fecha_baja_inciso.append(fecha_baja_inciso1)
                document_type.append(document_type1)
                subramo__subramo_name.append(subramo__subramo_name1)
                ramo.append(ramo1)
                forma_de_pago.append(forma_de_pago1)
                status.append(status1)
                start_of_validity.append(start_of_validity1)
                end_of_validity.append(end_of_validity1)
                f_currency.append(f_currency1)
                p_neta.append(p_neta1)
                rpf.append(rpf1)
                derecho.append(derecho1)
                iva.append(iva1)
                p_total.append(p_total1)
                comision.append(comision1)
                _id.append(_id1)
                observations.append(observations1)
                created_at.append(created_at1)
                sucursal__sucursal_name.append(sucursal__sucursal_name1)
                renewed_status.append(renewed_status1)
                identifier.append(identifier1)
                address.append(address1)
                folioInterno.append(folio)
                fechaAlta.append(fa)
                adjuntos.append(adj)
            else:
                value = ''
                valueM = '' 
                valueMod = '' 
                valueV = '' 
                valueY = ''
                valueLP = '' 
                valueE = '' 
                valueAd = '' 
                valueDr = ''
                tipot = ''
                prt = ''
        elif r.ramo.ramo_code == 3 and not r.subramo.subramo_code == 9:
            form = Damages.objects.filter(policy = r.id)
            if form:
                value = str(form[0].insured_item if form[0].insured_item else '') +'-'+ str(form[0].item_address if form[0].item_address else '') + '-'+str(form[0].item_details if form[0].item_details else '')
                if value:
                    value = ((((((value).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'') 
                else:
                    value = value
                tipot = 'Ubicación'
                valueM = '' 
                valueMod = '' 
                valueV = '' 
                valueY = ''
                valueLP = '' 
                valueE = '' 
                valueAd = '' 
                valueDr = ''
                prt = 'Ubicación'
                # --------------
                if r.certificado_inciso_activo ==False:
                  p_neta2 = str(float(r.p_neta_earned)*-1)
                  rpf2 =str(float(r.rpf_earned)*-1)
                  derecho2= str(float(r.derecho_earned)*-1)
                  iva2=str(float(r.iva_earned)*-1)
                  p_total2= str(float(r.p_total_earned)*-1)
                else:
                  p_neta2 = str(0)
                  rpf2 =str(0)
                  derecho2= str(0)
                  iva2=str(0)
                  p_total2= str(0)
                try:
                  relEndA = EndorsementCert.objects.filter(certificate = r, org_name = r.org_name, endorsement__endorsement_type = 'A', endorsement__status =2).order_by('-endorsement__id')
                  if relEndA:
                    endA = ((((((relEndA[0].endorsement.number_endorsement).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'') 
                  else:
                    fa = ''
                    endA = ''
                except Exception as e:
                  fa = ''
                  endA = ''
                try:
                  relEndB = EndorsementCert.objects.filter(certificate = r, org_name = r.org_name, endorsement__endorsement_type = 'D', endorsement__status =2).order_by('-endorsement__id')
                  if relEndB:
                    endB = ((((((relEndB[0].endorsement.number_endorsement).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'') 
                  else:
                    endB = ''
                except Exception as e:
                  endB = ''
                em = form[0].email
                if em:
                    if Pendients.objects.filter(poliza__id = r.id, email__iexact= em).exists():
                        shr = 'Si'
                    else:
                        shr  ='No' 
                compartido.append(shr)
                endAlta.append(endA)
                endBaja.append(endB)
                p_netaB.append(p_neta2)
                rpfB.append(rpf2)
                derechoB.append(derecho2)
                ivaB.append(iva2)
                p_totalB.append(p_total2)
                asegurado.append(value)
                dateRen.append(date_renovacion)
                otRen.append(ot_renovacion)
                referenciador.append(referenc)
                antiguedad.append(antig)
                creadopor.append(val_owner)
                contratante.append(contratante_e)
                contratanteE.append(contratanteE_e)
                contratanteP.append(contratanteP_e)
                contratanteG.append(contratanteG_e)
                responsable.append(val_resp)
                collection.append(val_col)
                paquete.append(pac)
                clave.append(cve)
                cp.append(pc)
                valueMA.append(valueM) 
                valueModA.append(valueMod)  
                valueVA.append(valueV) 
                valueYA.append(valueY) 
                valueLPA.append(valueLP)  
                valueEA.append(valueE)  
                valueAdA.append(valueAd)  
                valueDrA.append(valueDr) 
                valueClA.append(valueCl) 
                valueSerA.append(valueSer)  
                valueMAdA.append(valueMAd) 
                valueEqA.append(valueEq)
                valueMEqA.append(valueMEq)
                valueServA.append(valueServ)
                valueUsA.append(valueUs) 
                valuePrA.append(valuePr)       
                valueCargA.append(valueCarg)
                valueBPrA.append(valueBPr)
                valueBPraA.append(valueBPra)
                valueRfcA.append(valueRfc)
                asegs.append(asg) 
                tipoTit.append(tipot) 
                parentesco.append(prt) 
                first_name.append(valueF)
                last_name.append(valueLn)
                slast_name.append(valueSln)
                fechaN.append(nac)
                movimiento.append(mov)
                antiguedadI.append(ant)
                salary.append(slr)
                sumAssured.append(sumas)
                smoker.append(smk)
                email.append(em)
                genero.append(sx)
                dependiente.append(dpnd)
                subgrupo.append(subgrupo1)
                categoría.append(categoría1)
                paquetee.append(paquetee1)
                certificate_number.append(certificate_number1)
                administration.append(administration1)
                certificadoActive.append(certificadoActive1)
                reasoncacel.append(reasoncacel1)
                renewable.append(renewable1)
                fecha_baja_inciso.append(fecha_baja_inciso1)
                document_type.append(document_type1)
                subramo__subramo_name.append(subramo__subramo_name1)
                ramo.append(ramo1)
                forma_de_pago.append(forma_de_pago1)
                status.append(status1)
                start_of_validity.append(start_of_validity1)
                end_of_validity.append(end_of_validity1)
                f_currency.append(f_currency1)
                p_neta.append(p_neta1)
                rpf.append(rpf1)
                derecho.append(derecho1)
                iva.append(iva1)
                p_total.append(p_total1)
                comision.append(comision1)
                _id.append(_id1)
                observations.append(observations1)
                created_at.append(created_at1)
                sucursal__sucursal_name.append(sucursal__sucursal_name1)
                renewed_status.append(renewed_status1)
                identifier.append(identifier1)
                address.append(address1)
                folioInterno.append(folio)
                fechaAlta.append(fa)
                adjuntos.append(adj)
            else:
                value = ''
                valueM = '' 
                valueMod = '' 
                valueV = '' 
                valueY = ''
                valueLP = '' 
                valueE = '' 
                valueAd = '' 
                valueDr = ''
                tipot = ''
                prt = ''
        if value:
            value = ((((((value).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'') 
        else:
            value = value
        if form == None:
            compartido.append(shr)
            endAlta.append(endA)
            endBaja.append(endB)
            p_netaB.append(p_neta2)
            rpfB.append(rpf2)
            derechoB.append(derecho2)
            ivaB.append(iva2)
            p_totalB.append(p_total2)
            asegurado.append(value)
            dateRen.append(date_renovacion)
            otRen.append(ot_renovacion)
            referenciador.append(referenc)
            antiguedad.append(antig)
            creadopor.append(val_owner)
            contratante.append(contratante_e)
            contratanteE.append(contratanteE_e)
            contratanteP.append(contratanteP_e)
            contratanteG.append(contratanteG_e)
            responsable.append(val_resp)
            collection.append(val_col)
            paquete.append(pac)
            clave.append(cve)
            cp.append(pc)
            valueMA.append(valueM) 
            valueModA.append(valueMod)  
            valueVA.append(valueV) 
            valueYA.append(valueY) 
            valueLPA.append(valueLP)  
            valueEA.append(valueE)  
            valueAdA.append(valueAd)  
            valueDrA.append(valueDr) 
            valueClA.append(valueCl) 
            valueSerA.append(valueSer)  
            valueMAdA.append(valueMAd) 
            valueEqA.append(valueEq)
            valueMEqA.append(valueMEq)
            valueServA.append(valueServ)
            valueUsA.append(valueUs) 
            valuePrA.append(valuePr)       
            valueCargA.append(valueCarg)
            valueBPrA.append(valueBPr)
            valueBPraA.append(valueBPra)
            valueRfcA.append(valueRfc)
            asegs.append(asg) 
            tipoTit.append(tipot) 
            parentesco.append(prt) 
            first_name.append(valueF)
            last_name.append(valueLn)
            slast_name.append(valueSln)
            fechaN.append(nac)
            movimiento.append(mov)
            antiguedadI.append(ant)
            salary.append(slr)
            sumAssured.append(sumas)
            smoker.append(smk)
            email.append(em)
            genero.append(sx)
            dependiente.append(dpnd)
            subgrupo.append(subgrupo1)
            categoría.append(categoría1)
            paquetee.append(paquetee1)
            certificate_number.append(certificate_number1)
            administration.append(administration1)
            certificadoActive.append(certificadoActive1)
            reasoncacel.append(reasoncacel1)
            renewable.append(renewable1)
            fecha_baja_inciso.append(fecha_baja_inciso1)
            document_type.append(document_type1)
            subramo__subramo_name.append(subramo__subramo_name1)
            ramo.append(ramo1)
            forma_de_pago.append(forma_de_pago1)
            status.append(status1)
            start_of_validity.append(start_of_validity1)
            end_of_validity.append(end_of_validity1)
            f_currency.append(f_currency1)
            p_neta.append(p_neta1)
            rpf.append(rpf1)
            derecho.append(derecho1)
            iva.append(iva1)
            p_total.append(p_total1)
            comision.append(comision1)
            _id.append(_id1)
            observations.append(observations1)
            created_at.append(created_at1)
            sucursal__sucursal_name.append(sucursal__sucursal_name1)
            renewed_status.append(renewed_status1)
            identifier.append(identifier1)
            address.append(address1)
            folioInterno.append(folio)
            fechaAlta.append(fa)
            adjuntos.append(adj)
            if r.contributory:
                contributoria.append('Si')
            else:
                contributoria.append('No')
            rfccve.append('')
            rfchomocve.append('')
            dom_cp.append('')
            dom_poblacion.append('')
            dom_estado.append('')
            dom_callenum.append('')
            dom_colonia.append('')
    obj = {
        'compartido'   : str(list(compartido)),
        'movimiento'   : str(list(movimiento)),
        'sum_asured'   : str(list(sumAssured)),
        'smoker'   : str(list(smoker)),
        'email'   : str(list(email)),
        'subgrupo'   : str(list(subgrupo)),
        'categoría'   : str(list(categoría)),
        'paquetee'   : str(list(paquetee)),
        'poliza_number'   : str(pol_num),
        'certificate_number'   : str(list(certificate_number)),
        'administration'   : str(list(administration)),
        'certificadoActive'   : str(list(certificadoActive)),
        'reasoncacel'   : str(list(reasoncacel)),
        'renewable'   : str(list(renewable)),
        'fecha_baja_inciso'   : str(list(fecha_baja_inciso)) ,
        'document_type'   : str(list(document_type)),
        'contratante'   : str(list(contratante)),
        'contratanteE'   : str(list(contratanteE)),
        'contratanteP'   : str(list(contratanteP)),
        'contratanteG'   : str(list(contratanteG)),
        'aseguradora'   : str(list(asegs)),
        'tipoTit'   : str(list(tipoTit)),
        'parentesco'   : str(list(parentesco)),
        'first_name'   : str(list(first_name)),
        'last_name'   : str(list(last_name)),
        'slast_name'   : str(list(slast_name)),
        'fechaN'   : str(list(fechaN)),
        'salary'   : str(list(salary)),
        'antiguedadI'   : str(list(antiguedadI)),
        'genero'   : str(list(genero)),
        'subramo__subramo_name'   : str(list(subramo__subramo_name)),
        'ramo'   : str(list(ramo)),
        'forma_de_pago'   : str(list(forma_de_pago)),
        'status'   : str(list(status)),
        'start_of_validity'   : str(list(start_of_validity)) ,
        'end_of_validity'   : str(list(end_of_validity)) ,
        'f_currency'   : str(list(f_currency)),
        'p_neta'   : str(list(p_neta)),
        'rpf'   : str(list(rpf)),
        'derecho'   : str(list(derecho)),
        'iva'   : str(list(iva)),
        'p_total'   : str(list(p_total)),
        # ---
        'p_neta2'   : str(list(p_netaB)),
        'rpf2'   : str(list(rpfB)),
        'derecho2'   : str(list(derechoB)),
        'iva2'   : str(list(ivaB)),
        'p_total2'   : str(list(p_totalB)),
        # -------
        'comision'   : str(list(comision)),
        '_id'   : str(list(_id)),
        'observations'   : str(list(observations)),
        'created_at'   : str(list(created_at))  ,
        'clave'   : str(list(clave)),
        'sucursal__sucursal_name'   : str(list(sucursal__sucursal_name)),
        'renewed_status': str(list(renewed_status)),
        'paquete': str(list(paquete)),
        # 'identifier': str(list(certificados.values_list('identifier', flat = True))),
        'identifier'   : str(list(identifier)),  
        'address': str(list(address)),
        'cp': str(list(cp)),
        'dateRen'   : str(list(dateRen)),
        'collection'   : str(list(collection)),
        'otRen'   : str(list(otRen)),
        'asegurado'   : str(list(asegurado)),
        'marca'   : str(list(valueMA)),
        'modelo'   : str(list(valueModA)),
        'version'   : str(list(valueVA)),
        'anio'   : str(list(valueYA)),
        'placa'   : str(list(valueLPA)),
        'motor'   : str(list(valueEA)),
        'adaptaciones'   : str(list(valueAdA)),
        'conductor'   : str(list(valueDrA)),
        'referenciador'   : str(list(referenciador)),
        'antiguedad'   : str(list(antiguedad)),
        'creadopor'   : str(list(creadopor)),
        'responsable'   : str(list(responsable)),
        'dependiente'   : str(list(dependiente)),
        'color':str(list(valueClA)) ,
        'serial': str(list(valueSerA)),
        'montoAdq': str(list(valueMAdA)),
        'equipamiento': str(list(valueEqA)),
        'montoEq':str(list(valueMEqA)),
        'servicio':str(list(valueServA)),
        'uso': str(list(valueUsA)),
        'procedencia': str(list(valuePrA)),
        'carga': str(list(valueCargA)),
        'benPref': str(list(valueBPrA)),
        'benAdres':str(list(valueBPraA)),
        'benRfc': str(list(valueRfcA)),
        'folio': str(list(folioInterno)),
        'fechaAlta': str(list(fechaAlta)),
        'endAlta': str(list(endAlta)),
        'endBaja': str(list(endBaja)),
        'adjuntos': str(list(adjuntos)),
        'contributory': str(list(contributoria)),
        'rfc_cve': str(list(rfccve)),
        'rfc_homocve': str(list(rfchomocve)),
        'dom_cp': str(list(dom_cp)),
        'dom_poblacion' : str(list(dom_poblacion)),
        'dom_estado': str(list(dom_estado)),
        'dom_callenum': str(list(dom_callenum)),
        'dom_colonia': str(list(dom_colonia)),
        'tipo_reporte': tipo_reporte,
        'subBranch': subBranch,
        'branch': branch,
        'email_org':info_org['email'],
        'phone_org':info_org['phone'],
        'webpage_org':info_org['webpage'],
        'address_org':info_org['address'],
        'urlname_org':info_org['name'],
        }  
    obj['columns'] = str(list(columns)) 
    obj['imagen'] = archivo_imagen
    obj['registros'] = len(certificados)
    try:
        obj['lenbeneficiarios'] = lenBene
    except Exception as eR:
        obj['lenbeneficiarios'] = 0
    r = requests.post(settings.SERVICEEXCEL_URL + 'get-certificateExcel/', obj,
    # headers = {
    # 'Authorization':'Bearer %s'%request.user.user_info.fi_token_refresh,
    # # 'Content-Type':'application/json' 
    # }, 
    stream=True)
    response_data= r.text

    response = HttpResponse(r.content,content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

    return response


import sys, os
# Caratula polizas
@api_view(['POST'])
@permission_classes((IsAuthenticatedV2, IsOrgMemberV2))
def Service_CaratulapolizasExcel(request):
    columns = ['Tipo', 'No.Certificado','No.Póliza','Subramo','Estatus', 
               'Vigencia Inicio', 'Vigencia Fin', 'Prima Neta', 'RPF', 'Derecho', 'IVA', 'Prima Total', 'Comisión',
               'Asegurado', 'Observaciones', 'Referenciador', 'Fecha de creación', 'Creado por','Estado Circulación']
    try:
        org_name =  request.GET.get('org')
        policy_filters = []
        # ----------------------------
        cadena_ = str(request.data['cadena'])
        cadena_s = cadena_.split()  
        contractors = []        
        # -------NEW-------------   
        if cadena_s:
            cntrtc_filters = [Q(full_name__icontains = q) for q in cadena_s]
            contractors = Contractor.objects.filter(reduce(and_, cntrtc_filters), org_name = org_name, is_active = True)
        # -----------------------
        parent_filters = [Q(poliza_number__icontains = str(request.data['cadena']))]
        parents = Polizas.objects.filter(reduce(OR, parent_filters), document_type__in = [11], org_name = org_name).values_list('id', flat = True)

        policy_filters.append(Q(poliza_number__icontains = str(request.data['cadena'])))

        titular_filters = [Q(full_name__icontains = str(request.data['cadena'])), 
                                            Q(first_name__icontains = str(request.data['cadena'])),
                                            Q(last_name__icontains = str(request.data['cadena'])),
                                            Q(second_last_name__icontains = str(request.data['cadena']))]
        
        autos_filters = [Q(serial__icontains = str(request.data['cadena'])),
                            Q(driver__icontains = str(request.data['cadena'])),
                            Q(brand__icontains = str(request.data['cadena']))]  

        tit = Personal_Information.objects.filter(reduce(OR, titular_filters), org_name = request.GET.get('org')).values_list('id',flat = True)

        life = Life.objects.filter(personal__in = list(tit)).values_list('policy', flat = True)
        ad = AccidentsDiseases.objects.filter(personal__in = list(tit)).values_list('policy', flat = True)
        autos = AutomobilesDamages.objects.filter(reduce(OR, autos_filters), org_name = request.GET.get('org')).values_list('policy', flat = True) 
        relationship_filters = [Q(full_name__icontains = str(request.data['cadena'])), 
                                            Q(first_name__icontains = str(request.data['cadena'])),
                                            Q(last_name__icontains = str(request.data['cadena'])),
                                            Q(second_last_name__icontains = str(request.data['cadena']))]
        rel = Relationship.objects.filter(reduce(OR, relationship_filters), org_name = request.GET.get('org')).values_list('accident__policy',flat = True) 
        beneficiaries_filters = [Q(full_name__icontains = str(request.data['cadena'])), 
                                            Q(first_name__icontains = str(request.data['cadena'])),
                                            Q(last_name__icontains = str(request.data['cadena'])),
                                            Q(second_last_name__icontains = str(request.data['cadena']))]
        ben = Beneficiaries.objects.filter(reduce(OR, beneficiaries_filters), org_name = request.GET.get('org')).values_list('life__policy',flat = True)
        
        policy_filters.append(Q(id__in = ben))

        policy_filters.append(Q(id__in = rel))
        policy_filters.append(Q(id__in = life))
        policy_filters.append(Q(id__in = ad))
        policy_filters.append(Q(id__in = autos))
        policy_filters.append(Q(folio__icontains = str(request.data['cadena'])))

        policy_filters.append(Q(contractor__in = list(contractors)))
        polizas_2 = []
        certificates = []
        if  int(request.data['parent']):
            polizas_2 = Polizas.objects.filter(reduce(OR, policy_filters), document_type__in = [12], org_name = org_name, caratula = request.data['parent']).distinct('id')#.exclude(status__in = [1,2,0])
            if request.data['cadena']:
                certificates = Polizas.objects.filter(poliza_number__icontains = str(request.data['cadena']), org_name = org_name,
                                                document_type__in = [12],   caratula = request.data['parent'])


        for cert in certificates:
            if not cert in polizas_2:
                polizas_2.append(cert)
    except Exception as e:
        org_name =  request.GET.get('org')
        policy_filters = []        
        # -------NEW-------------       
        cntrtc_filters = [Q(full_name__icontains = q) for q in cadena_s]
        contractors = Contractor.objects.filter(org_name = org_name, is_active = True)
        # -----------------------
        parents = Polizas.objects.filter(document_type__in = [11], org_name = org_name).values_list('id', flat = True)
        policy_filters.append(Q(contractor__in = list(contractors)))
        polizas_2 = []
        if  int(request.data['parent']):
            polizas_2 = Polizas.objects.filter(reduce(OR, policy_filters), document_type__in = [12], org_name = org_name, caratula = request.data['parent']).distinct('id')#.exclude(status__in = [1,2,0])
            certificates = Polizas.objects.filter(org_name = org_name, document_type__in = [12], caratula = request.data['parent'])

        for cert in certificates:
            if not cert in polizas_2:
                polizas_2.append(cert)
    certificados = polizas_2
    serializer = PolizaCaratulaResumeInfoSerializer(certificados, context={'request': request}, many=True)
    try:
        pol_num = Polizas.objects.get(id=certificados[0].caratula).poliza_number
    except Exception as dfs:
        pol_num =''
    try:
        subBranch = certificados[0].subramo
    except Exception as e:
        subBranch = 'None'
    try:
        branch = certificados[0].ramo
    except Exception as e:
        branch = 'None'
    columns = []
    info_org = getInfoOrg(request)
    if len(info_org['logo']) != 0:
        archivo_imagen = 'https://miurabox-public.s3.amazonaws.com/cas/' + info_org['logo']
        # archivo_imagen = get_presigned_url("cas/{url}".format(url=info_org['logo']),28800) 
    else:
            archivo_imagen = 'saam.jpg'
    tipo_reporte = 'Reporte de Colectividad'
    asegurado = []
    antiguedad = []
    referenciador = []
    creadopor = []
    dateRen = []
    otRen = []
    responsable = []
    contratante = []
    contratanteE = []
    contratanteP = []
    contratanteG = []
    collection = []
    clave = []
    cp = []
    paquete = []
    valueMA = []  
    valueModA = [] 
    valueVA = [] 
    valueYA = [] 
    valueLPA = [] 
    valueEA = [] 
    valueAdA = [] 
    valueDrA = []
    asegs = []
    tipoTit = []
    parentesco = []
    first_name = []
    last_name = []
    slast_name = []
    fechaN = []
    valueF = ''
    valueLn = ''
    valueSln = ''
    nac = ''
    movimiento = []
    mov = ''
    antiguedadI = []
    ant = ''
    salary = []
    slr = ''    
    sumAssured = []
    sumas = ''
    smoker = []
    smk = ''
    email  =[]
    em = ''
    genero  =[]
    sx = ''
    dependiente  =[]
    dpnd = ''
    valueCl = ''
    valueSer = '' 
    valueMAd ='' 
    valueEq ='' 
    valueMEq ='' 
    valueServ ='' 
    valueUs = ''
    valuePr =''
    valueCarg =''
    valueBPr ='' 
    valueBPra ='' 
    valueRfc ='' 

    valueClA = [] 
    valueSerA = []  
    valueMAdA = [] 
    valueEqA = []
    valueMEqA = []
    valueServA = []
    valueUsA = [] 
    valuePrA = []
    valueCargA = []
    valueBPrA = [] 
    valueBPraA = []
    valueRfcA = []
    subgrupo = []
    categoría = []
    paquetee = []
    certificate_number = []
    administration = []
    certificadoActive = []
    reasoncacel = []
    renewable = []
    fecha_baja_inciso = []
    document_type = []
    subramo__subramo_name = []
    ramo = []
    forma_de_pago = []
    status = []
    start_of_validity = []
    end_of_validity = []
    f_currency = []
    p_neta = []
    rpf = []
    derecho = []
    iva = []
    p_total = []
    comision = []
    _id = []
    observations = []
    created_at = []
    sucursal__sucursal_name = []
    renewed_status = []
    identifier = []
    address = []
    # certificados = certificados.order_by('natural__full_name','juridical__j_name')
    if certificados:
        certificados = certificados.order_by('id')
    form = None
    formB = None
    lenBene = 0
    folio = ''
    folioInterno = []
    caratula = []
    p_inicio = []
    p_fin = []
    p_estatus = []
    subr = []
    estadoc = []
    
    for r in certificados:   
        contratante_e = ''
        contratanteE_e = ''
        contratanteP_e = ''
        contratanteG_e = ''
        if r.state_circulation:
            valstate = r.state_circulation
            try:
                valstate = getStates(int(r.state_circulation))
            except:
                valstate = valstate.state
        else:
            valstate = ''
        try:
            asg = r.aseguradora.alias                
        except Exception as er:
            asg = r.parent.aseguradora.alias   
        ramo1 = ''
        subR = r.parent.subramo.subramo_name
        carat = r.parent.poliza_number
        subgrupo1 = ''
        categoría1 = ''
        try:
            paquetee1 = str(r.paquete.package_name)
        except Exception as er:
            paquetee1 = ''
        certificate_number1 = str(r.poliza_number)
        administration1 = str(r.administration_type)
        certificadoActive1= str(r.certificado_inciso_activo)
        reasoncacel1 = str(r.reason_cancel)
        renewable1 = str(r.is_renewable)
        fecha_baja_inciso1 = str(r.fecha_baja_inciso.strftime("%d/%m/%Y") if r.fecha_baja_inciso else '' )
        document_type1 = str(r.document_type)
        subramo__subramo_name1 = str(r.subramo.subramo_name)
        ramo1= str(r.ramo.ramo_name)
        forma_de_pago1= str(r.forma_de_pago)
        status1=str(r.parent.status)
        status1_pc=str(r.status)
        start_of_validity1=str(r.parent.start_of_validity.strftime("%d/%m/%Y") if r.parent.start_of_validity else '' )
        end_of_validity1= str(r.parent.end_of_validity.strftime("%d/%m/%Y") if r.parent.end_of_validity else '' )
        start_of_validity1_pc=str(r.start_of_validity.strftime("%d/%m/%Y") if r.start_of_validity else '' )
        end_of_validity1_pc= str(r.end_of_validity.strftime("%d/%m/%Y") if r.end_of_validity else '' )
        f_currency1= str(r.f_currency)
        p_neta1 = str(r.p_neta)
        rpf1 =str(r.rpf)
        derecho1= str(r.derecho)
        iva1=str(r.iva)
        p_total1= str(r.p_total)
        comision1= str(r.comision)
        _id1 =str(r.id)
        folio =str((((((((r.folio).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')) if r.folio else '')
        observations1 = str((((((((r.observations).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')) if r.observations else '')
        created_at1 = str(r.created_at.strftime("%d/%m/%Y") if r.created_at else '')
        try:
            sucursal__sucursal_name1 = str(r.sucursal.sucursal_name)
        except Exception as ere:
            sucursal__sucursal_name1 = 'Sin sucursal'
        renewed_status1=str(r.renewed_status)
        identifier1=str((((((((r.identifier).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')) if r.identifier else '')
        try:
            address1= str(r.address.administrative_area_level_1)
        except Exception as ert:
            address1 = 'Sin dirección'

        if r.address:
           pc = r.address.postal_code
        else:
           pc = ''
        antig = get_antiguedad(r.start_of_validity)
        if r.owner:
            val_owner = r.owner.first_name + ' '+ str(r.owner.last_name)
        else:
            val_owner = ''
        if r.paquete:
            pac = r.paquete.package_name
        else:
            pac = ''
        if r.responsable:
            val_resp = r.responsable.first_name + ' '+ str(r.responsable.last_name)
        else:
            val_resp = ''
        if r.collection_executive:
            val_col = r.collection_executive.first_name + ' '+ str(r.collection_executive.last_name)
        else:
            val_col = ''
        if r.clave:
            try:
                cve = r.clave.name + ' '+ str(r.clave.clave)
                cve = ((((((cve).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
            except Exception as dfs:
                cve =''
        else:
            cve = ''
        sramo_e = r.subramo.subramo_name
        if r.document_type == 6:
            if r.contractor:
                contratante_e = ((((((r.contractor.full_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                contratanteE_e = r.contractor.email
                contratanteP_e = r.contractor.phone_number
                contratanteG_e = ((((((r.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')     
                # contratanteG_e = r.contractor.group.group_name
        else:
            if r.contractor:
                contratante_e = ((((((r.contractor.full_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                contratanteE_e = r.contractor.email
                contratanteP_e = r.contractor.phone_number
                contratanteG_e = ((((((r.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')     
                # contratanteG_e = r.contractor.group.group_name         

        try:
            old = OldPolicies.objects.filter(base_policy__id = r.id)
            try:
              date_renovacion = old[0].created_at.strftime("%d/%m/%Y")
            except Exception as rr:
                date_renovacion = 'Por renovar'
            try:
                ot_renovacion = old[0].new_policy.poliza_number if old[0].new_policy.poliza_number else old[0].new_policy.internal_number
            except Exception as rr:
                ot_renovacion = 'Por renovar'
        except Exception as dwe:
            date_renovacion = 'Por renovar'
            ot_renovacion = 'Por renovar'
        try:
            refs_policy = ReferenciadoresInvolved.objects.filter(policy = r.id,is_changed=False).values_list('referenciador__first_name','referenciador__last_name')
            if len(refs_policy):
                v = []
                try:
                    for it in refs_policy:
                        v.append(it[0] +' '+ str(it[1])+str('; '))
                    referenc = v
                except Exception as y:
                    referenc = []
            else:
                referenc = []
        except Exception as e:
            referenc = []

        if r.ramo.ramo_code == 1:
            form = Life.objects.filter(policy = r.id)
            if form:                
                value = form[0].personal.full_name
                if value:
                    value = ((((((value).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'') 
                else:
                    value = value
                valueF = form[0].personal.first_name
                valueLn = form[0].personal.last_name
                valueSln = form[0].personal.second_last_name
                try:
                    nac = (form[0].personal.birthdate).strftime("%d/%m/%Y")
                except Exception as fdf:
                    nac = (form[0].personal.birthdate)
                try:
                    mov = (form[0].personal.created_at).strftime("%d/%m/%Y")
                except Exception as fdf:
                    mov = (form[0].personal.created_at)
                try:
                    ant = (form[0].personal.antiguedad).strftime("%d/%m/%Y")
                except Exception as fdf:
                    ant = (form[0].personal.antiguedad)
                slr = form[0].personal.salary
                sumas = form[0].personal.sum_assured
                smk = form[0].personal.smoker
                em = form[0].personal.email
                sx = form[0].personal.sex                                                              
                tipot = 'Titular'
                prt = 'Titular'
                valueM = '' 
                valueMod = '' 
                valueV = '' 
                valueY = ''
                valueLP = '' 
                valueE = '' 
                valueAd = '' 
                valueDr = ''
                # --------------
                asegurado.append(value)
                estadoc.append(valstate)
                subr.append(subR)
                caratula.append(carat)
                p_inicio.append(start_of_validity1_pc)
                p_fin.append(end_of_validity1_pc)
                p_estatus.append(status1_pc)
                dateRen.append(date_renovacion)
                otRen.append(ot_renovacion)
                referenciador.append(referenc)
                antiguedad.append(antig)
                creadopor.append(val_owner)
                contratante.append(contratante_e)
                contratanteE.append(contratanteE_e)
                contratanteP.append(contratanteP_e)
                contratanteG.append(contratanteG_e)
                responsable.append(val_resp)
                collection.append(val_col)
                paquete.append(pac)
                clave.append(cve)
                cp.append(pc)
                valueMA.append(valueM) 
                valueModA.append(valueMod)  
                valueVA.append(valueV) 
                valueYA.append(valueY) 
                valueLPA.append(valueLP)  
                valueEA.append(valueE)  
                valueAdA.append(valueAd)  
                valueDrA.append(valueDr) 
                valueClA.append(valueCl) 
                valueSerA.append(valueSer)  
                valueMAdA.append(valueMAd) 
                valueEqA.append(valueEq)
                valueMEqA.append(valueMEq)
                valueServA.append(valueServ)
                valueUsA.append(valueUs) 
                valuePrA.append(valuePr)       
                valueCargA.append(valueCarg)
                valueBPrA.append(valueBPr)
                valueBPraA.append(valueBPra)
                valueRfcA.append(valueRfc)
                asegs.append(asg) 
                tipoTit.append(tipot) 
                parentesco.append(prt) 
                first_name.append(valueF)
                last_name.append(valueLn)
                slast_name.append(valueSln)
                fechaN.append(nac)
                movimiento.append(mov)
                antiguedadI.append(ant)
                salary.append(slr)
                sumAssured.append(sumas)
                smoker.append(smk)
                email.append(em)
                genero.append(sx)
                dependiente.append(dpnd)
                subgrupo.append(subgrupo1)
                categoría.append(categoría1)
                paquetee.append(paquetee1)
                certificate_number.append(certificate_number1)
                administration.append(administration1)
                certificadoActive.append(certificadoActive1)
                reasoncacel.append(reasoncacel1)
                renewable.append(renewable1)
                fecha_baja_inciso.append(fecha_baja_inciso1)
                document_type.append(document_type1)
                subramo__subramo_name.append(subramo__subramo_name1)
                ramo.append(ramo1)
                forma_de_pago.append(forma_de_pago1)
                status.append(status1)
                start_of_validity.append(start_of_validity1)
                end_of_validity.append(end_of_validity1)
                f_currency.append(f_currency1)
                p_neta.append(p_neta1)
                rpf.append(rpf1)
                derecho.append(derecho1)
                iva.append(iva1)
                p_total.append(p_total1)
                comision.append(comision1)
                _id.append(_id1)
                observations.append(observations1)
                created_at.append(created_at1)
                sucursal__sucursal_name.append(sucursal__sucursal_name1)
                renewed_status.append(renewed_status1)
                identifier.append(identifier1)
                address.append(address1)
                folioInterno.append(folio)
                formB = Beneficiaries.objects.filter(life = form[0])
                vdp = []
                try:
                    for rty in formB:
                        lenBene +=1
                        try:
                            nac = (rty.birthdate).strftime("%d/%m/%Y")
                            d = (rty.birthdate).strftime("%d/%m/%Y")
                            mov = (rty.created_at).strftime("%d/%m/%Y")
                        except Exception as fdf:
                            nac = (rty.birthdate)
                            d = (rty.birthdate)
                            mov = (rty.created_at)
                        value = rty.full_name
                        valueF = rty.first_name
                        valueLn = rty.last_name
                        valueSln = rty.second_last_name
                        tipot = 'Beneficiario'           
                        valueM = '' 
                        valueMod = '' 
                        valueV = '' 
                        valueY = ''
                        valueLP = '' 
                        valueE = '' 
                        valueAd = '' 
                        valueDr = ''
                        sx = rty.sex
                        try:
                            prt = str(checkRelation(int(rty.optional_relationship))) 
                        except Exception as er:
                            prt = 'Otro'
                        try:
                            ant = (rty.antiguedad).strftime("%d/%m/%Y")
                        except Exception as fdf:
                            ant = (rty.antiguedad)
                        # --------------
                        asegurado.append(value)
                        caratula.append(carat)
                        subr.append(subR)
                        p_inicio.append(start_of_validity1_pc)
                        p_fin.append(end_of_validity1_pc)
                        p_estatus.append(status1_pc)
                        dateRen.append(date_renovacion)
                        otRen.append(ot_renovacion)
                        referenciador.append('')
                        antiguedad.append('')
                        creadopor.append(val_owner)
                        contratante.append(contratante_e)
                        contratanteE.append(contratanteE_e)
                        contratanteP.append(contratanteP_e)
                        contratanteG.append(contratanteG_e)
                        responsable.append(val_resp)
                        collection.append(val_col)
                        paquete.append(pac)
                        clave.append(cve)
                        cp.append(pc)
                        estadoc.append(valstate)
                        valueMA.append(valueM) 
                        valueModA.append(valueMod)  
                        valueVA.append(valueV) 
                        valueYA.append(valueY) 
                        valueLPA.append(valueLP)  
                        valueEA.append(valueE)  
                        valueAdA.append(valueAd)  
                        valueDrA.append(valueDr) 
                        valueClA.append(valueCl) 
                        valueSerA.append(valueSer)  
                        valueMAdA.append(valueMAd) 
                        valueEqA.append(valueEq)
                        valueMEqA.append(valueMEq)
                        valueServA.append(valueServ)
                        valueUsA.append(valueUs) 
                        valuePrA.append(valuePr)       
                        valueCargA.append(valueCarg)
                        valueBPrA.append(valueBPr)
                        valueBPraA.append(valueBPra)
                        valueRfcA.append(valueRfc)
                        asegs.append(asg) 
                        tipoTit.append(tipot) 
                        parentesco.append(prt) 
                        first_name.append(valueF)
                        last_name.append(valueLn)
                        slast_name.append(valueSln)
                        fechaN.append(nac)
                        movimiento.append(mov)
                        antiguedadI.append(ant)
                        salary.append('')
                        sumAssured.append('')
                        smoker.append('')
                        email.append('')
                        genero.append(sx)
                        dependiente.append(dpnd)
                        subgrupo.append(subgrupo1)
                        categoría.append(categoría1)
                        paquetee.append(paquetee1)
                        certificate_number.append(certificate_number1)
                        administration.append(administration1)
                        certificadoActive.append(certificadoActive1)
                        reasoncacel.append(reasoncacel1)
                        renewable.append(renewable1)
                        fecha_baja_inciso.append(fecha_baja_inciso1)
                        document_type.append(document_type1)
                        subramo__subramo_name.append(subramo__subramo_name1)
                        ramo.append(ramo1)
                        forma_de_pago.append(forma_de_pago1)
                        status.append(status1)
                        start_of_validity.append(start_of_validity1)
                        end_of_validity.append(end_of_validity1)
                        f_currency.append(f_currency1)
                        p_neta.append(p_neta1)
                        rpf.append(rpf1)
                        derecho.append(derecho1)
                        iva.append(iva1)
                        p_total.append(p_total1)
                        comision.append(comision1)
                        _id.append(_id1)
                        observations.append(observations1)
                        created_at.append(created_at1)
                        sucursal__sucursal_name.append(sucursal__sucursal_name1)
                        renewed_status.append(renewed_status1)
                        identifier.append(identifier1)
                        address.append(address1)
                        folioInterno.append(folio)
                        # try:
                        #     d = (rty.birthdate).strftime("%d/%m/%Y")
                        # except Exception as fdf:
                        #     d = (form[0].birthdate)
                        # vdp.append('Nombre: '+rty.first_name +' '+ str(rty.last_name)+' '+ str(rty.second_last_name)+', Fecha Nac.:'+str(d)+', Parentesco:'+str(checkRelation(int(rty.optional_relationship))))
                    dpnd = vdp
                except Exception as y:
                    dpnd = []
            else:
                value = ''
                valueM = '' 
                valueMod = '' 
                valueV = '' 
                valueY = ''
                valueLP = '' 
                valueE = '' 
                valueAd = '' 
                valueDr = ''
                tipot = ''  
                prt = ''   
                valueF = ''
                valueLn = ''
                valueSln = ''         
        elif r.ramo.ramo_code == 2:
            form = AccidentsDiseases.objects.filter(policy = r.id)
            if form:                
                value = form[0].personal.full_name
                if value:
                    value = ((((((value).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'') 
                else:
                    value = value
                valueF = form[0].personal.first_name
                valueLn = form[0].personal.last_name
                valueSln = form[0].personal.second_last_name
                try:
                    nac = (form[0].personal.birthdate).strftime("%d/%m/%Y")
                except Exception as fdf:
                    nac = (form[0].personal.birthdate)
                try:
                    mov = (form[0].personal.created_at).strftime("%d/%m/%Y")
                except Exception as fdf:
                    mov = (form[0].personal.created_at)
                try:
                    ant = (form[0].personal.antiguedad).strftime("%d/%m/%Y")
                except Exception as fdf:
                    ant = (form[0].personal.antiguedad)
                slr = form[0].personal.salary
                sumas = form[0].personal.sum_assured  
                smk = form[0].personal.smoker                                              
                em = form[0].personal.email                                              
                sx = form[0].personal.sex                                           
                tipot = 'Titular' 
                prt = 'Titular'               
                valueM = '' 
                valueMod = '' 
                valueV = '' 
                valueY = ''
                valueLP = '' 
                valueE = '' 
                valueAd = '' 
                valueDr = ''
                # --------------
                asegurado.append(value)
                caratula.append(carat)
                subr.append(subR)
                p_inicio.append(start_of_validity1_pc)
                p_fin.append(end_of_validity1_pc)
                p_estatus.append(status1_pc)
                dateRen.append(date_renovacion)
                otRen.append(ot_renovacion)
                referenciador.append(referenc)
                antiguedad.append(antig)
                creadopor.append(val_owner)
                contratante.append(contratante_e)
                contratanteE.append(contratanteE_e)
                contratanteP.append(contratanteP_e)
                contratanteG.append(contratanteG_e)
                responsable.append(val_resp)
                collection.append(val_col)
                paquete.append(pac)
                clave.append(cve)
                cp.append(pc)
                valueMA.append(valueM) 
                valueModA.append(valueMod)  
                valueVA.append(valueV) 
                valueYA.append(valueY) 
                valueLPA.append(valueLP)  
                valueEA.append(valueE)  
                valueAdA.append(valueAd)  
                valueDrA.append(valueDr) 
                valueClA.append(valueCl) 
                valueSerA.append(valueSer)  
                valueMAdA.append(valueMAd) 
                valueEqA.append(valueEq)
                valueMEqA.append(valueMEq)
                valueServA.append(valueServ)
                valueUsA.append(valueUs) 
                valuePrA.append(valuePr)       
                valueCargA.append(valueCarg)
                valueBPrA.append(valueBPr)
                valueBPraA.append(valueBPra)
                valueRfcA.append(valueRfc)
                asegs.append(asg) 
                tipoTit.append(tipot) 
                parentesco.append(prt) 
                first_name.append(valueF)
                last_name.append(valueLn)
                slast_name.append(valueSln)
                fechaN.append(nac)
                movimiento.append(mov)
                antiguedadI.append(ant)
                salary.append(slr)
                sumAssured.append(sumas)
                smoker.append(smk)
                email.append(em)
                genero.append(sx)
                dependiente.append(dpnd)
                subgrupo.append(subgrupo1)
                categoría.append(categoría1)
                paquetee.append(paquetee1)
                certificate_number.append(certificate_number1)
                administration.append(administration1)
                certificadoActive.append(certificadoActive1)
                reasoncacel.append(reasoncacel1)
                renewable.append(renewable1)
                fecha_baja_inciso.append(fecha_baja_inciso1)
                document_type.append(document_type1)
                subramo__subramo_name.append(subramo__subramo_name1)
                ramo.append(ramo1)
                forma_de_pago.append(forma_de_pago1)
                status.append(status1)
                start_of_validity.append(start_of_validity1)
                end_of_validity.append(end_of_validity1)
                f_currency.append(f_currency1)
                p_neta.append(p_neta1)
                rpf.append(rpf1)
                derecho.append(derecho1)
                iva.append(iva1)
                p_total.append(p_total1)
                comision.append(comision1)
                _id.append(_id1)
                observations.append(observations1)
                created_at.append(created_at1)
                sucursal__sucursal_name.append(sucursal__sucursal_name1)
                renewed_status.append(renewed_status1)
                identifier.append(identifier1)
                address.append(address1)
                folioInterno.append(folio)
                estadoc.append(valstate)
                formB = Relationship.objects.filter(accident = form[0])
                if formB:
                    vdp = []
                    try:
                        for rty in formB:
                            lenBene +=1
                            try:
                                nac = (rty.birthdate).strftime("%d/%m/%Y")
                                d = (rty.birthdate).strftime("%d/%m/%Y")
                                mov = (rty.created_at).strftime("%d/%m/%Y")
                            except Exception as fdf:
                                nac = (rty.birthdate)
                                d = (rty.birthdate)
                                mov = (rty.created_at)
                            value = rty.full_name
                            valueF = rty.first_name
                            valueLn = rty.last_name
                            valueSln = rty.second_last_name
                            tipot = 'Dependiente'           
                            valueM = '' 
                            valueMod = '' 
                            valueV = '' 
                            valueY = ''
                            valueLP = '' 
                            valueE = '' 
                            valueAd = '' 
                            valueDr = ''
                            sx = rty.sex
                            try:
                                prt = str(checkRelation(rty.relationship)) 
                            except Exception as ee:
                                prt = 'Otro'
                            try:
                                ant = (rty.antiguedad).strftime("%d/%m/%Y")
                            except Exception as fdf:
                                ant = (rty.antiguedad)
                            # --------------
                            asegurado.append(value)
                            caratula.append(carat)
                            subr.append(subR)
                            p_inicio.append(start_of_validity1_pc)
                            p_fin.append(end_of_validity1_pc)
                            p_estatus.append(status1_pc)
                            dateRen.append(date_renovacion)
                            otRen.append(ot_renovacion)
                            referenciador.append('')
                            antiguedad.append('')
                            creadopor.append(val_owner)
                            contratante.append(contratante_e)
                            contratanteE.append(contratanteE_e)
                            contratanteP.append(contratanteP_e)
                            contratanteG.append(contratanteG_e)
                            responsable.append(val_resp)
                            collection.append(val_col)
                            paquete.append(pac)
                            clave.append(cve)
                            cp.append(pc)
                            valueMA.append(valueM) 
                            valueModA.append(valueMod)  
                            valueVA.append(valueV) 
                            valueYA.append(valueY) 
                            valueLPA.append(valueLP)  
                            valueEA.append(valueE)  
                            valueAdA.append(valueAd)  
                            valueDrA.append(valueDr) 
                            valueClA.append(valueCl) 
                            valueSerA.append(valueSer)  
                            valueMAdA.append(valueMAd) 
                            valueEqA.append(valueEq)
                            valueMEqA.append(valueMEq)
                            valueServA.append(valueServ)
                            valueUsA.append(valueUs) 
                            valuePrA.append(valuePr)       
                            valueCargA.append(valueCarg)
                            valueBPrA.append(valueBPr)
                            valueBPraA.append(valueBPra)
                            valueRfcA.append(valueRfc)
                            asegs.append(asg) 
                            tipoTit.append(tipot) 
                            parentesco.append(prt) 
                            first_name.append(valueF)
                            last_name.append(valueLn)
                            slast_name.append(valueSln)
                            fechaN.append(nac)
                            movimiento.append(mov)
                            antiguedadI.append(ant)
                            salary.append('')
                            sumAssured.append('')
                            smoker.append('')
                            email.append('')
                            genero.append(sx)
                            dependiente.append(dpnd)
                            subgrupo.append(subgrupo1)
                            categoría.append(categoría1)
                            paquetee.append(paquetee1)
                            certificate_number.append(certificate_number1)
                            administration.append(administration1)
                            certificadoActive.append(certificadoActive1)
                            reasoncacel.append(reasoncacel1)
                            renewable.append(renewable1)
                            fecha_baja_inciso.append(fecha_baja_inciso1)
                            document_type.append(document_type1)
                            subramo__subramo_name.append(subramo__subramo_name1)
                            ramo.append(ramo1)
                            forma_de_pago.append(forma_de_pago1)
                            status.append(status1)
                            start_of_validity.append(start_of_validity1)
                            end_of_validity.append(end_of_validity1)
                            f_currency.append(f_currency1)
                            p_neta.append(p_neta1)
                            rpf.append(rpf1)
                            derecho.append(derecho1)
                            iva.append(iva1)
                            p_total.append(p_total1)
                            comision.append(comision1)
                            _id.append(_id1)
                            observations.append(observations1)
                            created_at.append(created_at1)
                            sucursal__sucursal_name.append(sucursal__sucursal_name1)
                            renewed_status.append(renewed_status1)
                            identifier.append(identifier1)
                            address.append(address1)
                            folioInterno.append(folio)
                            estadoc.append(valstate)
                            # *******************+
                            # vdp.append('Nombre: '+rty.first_name +' '+ str(rty.last_name)+' '+ str(rty.second_last_name)+', Fecha Nac.:'+str(d)+', Parentesco:'+str(checkRelation(rty.relationship)))
                        dpnd = vdp
                    except Exception as y:
                        dpnd = []
                else:
                    dpnd = []
            else:
                value = ''
                valueM = '' 
                valueMod = '' 
                valueV = '' 
                valueY = ''
                valueLP = '' 
                valueE = '' 
                valueAd = '' 
                valueDr = ''
                tipot = ''  
                prt = ''   
                valueF = ''
                valueLn = ''
                valueSln = '' 
        elif r.subramo.subramo_code == 9 or r.subramo.subramo_code == 13:
            form = AutomobilesDamages.objects.filter(policy = r.id)
            if form:
                # value = form[0].brand + '-' + form[0].model + '-' + form[0].version+ '-' + form[0].serial
                value = form[0].beneficiary_name if form[0].beneficiary_name else form[0].driver
                if value:
                    value = ((((((value).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'') 
                else:
                    value = value
                valueM = form[0].brand 
                try:
                    valueMod = ((((((form[0].model).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    valueV = ((((((form[0].version).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                except Exception as ers:
                    valueMod = form[0].model
                    valueV = form[0].version
                valueY = form[0].year 
                valueLP = form[0].license_plates 
                valueE = form[0].engine 
                valueAd = form[0].adjustment 
                valueDr = form[0].driver 
                valueCl = form[0].color 
                valueSer = form[0].serial 
                valueMAd = form[0].mont_adjustment 
                valueEq = form[0].special_team 
                valueMEq = form[0].mont_special_team 
                valueServ = form[0].service 
                valueUs = checkUsage(form[0].usage if form[0].usage else 0)
                valuePr = checkProc(int(form[0].procedencia if form[0].procedencia else 0))
                valueCarg = checkCharge(int(form[0].charge_type if form[0].charge_type else 0))
                valueBPr = ((((((form[0].beneficiary_name if form[0].beneficiary_name else form[0].preferential_benefiaciary if form[0].preferential_benefiaciary else '').replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                valueBPra = ((((((form[0].beneficiary_address if form[0].beneficiary_address else '').replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                valueRfc = ((((((form[0].beneficiary_rfc if form[0].beneficiary_rfc else '').replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                em = form[0].email 
                tipot = 'Inciso'
                prt = 'Inciso'                
                try:
                    mov = (form[0].created_at).strftime("%d/%m/%Y")
                except Exception as fdf:
                    mov = (form[0].created_at)
                try:
                    ant = (form[0].antiguedad).strftime("%d/%m/%Y")
                except Exception as fdf:
                    ant = (form[0].created_at)

                # --------------
                asegurado.append(value)
                caratula.append(carat)
                subr.append(subR)
                p_inicio.append(start_of_validity1_pc)
                p_fin.append(end_of_validity1_pc)
                p_estatus.append(status1_pc)
                dateRen.append(date_renovacion)
                otRen.append(ot_renovacion)
                referenciador.append(referenc)
                antiguedad.append(antig)
                creadopor.append(val_owner)
                contratante.append(contratante_e)
                contratanteE.append(contratanteE_e)
                contratanteP.append(contratanteP_e)
                contratanteG.append(contratanteG_e)
                responsable.append(val_resp)
                collection.append(val_col)
                paquete.append(pac)
                clave.append(cve)
                cp.append(pc)
                valueMA.append(valueM) 
                valueModA.append(valueMod)  
                valueVA.append(valueV) 
                valueYA.append(valueY) 
                valueLPA.append(valueLP)  
                valueEA.append(valueE)  
                valueAdA.append(valueAd)  
                valueDrA.append(valueDr) 
                valueClA.append(valueCl) 
                valueSerA.append(valueSer)  
                valueMAdA.append(valueMAd) 
                valueEqA.append(valueEq)
                valueMEqA.append(valueMEq)
                valueServA.append(valueServ)
                valueUsA.append(valueUs) 
                valuePrA.append(valuePr)       
                valueCargA.append(valueCarg)
                valueBPrA.append(valueBPr)
                valueBPraA.append(valueBPra)
                valueRfcA.append(valueRfc)
                asegs.append(asg) 
                tipoTit.append(tipot) 
                parentesco.append(prt) 
                first_name.append(valueF)
                last_name.append(valueLn)
                slast_name.append(valueSln)
                fechaN.append(nac)
                movimiento.append(mov)
                antiguedadI.append(ant)
                salary.append(slr)
                sumAssured.append(sumas)
                smoker.append(smk)
                email.append(em)
                genero.append(sx)
                dependiente.append(dpnd)
                subgrupo.append(subgrupo1)
                categoría.append(categoría1)
                paquetee.append(paquetee1)
                certificate_number.append(certificate_number1)
                administration.append(administration1)
                certificadoActive.append(certificadoActive1)
                reasoncacel.append(reasoncacel1)
                renewable.append(renewable1)
                fecha_baja_inciso.append(fecha_baja_inciso1)
                document_type.append(document_type1)
                subramo__subramo_name.append(subramo__subramo_name1)
                ramo.append(ramo1)
                forma_de_pago.append(forma_de_pago1)
                status.append(status1)
                start_of_validity.append(start_of_validity1)
                end_of_validity.append(end_of_validity1)
                f_currency.append(f_currency1)
                p_neta.append(p_neta1)
                rpf.append(rpf1)
                derecho.append(derecho1)
                iva.append(iva1)
                p_total.append(p_total1)
                comision.append(comision1)
                _id.append(_id1)
                observations.append(observations1)
                created_at.append(created_at1)
                sucursal__sucursal_name.append(sucursal__sucursal_name1)
                renewed_status.append(renewed_status1)
                identifier.append(identifier1)
                address.append(address1)
                folioInterno.append(folio)
                estadoc.append(valstate)
            else:
                value = ''
                valueM = '' 
                valueMod = '' 
                valueV = '' 
                valueY = ''
                valueLP = '' 
                valueE = '' 
                valueAd = '' 
                valueDr = ''
                tipot = ''
                prt = ''
        elif r.ramo.ramo_code == 3 and not r.subramo.subramo_code == 9:
            form = Damages.objects.filter(policy = r.id)
            if form:
                value = str(form[0].insured_item if form[0].insured_item else '') +'-'+ str(form[0].item_address if form[0].item_address else '') + '-'+str(form[0].item_details if form[0].item_details else '')
                if value:
                    value = ((((((value).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'') 
                else:
                    value = value
                tipot = 'Ubicación'
                valueM = '' 
                valueMod = '' 
                valueV = '' 
                valueY = ''
                valueLP = '' 
                valueE = '' 
                valueAd = '' 
                valueDr = ''
                prt = 'Ubicación'
                # --------------
                asegurado.append(value)
                caratula.append(carat)
                subr.append(subR)
                p_inicio.append(start_of_validity1_pc)
                p_fin.append(end_of_validity1_pc)
                p_estatus.append(status1_pc)
                dateRen.append(date_renovacion)
                otRen.append(ot_renovacion)
                referenciador.append(referenc)
                antiguedad.append(antig)
                creadopor.append(val_owner)
                contratante.append(contratante_e)
                contratanteE.append(contratanteE_e)
                contratanteP.append(contratanteP_e)
                contratanteG.append(contratanteG_e)
                responsable.append(val_resp)
                collection.append(val_col)
                paquete.append(pac)
                clave.append(cve)
                cp.append(pc)
                valueMA.append(valueM) 
                valueModA.append(valueMod)  
                valueVA.append(valueV) 
                valueYA.append(valueY) 
                valueLPA.append(valueLP)  
                valueEA.append(valueE)  
                valueAdA.append(valueAd)  
                valueDrA.append(valueDr) 
                valueClA.append(valueCl) 
                valueSerA.append(valueSer)  
                valueMAdA.append(valueMAd) 
                valueEqA.append(valueEq)
                valueMEqA.append(valueMEq)
                valueServA.append(valueServ)
                valueUsA.append(valueUs) 
                valuePrA.append(valuePr)       
                valueCargA.append(valueCarg)
                valueBPrA.append(valueBPr)
                valueBPraA.append(valueBPra)
                valueRfcA.append(valueRfc)
                asegs.append(asg) 
                tipoTit.append(tipot) 
                parentesco.append(prt) 
                first_name.append(valueF)
                last_name.append(valueLn)
                slast_name.append(valueSln)
                fechaN.append(nac)
                movimiento.append(mov)
                antiguedadI.append(ant)
                salary.append(slr)
                sumAssured.append(sumas)
                smoker.append(smk)
                email.append(em)
                genero.append(sx)
                dependiente.append(dpnd)
                subgrupo.append(subgrupo1)
                categoría.append(categoría1)
                paquetee.append(paquetee1)
                certificate_number.append(certificate_number1)
                administration.append(administration1)
                certificadoActive.append(certificadoActive1)
                reasoncacel.append(reasoncacel1)
                renewable.append(renewable1)
                fecha_baja_inciso.append(fecha_baja_inciso1)
                document_type.append(document_type1)
                subramo__subramo_name.append(subramo__subramo_name1)
                ramo.append(ramo1)
                forma_de_pago.append(forma_de_pago1)
                status.append(status1)
                start_of_validity.append(start_of_validity1)
                end_of_validity.append(end_of_validity1)
                f_currency.append(f_currency1)
                p_neta.append(p_neta1)
                rpf.append(rpf1)
                derecho.append(derecho1)
                iva.append(iva1)
                p_total.append(p_total1)
                comision.append(comision1)
                _id.append(_id1)
                observations.append(observations1)
                created_at.append(created_at1)
                sucursal__sucursal_name.append(sucursal__sucursal_name1)
                renewed_status.append(renewed_status1)
                identifier.append(identifier1)
                address.append(address1)
                folioInterno.append(folio)
                estadoc.append(valstate)
            else:
                value = ''
                valueM = '' 
                valueMod = '' 
                valueV = '' 
                valueY = ''
                valueLP = '' 
                valueE = '' 
                valueAd = '' 
                valueDr = ''
                tipot = ''
                prt = ''
        if value:
            value = ((((((value).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'') 
        else:
            value = value
        if form == None:
            asegurado.append(value)
            caratula.append(carat)
            subr.append(subR)
            p_inicio.append(start_of_validity1_pc)
            p_fin.append(end_of_validity1_pc)
            p_estatus.append(status1_pc)
            dateRen.append(date_renovacion)
            otRen.append(ot_renovacion)
            referenciador.append(referenc)
            antiguedad.append(antig)
            creadopor.append(val_owner)
            contratante.append(contratante_e)
            contratanteE.append(contratanteE_e)
            contratanteP.append(contratanteP_e)
            contratanteG.append(contratanteG_e)
            responsable.append(val_resp)
            collection.append(val_col)
            paquete.append(pac)
            clave.append(cve)
            cp.append(pc)
            valueMA.append(valueM) 
            valueModA.append(valueMod)  
            valueVA.append(valueV) 
            valueYA.append(valueY) 
            valueLPA.append(valueLP)  
            valueEA.append(valueE)  
            valueAdA.append(valueAd)  
            valueDrA.append(valueDr) 
            valueClA.append(valueCl) 
            valueSerA.append(valueSer)  
            valueMAdA.append(valueMAd) 
            valueEqA.append(valueEq)
            valueMEqA.append(valueMEq)
            valueServA.append(valueServ)
            valueUsA.append(valueUs) 
            valuePrA.append(valuePr)       
            valueCargA.append(valueCarg)
            valueBPrA.append(valueBPr)
            valueBPraA.append(valueBPra)
            valueRfcA.append(valueRfc)
            asegs.append(asg) 
            tipoTit.append(tipot) 
            parentesco.append(prt) 
            first_name.append(valueF)
            last_name.append(valueLn)
            slast_name.append(valueSln)
            fechaN.append(nac)
            movimiento.append(mov)
            antiguedadI.append(ant)
            salary.append(slr)
            sumAssured.append(sumas)
            smoker.append(smk)
            email.append(em)
            genero.append(sx)
            dependiente.append(dpnd)
            subgrupo.append(subgrupo1)
            categoría.append(categoría1)
            paquetee.append(paquetee1)
            certificate_number.append(certificate_number1)
            administration.append(administration1)
            certificadoActive.append(certificadoActive1)
            reasoncacel.append(reasoncacel1)
            renewable.append(renewable1)
            fecha_baja_inciso.append(fecha_baja_inciso1)
            document_type.append(document_type1)
            subramo__subramo_name.append(subramo__subramo_name1)
            ramo.append(ramo1)
            forma_de_pago.append(forma_de_pago1)
            status.append(status1)
            start_of_validity.append(start_of_validity1)
            end_of_validity.append(end_of_validity1)
            f_currency.append(f_currency1)
            p_neta.append(p_neta1)
            rpf.append(rpf1)
            derecho.append(derecho1)
            iva.append(iva1)
            p_total.append(p_total1)
            comision.append(comision1)
            _id.append(_id1)
            observations.append(observations1)
            created_at.append(created_at1)
            sucursal__sucursal_name.append(sucursal__sucursal_name1)
            renewed_status.append(renewed_status1)
            identifier.append(identifier1)
            address.append(address1)
            folioInterno.append(folio)
            estadoc.append(valstate)    

    obj = {
        'movimiento'   : str(list(movimiento)),
        'sum_asured'   : str(list(sumAssured)),
        'smoker'   : str(list(smoker)),
        'email'   : str(list(email)),
        'caratula'   : str(list(caratula)),
        'p_inicio'   : str(list(p_inicio)),
        'p_fin'   : str(list(p_fin)),
        'p_estatus'   : str(list(p_estatus)),
        'categoría'   : str(list(categoría)),
        'paquetee'   : str(list(paquetee)),
        'poliza_number'   : str(pol_num),
        'certificate_number'   : str(list(certificate_number)),
        'administration'   : str(list(administration)),
        'certificadoActive'   : str(list(certificadoActive)),
        'reasoncacel'   : str(list(reasoncacel)),
        'renewable'   : str(list(renewable)),
        'fecha_baja_inciso'   : str(list(fecha_baja_inciso)) ,
        'document_type'   : str(list(document_type)),
        'contratante'   : str(list(contratante)),
        'contratanteE'   : str(list(contratanteE)),
        'contratanteP'   : str(list(contratanteP)),
        'contratanteG'   : str(list(contratanteG)),
        'aseguradora'   : str(list(asegs)),
        'tipoTit'   : str(list(tipoTit)),
        'parentesco'   : str(list(parentesco)),
        'first_name'   : str(list(first_name)),
        'last_name'   : str(list(last_name)),
        'slast_name'   : str(list(slast_name)),
        'fechaN'   : str(list(fechaN)),
        'salary'   : str(list(salary)),
        'antiguedadI'   : str(list(antiguedadI)),
        'genero'   : str(list(genero)),
        'subramo__subramo_name'   : str(list(subramo__subramo_name)),
        'ramo'   : str(list(ramo)),
        'forma_de_pago'   : str(list(forma_de_pago)),
        'status'   : str(list(status)),
        'start_of_validity'   : str(list(start_of_validity)) ,
        'end_of_validity'   : str(list(end_of_validity)) ,
        'f_currency'   : str(list(f_currency)),
        'p_neta'   : str(list(p_neta)),
        'rpf'   : str(list(rpf)),
        'derecho'   : str(list(derecho)),
        'iva'   : str(list(iva)),
        'subr'   : str(list(subr)),
        'p_total'   : str(list(p_total)),
        'comision'   : str(list(comision)),
        '_id'   : str(list(_id)),
        'observations'   : str(list(observations)),
        'created_at'   : str(list(created_at))  ,
        'clave'   : str(list(clave)),
        'sucursal__sucursal_name'   : str(list(sucursal__sucursal_name)),
        'renewed_status': str(list(renewed_status)),
        'paquete': str(list(paquete)),
        # 'identifier': str(list(certificados.values_list('identifier', flat = True))),
        'identifier'   : str(list(identifier)),  
        'address': str(list(address)),
        'cp': str(list(cp)),
        'dateRen'   : str(list(dateRen)),
        'collection'   : str(list(collection)),
        'otRen'   : str(list(otRen)),
        'asegurado'   : str(list(asegurado)),
        'marca'   : str(list(valueMA)),
        'modelo'   : str(list(valueModA)),
        'version'   : str(list(valueVA)),
        'anio'   : str(list(valueYA)),
        'placa'   : str(list(valueLPA)),
        'motor'   : str(list(valueEA)),
        'adaptaciones'   : str(list(valueAdA)),
        'conductor'   : str(list(valueDrA)),
        'referenciador'   : str(list(referenciador)),
        'antiguedad'   : str(list(antiguedad)),
        'creadopor'   : str(list(creadopor)),
        'responsable'   : str(list(responsable)),
        'dependiente'   : str(list(dependiente)),
        'color':str(list(valueClA)) ,
        'serial': str(list(valueSerA)),
        'montoAdq': str(list(valueMAdA)),
        'equipamiento': str(list(valueEqA)),
        'montoEq':str(list(valueMEqA)),
        'servicio':str(list(valueServA)),
        'uso': str(list(valueUsA)),
        'procedencia': str(list(valuePrA)),
        'carga': str(list(valueCargA)),
        'benPref': str(list(valueBPrA)),
        'benAdres':str(list(valueBPraA)),
        'benRfc': str(list(valueRfcA)),
        'folio': str(list(folioInterno)),
        'estadoc': str(list(estadoc)),
        'tipo_reporte': tipo_reporte,
        'subBranch': subBranch,
        'branch': branch,
        'email_org':info_org['email'],
        'phone_org':info_org['phone'],
        'webpage_org':info_org['webpage'],
        'address_org':info_org['address'],
        'urlname_org':info_org['name'],
        }  
    obj['columns'] = str(list(columns)) 
    obj['imagen'] = archivo_imagen
    obj['registros'] = len(certificados)
    obj['subBranch'] = subBranch
    try:
        obj['lenbeneficiarios'] = lenBene
    except Exception as eR:
        obj['lenbeneficiarios'] = 0
    r = requests.post(settings.SERVICEEXCEL_URL + 'get-caratulaPolizasExcel/', obj,
    # headers = {
    # 'Authorization':'Bearer %s'%request.user.user_info.fi_token_refresh,
    # # 'Content-Type':'application/json' 
    # }, 
    stream=True)
    response_data= r.text

    response = HttpResponse(r.content,content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

    return response

# Caratula polizas

@api_view(['POST'])
@permission_classes((IsAuthenticatedV2, IsOrgMemberV2))
def Service_CertificadosFlotillaExcel(request):
    caratula = request.data['id_caratula']
    
    certificados = Polizas.objects.filter(caratula = caratula, org_name = request.GET.get('org'), document_type = 6)   
    subBranch = certificados[0].parent.parent.parent.subramo.subramo_name  
    columns = ['Tipo', 'No.Certificado','No.Póliza','Subramo','Estatus', 
               'Vigencia Inicio', 'Vigencia Fin', 'Prima Neta', 'RPF', 'Derecho', 'IVA', 'Prima Total', 'Comisión',
               'Asegurado', 'Observaciones', 'Referenciador', 'Fecha de creación', 'Creado por']
    

    info_org = getInfoOrg(request)
    if len(info_org['logo']) != 0:
        archivo_imagen = 'https://miurabox-public.s3.amazonaws.com/cas/' + info_org['logo']
        # archivo_imagen = get_presigned_url("cas/{url}".format(url=info_org['logo']),28800) 
    else:
            archivo_imagen = 'saam.jpg'
    tipo_reporte = 'Reporte de Certificados Flotilla'
    asegurado = []
    antiguedad = []
    referenciador = []
    creadopor = []
    dateRen = []
    otRen = []
    responsable = []
    contratante = []
    contratanteE = []
    contratanteP = []
    contratanteG = []
    collection = []
    clave = []
    cp = []
    paquete = []
    valueMA = []  
    valueModA = [] 
    valueVA = [] 
    valueYA = [] 
    valueLPA = [] 
    valueEA = [] 
    valueAdA = [] 
    valueDrA = []
    asegs = []
    nac = ''
    movimiento = []
    mov = ''
    antiguedadI = []
    ant = ''
    salary = []
    slr = ''    
    sumAssured = []
    sumas = ''
    smoker = []
    smk = ''
    email  =[]
    em = ''
    valueCl = ''
    valueSer = '' 
    valueMAd ='' 
    valueEq ='' 
    valueMEq ='' 
    valueServ ='' 
    valueUs = ''
    valuePr =''
    valueCarg =''
    valueBPr ='' 
    valueBPra ='' 
    valueRfc =''     
    value = ''
    valueM = '' 
    valueMod = '' 
    valueV = '' 
    valueY = ''
    valueLP = '' 
    valueE = '' 
    valueAd = '' 
    valueDr = ''
    tipot = ''
    prt = ''
    valueClA = [] 
    valueSerA = []  
    valueMAdA = [] 
    valueEqA = []
    valueMEqA = []
    valueServA = []
    valueUsA = [] 
    valuePrA = []
    valueCargA = []
    valueBPrA = [] 
    valueBPraA = []
    valueRfcA = []
    # certificados = certificados.order_by('natural__full_name','juridical__j_name')
    certificados = certificados.order_by('id')
    for r in certificados:
        if r.address:
           pc = r.address.postal_code
        else:
           pc = ''
        antig = get_antiguedad(r.start_of_validity)
        if r.owner:
            val_owner = r.owner.first_name + ' '+ str(r.owner.last_name)
        else:
            val_owner = ''
        if r.paquete:
            pac = r.paquete.package_name
        else:
            pac = ''
        if r.responsable:
            val_resp = r.responsable.first_name + ' '+ str(r.responsable.last_name)
        else:
            val_resp = ''
        if r.collection_executive:
            val_col = r.collection_executive.first_name + ' '+ str(r.collection_executive.last_name)
        else:
            val_col = ''
        if r.clave:
            try:
                cve = r.clave.name + ' '+ str(r.clave.clave)
                cve = ((((((cve).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
            except Exception as dssa:
                cve = ''
        else:
            cve = ''
        sramo_e = r.subramo.subramo_name
        if r.document_type == 6:
            if r.parent.parent.parent.contractor:
                contratante_e = ((((((r.parent.parent.parent.contractor.full_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                contratanteE_e = r.parent.parent.parent.contractor.email
                contratanteP_e = r.parent.parent.parent.contractor.phone_number
                contratanteG_e = ((((((r.parent.parent.parent.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')     
                # contratanteG_e = r.parent.parent.parent.contractor.group.group_name
                asg = r.parent.parent.parent.aseguradora.alias
            else:
                contratante_e = ''
                contratanteE_e = ''
                contratanteP_e = ''
                contratanteG_e = '' 

        else:
            if r.contractor:
                contratante_e = ((((((r.contractor.full_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                contratanteE_e = r.contractor.email
                contratanteP_e = r.contractor.phone_number
                contratanteG_e = ((((((r.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')     
                # contratanteG_e = r.contractor.group.group_name
                asg = r.aseguradora.alias                
            else:
                contratante_e = ''
                contratanteE_e = ''
                contratanteP_e = ''
                contratanteG_e = ''               

        try:
            old = OldPolicies.objects.filter(base_policy__id = r.id)
            try:
              date_renovacion = old[0].created_at.strftime("%d/%m/%Y")
            except Exception as rr:
                date_renovacion = 'Por renovar'
            try:
                ot_renovacion = old[0].new_policy.poliza_number if old[0].new_policy.poliza_number else old[0].new_policy.internal_number
            except Exception as rr:
                ot_renovacion = 'Por renovar'
        except Exception as dwe:
            date_renovacion = 'Por renovar'
            ot_renovacion = 'Por renovar'
        try:
            refs_policy = ReferenciadoresInvolved.objects.filter(policy = r.id,is_changed=False).values_list('referenciador__first_name','referenciador__last_name')
            if len(refs_policy):
                v = []
                try:
                    for it in refs_policy:
                        v.append(it[0] +' '+ str(it[1])+str('; '))
                    referenc = v
                except Exception as y:
                    referenc = []
            else:
                referenc = []
        except Exception as e:
            referenc = []
        if r.subramo.subramo_code == 9:
            form = AutomobilesDamages.objects.filter(policy = r.id)
            if form:
                try:
                    form[0].model = ((((((form[0].model).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    form[0].version = ((((((form[0].version).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                except Exception as ersa:
                    form = form
                # value = form[0].brand + '-' + form[0].model + '-' + form[0].version+ '-' + form[0].serial
                value = str(form[0].brand) + '-' + str(form[0].model) + '-' + str(form[0].version)
                valueM = form[0].brand 
                valueMod = form[0].model
                valueV = form[0].version
                valueY = form[0].year 
                valueLP = form[0].license_plates 
                valueE = form[0].engine 
                valueAd = form[0].adjustment 
                valueDr = form[0].driver 
                valueCl = form[0].color 
                valueSer = form[0].serial 
                valueMAd = form[0].mont_adjustment 
                valueEq = form[0].special_team 
                valueMEq = form[0].mont_special_team 
                valueServ = form[0].service 
                valueUs = checkUsage(form[0].usage )
                valuePr = checkProc(int(form[0].procedencia))
                valueCarg = checkCharge(int(form[0].charge_type))
                valueBPr = form[0].preferential_benefiaciary 
                valueBPra = form[0].beneficiary_address 
                valueRfc = form[0].beneficiary_rfc 
                em = form[0].email 
                tipot = 'Inciso'
                prt = 'Inciso'                
                try:
                    mov = (form[0].created_at).strftime("%d/%m/%Y")
                except Exception as fdf:
                    mov = (form[0].created_at)
                try:
                    ant = (form[0].antiguedad).strftime("%d/%m/%Y")
                except Exception as fdf:
                    ant = (form[0].created_at)
        
        if value:
            value = ((((((value).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'') 
        else:
            value = value
        asegurado.append(value)
        dateRen.append(date_renovacion)
        otRen.append(ot_renovacion)
        referenciador.append(referenc)
        antiguedad.append(antig)
        creadopor.append(val_owner)
        contratante.append(contratante_e)
        contratanteE.append(contratanteE_e)
        contratanteP.append(contratanteP_e)
        contratanteG.append(contratanteG_e)
        responsable.append(val_resp)
        collection.append(val_col)
        paquete.append(pac)
        clave.append(cve)
        cp.append(pc)
        valueMA.append(valueM) 
        valueModA.append(valueMod)  
        valueVA.append(valueV) 
        valueYA.append(valueY) 
        valueLPA.append(valueLP)  
        valueEA.append(valueE)  
        valueAdA.append(valueAd)  
        valueDrA.append(valueDr) 
        valueClA.append(valueCl) 
        valueSerA.append(valueSer)  
        valueMAdA.append(valueMAd) 
        valueEqA.append(valueEq)
        valueMEqA.append(valueMEq)
        valueServA.append(valueServ)
        valueUsA.append(valueUs) 
        valuePrA.append(valuePr)       
        valueCargA.append(valueCarg)
        valueBPrA.append(valueBPr)
        valueBPraA.append(valueBPra)
        valueRfcA.append(valueRfc)
        asegs.append(asg) 
        movimiento.append(mov)
        antiguedadI.append(ant)
        salary.append(slr)
        sumAssured.append(sumas)
        smoker.append(smk)
        email.append(em)
    obj = {
        'movimiento'   : str(list(movimiento)),
        'sum_asured'   : str(list(sumAssured)),
        'smoker'   : str(list(smoker)),
        'email'   : str(list(email)),
        'subgrupo'   : str(list(certificados.values_list('parent__parent__name', flat = True))),
        'document'   : str(list(certificados.values_list('document_type', flat = True))),
        'categoría'   : str(list(certificados.values_list('parent__name', flat = True))),
        'paquetee'   : str(list(certificados.values_list('paquete__package_name', flat = True))),
        'poliza_number'   : str(list(certificados.values_list('poliza_number', flat = True))),
        'certificate_number'   : str(list(certificados.values_list('certificate_number', flat = True))),
        'administration'   : str(list(certificados.values_list('administration_type', flat = True))),
        'certificadoActive'   : str(list(certificados.values_list('certificado_inciso_activo', flat = True))),
        'reasoncacel'   : str(list(certificados.values_list('reason_cancel', flat = True))),
        'renewable'   : str(list(certificados.values_list('is_renewable', flat = True))),
        'fecha_baja_inciso'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in certificados.values_list('fecha_baja_inciso', flat = True) ])) ,
        'contratante'   : str(list(contratante)),
        'contratanteE'   : str(list(contratanteE)),
        'contratanteP'   : str(list(contratanteP)),
        'contratanteG'   : str(list(contratanteG)),
        'aseguradora'   : str(list(asegs)),
        'antiguedadI'   : str(list(antiguedadI)),
        'subramo__subramo_name'   : str(list(certificados.values_list('parent__parent__parent__subramo__subramo_name', flat = True))),
        'ramo'   : str(list(certificados.values_list('ramo__ramo_name', flat = True))),
        'forma_de_pago'   : str(list(certificados.values_list('forma_de_pago', flat = True))),
        'status'   : str(list(certificados.values_list('status', flat = True))),
        'start_of_validity'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in certificados.values_list('start_of_validity', flat = True) ])) ,
        'end_of_validity'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in certificados.values_list('end_of_validity', flat = True) ])) ,
        'f_currency'   : str(list(certificados.values_list('f_currency', flat = True))),
        'p_neta'   : str(list(certificados.values_list('p_neta', flat = True))),
        'rpf'   : str(list(certificados.values_list('rpf', flat = True))),
        'derecho'   : str(list(certificados.values_list('derecho', flat = True))),
        'iva'   : str(list(certificados.values_list('iva', flat = True))),
        'p_total'   : str(list(certificados.values_list('p_total', flat = True))),
        'comision'   : str(list(certificados.values_list('comision', flat = True))),
        '_id'   : str(list(certificados.values_list('id', flat = True))),
        'observations'   : str(list([(((((((x).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')) if x else '' for x in certificados.values_list('observations', flat = True)])),
        'created_at'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in certificados.values_list('created_at', flat = True) ]))  ,
        'clave'   : str(list(clave)),
        'sucursal__sucursal_name'   : str(list(certificados.values_list('sucursal__sucursal_name', flat = True))),
        'renewed_status': str(list(certificados.values_list('renewed_status', flat = True))),
        'paquete': str(list(paquete)),
        # 'identifier': str(list(certificados.values_list('identifier', flat = True))),
        'identifier'   : str(list([(((((((x).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')) if x else '' for x in certificados.values_list('identifier', flat = True)])),  
        'address': str(list(certificados.values_list('address__administrative_area_level_1', flat = True))),
        'cp': str(list(cp)),
        'dateRen'   : str(list(dateRen)),
        'collection'   : str(list(collection)),
        'otRen'   : str(list(otRen)),
        'asegurado'   : str(list(asegurado)),
        'marca'   : str(list(valueMA)),
        'modelo'   : str(list(valueModA)),
        'version'   : str(list(valueVA)),
        'anio'   : str(list(valueYA)),
        'placa'   : str(list(valueLPA)),
        'motor'   : str(list(valueEA)),
        'adaptaciones'   : str(list(valueAdA)),
        'conductor'   : str(list(valueDrA)),
        'referenciador'   : str(list(referenciador)),
        'antiguedad'   : str(list(antiguedad)),
        'creadopor'   : str(list(creadopor)),
        'responsable'   : str(list(responsable)),
        'color':str(list(valueClA)) ,
        'serial': str(list(valueSerA)),
        'montoAdq': str(list(valueMAdA)),
        'equipamiento': str(list(valueEqA)),
        'montoEq':str(list(valueMEqA)),
        'servicio':str(list(valueServA)),
        'uso': str(list(valueUsA)),
        'procedencia': str(list(valuePrA)),
        'carga': str(list(valueCargA)),
        'benPref': str(list(valueBPrA)),
        'benAdres':str(list(valueBPraA)),
        'benRfc': str(list(valueRfcA)),
        'tipo_reporte': tipo_reporte,
        'subBranch': subBranch,
        'email_org':info_org['email'],
        'phone_org':info_org['phone'],
        'webpage_org':info_org['webpage'],
        'address_org':info_org['address'],
        'urlname_org':info_org['name'],
        }  
    obj['columns'] = str(list(columns))
    obj['imagen'] = archivo_imagen
    obj['registros'] = len(certificados)

    r = requests.post(settings.SERVICEEXCEL_URL + 'get-certificateFlotillaExcel/', obj,
    # headers = {
    # 'Authorization':'Bearer %s'%request.user.user_info.fi_token_refresh,
    # # 'Content-Type':'application/json' 
    # }, 
    stream=True)
    response_data= r.text

    response = HttpResponse(r.content,content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

    return response
# Reporte Recibos Edo Cuenta listado
@api_view(['POST'])
@permission_classes((IsAuthenticatedV2, IsOrgMemberV2))
def Service_TaskMnsjExcel(request):    
    frecuencia = request.data['frecuencia']
    mensajero = request.data['mensajero']
    since = request.data['since']
    until = request.data['until']
    status = request.data['status']



    tasks = Tasks.objects.filter(org_name = request.GET.get('org')).filter(status = status)

    if int(mensajero) > 0:
        tasks = tasks.filter(delivery__pk = int(mensajero))
        
    if int(frecuencia) == 2:
        try:
            f = "%d/%m/%Y"        
            since = datetime.strptime(since , f)
            until = datetime.strptime(until , f)
        except:
            f = "%m/%d/%Y"        
            since = datetime.strptime(since , f)
            until = datetime.strptime(until , f)
            
            tasks = tasks.filter(date__gte = since, date__lte = until)
    elif int(frecuencia) == 1:
        aux_month = datetime.today().month
        aux_day = datetime.today().day
        aux_year = datetime.today().year
            
        tasks = tasks.filter(date__month = aux_month, date__day = aux_day, date__year = aux_year)
    columns = ['Registrado por','Mensajero','Accion','Direccion','Fecha','Hora Asignada','Contacto','Observaciones',]
    # Empieza insertado de imagen
    info_org = getInfoOrg(request)

    if len(info_org['logo']) != 0:
        archivo_imagen = 'https://miurabox-public.s3.amazonaws.com/cas/' + info_org['logo']
        # archivo_imagen = get_presigned_url("cas/{url}".format(url=info_org['logo']),28800) 
    else:
        archivo_imagen = 'saam.jpg'

    tipo_reporte = "Reporte de Tareas Mensajería"

    mensajero = []
    creadopor = []
    address = []
    receptor = []
    tasks = tasks.order_by('delivery__first_name','delivery__last_name',)
    for r in tasks:    
        direc = ((((((r.address).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')            
        if r.receptor:
            recep = ((((((r.receptor).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')   
        else:
            recep = ''         
        if r.owner:
            val_owner = r.owner.first_name + ' '+ str(r.owner.last_name)
        else:
            val_owner = ''
        if r.owner:
            val_mnsj = r.delivery.first_name + ' '+ str(r.delivery.last_name)
        else:
            val_mnsj = ''
        
        address.append(direc)
        receptor.append(recep)
        creadopor.append(val_owner)
        mensajero.append(val_mnsj)
    obj = {
        
        'created_at'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in tasks.values_list('created_at', flat = True) ])) ,        
        'accion'   : str(list(tasks.values_list('action', flat = True))),
        'address'   : str(list(address)),
        'date'   :str(list([date.strftime("%d/%m/%Y") if date else '' for date in tasks.values_list('date', flat = True) ])) , 
        'time'   : str(list(tasks.values_list('time', flat = True))),
        'contact'   : str(list(tasks.values_list('contact', flat = True))),
        # 'observations'   : str(list(tasks.values_list('observations', flat = True))),
        'observations'   : str(list([(((((((x).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')) if x else '' for x in tasks.values_list('observations', flat = True)])),
        'creadopor'   : str(list(creadopor)),
        'mensajero'   : str(list(mensajero)),
        'receptor'   : str(list(receptor)),
        'tipo_reporte': "Reporte Mensajería",
        'email_org':info_org['email'],
        'phone_org':info_org['phone'],
        'webpage_org':info_org['webpage'],
        'address_org':info_org['address'],
        'urlname_org':info_org['name'],
        }   
    obj['columns'] = str(list(columns))
    obj['imagen'] = archivo_imagen
    obj['registros'] = len(tasks)
    r = requests.post(settings.SERVICEEXCEL_URL + 'get-taskMensajeriaExcel/', obj,
    # headers = {
    # 'Authorization':'Bearer %s'%request.user.user_info.fi_token_refresh,
    # # 'Content-Type':'application/json' 
    # }, 
    stream=True)
    response_data= r.text

    response = HttpResponse(r.content,content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

    return response
# Reporte log Reporte
@api_view(['POST'])
@permission_classes((IsAuthenticatedV2, IsOrgMemberV2))
def Service_TaskReportExcel(request):
    # priority = request.data['priority']
    try:
        priority = int(request.data['priority'])
    except Exception  as m:
        priority = int(0)
    try:
        fechahoy = int(request.data['fechahoy'])
    except Exception  as m:
        fechahoy = False
    closed = request.data['closed']
    created = request.data['created']
    assigned = request.data['assigned']
    try:
        chain = request.data['chain']
    except Exception as dfs:
        chain = '0'
    archived = request.data['archived']
    order = int(request.data['order'])
    asc = int(request.data['asc'])
    ver = int(request.data['ver'])
    status = int(request.data['status'])

    try:
      users = request.data['users']
    except:
      users = []
    
    session = Session.objects.filter(username=request.user.username)
    if session.exists():
        session = session.first()
    else:
        session = None
    
    if session and session.another_tasks: # validar si puede ver las tareas de otros
        users_list = list(GroupManager.objects.filter(manager = request.user).values_list('user__username',flat=True))
        users_list.append(request.user.username)
    else:
        users_list = [request.user.username]
    

    ticketsR = Ticket.objects.filter(org_name = request.GET.get('org'))
    if users and len(users) > 0 and users != ['0']:
        ticketsR = ticketsR.filter(assigned__in = list(users))


    # ------------------Ver solo involucrados, creador, asignado----------
    userfilter = [
        Q(owner__username__in = users_list), 
        Q(assigned__username__in = users_list),
    ]

    ticketsR_filter = ticketsR.filter(reduce(OR, userfilter), org_name = request.GET.get('org')).values_list('pk', flat = True)
    involvedTask = Involved.objects.filter(involved__in = ticketsR)
    userfilterI = [Q(person__username__in = users_list)]
    involvedTask_Filter = involvedTask.filter(reduce(OR, userfilterI)).values_list('involved', flat = True)       
    tkt = list(ticketsR_filter) + list(involvedTask_Filter)
    ticketsR = ticketsR.filter(pk__in = tkt)
    # ------------------Ver solo involucrados, creador, asignado----------
    # Filtros combinables
    if priority != 0:
        # ticketsR = ticketsR.filter(org_name = request.GET.get('org'), priority = priority).exclude(archived = True).exclude(closed = True)
        ticketsR = ticketsR.filter(org_name = request.GET.get('org'), priority = priority)


    if status == 4:
        ticketsR = ticketsR.filter(org_name = request.GET.get('org'), closed = True)

    if status == 8:
        ticketsR = ticketsR.filter(org_name = request.GET.get('org'), archived = True)
    if int(status) == 11 or int(status) == 0:
        ticketsR = ticketsR.filter(org_name = request.GET.get('org'),closed = False)


    if int(ver) == 0:
        ticketsR = ticketsR

    if int(ver) == 5:
        # ticketsR = ticketsR.filter(org_name = request.GET.get('org'), assigned =  request.user).exclude(archived = True).exclude(closed = True)
        ticketsR = ticketsR.filter(org_name = request.GET.get('org'), assigned__username__id =  users_list)

    if int(ver) == 6:
        # ticketsR = ticketsR.filter(org_name = request.GET.get('org'), owner__id = users_list).exclude(archived = True).exclude(closed = True)
        ticketsR = ticketsR.filter(org_name = request.GET.get('org'), owner__username__id = users_list)

    # if int(ver) == 10:
    #     # ticketsR = ticketsR.filter(org_name = request.GET.get('org'),closed = False).exclude(archived = True)
    #     ticketsR = ticketsR.filter(org_name = request.GET.get('org'),closed = False)
    if chain:
        if not chain == '0':
            contains_filter = [Q(identifier__icontains = chain),
                               Q(descrip__icontains = chain),
                               Q(title__icontains = chain),
                               Q(owner__first_name__icontains = chain),
                               Q(owner__last_name__icontains = chain)]
            # ticketsR = ticketsR.filter(reduce(OR, contains_filter), org_name = request.GET.get('org')).exclude(archived = True)
            ticketsR = ticketsR.filter(reduce(OR, contains_filter), org_name = request.GET.get('org'))

    tickets = ticketsR
    try:
        fechahoy = int(request.data['fechahoy'])
        if fechahoy ==True or fechahoy =='true':                    
            aux_month = datetime.today().month
            aux_day = datetime.today().day
            aux_year = datetime.today().year
            # date__month = aux_month, date__day = aux_day
            tickets = tickets.filter(date__month = aux_month, date__day = aux_day,date__year=aux_year)
    except Exception  as m:
        fechahoy = False
    response = HttpResponse(content_type='application/ms-excel')
    response['Content-Disposition'] = 'attachment; filename="Reporte Tareas.xls"'

    wb = xlwt.Workbook(encoding='utf-8')
    ws = wb.add_sheet('Tareas')

    # Empieza insertado de imagen
    info_org = getInfoOrg(request)
    if len(info_org['logo']) != 0:
        archivo_imagen = 'https://miurabox-public.s3.amazonaws.com/cas/' + info_org['logo']
        # archivo_imagen = get_presigned_url("cas/{url}".format(url=info_org['logo']),28800) 
    else:
        archivo_imagen = 'saam.jpg'

    if info_org['urlname'] != 'basanez':
        try:
            img = Image.open(requests.get(archivo_imagen, stream=True).raw)
            r, g, b = img.split()
            img = Image.merge("RGB", (r, g, b))
            img = img.resize((130,150),Image.ANTIALIAS)
            name_logo = info_org['urlname']+'_logo.bmp'
            img.save(name_logo)
            ws.insert_bitmap(name_logo, 0, 0)
        except Exception as e:
            img = Image.open("saam.jpg")
            r, g, b = img.split()
            img = Image.merge("RGB", (r, g, b))
            img.save('imagetoadd.bmp')
            ws.insert_bitmap('imagetoadd.bmp', 0, 0)

    columns = ['Estatus','Identificador','Título','Fecha creación','Prioridad',
    'Concepto','Descripción','Asignada a','Creada por','Antigüedad','Cerrado por ','Involucrados', 
    'Fecha compromiso', 'Días transcurridos al cierre','Días posteriores a la fecha promesa',
    'Endoso', 'Póliza', 'Estatus endoso']
    # ******************************************
    # Empieza insertado de imagen
    info_org = getInfoOrg(request)
    if len(info_org['logo']) != 0:
        archivo_imagen = 'https://miurabox-public.s3.amazonaws.com/cas/' + info_org['logo']
        # archivo_imagen = get_presigned_url("cas/{url}".format(url=info_org['logo']),28800) 
    else:
      archivo_imagen = 'saam.jpg'
    tipo_reporte = "Reporte de tareas"
       
    involved = []
    involved1 = []
    assigned = []
    estatus = []
    owner = []
    antiguedad = []
    dias_al_cierre = []
    closes_dates = []
    closedBy = []
    reassign = []
    dateReas = []
    endosos = []
    polizas = []
    estatus_endosos = []
    diasFpromesa = []
    tickets = tickets.order_by('owner__first_name','owner__last_name')
    for r in tickets:

      if r.comment and r.comment.model == 10 and r.associated:
          endoso = Endorsement.objects.get(id = int(r.associated))
          num_endo = endoso.internal_number if endoso.status in [5,1] else endoso.number_endorsement
          #num_endo = endoso.number_endorsement
          endosos.append(num_endo)
          polizas.append(endoso.policy.poliza_number),
          estatus_endosos.append(endoso.get_status_display())
      else:
          endosos.append('')
          polizas.append('')
          estatus_endosos.append('')
          
      
      reass =''
      dateRs = ''
      diasfp = get_antiguedad(r.date)
      if r.reassignBy:
        reass = r.reassignBy.first_name + ' '+ str(r.reassignBy.last_name)
      if r.reassign_date:
        try:
          dateRs = r.reassign_date.strftime("%d/%m/%Y")
        except:
          dateRs = r.reassign_date
      antig = get_antiguedad(r.created_at)
      if r.closed:
        dias_al_cierre.append("%s días"%(r.close_day - r.created_at).days)
        closes_dates.append(r.close_day.strftime("%d/%m/%Y"))
      else:
        dias_al_cierre.append('')
        closes_dates.append('')
      if r.closed:
          oi = 'Completada'
          if archived:
              oi = oi + ' (archivada)'
      else:
          oi = 'Vigente'
          if r.archived:
              oi = oi + ' (archivada)'
      invTask = Involved.objects.filter(involved = int(r.id), org_name=request.GET.get('org')).values_list('person__first_name','person__last_name')
      v = []
      try:
          for it in invTask:
              v.append(it[0] +' '+ str(it[1])+str(', '))
          value = v
      except Exception as e:
          if invTask[0][0]:
              value = invTask[0][0]
          else:
              value = ''
      if r.owner:
          own = r.owner.first_name + ' '+ str(r.owner.last_name)
      else:
          own = ''
      if r.assigned:
          ass = r.assigned.first_name + ' '+ str(r.assigned.last_name)
      else:
          ass = ''
      if r.closedBy:
          clsd = r.closedBy.first_name + ' '+ str(r.closedBy.last_name)
      else:
          clsd = ''
      if diasfp > 0:
        diasFpromesa.append(diasfp) 
      else:
        diasFpromesa.append('') 
      involved.append(value) 
      estatus.append(oi)
      assigned.append(ass)
      owner.append(own)
      antiguedad.append(antig)
      closedBy.append(clsd)
      reassign.append(reass)
      dateReas.append(dateRs)
    obj = {
        'status'   : str(list(estatus)),
        'diasFpromesa'   : str(list(diasFpromesa)),
        # 'identifier'   : str(list(tickets.values_list('identifier', flat = True))),
        'identifier'   : str(list([(((((((x).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')) if x else '' for x in tickets.values_list('identifier', flat = True)])),  
        # 'descripcion'   : str(list(tickets.values_list('descrip', flat = True))),
        'descripcion'   : str(list([(((((((x).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')) if x else '' for x in tickets.values_list('descrip', flat = True)])),
        'title'   : str(list([(((((((x).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')) if x else '' for x in tickets.values_list('title', flat = True)])),
        'priority'   : str(list(tickets.values_list('priority', flat = True))),
        'concept'   : str(list(tickets.values_list('concept', flat = True))),
        'created_at'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in tickets.values_list('created_at', flat = True) ])) ,
        'date'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in tickets.values_list('date', flat = True) ])) ,
        'dias_al_cierre': str(list(dias_al_cierre)),
        'close_date': str(list(closes_dates)) ,
        'involved': str((involved)),
        'assigned': str(list(assigned)),
        'antiguedad': str(list(antiguedad)),
        'closedBy': str(list(closedBy)),
        'owner': str(list(owner)),
        'endosos': str(list(endosos)),
        'polizas': str(list(polizas)),
        'estatus_endosos': str(list(estatus_endosos)),
        'reassignBy': str(list(reassign)),
        'reassignDate': str(list(dateReas)),
        'tipo_reporte': tipo_reporte,
        'email_org':info_org['email'],
        'phone_org':info_org['phone'],
        'webpage_org':info_org['webpage'],
        'address_org':info_org['address'],
        'urlname_org':info_org['name'],
        }  
    obj['columns'] = str(list(columns))
    obj['imagen'] = archivo_imagen
    obj['registros'] = len(tickets)
    r = requests.post(settings.SERVICEEXCEL_URL + 'get-taskExcelReporte/', obj,
    # headers = {
    # 'Authorization':'Bearer %s'%request.user.user_info.fi_token_refresh,
    # # 'Content-Type':'application/json' 
    # }, 
    stream=True)
    response_data= r.text

    response = HttpResponse(r.content,content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

    return response
# Reporte cedula
@api_view(['POST'])
@permission_classes((IsAuthenticatedV2, IsOrgMemberV2))
def Service_CedulaExcel(request):    
    cedula_ = Cedula.objects.filter(org_name=request.GET.get('org'))  
    info_org = getInfoOrg(request)
    if len(info_org['logo']) != 0:
        archivo_imagen = 'https://miurabox-public.s3.amazonaws.com/cas/' + info_org['logo']
        # archivo_imagen = get_presigned_url("cas/{url}".format(url=info_org['logo']),28800) 
    else:
      archivo_imagen = 'saam.jpg'
    tipo_reporte = "Reporte de Cédula"
       
    owner = []
    cedula_ = cedula_.order_by('owner__first_name','owner__last_name')
    columns = ['No.Cédula','Fecha Expiración','Observaciones','Creada por','Fecha Creación']
    for r in cedula_:
        if r.owner:
            own = r.owner.first_name + ' '+ str(r.owner.last_name)
        else:
            own = ''
        owner.append(own)
    obj = {
        'created_at'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in cedula_.values_list('created_at', flat = True) ])) ,
        'nocedula'   : str(list(cedula_.values_list('cedula', flat = True))) ,
        'expiracion'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in cedula_.values_list('expiracion', flat = True) ])) ,
        # 'observaciones'   : str(list(cedula_.values_list('observaciones', flat = True))) ,
        'observaciones'   : str(list([(((((((x).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')) if x else '' for x in cedula_.values_list('observaciones', flat = True)])),
        'owner': str(list(owner)),
        'tipo_reporte': tipo_reporte,
        'email_org':info_org['email'],
        'phone_org':info_org['phone'],
        'webpage_org':info_org['webpage'],
        'address_org':info_org['address'],
        'urlname_org':info_org['name'],
        }  
    obj['columns'] = str(list(columns))
    obj['imagen'] = archivo_imagen
    obj['registros'] = len(cedula_)
    r = requests.post(settings.SERVICEEXCEL_URL + 'get-CedulaExcel/', obj,
    # headers = {
    # 'Authorization':'Bearer %s'%request.user.user_info.fi_token_refresh,
    # # 'Content-Type':'application/json' 
    # }, 
    stream=True)
    response_data= r.text

    response = HttpResponse(r.content,content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

    return response   
    
# excel certificados fianza colectiva
@api_view(['POST'])
@permission_classes((IsAuthenticatedV2, IsOrgMemberV2))
def Service_CertificadosfianzaExcel(request):
    columns = ['Certificado','No.Fianza','Vigencia','Estatus','Correo', 'Apellido paterno','APellido Materno','Nombre','RFC','Puesto','Actividad',
                'Monto a Garantizar','Observaciones','Categoría']    
    # ---
    isempty = False
    if request.data['cadena'] == "":
        isempty = True
    else:
        isempty = False
    org = request.GET.get('org')
    try:
        policy_filters = []
        parent_filters = [Q(poliza_number__icontains = str(request.data['cadena']))]
        parents = Polizas.objects.filter(reduce(OR, parent_filters), document_type = 8,org_name = org).values_list('id', flat = True)
        subgrupos = Polizas.objects.filter(parent__in = parents, document_type = 9,org_name = org).values_list('id', flat = True)
        categorias = Polizas.objects.filter(parent__in = parents, document_type = 9,org_name = org).values_list('id', flat = True)

        policy_filters.append(Q(parent__in = categorias))
        policy_filters.append(Q(certificate_number__icontains = str(request.data['cadena'])))
        # ----------
        word = request.data['cadena']
        words = word.split()            
        ben_filters = [Q(full_name__icontains = q) for q in words]
        ben_filters1 = [Q(j_name__icontains = q) for q in words]
        benC = BeneficiariesContract.objects.filter(reduce(and_,ben_filters),org_name = org).values_list('poliza',flat = True)
        # search juridica
        benC2 = BeneficiariesContract.objects.filter(reduce(and_, ben_filters1),org_name = org).values_list('poliza',flat = True)
        try:
            if benC2:
                benC = list(benC) + list(benC2)
        except Exception as edfs:
            pass
        benCont = benC
        # ----------------------------
        policy_filters.append(Q(id__in = benCont))
        polizas_2 = []
        if  int(request.data['is_category']) == 0:
            polizas_2 = Polizas.objects.filter(reduce(OR, policy_filters), document_type = 10,org_name = org,caratula = request.data['parent']).distinct('id')#.exclude(status__in = [1,2,0])
            certificates = Polizas.objects.filter(certificate_number__icontains = str(request.data['cadena']),org_name = org,
                                                document_type = 10, caratula = request.data['parent'])
        else:
            if request.data['status']:
                try:
                    if int(request.data['status']) == 1:
                        statusCert = True
                    elif int(request.data['status']) == 2:
                        statusCert = False
                    else:
                        statusCert = 0
                except Exception as eds:
                    statusCert = request.data['status']
            polizas_2 = Polizas.objects.filter(reduce(OR, policy_filters), document_type = 10,org_name = org,certificado_inciso_activo = statusCert, 
                                                parent = int(request.data['parent'])).distinct('id')#.exclude(status__in = [1,2,0])
            certificates = Polizas.objects.filter(certificate_number__icontains = str(request.data['cadena']),org_name = org,certificado_inciso_activo = statusCert,
                                        document_type = 10, parent = int(request.data['parent']))

        for cert in certificates:
            if not cert in polizas_2:
                polizas_2.append(cert)
    except Exception as e:
        try:
            org = request.GET.get('org')
            policy_filters = []
            if isempty:
                parents = Polizas.objects.filter(document_type = 8,org_name = org).values_list('id', flat = True)
                categorias = Polizas.objects.filter(parent__in = parents, document_type = 9,org_name = org).values_list('id', flat = True)
                policy_filters.append(Q(parent__in = categorias))
                if  (request.data['is_category']) == 0:
                    polizas_2 = Polizas.objects.filter(reduce(OR, policy_filters), document_type = 10,org_name = org,caratula = request.data['parent']).distinct('id')#.exclude(status__in = [1,2,0])
                    certificates = Polizas.objects.filter(org_name = org, document_type = 10, caratula = request.data['parent'])
                else:
                    if request.data['status']:
                        try:
                            if (request.data['status']) == 1:
                                statusCert = True
                            elif (request.data['status']) == 2:
                                statusCert = False
                            else:
                                statusCert = 0
                        except Exception as eds:
                            statusCert = request.data['status']
                    polizas_2 = Polizas.objects.filter(reduce(OR, policy_filters), document_type = 10,org_name = org,certificado_inciso_activo = statusCert, 
                                                        parent = (request.data['parent'])).distinct('id')#.exclude(status__in = [1,2,0])
                    certificates = Polizas.objects.filter(org_name = org, certificado_inciso_activo = statusCert,
                                            document_type = 10, parent = (request.data['parent']))
         
                for cert in certificates:
                    if not cert in polizas_2:
                        polizas_2.append(cert)
        except Exception as error_c:
            polizas_2 = None
            return Response(str(error_c))
    # return polizas_2
    # -------------

    info_org = getInfoOrg(request)
    if len(info_org['logo']) != 0:
        archivo_imagen = 'https://miurabox-public.s3.amazonaws.com/cas/' + info_org['logo']
        # archivo_imagen = get_presigned_url("cas/{url}".format(url=info_org['logo']),28800) 
    else:
        archivo_imagen = 'saam.jpg'

    tipo_reporte = 'Reporte de Certificados Fianza Colectiva'
    nofianza = []
    vigenciaI = []
    vigenciaF = []
    estatus = []
    correo = []
    apellidoP = []
    apellidoM = []
    nombre = []
    rfc = []
    puesto = []
    actividad = []
    monto = []
    observaciones = []
    categoria = []
    polizas_2 = polizas_2.order_by('id')

    for r in polizas_2:
        certificadoF = r.certificate_number
        if r.poliza_number:
            try:
                numberF = r.poliza_number
                numberF = ((((((numberF).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
            except Exception as dfs:
                numberF =''
        else:
            numberF = r.internal_number
        subramoF = r.subramo.subramo_name
        if r.contractor:
            contratante_e = ((((((r.contractor.full_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
            contratanteE_e = r.contractor.email
            contratanteP_e = r.contractor.phone_number
            contratanteG_e = ((((((r.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')     
            # contratanteG_e = r.contractor.group.group_name
            asg = r.aseguradora.alias
        else:
            contratante_e = ''
            contratanteE_e = ''
            contratanteP_e = ''
            contratanteG_e = ''
        
        formBen = BeneficiariesContract.objects.filter(poliza=r.id,org_name = org)
        try:
            formCon = Contract.objects.get(poliza=r.id,org_name = org)
        except Exception as e:
            formCon = {}

        first = ''
        last = ''
        slast = ''
        email = ''
        rfc1 = ''
        pst = ''

        if len(formBen) > 0:
            first = formBen[0].first_name
            last = formBen[0].last_name
            slast = formBen[0].second_last_name
            email = formBen[0].email
            rfc1 = formBen[0].rfc
            pst = formBen[0].workstation
        # Contrato
        activity = formCon.activity
        amount = formCon.amount
        nombre.append(first)
        apellidoP.append(last)
        apellidoM.append(slast)
        correo.append(email)
        rfc.append(rfc1)
        puesto.append(pst)
        actividad.append(activity)
        monto.append(amount)
        nofianza.append(numberF)
    obj = {
        'categoría'   : str(list(polizas_2.values_list('parent__name', flat = True))),
        'poliza_number'   : str(list(nofianza)),
        'certificate_number'   : str(list(polizas_2.values_list('certificate_number', flat = True))),
        'certificadoActive'   : str(list(polizas_2.values_list('certificado_inciso_activo', flat = True))),
        'status'   : str(list(polizas_2.values_list('status', flat = True))),
        'start_of_validity'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in polizas_2.values_list('start_of_validity', flat = True) ])) ,
        'end_of_validity'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in polizas_2.values_list('end_of_validity', flat = True) ])) ,
        'correo': str(list(correo)),
        'apellido': str(list(apellidoP)),
        'apellido1': str(list(apellidoM)),
        'nombre': str(list(nombre)),
        'rfc': str(list(rfc)),
        'puesto': str(list(puesto)),
        'actividad': str(list(actividad)),
        'monto': str(list(monto)),
        'observaciones': str(list(polizas_2.values_list('observations', flat = True))),
        'tipo_reporte': tipo_reporte,
        'email_org':info_org['email'],
        'phone_org':info_org['phone'],
        'webpage_org':info_org['webpage'],
        'address_org':info_org['address'],
        'urlname_org':info_org['name'],
        }  
    obj['columns'] = str(list(columns)) 
    obj['imagen'] = archivo_imagen
    obj['registros'] = len(polizas_2)
    r = requests.post(settings.SERVICEEXCEL_URL + 'get-certificateFianzaExcel/', obj,
    # headers = {
    # 'Authorization':'Bearer %s'%request.user.user_info.fi_token_refresh,
    # # 'Content-Type':'application/json' 
    # }, 
    stream=True)
    response_data= r.text

    response = HttpResponse(r.content,content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

    return response
def safe_div(a, b, factor=100.0):
    """
    División segura: (a * factor) / b. Si b==0 -> 0.0
    """
    an = safe_value(a, 0.0)
    bn = safe_value(b, 0.0)
    if bn == 0.0:
        return 0.0
    return (an * factor) / bn
def is_nan(x):
    try:
        return math.isnan(x)
    except Exception:
        return False
def safe_value(x, default=0.0):
    """
    Normaliza None/NaN a 0 (float).
    """
    if x is None:
        return default
    if is_nan(x):
        return default
    try:
        # Si es Decimal, pásalo a float
        if isinstance(x, Decimal):
            return float(x)
        return float(x)
    except Exception:
        return default

def _build_results_from_data(data: dict) -> dict:
    """
    Estandariza el bloque `results` para el servicio de reportes, tomando
    los arreglos ya cargados en `data`. Si alguna clave no existe, devuelve [].
    """
    g = lambda k: list(data.get(k, []) or [])
    return {
        # Periodo 1 (principal)
        "percentages":      g("percentages"),
        "percentagesN":     g("percentagesN"),
        "percentagesT":     g("percentagesT"),
        "percentagesC":     g("percentagesC"),
        "percentagesFinal": g("percentagesFinal"),  # si no los manejas aún, quedará []
        "primas":           g("primas"),
        "porcTotales":      g("porcTotales"),
        # Periodo 1 (fianzas)
        "percentagesF":      g("percentagesF"),
        "percentagesNF":     g("percentagesNF"),
        "percentagesTF":     g("percentagesTF"),
        "percentagesCF":     g("percentagesCF"),
        "percentagesFinalF": g("percentagesFinalF"),
        "primasF":           g("primasF"),
        "porcTotalesF":      g("porcTotalesF"),
        # Periodo 2 (principal)
        "percentages2":      g("percentages2"),
        "percentagesN2":     g("percentagesN2"),
        "percentagesT2":     g("percentagesT2"),
        "percentagesC2":     g("percentagesC2"),
        "percentagesFinal2": g("percentagesFinal2"),
        "primas2":           g("primas2"),
        "porcTotales2":      g("porcTotales2"),
        # Periodo 2 (fianzas)
        "percentages2F":      g("percentages2F"),
        "percentagesN2F":     g("percentagesN2F"),
        "percentagesT2F":     g("percentagesT2F"),
        "percentagesC2F":     g("percentagesC2F"),
        "percentagesFinal2F": g("percentagesFinal2F"),
        "primas2F":           g("primas2F"),
        "porcTotales2F":      g("porcTotales2F"),
    }
def to_pct(num, den):
    """
    Devuelve porcentaje en escala 0–100, seguro ante None/0.
    """
    try:
        n = safe_value(num)
        d = safe_value(den)
        if not d:
            return 0
        return (float(n) / float(d)) * 100.0
    except Exception:
        return 0


# Reporte log Reporte
@api_view(['POST'])
@permission_classes((IsAuthenticatedV2, IsOrgMemberV2))
def Service_TaskDashReportExcel(request):
    tipo = request.data['tipo']
    request = request

    org_name = request.GET.get('org')

    session = Session.objects.filter(username=request.user.username)
    if session.exists():
      session = session.first()
    else:
      session = None

    if session and session.another_tasks: # validar si puede ver las tareas de otros
      users_list = list(GroupManager.objects.filter(manager = request.user).values_list('user',flat=True))
      users_list.append(request.user)
    else:
      users_list = [request.user]

  
    try:
      try:
          config_chart = Graphics.objects.get(owner=request.user, org_name=org_name, type_graphic = 5)
      except:
          config_chart = Graphics.objects.get(org_name=org_name, type_graphic = 5)
      days_green = config_chart.green if config_chart.green else 45
      days_yellow = config_chart.yellow if config_chart.yellow else 30
      days_orange = config_chart.orange if config_chart.orange else 15
      days_red = config_chart.red if config_chart.red else 1000
      filter_graphs =  config_chart.option_filter
    except:
      config_chart = None
      days_green = 45
      days_yellow = 30
      days_orange = 15
      days_red = 1000
      filter_graphs = 3

    today = datetime.today()
    orange_days = timedelta(days = days_orange)
    yellow_days = timedelta(days = days_yellow)
    green_days = timedelta(days = days_green)
    red_days = timedelta(days = days_red)

    diasO = today + orange_days
    diasY = today + yellow_days
    diasG = today + green_days

    query_g = (Q(created_at__lt = diasG) & Q(created_at__gte = diasY))
    query_y = (Q(created_at__lt = diasY) & Q(created_at__gte = diasO))
    query_o = (Q(created_at__lt = diasO) & Q(created_at__gte = today))
    query_r = (Q(created_at__lte = today))
    query = (Q(created_at__lte = diasG))
    involved = Involved.objects.filter(org_name=org_name, person__in=users_list).values_list('involved',flat=True)
    if int(filter_graphs) ==1:
        pk = list(Ticket.objects.filter(org_name=org_name, owner__in = users_list, closed = False).values_list('pk', flat=True))  
    elif int(filter_graphs) ==2: 
        pk = list(Ticket.objects.filter((Q(assigned__in = users_list) | Q(id__in = involved)), org_name=org_name, closed = False).values_list('pk', flat=True))  
        # pk = list(Ticket.objects.filter(org_name=org_name, assigned__in = users_list, closed = False).values_list('pk', flat=True))  
    elif int(filter_graphs) == 3:
        pk = list(Ticket.objects.filter((Q(assigned__in = users_list) | Q(owner__in = users_list) | Q(id__in = involved)), org_name=org_name, closed = False).values_list('pk', flat=True))  
    else:
        pk = list(Ticket.objects.filter((Q(assigned__in = users_list) | Q(owner__in = users_list) | Q(id__in = involved)), org_name=org_name, closed = False).values_list('pk', flat=True)) 
    # ------------------------------------
    diasO = today - orange_days
    diasY = today - yellow_days
    diasG = today - green_days
    diasR = today - red_days        

    pendingGreen = Ticket.objects.filter(pk__in = pk, org_name =  request.GET.get('org'), created_at__lte = today, created_at__gt = diasG)
    pendingYellow = Ticket.objects.filter(pk__in = pk, org_name =  request.GET.get('org'), created_at__lte = diasG, created_at__gt = diasY)
    pendingOrange = Ticket.objects.filter(pk__in = pk, org_name =  request.GET.get('org'), created_at__lte = diasY, created_at__gt = diasO)
    pendingRed = Ticket.objects.filter(pk__in = pk, org_name =  request.GET.get('org'), created_at__lte = diasO)
    # *************************************+
    green = pendingGreen.count()
    yellow = pendingYellow.count()
    orange = pendingOrange.count()
    red = pendingRed.count() 
    # -----------------------------
    total_neto = 0

    if tipo == 'green':
      tickets = pendingGreen
    elif tipo == 'yellow':
      tickets = pendingYellow
    elif tipo == 'orange':
      tickets = pendingOrange
    elif tipo == 'red':
      tickets = pendingRed
    else:
      tickets = pendingGreen | pendingYellow | pendingOrange | pendingRed           
      
    response = HttpResponse(content_type='application/ms-excel')
    response['Content-Disposition'] = 'attachment; filename="Reporte Tareas.xls"'

    wb = xlwt.Workbook(encoding='utf-8')
    ws = wb.add_sheet('Tareas')

    # Empieza insertado de imagen
    info_org = getInfoOrg(request)
    if len(info_org['logo']) != 0:
        archivo_imagen = 'https://miurabox-public.s3.amazonaws.com/cas/' + info_org['logo']
        # archivo_imagen = get_presigned_url("cas/{url}".format(url=info_org['logo']),28800) 
    else:
        archivo_imagen = 'saam.jpg'

    if info_org['urlname'] != 'basanez':
        try:
          img = Image.open(requests.get(archivo_imagen, stream=True).raw)
          r, g, b = img.split()
          img = Image.merge("RGB", (r, g, b))
          img = img.resize((130,150),Image.ANTIALIAS)
          name_logo = info_org['urlname']+'_logo.bmp'
          img.save(name_logo)
          ws.insert_bitmap(name_logo, 0, 0)
        except Exception as e:
          img = Image.open("saam.jpg")
          r, g, b = img.split()
          img = Image.merge("RGB", (r, g, b))
          img.save('imagetoadd.bmp')
          ws.insert_bitmap('imagetoadd.bmp', 0, 0)

    columns = ['Estatus','Identificador','Título','Fecha creación','Prioridad','Concepto','Descripción','Asignada a','Creada por','Antigüedad','Cerrado por ','Involucrados', 'Fecha compromiso', 'Días transcurridos al cierre','Reasignado a','Fecha de Reasignación']
    # ******************************************
    # Empieza insertado de imagen
    info_org = getInfoOrg(request)
    if len(info_org['logo']) != 0:
        archivo_imagen = 'https://miurabox-public.s3.amazonaws.com/cas/' + info_org['logo']
        # archivo_imagen = get_presigned_url("cas/{url}".format(url=info_org['logo']),28800) 
    else:
        archivo_imagen = 'saam.jpg'
    tipo_reporte = "Reporte de tareas"
     
    involved = []
    involved1 = []
    assigned = []
    estatus = []
    owner = []
    antiguedad = []
    dias_al_cierre = []
    closes_dates = []
    closedBy = []
    endosos = []
    polizas = []
    estatus_endosos = []
    diasFpromesa = []
    reassignBy = []
    reassign = []
    date_reassign = []
    tickets = tickets.order_by('owner__first_name','owner__last_name')
    for r in tickets:
        reass=''
        date_res = ''
        if r.comment and r.comment.model == 10 and r.associated:
          endoso = Endorsement.objects.get(id = int(r.associated))
          num_endo = endoso.internal_number if endoso.status in [5,1] else endoso.number_endorsement
          #num_endo = endoso.number_endorsement
          endosos.append(num_endo)
          polizas.append(endoso.policy.poliza_number)
          estatus_endosos.append(endoso.get_status_display())
        else:
          endosos.append('')
          polizas.append('')
          estatus_endosos.append('')

        if r.reassignBy:
            reass = r.reassignBy.first_name + ' '+ str(r.reassignBy.last_name)
        if r.reassign_date:
            date_res = r.reassign_date.strftime("%d/%m/%Y")

        antig = get_antiguedad(r.created_at)
        if r.closed:
            dias_al_cierre.append("%s días"%(r.close_day - r.created_at).days)
            closes_dates.append(r.close_day.strftime("%d/%m/%Y"))
        else:
            dias_al_cierre.append('')
            closes_dates.append('')
        if r.closed:
            oi = 'Completada'
            if r.archived:
                oi = oi + ' (archivada)'
        else:
            oi = 'Vigente'
            if r.archived:
                oi = oi + ' (archivada)'
        invTask = Involved.objects.filter(involved = int(r.id), org_name=request.GET.get('org')).values_list('person__first_name','person__last_name')
        v = []
        try:
          for it in invTask:
              v.append(it[0] +' '+ str(it[1])+str(', '))
          value = v
        except Exception as e:
          if invTask[0][0]:
              value = invTask[0][0]
          else:
              value = ''
        if r.owner:
          own = r.owner.first_name + ' '+ str(r.owner.last_name)
        else:
          own = ''
        if r.assigned:
          ass = r.assigned.first_name + ' '+ str(r.assigned.last_name)
        else:
          ass = ''
        if r.closedBy:
          clsd = r.closedBy.first_name + ' '+ str(r.closedBy.last_name)
        else:
          clsd = ''
        diasfp = get_antiguedad(r.date)

        if diasfp > 0:
            diasFpromesa.append(diasfp) 
        else:
            diasFpromesa.append('')

        involved.append(value) 
        date_reassign.append(date_res)
        reassign.append(reass)
        estatus.append(oi)
        assigned.append(ass)
        owner.append(own)
        antiguedad.append(antig)
        closedBy.append(clsd)
    obj = {
        'reassignBy': str(list(reassign)),
        'reassignDate':str(list(date_reassign)),
        'diasFpromesa'   : str(list(diasFpromesa)),
        'dias_al_cierre'   : str(list(dias_al_cierre)),
        'status'   : str(list(estatus)),
        # 'identifier'   : str(list(tickets.values_list('identifier', flat = True))),
        'identifier'   : str(list([(((((((x).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')) if x else '' for x in tickets.values_list('identifier', flat = True)])),  
        # 'descripcion'   : str(list(tickets.values_list('descrip', flat = True))),
        'descripcion'   : str(list([(((((((x).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')) if x else '' for x in tickets.values_list('descrip', flat = True)])),
        'title'   : str(list([t.replace(',','') for t in tickets.values_list('title', flat = True)])),
        'priority'   : str(list(tickets.values_list('priority', flat = True))),
        'concept'   : str(list(tickets.values_list('concept', flat = True))),
        'created_at'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in tickets.values_list('created_at', flat = True) ])) ,
        'date'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in tickets.values_list('date', flat = True) ])) ,
        'dias_al_cierre': str(list(dias_al_cierre)),
        'close_date': str(list(closes_dates)) ,
        'involved': str((involved)),
        'assigned': str(list(assigned)),
        'antiguedad': str(list(antiguedad)),
        'closedBy': str(list(closedBy)),
        'owner': str(list(owner)),
        'tipo_reporte': tipo_reporte,
        'email_org':info_org['email'],
        'phone_org':info_org['phone'],
        'webpage_org':info_org['webpage'],
        'address_org':info_org['address'],
        'urlname_org':info_org['name'],
        'endosos': str(list(endosos)),
        'polizas': str(list(polizas)),
        'estatus_endosos': str(list(estatus_endosos))
    }  
    obj['columns'] = str(list(columns))
    obj['imagen'] = archivo_imagen
    obj['registros'] = len(tickets)
    r = requests.post(settings.SERVICEEXCEL_URL + 'get-taskExcelReporte/', obj,
    # headers = {
    # 'Authorization':'Bearer %s'%request.user.user_info.fi_token_refresh,
    # # 'Content-Type':'application/json' 
    # }, 
    stream=True)
    response_data= r.text

    response = HttpResponse(r.content,content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')
    return response

@api_view(['POST'])
@permission_classes((IsAuthenticatedV2, CobranzaReportesPermissionsV2, IsOrgMemberV2))
def Service_ReporteCatalogosExcel(request):
    request.data._mutable=True
    request.data['Authorization'] = request.META['HTTP_AUTHORIZATION'] if 'HTTP_AUTHORIZATION' in request.META else ''
    request.data['org'] = request.GET.get('org')


    try:
        user_info = UserInfo.objects.get(user=request.user)
    except UserInfo.DoesNotExist:
        user_info = None
    except Exception as er:
        print(er)
        user_info = None

    if user_info == None:
        perfil_restringido_id = None
    else:
        try:
            if user_info.perfil_restringido:
                perfil_restringido = PerfilUsuarioRestringido.objects.get(pk=user_info.perfil_restringido.id)
                perfil_restringido_id = perfil_restringido.pk
            else:
                perfil_restringido_id = None
        except Exception as ert:
            perfil_restringido_id = None

    request.data['perfil_restringido_id'] = perfil_restringido_id
    request.data['user_req'] = request.user

    if request.GET.get('org') == 'ancora':
        url = settings.SERVICEEXCEL_ANCORA_URL
    else:
        url = settings.SERVICEEXCEL_2_URL
    
    r = requests.post(url + 'reporte_catalogos/', headers={'Authorization': request.META['HTTP_AUTHORIZATION']}, data = request.data, stream=True)    
    return Response(r.text, status = r.status_code)   


@api_view(['POST'])
@permission_classes((IsAuthenticatedV2, RenovacionesReportesPermissionsV2, IsOrgMemberV2))
def Service_ReporteAdjuntosExcel(request):
    polizas = request.data['polizas']
    endosos = request.data['endosos']
    siniestros = request.data['siniestros']
    fianzas = request.data['fianzas']
    contratantes = request.data['contratantes']
    since = request.data['since']
    until = request.data['until']
    group = request.data['grupo'] if 'grupo' in request.data else 0
    results = {}
    results['polizas'] = {}
    results['fianzas'] = {}
    results['siniestros'] = {}
    results['endosos'] = {}
    results['contractor'] = {}
    # Filtro de fechas
    try:
        f = "%d/%m/%Y %H:%M:%S"
        since = datetime.strptime(since , f)
        until = datetime.strptime(until , f)
    except:
        f = "%m/%d/%Y %H:%M:%S"
        since = datetime.strptime(since , f)
        until = datetime.strptime(until , f)

    date_sins = [Q(fecha_siniestro__gte=since),Q(fecha_siniestro__lte = until)]
    date_p = [Q(start_of_validity__gte=since),Q(start_of_validity__lte = until)]
    date_e = [Q(init_date__gte=since),Q(init_date__lte = until)]
    if polizas:
        polizasdata = Polizas.objects.filter(reduce(operator.and_, date_p)).filter(document_type__in =[1,3,11,12], org_name = request.GET.get('org')).exclude(status = 0).values_list('pk', flat =True)
        files_polizas = PolizasFile.objects.filter(owner__id__in = polizasdata).filter(org_name = request.GET.get('org'))
        # files_polizas = PolizasFileHyperInfoSerializer(files_polizas, context={'request':request}, many = True)
        results['polizas'] = files_polizas
    if fianzas:        
        fianzasdata = Polizas.objects.filter(reduce(operator.and_, date_p)).filter(document_type__in =[7,8],org_name = request.GET.get('org')).exclude(status = 0).values_list('pk', flat =True)
        files_fianzas = PolizasFile.objects.filter(owner__id__in = fianzasdata).filter(org_name = request.GET.get('org'))
        # files_fianzas = PolizasFileHyperInfoSerializer(files_fianzas, context={'request':request}, many = True)
        results['fianzas'] = files_fianzas
    if siniestros:
        siniestrosdata = Siniestros.objects.filter(reduce(operator.and_, date_sins)).filter(org_name = request.GET.get('org'))
        files_siniestros = SiniestrosFile.objects.filter(owner__id__in = siniestrosdata).filter(org_name = request.GET.get('org'))
        # files_siniestros = SiniestrosFileInfoSerializer(files_siniestros, context={'request':request}, many = True)
        results['siniestros'] = files_siniestros
    if endosos:
        endososdata = Endorsement.objects.filter(reduce(operator.and_, date_e)).filter(org_name = request.GET.get('org'))
        files_endosos = EndorsementFile.objects.filter(owner__id__in = endososdata).filter(org_name = request.GET.get('org'))
        # files_endosos = EndorsementFileInfoSerializer(files_endosos, context={'request':request}, many = True)
        results['endosos'] = files_endosos
    if contratantes:
        try:
            if int(group) > 0:
                bonos = []
                grupos = Group.objects.get(pk = int(group))
            else:
                grupos = Group.objects.filter(org_name = request.GET.get('org'))
        except:
            grupos = Group.objects.filter(org_name=request.GET.get('org'))
        if int(group) > 0:
            grupos1 = Group.objects.get(pk = int(group))
            subg = Group.objects.filter(parent__id = int(group), type_group = 2, org_name=request.GET.get('org')).values_list('pk', flat=True)
            subsubg = Group.objects.filter(parent__id__in = subg, type_group = 3, org_name=request.GET.get('org')).values_list('pk', flat=True)
            allgrupos = list(subg) + list(subsubg)
            allgrupos.append(grupos1.id)
            grupos = Group.objects.filter(pk__in = allgrupos, org_name=request.GET.get('org'))
        else:
            grupos = Group.objects.filter(org_name=request.GET.get('org'))
        contractordata = Contractor.objects.filter(group = grupos, org_name = request.GET.get('org'))
        files_contractors = ContractorFile.objects.filter(owner__id__in = contractordata).filter(org_name = request.GET.get('org'))
        # files_contractors = ContractorFileHyperInfoSerializer(files_contractors, context={'request':request}, many = True)
        results['contractor'] = files_contractors

    # Empieza insertado de imagen
    info_org = getInfoOrg(request)
    if len(info_org['logo']) != 0:
        archivo_imagen = 'https://miurabox-public.s3.amazonaws.com/cas/' + info_org['logo']
        # archivo_imagen = get_presigned_url("cas/{url}".format(url=info_org['logo']),28800) 
    else:
        archivo_imagen = 'saam.jpg'
    tipo_reporte = "Reporte de Adjuntos"
    columns = ['Tipo','Referente - ID','Nombre','Fecha Creación']
    columns1 = ['Tipo','Referente - ID','Vigencia','Nombre','Fecha Creación']

    final_row = 0
    final_row_1 = 0
    final_row_2 = 0
    final_row_3 = 0
    # rows = persons.values_list('user__first_name','event','identifier','model','created_at','user__last_name')
    rows = results['contractor']
    rows_1 = results['polizas']
    rows_2 = results['fianzas']
    rows_3 = results['siniestros']
    rows_4 = results['endosos']

    tipos = []    
    referente = []    
    nombre = []   
    creacion = [] 
    refID = [] 
    celcont=[]

    tiposP = []    
    referenteP = []    
    nombreP = []    
    vigenciaP = []   
    creacionP = []
    refIDP = [] 
    tipopP = []
    contP =[]
    celcontP = []

    tiposF = []    
    referenteF = []    
    nombreF = []    
    vigenciaF = []   
    creacionF = []
    refIDF = [] 
    tipopF = []
    contF =[]
    celcontF = []

    tiposS = []    
    referenteS = []    
    nombreS = []    
    vigenciaS = []   
    creacionS = []
    fingreso = [] 
    refIDS = []  

    tiposE = []    
    referenteE = []    
    nombreE = []    
    vigenciaE = []   
    creacionE = [] 
    refIDE = [] 
    tipopE = []
    numE = []
    contE=[]
    celcontE=[]
    for t0 in rows:
        nm =''
        creac= ''
        idC= ''
        tipos.append('Contratante')
        if t0.owner:
            nm = t0.owner.full_name if t0.owner.full_name else ''
            nm = ((((((nm).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
            idC = t0.owner.id
            if t0.owner.cellule:
                celula = t0.owner.cellule.celula_name
            else:
                celula = ''
        else:
            nm = ''
            idC = ''
            celula = ''

        try:
            creac = t0.created_at.strftime("%d/%m/%Y") 
            creac = creac.replace("'",'')
        except Exception as b:
            creac = t0.created_at
        nombre.append(str(((((((t0.name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')))
        referente.append(nm)
        creacion.append(creac)
        refID.append(idC)
        celcont.append(celula)
    for t1 in rows_1:
        tiposP.append('Póliza')
        nm =''
        creac= ''
        idC= ''
        if t1:
            if t1.owner:
                nm = str(t1.owner.poliza_number if t1.owner.poliza_number else t1.owner.internal_number) 
                nm = ((((((nm).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                tipopP_ = checkDocumentType(int(t1.owner.document_type))
                idC = t1.owner.id
                if t1.owner.contractor:
                    contP_ = t1.owner.contractor.full_name if t1.owner.contractor.full_name else ''
                    contP_ = ((((((contP_).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    if t1.owner.celula:
                        celcontP_ = t1.owner.celula.celula_name
                    else:
                        celcontP_ = ''
                else:
                    contP_ = ''
                    celcontP_ = ''
                    nm = ''


        try:
            creac = t1.created_at.strftime("%d/%m/%Y") 
            creac = creac.replace("'",'')
        except Exception as b:
            creac = t1.created_at
        try:
            vig1 = t1.owner.start_of_validity.strftime("%d/%m/%Y") 
            vig1 = vig1.replace("'",'')
            vig2 = t1.owner.end_of_validity.strftime("%d/%m/%Y") 
            vig2 = vig2.replace("'",'')
        except Exception as b:
            vig1 = t1.owner.start_of_validity
            vig2 = t1.owner.end_of_validity
        nombreP.append(str(((((((t1.nombre).replace('[','')).replace(']',''))).replace(",",'')).replace("'",''))))
        referenteP.append(nm)
        vigenciaP.append(vig1+' - '+str(vig2))
        creacionP.append(creac)
        refIDP.append(idC)
        tipopP.append(tipopP_)
        contP.append(contP_)
        celcontP.append(celcontP_)
    for t2 in rows_2:
        tiposF.append('Fianza')
        nm =''
        creac= ''
        idC= ''
        if t2:
            nm = str(t2.owner.poliza_number if t2.owner.poliza_number else t2.owner.internal_number) 
            nm = ((((((nm).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
            idC = t2.owner.id
        try:
            creac = t2.created_at.strftime("%d/%m/%Y") 
            creac = creac.replace("'",'')
        except Exception as b:
            creac = t2.created_at
        try:
            vig1 = t2.owner.start_of_validity.strftime("%d/%m/%Y") 
            vig1 = vig1.replace("'",'')
            vig2 = t2.owner.end_of_validity.strftime("%d/%m/%Y") 
            vig2 = vig2.replace("'",'')
        except Exception as b:
            vig1 = t2.owner.start_of_validity
            vig2 = t2.owner.end_of_validity
        if t2.owner:
            tipopF_ = checkDocumentType(int(t2.owner.document_type))
            if t2.owner.contractor:
                contF_ = t2.owner.contractor.full_name if t2.owner.contractor.full_name else ''
                contF_ = ((((((contF_).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                if t2.owner.celula:
                    celcontF_ = t2.owner.celula.celula_name
                else:
                    celcontF_ = ''
        else:
            tipopF_ = ''
            contF_ = ''
            celcontF_ = ''
        nombreF.append(str(((((((t2.nombre).replace('[','')).replace(']',''))).replace(",",'')).replace("'",''))))
        referenteF.append(nm)
        vigenciaF.append(vig1+' - '+str(vig2))
        creacionF.append(creac)
        refIDF.append(idC)
        tipopF.append(tipopF_)
        contF.append(contF_)
        celcontF.append(celcontF_)
    for t3 in rows_3:
        tiposS.append('Siniestro')
        nm =''
        creac= ''
        idC= ''
        if t3:
            nm = t3.owner.numero_siniestro
            nm = ((((((nm).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
            idC = t3.owner.id

        try:
            creac = t3.created_at.strftime("%d/%m/%Y") 
            creac = creac.replace("'",'')
        except Exception as b:
            creac = t3.created_at
        try:
            vig1 = t3.owner.fecha_siniestro.strftime("%d/%m/%Y") 
            vig1 = vig1.replace("'",'')
            vig2 = t3.owner.fecha_ingreso.strftime("%d/%m/%Y") 
            vig2 = vig2.replace("'",'')
        except Exception as b:
            vig1 = t3.owner.fecha_siniestro
            vig2 = t3.owner.fecha_ingreso
        nombreS.append(str(((((((t3.nombre).replace('[','')).replace(']',''))).replace(",",'')).replace("'",''))))
        referenteS.append(nm)
        fingreso.append(vig2)
        vigenciaS.append(vig1)
        creacionS.append(creac)
        refIDS.append(idC)
    for t4 in rows_4:
        tiposE.append('Endoso')
        nm =''
        creac= ''
        idC= ''
        if t4:
            nm = t4.owner.number_endorsement
            nm = ((((((nm).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
            idC = t4.owner.id
            if t4.owner:
                if t4.owner.policy:
                    tipopE_=checkDocumentType(int(t4.owner.policy.document_type))
                    if t4.owner.policy.contractor:
                        contE_ = t4.owner.policy.contractor.full_name if t4.owner.policy.contractor.full_name else ''
                        contE_ = ((((((contE_).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        if t4.owner.policy.celula:
                            celcontE_ = t4.owner.policy.celula.celula_name
                        else:
                            celcontE_ = ''
                    else:
                        tipopE_=''
                        contE_ = ''
                        celcontE_ = ''
                else:
                    tipopE_=''
                    contE_ = ''
                    celcontE_ = ''
            else:
                tipopE_=''
                contE_ = ''
                celcontE_ = ''
        try:
            creac = t4.created_at.strftime("%d/%m/%Y") 
            creac = creac.replace("'",'')
        except Exception as b:
            creac = t4.created_at
        try:
            vig1 = t4.owner.init_date.strftime("%d/%m/%Y") 
            vig1 = vig1.replace("'",'')
            vig2 = t4.owner.end_date.strftime("%d/%m/%Y") 
            vig2 = vig2.replace("'",'')
        except Exception as b:
            vig1 = t4.owner.init_date
            vig2 = t4.owner.end_date

        nombreE.append(str(((((((t4.nombre).replace('[','')).replace(']',''))).replace(",",'')).replace("'",''))))
        referenteE.append(nm)
        vigenciaE.append(vig1+' - '+str(vig2))
        creacionE.append(creac)
        refIDE.append(idC)
        tipopE.append(tipopE_)
        contE.append(contE_)
        celcontE.append(celcontE_)
    # Empieza insertado de imagen
    info_org = getInfoOrg(request)
    if len(info_org['logo']) != 0:
      archivo_imagen = 'https://miurabox-public.s3.amazonaws.com/cas/' + info_org['logo']
        # archivo_imagen = get_presigned_url("cas/{url}".format(url=info_org['logo']),28800) 
    else:
      archivo_imagen = 'saam.jpg'

    obj = {
        'tipos'   : str(list(tipos)),
        'nombre'   : str(list(nombre)),
        'creacion'   : str(list(creacion)),
        'referente'   : str(list(referente)),
        'refID'   : str(list(refID)),
        'celcont'   : str(list(celcont)),

        'tiposP'   : str(list(tiposP)),
        'nombreP'   : str(list(nombreP)),
        'creacionP'   : str(list(creacionP)),
        'referenteP'   : str(list(referenteP)),
        'vigenciaP'   : str(list(vigenciaP)),
        'refIDP'   : str(list(refIDP)),
        'tipopP'   : str(list(tipopP)),
        'contP'   : str(list(contP)),
        'celcontP'   : str(list(celcontP)),

        'tiposF'   : str(list(tiposF)),
        'nombreF'   : str(list(nombreF)),
        'creacionF'   : str(list(creacionF)),
        'referenteF'   : str(list(referenteF)),
        'vigenciaF'   : str(list(vigenciaF)),
        'refIDF'   : str(list(refIDF)),
        'tipopF'   : str(list(tipopF)),
        'contF'   : str(list(contF)),
        'celcontF'   : str(list(celcontF)),

        'tiposE'   : str(list(tiposE)),
        'nombreE'   : str(list(nombreE)),
        'creacionE'   : str(list(creacionE)),
        'referenteE'   : str(list(referenteE)),
        'vigenciaE'   : str(list(vigenciaE)),
        'refIDE'   : str(list(refIDE)),
        'tipopE'   : str(list(tipopE)),
        'contE'   : str(list(contE)),
        'celcontE'   : str(list(celcontE)),

        'tiposS'   : str(list(tiposS)),
        'nombreS'   : str(list(nombreS)),
        'creacionS'   : str(list(creacionS)),
        'referenteS'   : str(list(referenteS)),
        'vigenciaS'   : str(list(vigenciaS)),
        'fingreso'   : str(list(fingreso)),
        'refIDS'   : str(list(refIDS)),

        'tipo_reporte': tipo_reporte,
        'email_org':info_org['email'],
        'phone_org':info_org['phone'],
        'webpage_org':info_org['webpage'],
        'address_org':info_org['address'],
        'urlname_org':info_org['name'],
        }  
    obj['columns'] = str(list(columns))
    obj['contractor'] = len(results['contractor'])
    obj['polizas'] = len(results['polizas'])
    obj['fianzas'] = len(results['fianzas'])
    obj['siniestros'] = len(results['siniestros'])
    obj['endosos'] = len(results['endosos'])
    obj['imagen'] = archivo_imagen
    obj['registros'] = len(rows)+len(rows_1)+len(rows_2)+len(rows_3)+len(rows_4)
    r = requests.post(settings.SERVICEEXCEL_URL + 'get-adjuntoExcelReporte/', obj,
    # headers = {
    # 'Authorization':'Bearer %s'%request.user.user_info.fi_token_refresh,
    # # 'Content-Type':'application/json' 
    # }, 
    stream=True)
    response_data= r.text

    response = HttpResponse(r.content,content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

    return response
# -------------------------------------------------------------------------------
@api_view(['POST'])
@permission_classes((IsAuthenticatedV2, RenovacionesReportesPermissionsV2, IsOrgMemberV2))
def Service_ReportePolizasContribExcel(request): 
    request.query_params._mutable = True
    post = request.data.copy() # to make it mutable
    post['org'] = request.GET.get('org')
    post['token'] = request.META['HTTP_AUTHORIZATION'].replace('Bearer ', '')
    post['cols1'] = str(request.data['cols1'] if 'cols1' in request.data else [])
    post['cols'] = str(request.data['cols1'] if 'cols1' in request.data else [])
    try:
        ui = UserInfo.objects.get(user= request.user)
        perfil = None
        try:
            if ui.perfil_restringido:
                perfil = PerfilUsuarioRestringido.objects.get(pk = ui.perfil_restringido.id)
            else:
                perfil = None
        except Exception as ert:
            perfil = None
    except Exception as er:
        perfil = None

    post['user'] = perfil.id if perfil else None

    if request.GET.get('org') == 'ancora':
        url = settings.SERVICEEXCEL_ANCORA_URL
    else:
        url = settings.SERVICEEXCEL_2_URL
    r = requests.post(url+ 'reporte-polizascontrib-asincrono/', 
        headers={'Authorization': request.META['HTTP_AUTHORIZATION']}, 
        data = post, 
        stream=True)

    return Response(r.text, status = r.status_code)

# Reporte log Reporte
@api_view(['POST'])
@permission_classes((IsAuthenticatedV2, IsOrgMemberV2))
def Service_QuotationsDashReportExcel(request):
    try:
        tipo = int(request.data['tipo'])
    except:
        tipo = 0
    request = request
    org_name=request.GET.get('org')
    try:
        try:
            config_chart = Graphics.objects.get(owner=request.user, org_name=org_name, type_graphic = 6)
        except:
            config_chart = Graphics.objects.get(org_name=org_name, type_graphic = 6)
        days_green = config_chart.green if config_chart.green else 45
        days_yellow = config_chart.yellow if config_chart.yellow else 30
        days_orange = config_chart.orange if config_chart.orange else 15
        days_red = config_chart.red if config_chart.red else 1000
        filter_graphs =  config_chart.option_filter
    except:
        config_chart = None
        days_green = 45
        days_yellow = 30
        days_orange = 15
        days_red = 1000
        filter_graphs = 3

    today = datetime.today()
    orange_days = timedelta(days = days_orange)
    yellow_days = timedelta(days = days_yellow)
    green_days = timedelta(days = days_green)
    red_days = timedelta(days = days_red)

    diasO = today + orange_days
    diasY = today + yellow_days
    diasG = today + green_days

    if int(filter_graphs) ==1:
        lista = Cotizacion.objects.filter(org_name=org_name,status=1)
    elif int(filter_graphs) ==2: 
        lista = Cotizacion.objects.filter(org_name=org_name,status=3)
    else:
        lista = Cotizacion.objects.filter(org_name=org_name,status__in=[1,3]).exclude(status=0)
    lista = lista.exclude(status=3)
    # ------------------------------------
    diasO = today - orange_days
    diasY = today - yellow_days
    diasG = today - green_days
    diasR = today - red_days     
    pendingGreen = lista.filter(created_at__lte = today, created_at__gt = diasG)
    pendingYellow = lista.filter(created_at__lte = diasG, created_at__gt = diasY)
    pendingOrange = lista.filter(created_at__lte = diasY, created_at__gt = diasO)
    pendingRed = lista.filter(created_at__lte = diasO)
    quotations = pendingGreen | pendingYellow | pendingOrange | pendingRed         
    if tipo == 1:
        queryset = pendingGreen
    elif tipo == 2:
        queryset = pendingYellow
    elif tipo == 3:
        queryset = pendingOrange
    elif tipo == 4:
        queryset = pendingRed
    else:
        queryset = pendingGreen | pendingYellow | pendingOrange | pendingRed     
    response = HttpResponse(content_type='application/ms-excel')
    response['Content-Disposition'] = 'attachment; filename="Reporte Cotizaciones.xls"'

    wb = xlwt.Workbook(encoding='utf-8')
    ws = wb.add_sheet('Cotizaciones')

    # Empieza insertado de imagen
    info_org = getInfoOrg(request)
    if len(info_org['logo']) != 0:
        archivo_imagen = 'https://miurabox-public.s3.amazonaws.com/cas/' + info_org['logo']
        # archivo_imagen = get_presigned_url("cas/{url}".format(url=info_org['logo']),28800) 
    else:
        archivo_imagen = 'saam.jpg'

    columns = [
        'No. Folio',
        'Contratante',
        'Email',
        'Teléfono',
        'Ramo',
        'Subramo',
        'Aseguradora(s)',
        'Asegurado',
        'Estatus',
        'Creado por',
        'Primas de Aseguradora'
    ]

    info_org = getInfoOrg(request)

    if len(info_org['logo']) != 0:
        archivo_imagen = 'https://miurabox-public.s3.amazonaws.com/cas/' + info_org['logo']
        # archivo_imagen = get_presigned_url("cas/{url}".format(url=info_org['logo']),28800) 
    else:
        archivo_imagen = 'saam.jpg'

    status = [st.status for st in queryset]
    aseguradoras_emision = []
    id_ = str(list(queryset.values_list('id', flat=True)))
    created_at = []

    
    contratact = []
    asegurados = []
    creadopor = []
    contractemail = []
    contractphone = []
    subramos = []
    ramos = []
    aseguradoras = []
    aseguradoras_primas_final = []
    nuevo_contratante = []
    for c in queryset:
        if c.prospecto == 1:
            nuevo_contratante.append("Nuevo")
        else:
            nuevo_contratante.append("Existente")
        created_at.append(c.created_at.strftime("%d/%m/%Y"))
        if c.aseguradora_seleccionada:
            aseguradoras_emision.append(c.aseguradora_seleccionada)
        else:
            aseguradoras_emision.append('')

        asegurado = ''

        if c.ramo and not isinstance(c.ramo, dict):
            ramo = json.loads(c.ramo.replace('\'','"')) 
        else:
            ramo = c.ramo
        if c.subramo and not isinstance(c.subramo, dict):
            subramo = json.loads(c.subramo.replace('\'','"'))
        else:
            subramo = c.subramo

        life = None
        accidents = None
        danios = None
        auto = None
        asegurado = ''
        
        if c.life and ramo['value'] == 1:
            life = json.loads(c.life.replace('\'', '"'))
            life = life['aseguradosList']
            life = [ "%s %s %s"%(asegurado['first_name'],asegurado['last_name'],asegurado['second_last_name']) for asegurado in life]
            asegurado =  ", ".join(life)

            

        if c.accidents and ramo['value'] == 2:
            accidents = json.loads(c.accidents.replace('\'', '"'))
            asegurado = "%s %s %s"%(accidents['first_name'], accidents['last_name'], accidents['second_last_name'])
       

        if c.danios and ramo['value'] == 3 and subramo['value'] != 9:
            danios = json.loads(c.danios.replace('\'', '"'))
            asegurado = danios['insured_item']
       

        if ramo['value'] == 3 and subramo['value'] == 9 and c.auto:
            auto = json.loads(c.auto.replace('\'', '"'))
            try:
                asegurado = auto['selectedCar']['val']
            except:
                asegurado = ''
        asegurados.append(asegurado.replace(',',''))

        contratante = ''
        if c.prospecto == 1:
            contratante = "%s %s %s"%(c.first_name, c.last_name, c.second_last_name)
            contractemail.append('')
            contractphone.append('')
        if c.prospecto == 2:
            contratante = c.contractor.full_name
            contractemail.append(c.contractor.email)
            contractphone.append(c.contractor.phone_number)
        contratante = ((((((contratante).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'') 
        contratact.append(contratante)

        if c.owner:
            val_owner_e = c.owner.first_name + ' '+ str(c.owner.last_name)
        else:
            val_owner_e = ''

        creadopor.append(val_owner_e)

        if c.ramo and not isinstance(c.ramo, dict):
            ramo_ = json.loads(c.ramo.replace('\'','"'))
        else:
            ramo_ = c.ramo
        ramos.append(ramo_['value'])

        if c.subramo and not isinstance(c.subramo, dict):
            subramo_ = json.loads(c.subramo.replace('\'','"'))
        else:
            subramo_ = c.subramo
        subramos.append(subramo_['value'])


        aux = []
        aux_primas = []
        for aseguradora in c.aseguradora:
            aseguradora = aseguradora.replace('\\"','').replace('\\\\','')
            aseguradoras_ = json.loads((json.loads(aseguradora)).replace('\'','"'))
            aseguradoras_ = aseguradoras_['alias']
            aux.append(aseguradoras_)
            aux_primas.append(aseguradoras_)
        aux = " - ".join(aux)

        aseguradoras.append(aux)
        # print(aux_primas)
        aseguradoras_primas = AseguradorasCotizacionPrimas.objects.filter(
            cotizacion = c,
            checked = True,
            aseguradora__in = list(aux_primas)
        )

        primas = []
        for prima in aseguradoras_primas:
            a = "%s (%s)"%(prima.aseguradora, prima.prima)
            primas.append(a)
        primas =  " - ".join(primas)
        aseguradoras_primas_final.append(primas)


    obj = {
        # Rec
        'status'   : str(list(status)),
        'id_'   : id_,
        'nuevo_contratante': str(list(nuevo_contratante)),
        'created_at'   : str(list(created_at)),
        'aseguradoras'   : str(list(aseguradoras)),
        'aseguradoras_primas'   : str(list(aseguradoras_primas_final)),
        'aseguradoras_emision'   : str(list(aseguradoras_emision)),
        'asegurado'   : str(list(asegurados)),
        'creadopor'   : str(list(creadopor)),
        'contratact'   : str(list(contratact)),
        'contractemail'   : str(list(contractemail)),
        'contractphone'   : str(list(contractphone)),
        'subramo'   : str(list(subramos)),
        'ramo'   : str(list(ramos)),
        # Gral
        'tipo_reporte': 'Reporte Cotizaciones',
        'email_org':info_org['email'],
        'phone_org':info_org['phone'],
        'webpage_org':info_org['webpage'],
        'address_org':info_org['address'],
        'urlname_org':info_org['name'],
        }
    obj['columns'] = str(list(columns))
    obj['imagen'] = archivo_imagen
    obj['lenots'] = len(queryset)
    obj['registros'] = len(queryset)
    r = requests.post(settings.SERVICEEXCEL_URL + 'get-quotationsExcel/', obj,
    stream=True)
    response_data= r.text

    response = HttpResponse(r.content,content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

    return response

# -------------------------------------------------------------------------------

def getInfoOrg(request):
    org_ = requests.get(settings.CAS2_URL + 'get-org-info/'+request.META['user']['org']['name'])
    response_org= org_.text
    org_data = json.loads(response_org)
    org_info = org_data['data']['org']
    return org_info
    
def get_antiguedad(obj):
    today = date.today()
    a = arrow.get(today)
    aux_date = obj
    b = arrow.get(aux_date)
    antiguedad = (a-b).days
    antiguedad = int(antiguedad)+1
    return antiguedad

def get_ramo(ramo,org):
    if int(ramo) > 0:
        ramo = list(Ramos.objects.filter(ramo_code=int(ramo)).values_list('pk', flat=True))
    else:
        ramo = list(Ramos.objects.filter(org_name=org).values_list('pk', flat=True))
    return ramo

def get_subramo(subramo,ramo,org):
    if int(subramo) > 0:
        subramo = list(SubRamos.objects.filter(subramo_code=int(subramo)).values_list('pk', flat=True))
    else:
        subramo = list(
            SubRamos.objects.filter(org_name=org, ramo__in=ramo).values_list('pk', flat=True))
    return subramo

def get_ramo_sel(ramos_sel,aseguradora,org):
    if (ramos_sel):
        ramo = list(Ramos.objects.filter(org_name=org, provider__in=aseguradora, ramo_code__in=ramos_sel).values_list('pk', flat=True))
    else:
        ramo = list(Ramos.objects.filter(org_name=org, provider__in=aseguradora).values_list('pk', flat=True))
    return ramo

def get_subramo_sel(subramos_sel,ramo,org):  
    if (subramos_sel):
        subramo = list(SubRamos.objects.filter(org_name=org, ramo__in=ramo,subramo_code__in=subramos_sel).values_list('pk', flat=True))
    else:
        subramo = list(SubRamos.objects.filter(org_name=org, ramo__in=ramo).values_list('pk', flat=True))
    return subramo

def get_aseguradora(aseguradora,org):
    if aseguradora == 0:
        aseguradora = list(Provider.objects.filter(org_name=org).values_list('pk', flat=True))
    else:
        aseguradora = [aseguradora]
    return aseguradora

def get_aseg_sel(providers_sel,org):
    if (providers_sel):
        aseguradora = list(Provider.objects.filter(pk__in=(providers_sel)).values_list('pk', flat=True))
    else:
        aseguradora = list(Provider.objects.filter(org_name=org).values_list('pk', flat=True))
    return aseguradora

def get_user_sel(users_sel):
    if (users_sel):
        users = list(User.objects.filter(pk__in=(users_sel)).values_list('pk', flat=True))
    else:
        users = list(User.objects.values_list('pk', flat=True))
    return users

def get_status(status):
    if int(status) > 0:
        status = [int(status)]
    else:
        status = list([1, 2, 3, 4, 5])
    return status
def get_contratante(contratante,type_person, polizas, grupos):
    if int(contratante) > 0:
        contratanten = list(Contractor.objects.filter(pk=int(contratante), group=grupos).values_list('pk', flat=True))
        polizas = polizas.filter(contractor__in=contratanten)
    else:
        contratanten = list(Contractor.objects.filter(group=grupos).values_list('pk', flat=True))
        polizas = polizas.filter(contractor__in=contratanten)
    return polizas

def get_datatime(since, until):
    try:
        f = "%d/%m/%Y %H:%M:%S"
        since = datetime.strptime(since, f)
        until = datetime.strptime(until, f)
    except:
        f = "%m/%d/%Y %H:%M:%S"
        since = datetime.strptime(since, f)
        until = datetime.strptime(until, f)
    return since, until

def get_value_(value):
    if (value) != '0':
        valor = value
    else:
        valor = ''
    return valor

def get_grupo(group,org):
    if int(group) > 0:
        grupos = Group.objects.get(pk=int(group))
    else:
        grupos = Group.objects.filter(org_name=org)
    return grupos
    
def get_provider(type, provider, org):
    if type == 'provider':
        if int(provider) > 0:
            providers = list(Provider.objects.filter(pk=int(provider)).values_list('pk', flat=True))
        else:
            providers = list(Provider.objects.filter(org_name=org).values_list('pk', flat=True))
    elif type == 'providers_sel':
        if (provider):
            providers = list(Provider.objects.filter(pk__in=(provider)).values_list('pk', flat=True))
        else:
            providers = list(Provider.objects.filter(org_name=org).values_list('pk', flat=True))
    else :
        providers = list(Provider.objects.filter(org_name=org).values_list('pk', flat=True))
    return providers

def get_claves(cve, org):
    try:
        clave = int(cve)
        if clave > 0:
            cves = list(
                Claves.objects.filter(clave__icontains=cve, org_name=org).values_list('pk', flat=True))
        else:
            cves = list(Claves.objects.filter(org_name=org).values_list('pk', flat=True))
    except:
        cves = list(Claves.objects.filter(clave__icontains=cve, org_name=org).values_list('pk', flat=True))
    return  cves

def get_data_contratante1(contratante, grupos, polizas, type_person):
    if int(contratante) > 0:
        contratanten = list(Contractor.objects.filter(pk=int(contratante), group=grupos).values_list('pk', flat=True))
        polizas = polizas.filter(contractor__in=contratanten)
    else:
        contratanten = list(Contractor.objects.filter(group=grupos).values_list('pk', flat=True))
        polizas = polizas.filter(contractor__in=contratanten)
    return polizas

def get_add_renovadas(add_renovadas, polizas):
    if add_renovadas == 1:
        polizas = polizas.filter(renewed_status=1)
    elif add_renovadas == 2:
        polizas = polizas.filter(renewed_status=0)
    elif add_renovadas == 0:
        polizas = polizas
    return polizas

def get_date_filters(since, until, report_by):
    try:
        f = "%d/%m/%Y %H:%M:%S"
        since = datetime.strptime(since, f)
        until = datetime.strptime(until, f)
    except:
        f = "%m/%d/%Y %H:%M:%S"
        since = datetime.strptime(since, f)
        until = datetime.strptime(until, f)
    # Vigencia
    if int(report_by) == 2:
        date_filters = [Q(start_of_validity__gte=since), Q(start_of_validity__lte=until)]
    # Fecha creación
    elif int(report_by) == 1:
        date_filters = [Q(created_at__gte=since), Q(created_at__lte=until), Q(migrated=False)]
    return date_filters

def date_date(data):
        try:
            font_style.num_format_str = 'DD/MM/YYYY'
            data = (data.replace(tzinfo=None))
        except:
            data = data
        return data

def data_money(data):
    font_style.num_format_str = '"$ "#,##0.00_);("$"#,##'
    if data == None:
        data = 0
    if type(data) == str :
        data = float(data)

    return data

def data_status(data):
    status = {
        0 : 'Desactivado',
        1 : 'En trámite',
        2 : 'OT Cancelada.',
        4 : 'Precancelada',
        10: 'Por iniciar',
        11: 'Cancelada',
        12: 'Renovada',
        13: 'Vencida',
        14: 'Vigente',
        15: 'No Renovada',
        16: 'Siniestrada'
    }
    return status.get(data, '--')

def data_proc(data):
    procedencia = {
        1: 'Residencia',
        2: 'Turista',
        3: 'Legalizado',
        4: 'Fronterizo',
        0: 'Sin especificar',
    }
    return procedencia.get(data, '--')

def data_usage(data):
    usage = {
        '1': 'Particular',
        '2': 'Carga Comercial',
        '3': 'Servicio',
    }
    return usage.get(data, data)

def data_charge(data):
    charge = {1: 'A',2: 'B', 3: 'C', 0: 'Sin especificar'}
    return charge.get(data, '--')

def checkRelation (request):
    switcher = {
        1: "Titular",
        2: "Conyuge",
        3: "Hijo",
        4: "Otro",
    }
    return switcher.get(request, "Otro")

def checkUsage (request):
    try:
        request = int(request)
        switcher = {
            1: "Particular",
            2: "Carga comercial",
            3: "Servicio",
            4: "Otro",
        }
        return switcher.get(request, "Otro")
    except:
        return request

def checkCharge (request):
    switcher = {
        1: "A",
        2: "B",
        3: "C",
        4: "Otro",
    }
    return switcher.get(request, "Otro")

def checkProc (request):
    switcher = {
        1: "Residencia",
        2: "Turista",
        3: "Legalizado",
        4: "Fronterizo",
    }
    return switcher.get(request, "Otro")

def checkRazonGMM(request):
    switcher = {
        1: "Accidente",
        2: "Enfermedad",
        3: "Parto",
    }
    return switcher.get(request, "No Aplica")

def checkRazonVida(request):
    switcher = {
        1: "Natural",
        2: "Accidental",
        3: "Pérdidas orgánicas",
        4: "Invalidez",
        5: "Funerarios"
    }
    return switcher.get(request, "No Aplica")

def checkRazonAutos(request):
    switcher = {
        1: "Colisión",
        2: "Incendio",
        3: "Vuelco",
        4: "Robo total",
        5: "Robo parcial",
        6: "Cristales",
        7: "Inundaciones",
        8: "Volcadura",
        9: "Servicio de grúa",
        10: "Pérdida Total",
        11: "Vandalismo",
        12: "Alcance y proyección",
        13: "Daños",
        14: "Fenomenos Naturales",
        15: "Colisión (Afectados)",
        16: "Daños en neumatico",
        17: "Asistencia Vial",
        18: "Atropello",
        19: "Trámites administrativos",
        20: "Pérdida Parcial"
    }
    return switcher.get(request, "No Aplica")

def checkAutosSub1(request):
    switcher = {
        1:'Conclusión de ajuste o peticiones en general',
        2:'Legal',
        3:'Valuación',
        4:'Reparación',
        5:'Daño material',
        6:'Robo',
        7:'Robo localizado',
        9:'Reembolso de gastos médicos',
        10:'Reembolso de gastos funerarios',
        11:'Reembolso de grúa',
        12:'Reembolso de grúa por asistencia',
        13:'Reembolso de cristal',
        14:'Reembolso de deducible o daños a terceros',
        15:'Pago de daños',
        16:'Carta PT y montos',
        17:'Carta rechazo',
        18:'Factura por deducible'
    }
    return switcher.get(request, "")

def checkRazonDanios(request):
    switcher = {
        1: "Accidente",
        2: "Enfermedad",
        3: "Parto",
    }
    return switcher.get(request, "No Aplica")

def checkStatusEndo(request):
        switcher = {
                1: "Pendiente",
                2: "Registrado",
                3: "Rechazado",
                4: "Cancelado",
                5: "En trámite",
                6: "Anulado",
                0: "Desactivado",
        }
        return switcher.get(request, "Invalid status")

def checkStatusPolicy(request):
    switcher = {
        1: "En trámite",
        2: "OT Cancelada",
        4: "Precancelada",
        10: "Por iniciar",
        11: "Cancelada",
        12: "Renovada",
        13: "Vencida",
        14: "Vigente",
        15: "No Renovada",
        16: "Siniestrada",
    }
    return switcher.get(request, "Invalid status")
def checkStatusFianza(request):
    switcher = {
        1: "En trámite",
        2: "OT Cancelada",
        10: "Por iniciar",
        11: "Cancelada",
        12: "Anulada",
        13: "Vencida",
        14: "Vigente",
        15: "Renovada",
        16: "PreAnulada",
        17: "Anulada",
    }
    return switcher.get(request, "Sin estatus")
def checkStatusSin(request):
    switcher = {
        1: "Pendiente",
        2: "En Trámite",
        3: "Completado",
        4: "Cancelado",
        5: "Rechazado",
        6: "En espera",
        7: "Reproceso",
        8: "Inconformidad",
    }
    return switcher.get(request, "Invalid status")

def checkConceptEndoso(request):
    switcher = {
        53: "Detalle de Garantía",
        54: "Prórroga de vigencia",
        58: "Aumento",
        59: "Disminución",
        60: "Anulación",
        61: "Cancelación",
        55: "Anuencia",
        4: "Endoso de texto/Otro",
        57: "Aumento y Prórroga",
        62: "Disminución y Prórroga",
        34: "Cambio en Beneficiario",
        24: "Alta de Certificados",
        25: "Baja de Certificados",
        56: "Correcciones de Certificados",
    }
    return switcher.get(request, "Otro")

def checkcEndoso(request):
    switcher = {
        1: "CAMBIO DE FORMA DE PAGO",
        2: "CAMBIO DE SUMA ASEGURADA",
        3: 'OTRO',
        4: 'PRÓRROGA DE VIGENCIA',
        5: 'AGREGAR COBERTURAS',
        6: 'ALTA DE DEPENDIENTE',
        7: 'CAMBIO DE CONTRATANTE',
        8: 'CAMBIO DATOS FISCALES',
        9: 'ESPECIFICACIONES',
        11: 'CAMBIO DE FORMA DE PAGO',
        12: 'DISMINUCIÓN EN LA SUMA ASEGURADA',
        13: 'CANCELACION DEFINITIVA A PETICION',
        14: 'CAMBIO DE DEDUCIBLE Y/O COASEGURO',
        15: 'BAJA DE ASEGURADO',
        16: 'CANCELACIÓN DE PÓLIZA POR PETICIÓN',
        17: 'CANCELACIÓN DE PÓLIZA POR FALTA DE PAGO',
        23: 'ANTIGÜEDAD RECONOCIDA',
        24: 'ALTA DE ASEGURADOS',
        25: 'BAJA DE ASEGURADOS',
        26: 'AJUSTE ANUAL (A)',
        27: 'RECONOCIMIENTO DE ANTIGUEDAD',
        28: 'AJUSTE ANUAL (D)',
        29: 'OTRO',
        30: 'Declaración',
        31: 'Agregar asegurado o dependiente',
        32: 'Cancelación',
        33: 'CORRECCION DE DATOS',
        34: 'CORRECCION DE DATOS BENEFICIARIO',
        35: 'CAMBIO EN CERTIFICADO',
    }
    return switcher.get(request, "Otro")
def checkcEndosoC(request):
    switcher = {
        41: 'ALTA DE UNIDAD',
        42: 'AGREGAR COBERTURA',
        43: 'CAMBIO DE FORMA DE PAGO',
        44: 'AGREGAR CARGA',
        45: 'AGREGAR ADAPTACIONES Y CONVERSIONES',
        46: 'INCLUIR BP',
        47: 'CORREGIR DESCRIPCIÓN',
        48: 'AGREGAR TEXTOS ACLARATORIOS',
        49: 'ADAPTACIONES SOLO PARA EFECTOS DE RC',
        50: 'AGREGAR PLACAS, MOTOR O CORREGIR SERIE',
        51: 'CANCELACIONES',
        52: 'ELIMINACIÓN DE COBERTURAS',
        31: 'Agregar asegurado o dependiente',
        24: 'ALTA DE ASEGURADOS',
        25: 'BAJA DE ASEGURADOS',
        26: 'AJUSTE ANUAL A',
        28: 'AJUSTE ANUAL D',
        36: 'AJUSTE ANUAL ',
        4: 'PRORROGA DE VIGENCIA',
        35: 'CAMBIO EN CERTIFICADO',     
    }
    return switcher.get(request, "Otro")

def checkPaySin(request):
    switcher = {
        1: "Reembolso",
        2: "Programacion",
        3: "Pago Directo",
        4: "Aclaración",
    }
    return switcher.get(request, "No especificado")

def checkPaySinV(request):
    switcher = {
        1: "Cheque",
        2: "Transferencia",
        3: "Pago Directo",
        4: "Aclaración",
    }
    return switcher.get(request, "No especificado")

def getStates(data):
    status = {
        1 : 'Aguascalientes',
        2 : 'Baja California',
        3 : 'Baja California Sur',
        4 : 'Campeche',
        5 : 'Chiapas',
        6 : 'Chihuahua',
        7 : 'Coahuila',
        8 : 'Colima',
        9 : 'Ciudad de México',
        10: 'Durango',
        11: 'Estado de México',
        12: 'Guanajuato',
        13: 'Guerrero',
        14: 'Hidalgo',
        15: 'Jalisco',
        16: 'Michoacán',
        17: 'Morelos',
        18: 'Nayarit',
        19: 'Nuevo León',
        20: 'Oaxaca',
        21: 'Puebla',
        22: 'Querétaro',
        23: 'Quintana Roo',
        24: 'San Luis Potosí',
        25: 'Sinaloa',
        26: 'Sonora',
        27: 'Tabasco',
        28: 'Tamaulipas',
        29: 'Tlaxcala',
        30: 'Veracruz',
        31: 'Yucatán',
        32: 'Zacatecas',
    }
    return status.get(data, '')

#reporte cobranza AIA 
@api_view(['POST'])
@permission_classes((IsAuthenticatedV2, CobranzaReportesPermissionsV2, IsOrgMemberV2))
def Service_ReporteCobranzaAIAExcel(request):
    #request.data['Authorization'] = request.META['HTTP_AUTHORIZATION']
    request.data['org'] = request.GET.get('org')
    try:
        user_info = UserInfo.objects.get(user=request.user)
    except UserInfo.DoesNotExist:
        user_info = None
    except Exception as er:
        print(er)
        user_info = None
    if user_info == None:
        perfil_restringido_id = None
    else:
        try:
            if user_info.perfil_restringido:
                perfil_restringido = PerfilUsuarioRestringido.objects.get(pk=user_info.perfil_restringido.id)
                perfil_restringido_id = perfil_restringido.pk
            else:
                perfil_restringido_id = None
        except Exception as ert:
            perfil_restringido_id = None
    request.data['perfil_restringido_id'] = perfil_restringido_id    
    try:
        del request.data['cols1']
    except Exception as e:
        # print(e)
        pass
    if request.GET.get('org') == 'ancora':
        url = settings.SERVICEEXCEL_ANCORA_URL
    else:
        url = settings.SERVICEEXCEL_2_URL
    
    #r = requests.post(url + 'reporte_cobranza/', headers={'Authorization': request.META['HTTP_AUTHORIZATION']}, data = request.data, stream=True)    
    r = requests.post(url + 'reporte_cobranzaAIA/', data = request.data, stream=True)    
    return Response(r.text, status = r.status_code)   

@api_view(['POST'])
@permission_classes((IsAuthenticatedV2, RenovacionesReportesPermissionsV2, IsOrgMemberV2))
def Service_ReporteRenovacionesAIAExcel(request):
    #request.data['Authorization'] = request.META['HTTP_AUTHORIZATION']
    request.data['org'] = request.GET.get('org')
    try:
        user_info = UserInfo.objects.get(user=request.user)
    except UserInfo.DoesNotExist:
        user_info = None
    except Exception as er:
        print(er)
        user_info = None
    if user_info == None:
        perfil_restringido_id = None
    else:
        try:
            if user_info.perfil_restringido:
                perfil_restringido = PerfilUsuarioRestringido.objects.get(pk=user_info.perfil_restringido.id)
                perfil_restringido_id = perfil_restringido.pk
            else:
                perfil_restringido_id = None
        except Exception as ert:
            perfil_restringido_id = None
    request.data['perfil_restringido_id'] = perfil_restringido_id    
    try:
        del request.data['cols1']
    except Exception as e:
        # print(e)
        pass
    if request.GET.get('org') == 'ancora':
        url = settings.SERVICEEXCEL_ANCORA_URL
    else:
        url = settings.SERVICEEXCEL_2_URL
    
    #r = requests.post(url + 'reporte_cobranza/', headers={'Authorization': request.META['HTTP_AUTHORIZATION']}, data = request.data, stream=True)    
    r = requests.post(url + 'reporte_renovacionesAIA/', data = request.data, stream=True)    
    return Response(r.text, status = r.status_code)   

@api_view(['POST'])
@permission_classes((IsAuthenticatedV2, PolizasReportesPermissionsV2, IsOrgMemberV2))
def Service_ReportePolizasAIAExcel(request):
    #request.data['Authorization'] = request.META['HTTP_AUTHORIZATION']
    request.data['org'] = request.GET.get('org')
    try:
        user_info = UserInfo.objects.get(user=request.user)
    except UserInfo.DoesNotExist:
        user_info = None
    except Exception as er:
        print(er)
        user_info = None
    if user_info == None:
        perfil_restringido_id = None
    else:
        try:
            if user_info.perfil_restringido:
                perfil_restringido = PerfilUsuarioRestringido.objects.get(pk=user_info.perfil_restringido.id)
                perfil_restringido_id = perfil_restringido.pk
            else:
                perfil_restringido_id = None
        except Exception as ert:
            perfil_restringido_id = None
    request.data['perfil_restringido_id'] = perfil_restringido_id    
    try:
        del request.data['cols1']
    except Exception as e:
        # print(e)
        pass
    if request.GET.get('org') == 'ancora':
        url = settings.SERVICEEXCEL_ANCORA_URL
    else:
        url = settings.SERVICEEXCEL_2_URL
    
    #r = requests.post(url + 'reporte_cobranza/', headers={'Authorization': request.META['HTTP_AUTHORIZATION']}, data = request.data, stream=True)    
    r = requests.post(url + 'reporte_polizasAIA/', data = request.data, stream=True)    
    return Response(r.text, status = r.status_code)   

@api_view(['POST'])
@permission_classes((IsAuthenticatedV2, PolizasReportesPermissionsV2, IsOrgMemberV2))
def Service_ReporteFianzasAIAExcel(request):
    #request.data['Authorization'] = request.META['HTTP_AUTHORIZATION']
    request.data['org'] = request.GET.get('org')
    try:
        user_info = UserInfo.objects.get(user=request.user)
    except UserInfo.DoesNotExist:
        user_info = None
    except Exception as er:
        print(er)
        user_info = None
    if user_info == None:
        perfil_restringido_id = None
    else:
        try:
            if user_info.perfil_restringido:
                perfil_restringido = PerfilUsuarioRestringido.objects.get(pk=user_info.perfil_restringido.id)
                perfil_restringido_id = perfil_restringido.pk
            else:
                perfil_restringido_id = None
        except Exception as ert:
            perfil_restringido_id = None
    request.data['perfil_restringido_id'] = perfil_restringido_id    
    try:
        del request.data['cols1']
    except Exception as e:
        # print(e)
        pass
    if request.GET.get('org') == 'ancora':
        url = settings.SERVICEEXCEL_ANCORA_URL
    else:
        url = settings.SERVICEEXCEL_2_URL    
    #r = requests.post(url + 'reporte_cobranza/', headers={'Authorization': request.META['HTTP_AUTHORIZATION']}, data = request.data, stream=True)    
    r = requests.post(url + 'reporte_fianzasAIA/', data = request.data, stream=True)    
    return Response(r.text, status = r.status_code)   

@api_view(['POST'])
@permission_classes((IsAuthenticatedV2, EndososReportesPermissionsV2, IsOrgMemberV2))
def Service_ReporteEndososAIAExcel(request):
    #request.data['Authorization'] = request.META['HTTP_AUTHORIZATION']
    request.data['org'] = request.GET.get('org')
    try:
        user_info = UserInfo.objects.get(user=request.user)
    except UserInfo.DoesNotExist:
        user_info = None
    except Exception as er:
        print(er)
        user_info = None
    if user_info == None:
        perfil_restringido_id = None
    else:
        try:
            if user_info.perfil_restringido:
                perfil_restringido = PerfilUsuarioRestringido.objects.get(pk=user_info.perfil_restringido.id)
                perfil_restringido_id = perfil_restringido.pk
            else:
                perfil_restringido_id = None
        except Exception as ert:
            perfil_restringido_id = None
    request.data['perfil_restringido_id'] = perfil_restringido_id    
    try:
        del request.data['cols1']
    except Exception as e:
        # print(e)
        pass
    if request.GET.get('org') == 'ancora':
        url = settings.SERVICEEXCEL_ANCORA_URL
    else:
        url = settings.SERVICEEXCEL_2_URL    
    #r = requests.post(url + 'reporte_cobranza/', headers={'Authorization': request.META['HTTP_AUTHORIZATION']}, data = request.data, stream=True)    
    r = requests.post(url + 'reporte_endososAIA/', data = request.data, stream=True)    
    return Response(r.text, status = r.status_code)   
@api_view(['POST'])
@permission_classes((IsAuthenticatedV2, SiniestrosReportesPermissionsV2, IsOrgMemberV2))
def Service_ReporteSiniestrosAIAExcel(request):
    #request.data['Authorization'] = request.META['HTTP_AUTHORIZATION']
    request.data['org'] = request.GET.get('org')
    try:
        user_info = UserInfo.objects.get(user=request.user)
    except UserInfo.DoesNotExist:
        user_info = None
    except Exception as er:
        print(er)
        user_info = None
    if user_info == None:
        perfil_restringido_id = None
    else:
        try:
            if user_info.perfil_restringido:
                perfil_restringido = PerfilUsuarioRestringido.objects.get(pk=user_info.perfil_restringido.id)
                perfil_restringido_id = perfil_restringido.pk
            else:
                perfil_restringido_id = None
        except Exception as ert:
            perfil_restringido_id = None
    request.data['perfil_restringido_id'] = perfil_restringido_id    
    try:
        del request.data['cols1']
    except Exception as e:
        # print(e)
        pass
    if request.GET.get('org') == 'ancora':
        url = settings.SERVICEEXCEL_ANCORA_URL
    else:
        url = settings.SERVICEEXCEL_2_URL    
    #r = requests.post(url + 'reporte_cobranza/', headers={'Authorization': request.META['HTTP_AUTHORIZATION']}, data = request.data, stream=True)    
    r = requests.post(url + 'reporte_siniestrosAIA/', data = request.data, stream=True)    
    return Response(r.text, status = r.status_code)   


@api_view(['POST'])
@permission_classes((IsAuthenticatedV2, IsOrgMemberV2))
def NotificationsTestTask(request):
    # request.data['Authorization'] = request.META['HTTP_AUTHORIZATION']
    # request.data['org'] = request.GET.get('org')
    # request.data['user'] = request.user
    url = settings.SERVICEEXCEL_2_URL
    payload = {
        'channel' : request.user.username,
        'title': 'Aviso',
        'description':'Bitácora'
    }
    r = requests.post(settings.SERVICEEXCEL_2_URL + 'send-notification/', data = payload, stream=True)
    # r = requests.post(url + 'notificaciones-count/', headers={'Authorization': request.META['HTTP_AUTHORIZATION']}, data = request.data, stream=True)    
    return Response(r.text, status = r.status_code)   

@api_view(['POST'])
@permission_classes((IsAuthenticatedV2, KBIPermissionV2, IsOrgMemberV2))
def Service_KBI_Excel(request):
    request.data['Authorization'] = request.META['HTTP_AUTHORIZATION']
    request.data['org'] = request.GET.get('org')
    request.data['user'] = request.user
    try:
        user_info = UserInfo.objects.get(user=request.user)
    except UserInfo.DoesNotExist:
        user_info = None
    except Exception as er:
        print(er)
        user_info = None

    if user_info == None:
        perfil_restringido_id = None
    else:
        try:
            if user_info.perfil_restringido:
                perfil_restringido = PerfilUsuarioRestringido.objects.get(pk=user_info.perfil_restringido.id)
                perfil_restringido_id = perfil_restringido.pk
            else:
                perfil_restringido_id = None
        except Exception as ert:
            perfil_restringido_id = None
    request.data['perfil_restringido_id'] = perfil_restringido_id
    #if request.GET.get('org') == 'ancora':
     #   url = settings.SERVICEEXCEL_ANCORA_URL
    #else:
    url = settings.SERVICEEXCEL_2_URL
    r = requests.post(url + 'reporte_kbi/', headers={'Authorization': request.META['HTTP_AUTHORIZATION']}, data = request.data, stream=True)    
    return Response(r.text, status = r.status_code)   

@api_view(['POST'])
@permission_classes((IsAuthenticatedV2, CobranzaReportesPermissionsV2, IsOrgMemberV2))
def Service_AseguradoReportExcel(request):
    columns = ['Tipo', 'No.Certificado','No.Póliza','Subramo','Estatus', 
               'Vigencia Inicio', 'Vigencia Fin', 'Prima Neta', 'RPF', 'Derecho', 'IVA', 'Prima Total', 'Comisión',
               'Asegurado', 'Observaciones', 'Referenciador', 'Fecha de creación', 'Creado por','Compartido Email']
    try:
        org = request.GET.get('org')
        subramo_filter = request.data['subramo']
        since = request.data['since']
        until = request.data['until']
        aseguradoras = request.data['aseguradoras']
        estatus = request.data['estatus'] 
        if aseguradoras:
            providers = Provider.objects.filter(org_name = request.GET.get('org'), pk__in = aseguradoras).values_list('pk',flat=True)
        else:
            providers = Provider.objects.filter(org_name = request.GET.get('org')).values_list('pk',flat=True)
        if subramo_filter ==0 or subramo_filter =='0':
            ramos = Ramos.objects.filter(ramo_code =3,org_name = request.GET.get('org'))
            subramos = SubRamos.objects.filter(org_name = request.GET.get('org'), ramo__in = ramos).exclude(subramo_code =9).values_list('pk',flat=True)
        else:
            if subramo_filter ==2 or subramo_filter =='2':
                ramos = Ramos.objects.filter(ramo_code =2,org_name = request.GET.get('org'))
                subramos = SubRamos.objects.filter(ramo__in = ramos,org_name = request.GET.get('org')).values_list('pk',flat=True)            
            else:
                subramos = SubRamos.objects.filter(subramo_code = subramo_filter,org_name = request.GET.get('org')).values_list('pk',flat=True)

        polizas = []

        if estatus:
            estatus =estatus       
        else: 
            estatus = [10,11,12,13,14,14]       
        polizas = Polizas.objects.filter(org_name = request.GET.get('org'),subramo__in=subramos,
                                         aseguradora__in=providers,status__in=estatus)
        try:
            dataToFilter = getDataForPerfilRestricted(request,request.GET.get('org'))
        except Exception as er:
            dataToFilter = {}
        if dataToFilter:
            # Contratantes***
            polizasCl = Polizas.objects.filter(document_type__in = [1,11], org_name = request.GET.get('org'))
            polizasToF = Polizas.objects.filter(document_type__in = [1,11], org_name = request.GET.get('org'))
            if dataToFilter['ccpr']:
                polizasToF = polizasToF.filter(contractor__in = list(dataToFilter['ccpr']))
            if dataToFilter['cgpr']:
                polizasToF = polizasToF.filter(contractor__group__in = list(dataToFilter['cgpr']))
            if dataToFilter['ccepr']:
                polizasToF = polizasToF.filter(contractor__cellule__in = list(dataToFilter['ccepr']))
            if dataToFilter['crpr']:
                polizasToF = polizasToF.filter(contractor__vendor__in = list(dataToFilter['crpr']))
            if dataToFilter['cspr']:
                polizasToF = polizasToF.filter(contractor__sucursal__in = list(dataToFilter['cspr']))
            # Pólizas ****
            if dataToFilter['pppr']:
                polizasToF = polizasToF.filter(pk__in = list(dataToFilter['pppr']))
            if dataToFilter['pgpr']:
                polizasToF = polizasToF.filter(contractor__group__in = list(dataToFilter['pgpr']))
            if dataToFilter['pcepr']:
                polizasToF = polizasToF.filter(celula__in = list(dataToFilter['pcepr']))
            if dataToFilter['prpr']:
                polizasToF = polizasToF.filter(ref_policy__referenciador__in = list(dataToFilter['prpr']))
            if dataToFilter['pspr']:
                polizasToF = polizasToF.filter(sucursal__in = list(dataToFilter['pspr']))
            if dataToFilter['papr']:
                polizasToF = polizasToF.filter(groupinglevel__in = list(dataToFilter['papr']))
            if dataToFilter['pcapr']:
                polizasToF = polizasToF.filter(clave__in = list(dataToFilter['pcapr']))
            if dataToFilter['psrpr']:
                polizasToF = polizasToF.filter(subramo__subramo_code__in = list(dataToFilter['psrpr']))
            if dataToFilter['paspr']:
                polizasToF = polizasToF.filter(aseguradora__in = list(dataToFilter['paspr']))
            if dataToFilter['pstpr']:
                polizasToF = polizasToF.filter(status__in = list(dataToFilter['pstpr']))
            
            polizasCT = polizasCl.filter(document_type = 12, parent__in = list(polizasToF))
            polizasFin = list(polizasToF.values_list('pk', flat = True)) + list(polizasCT.values_list('pk', flat = True)) 
            polizas = polizas.filter(pk__in = list(polizasFin))  

        try:
            f = "%d/%m/%Y %H:%M:%S"
            since = datetime.strptime(since, f)
            until = datetime.strptime(until, f)

        except:
            f = "%m/%d/%Y %H:%M:%S"
            since = datetime.strptime(since, f)
            until = datetime.strptime(until, f)
        # Vigencia
        date_filters = [Q(start_of_validity__gte=since), Q(start_of_validity__lte=until)]
        polizas = polizas.filter(reduce(operator.and_, date_filters), document_type__in=[1,12],
                                 org_name = request.GET.get('org'))
    except Exception as e:
        polizas = None
    
    if str(subramo_filter) =='1':
        columns = ['POLIZA','ASEGURADORA','CONTRATANTE','RAMO','SUBRAMO','TIPO','INICIO DE VIG','FIN DE VIG','ESTATUS',
                'TIPO DE ASEGURADO','NOMBRE','FECHA DE ANTIGÜEDAD','FECHA DE NAC','PARENTESCO','FUMADOR',
                'PORCENTAJE','ESTADO','PRIMA NETA','PRIMA TOTAL','PAQUETE','EDAD','FORMA DE PAGO','CORREO','TELÉFONO']
    elif str(subramo_filter) =='2':
        columns = ['POLIZA','ASEGURADORA','CONTRATANTE','RAMO','SUBRAMO','INICIO DE VIG','FIN DE VIG','ESTATUS','TIPO DE ASEGURADO',
                'NOMBRE','FECHA DE ANTIGÜEDAD','FECHA DE NAC','PARENTESCO','ESTADO','PRIMA NETA','PRIMA TOTAL',
                'PAQUETE','EDAD','FORMA DE PAGO','CORREO','TELÉFONO']
    elif str(subramo_filter) == '9':
        columns = ['POLIZA','ASEGURADORA','CONTRATANTE','RAMO','SUBRAMO','TIPO','INICIO DE VIG','FIN DE VIG','ESTATUS',
                'CONDUCTOR','MARCA','MODELO','AÑO','VERSION','SERIE','MOTOR','COLOR','MATRICULA','USO SERVICIO',
                'ESTADO DE CIRCULACION','ADAPTACION','MONTO DE ADAPACION','EQUPO ESPECIAL','MONTO DE EQUIPO ESPECIAL',
                'Nombre beneficiario','Direccion Beneficiario','RFC Beneficiario','ESTADO','PRIMA NETA',
                'PRIMA TOTAL','PAQUETE','FORMA DE PAGO','CORREO','TELÉFONO']
    elif str(subramo_filter) == '0':
        columns = ['POLIZA','ASEGURADORA','CONTRATANTE','RAMO','SUBRAMO','TIPO','INICIO DE VIG','FIN DE VIG','ESTATUS',
                'BIEN ASEGURADO','DETALLES','DIRECCION','ESTADO','PRIMA NETA','PRIMA TOTAL','PAQUETE','FORMA DE PAGO','CORREO','TELÉFONO']

    else:
        columns = []
    

    info_org = getInfoOrg(request)
    if len(info_org['logo']) != 0:
        archivo_imagen = 'https://miurabox-public.s3.amazonaws.com/cas/' + info_org['logo']
        # archivo_imagen = get_presigned_url("cas/{url}".format(url=info_org['logo']),28800) 
    else:
            archivo_imagen = 'saam.jpg'
    tipo_reporte = 'Reporte de Asegurados'
    subramo = []
    asegurado = []
    antiguedad = []
    contratante = []
    collection = []
    clave = []
    cp = []
    paquete = []
    valueMA = []  
    valueModA = [] 
    valueVA = [] 
    valueYA = [] 
    valueLPA = [] 
    valueEA = [] 
    valueAdA = [] 
    valueDrA = []
    asegs = []
    tipoTit = []
    parentesco = []
    first_name = []
    last_name = []
    slast_name = []
    fechaN = []
    valueF = ''
    valueLn = ''
    valueSln = ''
    nac = ''
    movimiento = []
    mov = ''
    antiguedadI = []
    ant = ''
    salary = []
    slr = ''    
    sumAssured = []
    sumas = ''
    smoker = []
    smk = ''
    email  =[]
    em = ''
    genero  =[]
    sx = ''
    dependiente  =[]
    dpnd = ''
    valueCl = ''
    valueSer = '' 
    valueMAd ='' 
    valueEq ='' 
    valueMEq ='' 
    valueServ ='' 
    valueUs = ''
    valuePr =''
    valueCarg =''
    valueBPr ='' 
    valueBPra ='' 
    valueRfc ='' 

    valueClA = [] 
    valueSerA = []  
    valueMAdA = [] 
    valueEqA = []
    valueMEqA = []
    valueServA = []
    valueUsA = [] 
    valuePrA = []
    valueCargA = []
    valueBPrA = [] 
    valueBPraA = []
    valueRfcA = []
    subgrupo = []
    categoría = []
    paquetee = []
    certificate_number = []
    administration = []
    certificadoActive = []
    reasoncacel = [] 
    renewable = []
    fecha_baja_inciso = []
    document_type = []
    subramo__subramo_name = []
    ramo = []
    forma_de_pago = []
    status = []
    start_of_validity = []
    end_of_validity = []
    f_currency = []
    p_neta = []
    rpf = []
    derecho = []
    iva = []
    p_total = []
    comision = []
    _id = []
    observations = []
    created_at = []
    sucursal__sucursal_name = []
    renewed_status = []
    identifier = []
    address = []
    polizas = polizas.order_by('id')
    form = None
    formB = None
    lenBene = 0
    folio = ''
    folioInterno = []
    p_netaB = []
    rpfB = []
    derechoB = []
    ivaB = []
    p_totalB = []
    p_neta2 = str(0)
    rpf2 =str(0)
    derecho2= str(0)
    iva2=str(0)
    p_total2= str(0)
    fechaAlta= []
    endAlta= []
    edad= []
    endBaja= []
    endA = ''
    endB = ''
    fa = ''
    adjuntos = []
    compartido = []
    porcentaje=[]
    typePolicy = []
    polizaNumber = []
    estadoc = []
    direccionAs=[]
    detAs=[]
    correo_cn=[]
    telefono_cn=[]
    for r in polizas:
        ec =r.state_circulation if r.state_circulation else ''
        typep = ''
        edad1 = ''
        pol_num = str(r.poliza_number if r.poliza_number else r.internal_number)
        start_of_validity1 = str(r.start_of_validity.strftime("%d/%m/%Y") if r.start_of_validity else '' )
        end_of_validity1 = str(r.end_of_validity.strftime("%d/%m/%Y") if r.end_of_validity else '' )
        ramo1= str(r.ramo.ramo_name)
        subramo1= str(r.subramo.subramo_name)
        forma_de_pago1= str(r.forma_de_pago if r.forma_de_pago else 12)
        status1=''
        status1 = checkStatusPolicy(r.status)
        valR = False
        if OldPolicies.objects.filter(base_policy__id = r.id, new_policy__status = 1).exists():
            valR = True
        if r.org_name == 'ancora':
            if r.status==13 and r.is_renewable==1 or (r.renewed_status ==2 and r.status ==13):
                status1 = status1+' -En Proceso de Renovación' 
        aseguradora = str(r.aseguradora.alias)
        p_neta1 = str(r.p_neta)
        p_total1= str(r.p_total)
        contractor = str(r.contractor.full_name)
        correocn = str(r.contractor.email)
        telefonocn = str(r.contractor.phone_number)
        contractor = ((((((contractor).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'') 

        try:
            address1= str(r.address.id)
        except Exception as ert:
            address1 = 'Sin dirección'
        try:
            estado= str(r.address.administrative_area_level_1)
            estado = ((((((estado).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'') 
        except Exception as ert:
            estado = 'Sin Estado'
        if r.paquete:
            paquete1 = r.paquete.package_name
        else:
            paquete1 = ''
        if r.ramo.ramo_code == 1:
            form = Life.objects.filter(policy = r.id)
            if form:                    
                if form[0].personal:              
                    if form[0].personal.policy_type ==47:
                        typep = 'Ahorro'                          
                    elif form[0].personal.policy_type ==48:
                        typep = 'Vitalicia'                          
                    elif form[0].personal.policy_type ==49:
                        typep = 'Temporal/Protección'
                    if form[0].personal.full_name:              
                        value = form[0].personal.full_name                
                    else:
                        value = form[0].personal.first_name+' '+str(form[0].personal.last_name)+' '+str(form[0].personal.second_last_name)
                    try:
                        edad1 = get_age(form[0].personal.birthdate)
                    except Exception as fdf:
                        edad1 = ''
                    try:
                        nac = (form[0].personal.birthdate).strftime("%d/%m/%Y")
                    except Exception as fdf:
                        nac = (form[0].personal.birthdate)
                    try:
                        ant = (form[0].personal.antiguedad).strftime("%d/%m/%Y")
                    except Exception as fdf:
                        ant = (form[0].personal.antiguedad)
                    smk = form[0].personal.smoker
                    if smk:
                        smk = 'Si'    
                    else:
                        smk = 'No'    
                else:
                    personalvida = Personal_Information.objects.filter(policy = r,org_name = r.org_name)
                    if personalvida:  
                        for pv in personalvida:         
                            if pv.policy_type ==47:
                                typep = 'Ahorro'                          
                            elif pv.policy_type ==48:
                                typep = 'Vitalicia'                          
                            elif pv.policy_type ==49:
                                typep = 'Temporal/Protección'
                            if pv.full_name:              
                                value = pv.full_name                
                            else:
                                value = pv.first_name+' '+str(pv.last_name)+' '+str(pv.second_last_name)
                            value = ((((((value).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'') 
                            try:
                                edad1 = get_age(pv.birthdate)
                            except Exception as fdf:
                                edad1 = ''
                            try:
                                nac = (pv.birthdate).strftime("%d/%m/%Y")
                            except Exception as fdf:
                                nac = (pv.birthdate)
                            try:
                                ant = (pv.antiguedad).strftime("%d/%m/%Y")
                            except Exception as fdf:
                                ant = (pv.antiguedad)
                            smk = pv.smoker
                            if smk:
                                smk = 'Si'    
                            else:
                                smk = 'No'
                            v = []
                            try:
                                v.append('Asegurado: '+ str(value)+str('-'))
                                value = v
                            except Exception as y:
                                value = []
                    else:
                        value = ''
                        edad1=''
                        nac=''
                        ant=''
                        smk=''
                try:
                    if value:
                        value = ((((((value).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'') 
                    else:
                        value = value
                except:
                    value = value
                tipot = 'Titular'
                prt = 'Titular'
                # -------------- 
                typePolicy.append(typep) 
                porcentaje.append('') 
                polizaNumber.append(pol_num) 
                asegs.append(aseguradora)
                edad.append(edad1)
                asegurado.append(value)
                antiguedad.append(ant)
                contratante.append(contractor)
                correo_cn.append(correocn)
                telefono_cn.append(telefonocn)
                paquete.append(paquete1)
                valueMA.append('') 
                valueModA.append('')  
                valueVA.append('') 
                valueYA.append('') 
                valueLPA.append('')  
                valueEA.append('')  
                valueAdA.append('')  
                valueDrA.append('') 
                valueClA.append('') 
                valueSerA.append('')  
                valueMAdA.append('') 
                valueEqA.append('')
                valueMEqA.append('')
                valueServA.append('')
                valueUsA.append('') 
                valuePrA.append('')       
                valueCargA.append('')
                valueBPrA.append('')
                valueBPraA.append('')
                valueRfcA.append('')
                tipoTit.append(tipot) 
                parentesco.append(prt) 
                fechaN.append(nac)
                antiguedadI.append(ant)
                smoker.append(smk)
                genero.append(sx)
                dependiente.append(dpnd)
                subramo.append(subramo1)
                ramo.append(ramo1)
                forma_de_pago.append(forma_de_pago1)
                status.append(status1)
                start_of_validity.append(start_of_validity1)
                end_of_validity.append(end_of_validity1)
                p_neta.append(p_neta1)
                p_total.append(p_total1)
                address.append(estado)
                formB = Beneficiaries.objects.filter(life = form[0])
                vdp = []
                try:
                    for rty in formB:
                        lenBene +=1
                        try:
                            nac = (rty.birthdate).strftime("%d/%m/%Y")
                        except Exception as fdf:
                            nac = rty.birthdate
                        value = rty.first_name+' '+str(rty.last_name)+' '+str(rty.second_last_name)
                        tipot = 'Beneficiario'           
                        valueM = '' 
                        valueMod = '' 
                        valueV = '' 
                        valueY = ''
                        valueLP = '' 
                        valueE = '' 
                        valueAd = '' 
                        valueDr = ''
                        try:
                            prt = str(checkRelation(int(rty.optional_relationship))) 
                        except Exception as er:
                            prt = 'Otro'
                        try:
                            ant = (rty.antiguedad).strftime("%d/%m/%Y")
                        except Exception as fdf:
                            ant = (rty.antiguedad) 
                        try:
                            edad1 = get_age(rty.birthdate)
                        except Exception as fdf:
                            edad1 = ''
                        typePolicy.append('') 
                        if rty.percentage:
                            porcentaje.append(((((((str(rty.percentage)).replace('[','')).replace(']','')).replace("Decimal(",'')).replace(")",'')).replace("'",'')if rty.percentage else 0)) 
                        else:
                            porcentaje.append(0) 
                        polizaNumber.append(pol_num) 
                        edad.append(edad1)
                        asegurado.append(value)
                        asegs.append(aseguradora)                       
                        antiguedad.append(ant)
                        contratante.append(contractor)
                        correo_cn.append(correocn)
                        telefono_cn.append(telefonocn)
                        paquete.append(paquete1)
                        valueMA.append(valueM) 
                        valueModA.append(valueMod)  
                        valueVA.append(valueV) 
                        valueYA.append(valueY) 
                        valueLPA.append(valueLP)  
                        valueEA.append(valueE)  
                        valueAdA.append(valueAd)  
                        valueDrA.append(valueDr) 
                        valueClA.append(valueCl) 
                        valueSerA.append(valueSer)  
                        valueMAdA.append(valueMAd) 
                        valueEqA.append(valueEq)
                        valueMEqA.append(valueMEq)
                        valueServA.append(valueServ)
                        valueUsA.append(valueUs) 
                        valuePrA.append(valuePr)       
                        valueCargA.append(valueCarg)
                        valueBPrA.append(valueBPr)
                        valueBPraA.append(valueBPra)
                        valueRfcA.append(valueRfc)
                        tipoTit.append(tipot) 
                        parentesco.append(prt) 
                        fechaN.append(nac)
                        antiguedadI.append(ant)
                        smoker.append('')
                        paquetee.append(paquete1)
                        subramo.append(subramo1)
                        ramo.append(ramo1)
                        forma_de_pago.append(forma_de_pago1)
                        status.append(status1)
                        start_of_validity.append(start_of_validity1)
                        end_of_validity.append(end_of_validity1)
                        p_neta.append('')
                        p_total.append('')
                        address.append(estado)
                except Exception as y:
                    print('---y',y)
                    dpnd = []
            else:
                value = ''
                valueM = '' 
                valueMod = '' 
                valueV = '' 
                valueY = ''
                valueLP = '' 
                valueE = '' 
                valueAd = '' 
                valueDr = ''
                tipot = ''  
                prt = ''   
                valueF = ''
                valueLn = ''
                valueSln = ''         
        elif r.ramo.ramo_code == 2:
            form = AccidentsDiseases.objects.filter(policy = r.id)
            if form:                
                if form[0].personal: 
                    typep = 'Familiar'          
                    if form[0].personal.full_name:              
                        value = form[0].personal.full_name                
                    else:
                        value = form[0].personal.first_name+' '+str(form[0].personal.last_name)+' '+str(form[0].personal.second_last_name)
                else:
                    value = ''
                if value:
                    value = ((((((value).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'') 
                else:
                    value = value
                try:
                    nac = (form[0].personal.birthdate).strftime("%d/%m/%Y")
                except Exception as fdf:
                    nac = (form[0].personal.birthdate)
                try:
                    ant = (form[0].personal.antiguedad).strftime("%d/%m/%Y")
                except Exception as fdf:
                    ant = (form[0].personal.antiguedad)                                   
                tipot = 'Titular' 
                prt = 'Titular'               
                valueM = '' 
                valueMod = '' 
                valueV = '' 
                valueY = ''
                valueLP = '' 
                valueE = '' 
                valueAd = '' 
                valueDr = ''    
                try:
                    edad1 = get_age(form[0].personal.birthdate)
                except Exception as fdf:
                    print('-d-d-dd',fdf)
                    edad1 = ''
                edad.append(edad1)             
                # --------------  
                typePolicy.append(typep) 
                porcentaje.append('')   
                polizaNumber.append(pol_num) 
                asegs.append(aseguradora)      
                asegurado.append(value)
                antiguedad.append(ant)
                contratante.append(contractor)
                correo_cn.append(correocn)
                telefono_cn.append(telefonocn)
                paquete.append(paquete1)
                valueMA.append(valueM) 
                valueModA.append(valueMod)  
                valueVA.append(valueV) 
                valueYA.append(valueY) 
                valueLPA.append(valueLP)  
                valueEA.append(valueE)  
                valueAdA.append(valueAd)  
                valueDrA.append(valueDr) 
                valueClA.append(valueCl) 
                valueSerA.append(valueSer)  
                valueMAdA.append(valueMAd) 
                valueEqA.append(valueEq)
                valueMEqA.append(valueMEq)
                valueServA.append(valueServ)
                valueUsA.append(valueUs) 
                valuePrA.append(valuePr)       
                valueCargA.append(valueCarg)
                valueBPrA.append(valueBPr)
                valueBPraA.append(valueBPra)
                valueRfcA.append(valueRfc)
                tipoTit.append(tipot) 
                parentesco.append(prt) 
                fechaN.append(nac)
                smoker.append(smk)
                subramo.append(subramo1)
                ramo.append(ramo1)
                forma_de_pago.append(forma_de_pago1)
                status.append(status1)
                start_of_validity.append(start_of_validity1)
                end_of_validity.append(end_of_validity1)
                p_neta.append(p_neta1)
                p_total.append(p_total1)
                address.append(estado)
                formB = Relationship.objects.filter(accident = form[0])
                if formB:
                    vdp = []
                    try:
                        for rty in formB:
                            lenBene +=1
                            try:
                                nac = (rty.birthdate).strftime("%d/%m/%Y")
                            except Exception as fdf:
                                nac = (rty.birthdate)
                            value =rty.first_name+' '+str(rty.last_name)+' '+str(rty.second_last_name)
                            tipot = 'Dependiente'           
                            valueM = '' 
                            valueMod = '' 
                            valueV = '' 
                            valueY = ''
                            valueLP = '' 
                            valueE = '' 
                            valueAd = '' 
                            valueDr = ''
                            try:
                                prt = str(checkRelation(rty.relationship)) 
                            except Exception as ee:
                                prt = 'Otro'
                            try:
                                ant = (rty.antiguedad).strftime("%d/%m/%Y")
                            except Exception as fdf:
                                ant = (rty.antiguedad)                             
                            try:
                                edad1 = get_age(rty.birthdate)
                            except Exception as fdf:
                                edad1 = ''
                            # --------------
                            typePolicy.append(typep)
                            porcentaje.append('') 
                            polizaNumber.append(pol_num) 
                            edad.append(edad1)
                            asegurado.append(value)
                            asegs.append(aseguradora)
                            antiguedad.append(ant)
                            contratante.append(contractor)
                            correo_cn.append(correocn)
                            telefono_cn.append(telefonocn)
                            paquete.append(paquete1)
                            valueMA.append(valueM) 
                            valueModA.append(valueMod)  
                            valueVA.append(valueV) 
                            valueYA.append(valueY) 
                            valueLPA.append(valueLP)  
                            valueEA.append(valueE)  
                            valueAdA.append(valueAd)  
                            valueDrA.append(valueDr) 
                            valueClA.append(valueCl) 
                            valueSerA.append(valueSer)  
                            valueMAdA.append(valueMAd) 
                            valueEqA.append(valueEq)
                            valueMEqA.append(valueMEq)
                            valueServA.append(valueServ)
                            valueUsA.append(valueUs) 
                            valuePrA.append(valuePr)       
                            valueCargA.append(valueCarg)
                            valueBPrA.append(valueBPr)
                            valueBPraA.append(valueBPra)
                            valueRfcA.append(valueRfc)
                            tipoTit.append(tipot) 
                            parentesco.append(prt) 
                            first_name.append(valueF)
                            last_name.append(valueLn)
                            slast_name.append(valueSln)
                            fechaN.append(nac)
                            antiguedadI.append(ant)
                            salary.append('')
                            sumAssured.append('')
                            smoker.append('')
                            subramo.append(subramo1)
                            ramo.append(ramo1)
                            forma_de_pago.append(forma_de_pago1)
                            status.append(status1)
                            start_of_validity.append(start_of_validity1)
                            end_of_validity.append(end_of_validity1)
                            p_neta.append(p_neta1)
                            p_total.append(p_total1)
                            address.append(estado)
                    except Exception as y:
                        dpnd = []
                else:
                    dpnd = []
            else:
                value = ''
                valueM = '' 
                valueMod = '' 
                valueV = '' 
                valueY = ''
                valueLP = '' 
                valueE = '' 
                valueAd = '' 
                valueDr = ''
                tipot = ''  
                prt = ''   
                valueF = ''
                valueLn = ''
                valueSln = '' 
        elif r.subramo.subramo_code == 9:
            form = AutomobilesDamages.objects.filter(policy = r.id)
            if form:
                if form[0].policy_type:
                    typep = getTipoAuto(int(form[0].policy_type))
                else:
                    typep = ''
                value = form[0].beneficiary_name if form[0].beneficiary_name else form[0].driver
                if value:
                    value = ((((((value).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'') 
                else:
                    value = value
                valueM = form[0].brand 
                try:
                    valueMod = ((((((form[0].model).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    valueV = ((((((form[0].version).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                except Exception as ers:
                    valueMod = form[0].model
                    valueV = form[0].version
                valueY = form[0].year 
                valueLP = form[0].license_plates 
                valueE = form[0].engine 
                valueAd = form[0].adjustment 
                valueDr = form[0].driver 
                valueCl = form[0].color 
                valueSer = form[0].serial 
                valueMAd = form[0].mont_adjustment 
                valueEq = form[0].special_team 
                valueMEq = form[0].mont_special_team 
                valueServ = form[0].service 
                valueUs = checkUsage(form[0].usage if form[0].usage else 0)
                valuePr = checkProc(int(form[0].procedencia if form[0].procedencia else 0))
                valueCarg = checkCharge(int(form[0].charge_type if form[0].charge_type else 0))
                # valueBPr = ((((((form[0].preferential_benefiaciary).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                # valueBPra = form[0].beneficiary_address 
                # valueRfc = form[0].beneficiary_rfc 
                valueBPr = ((((((form[0].beneficiary_name if form[0].beneficiary_name else form[0].preferential_benefiaciary if form[0].preferential_benefiaciary else '').replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                valueBPra = ((((((form[0].beneficiary_address if form[0].beneficiary_address else '').replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                valueRfc = ((((((form[0].beneficiary_rfc if form[0].beneficiary_rfc else '').replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                
                try:
                    ant = (form[0].antiguedad).strftime("%d/%m/%Y")
                except Exception as fdf:
                    ant = (form[0].created_at)
                # --------------
                estadoc.append(ec) 
                typePolicy.append(typep) 
                porcentaje.append('') 
                polizaNumber.append(pol_num) 
                edad.append('')
                asegs.append(aseguradora)
                asegurado.append(value)
                antiguedad.append(ant)
                contratante.append(contractor)
                correo_cn.append(correocn)
                telefono_cn.append(telefonocn)
                paquete.append(paquete1)
                valueMA.append(valueM) 
                valueModA.append(valueMod)  
                valueVA.append(valueV) 
                valueYA.append(valueY) 
                valueLPA.append(valueLP)  
                valueEA.append(valueE)  
                valueAdA.append(valueAd)  
                valueDrA.append(valueDr) 
                valueClA.append(valueCl) 
                valueSerA.append(valueSer)  
                valueMAdA.append(valueMAd) 
                valueEqA.append(valueEq)
                valueMEqA.append(valueMEq)
                valueServA.append(valueServ)
                valueUsA.append(valueUs) 
                valuePrA.append(valuePr)       
                valueCargA.append(valueCarg)
                valueBPrA.append(valueBPr)
                valueBPraA.append(valueBPra)
                valueRfcA.append(valueRfc)
                tipoTit.append('') 
                parentesco.append('') 
                first_name.append(valueF)
                last_name.append(valueLn)
                slast_name.append(valueSln)
                fechaN.append('')
                salary.append('')
                sumAssured.append('')
                smoker.append('')
                email.append('')
                genero.append('')
                dependiente.append('')
                subramo.append(subramo1)
                ramo.append(ramo1)
                forma_de_pago.append(forma_de_pago1)
                status.append(status1)
                start_of_validity.append(start_of_validity1)
                end_of_validity.append(end_of_validity1)
                p_neta.append(p_neta1)
                p_total.append(p_total1)
                address.append(estado)
            else:
                value = ''
                valueM = '' 
                valueMod = '' 
                valueV = '' 
                valueY = ''
                valueLP = '' 
                valueE = '' 
                valueAd = '' 
                valueDr = ''
                tipot = ''
                prt = ''
        elif r.ramo.ramo_code == 3 and not r.subramo.subramo_code == 9:
            form = Damages.objects.filter(policy = r.id)
            if form:
                if form[0].damage_type:
                    typep = getTipoDanio(int(form[0].damage_type))
                else:
                    typep = ''
                value = str(form[0].insured_item if form[0].insured_item else '')
                valAdrees =str(form[0].item_address if form[0].item_address else '')
                valDetails =str(form[0].item_details if form[0].item_details else '')
                if value:
                    value = ((((((value).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'') 
                    valAdrees = ((((((valAdrees).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'') 
                    valDetails = ((((((valDetails).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'') 
                else:
                    value = value
                tipot = 'Ubicación'
                valueM = '' 
                valueMod = '' 
                valueV = '' 
                valueY = ''
                valueLP = '' 
                valueE = '' 
                valueAd = '' 
                valueDr = ''
                prt = 'Ubicación' 
                direccionAs.append(valAdrees) 
                detAs.append(valDetails)
                typePolicy.append(typep) 
                porcentaje.append('')   
                polizaNumber.append(pol_num)     
                asegs.append(aseguradora) 
                asegurado.append(value)
                antiguedad.append(ant)
                contratante.append(contractor)
                correo_cn.append(correocn)
                telefono_cn.append(telefonocn)
                paquete.append(paquete1)
                valueMA.append(valueM) 
                valueModA.append(valueMod)  
                valueVA.append(valueV) 
                valueYA.append(valueY) 
                valueLPA.append(valueLP)  
                valueEA.append(valueE)  
                valueAdA.append(valueAd)  
                valueDrA.append(valueDr) 
                valueClA.append(valueCl) 
                valueSerA.append(valueSer)  
                valueMAdA.append(valueMAd) 
                valueEqA.append(valueEq)
                valueMEqA.append(valueMEq)
                valueServA.append(valueServ)
                valueUsA.append(valueUs) 
                valuePrA.append(valuePr)       
                valueCargA.append(valueCarg)
                valueBPrA.append(valueBPr)
                valueBPraA.append(valueBPra)
                valueRfcA.append(valueRfc)
                tipoTit.append(tipot) 
                parentesco.append(prt) 
                first_name.append(valueF)
                last_name.append(valueLn)
                slast_name.append(valueSln)
                fechaN.append(nac)
                subramo.append(subramo1)
                ramo.append(ramo1)
                forma_de_pago.append(forma_de_pago1)
                status.append(status1)
                start_of_validity.append(start_of_validity1)
                end_of_validity.append(end_of_validity1)
                edad.append('')
                p_neta.append(p_neta1)
                p_total.append(p_total1)
                address.append(estado)
            else:
                value = ''
                valueM = '' 
                valueMod = '' 
                valueV = '' 
                valueY = ''
                valueLP = '' 
                valueE = '' 
                valueAd = '' 
                valueDr = ''
                tipot = ''
                prt = ''
        try:
            if value:
                value = ((((((value).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'') 
            else:
                value = value
        except:
            value = value
        if form == None:  
            direccionAs.append('') 
            detAs.append('')
            typePolicy.append('')
            porcentaje.append(100)      
            polizaNumber.append(pol_num)     
            asegs.append(aseguradora)     
            asegurado.append(value)
            antiguedad.append(ant)
            contratante.append(contractor)
            correo_cn.append(correocn)
            telefono_cn.append(telefonocn)
            paquete.append(paquete)
            valueMA.append(valueM) 
            valueModA.append(valueMod)  
            valueVA.append(valueV) 
            valueYA.append(valueY) 
            valueLPA.append(valueLP)  
            valueEA.append(valueE)  
            valueAdA.append(valueAd)  
            valueDrA.append(valueDr) 
            valueClA.append(valueCl) 
            valueSerA.append(valueSer)  
            valueMAdA.append(valueMAd) 
            valueEqA.append(valueEq)
            valueMEqA.append(valueMEq)
            valueServA.append(valueServ)
            valueUsA.append(valueUs) 
            valuePrA.append(valuePr)       
            valueCargA.append(valueCarg)
            valueBPrA.append(valueBPr)
            valueBPraA.append(valueBPra)
            valueRfcA.append(valueRfc)
            tipoTit.append(tipot) 
            parentesco.append(prt) 
            first_name.append(valueF)
            last_name.append(valueLn)
            slast_name.append(valueSln)
            fechaN.append(nac)
            movimiento.append(mov)
            antiguedadI.append(ant)
            smoker.append(smk)
            email.append(em)
            genero.append(sx)
            dependiente.append(dpnd)
            subramo.append(subramo1)
            ramo.append(ramo1)
            forma_de_pago.append(forma_de_pago1)
            status.append(status1)
            start_of_validity.append(start_of_validity1)
            end_of_validity.append(end_of_validity1)            
            p_neta.append(p_neta1)
            p_total.append(p_total1)
            address.append(estado)
            edad.append('')
    obj = {    
        'direccionDanio'   : str(list(direccionAs)),
        'detailDanio'   : str(list(detAs)),
        'typePolicy'   : str(list(typePolicy)),
        'estadoc':str(list(estadoc)),
        'edad'   : str(list(edad)),
        'smoker'   : str(list(smoker)),
        'poliza_number'   : str(polizaNumber),
        'contratante'   : str(list(contratante)),
        'aseguradora'   : str(list(asegs)),
        'tipoTit'   : str(list(tipoTit)),
        'parentesco'   : str(list(parentesco)),
        'fechaN'   : str(list(fechaN)),
        'antiguedadI'   : str(list(antiguedadI)),
        'genero'   : str(list(genero)),
        'subramo'   : str(list(subramo)),
        'ramo'   : str(list(ramo)),
        'forma_de_pago'   : str(list(forma_de_pago)),
        'status'   : str(list(status)),
        'start_of_validity'   : str(list(start_of_validity)) ,
        'end_of_validity'   : str(list(end_of_validity)) ,
        'p_neta'   : str(list(p_neta)),
        'p_total'   : str(list(p_total)),
        'porcentaje'   : str(list(porcentaje)),
        # ---
        'paquete': str(list(paquete)), 
        'estado': str(list(address)),
        'asegurado'   : str(list(asegurado)),
        'marca'   : str(list(valueMA)),
        'modelo'   : str(list(valueModA)),
        'version'   : str(list(valueVA)),
        'anio'   : str(list(valueYA)),
        'placa'   : str(list(valueLPA)),
        'motor'   : str(list(valueEA)),
        'adaptaciones'   : str(list(valueAdA)),
        'conductor'   : str(list(valueDrA)),
        'antiguedad'   : str(list(antiguedad)),
        'color':str(list(valueClA)) ,
        'serial': str(list(valueSerA)),
        'montoAdq': str(list(valueMAdA)),
        'equipamiento': str(list(valueEqA)),
        'montoEq':str(list(valueMEqA)),
        'servicio':str(list(valueServA)),
        'uso': str(list(valueUsA)),
        'procedencia': str(list(valuePrA)),
        'carga': str(list(valueCargA)),
        'benPref': str(list(valueBPrA)),
        'benAdres':str(list(valueBPraA)),
        'benRfc': str(list(valueRfcA)),
        'correo': str(list(correo_cn)),
        'telefono': str(list(telefono_cn)),
        'tipo_reporte': tipo_reporte,
        'subBranch': str(subramo_filter),
        'email_org':info_org['email'],
        'phone_org':info_org['phone'],
        'webpage_org':info_org['webpage'],
        'address_org':info_org['address'],
        'urlname_org':info_org['name'],
        }  
    obj['columns'] = str(list(columns)) 
    obj['imagen'] = archivo_imagen
    obj['registros'] = len(polizas)+lenBene
    try:
        obj['lenbeneficiarios'] = lenBene
    except Exception as eR:
        obj['lenbeneficiarios'] = 0
    r = requests.post(settings.SERVICEEXCEL_URL + 'get-aseguradosExcel/', obj,
    stream=True)
    response_data= r.text
    response = HttpResponse(r.content,content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')
    return response

@api_view(['POST'])
@permission_classes((IsAuthenticatedV2, CobranzaReportesPermissionsV2, IsOrgMemberV2))
def Service_contractorcobranza_Excel(request):
    tipo_reporte='Reporte Cobranza Contratante'
    info_org = getInfoOrg(request)
    if len(info_org['logo']) != 0:
        archivo_imagen = 'https://miurabox-public.s3.amazonaws.com/cas/' + info_org['logo']
        # archivo_imagen = get_presigned_url("cas/{url}".format(url=info_org['logo']),28800) 
    else:
            archivo_imagen = 'saam.jpg'
    valueCom = True
    try:
        valueCom = comisions(request)
    except Exception as ers:
        valueCom =  True

    if request.data['status'] == '1' or request.data['status'] ==1:
        status = 4
    elif request.data['status'] == '2' or request.data['status'] ==2:
        status = 1
    elif request.data['status'] == '3' or request.data['status'] ==3:
        status = 5
    elif request.data['status'] == '4' or request.data['status'] ==4:
        status = 2
    polizas = Polizas.objects.filter(org_name = request.GET.get('org'),contractor__id = request.data['contractor']).exclude(status__in = [2,11,0]).values_list('pk', flat = True)
    try:
        dataToFilter = getDataForPerfilRestricted(request, request.GET.get('org'))
    except Exception as er:
        dataToFilter = {}
    if dataToFilter:
        # Contratantes***
        polizasToF = Polizas.objects.filter(document_type__in = [1,3,11], pk__in = list(polizas), org_name = request.GET.get('org')).exclude(status = 0)
        polizasCol = Polizas.objects.filter(document_type__in = [12], pk__in = list(polizas), org_name = request.GET.get('org')).exclude(status = 0)
        polizasGCer = Polizas.objects.filter(document_type__in = [6], pk__in = list(polizas), org_name = request.GET.get('org')).exclude(status = 0)
        if dataToFilter['ccpr']:
            polizasToF = polizasToF.filter(contractor__in = list(dataToFilter['ccpr']))
        if dataToFilter['cgpr']:
            polizasToF = polizasToF.filter(contractor__group__in = list(dataToFilter['cgpr']))
        if dataToFilter['ccepr']:
            polizasToF = polizasToF.filter(contractor__cellule__in = list(dataToFilter['ccepr']))
        if dataToFilter['crpr']:
            polizasToF = polizasToF.filter(contractor__vendor__in = list(dataToFilter['crpr']))
        if dataToFilter['cspr']:
            polizasToF = polizasToF.filter(contractor__sucursal__in = list(dataToFilter['cspr']))
        # Pólizas ****
        if dataToFilter['pppr']:
            polizasToF = polizasToF.filter(pk__in = list(dataToFilter['pppr']))
        if dataToFilter['pgpr']:
            polizasToF = polizasToF.filter(contractor__group__in = list(dataToFilter['pgpr']))
        if dataToFilter['pcepr']:
            polizasToF = polizasToF.filter(celula__in = list(dataToFilter['pcepr']))
        if dataToFilter['prpr']:
            polizasToF = polizasToF.filter(ref_policy__referenciador__in = list(dataToFilter['prpr']))
        if dataToFilter['pspr']:
            polizasToF = polizasToF.filter(sucursal__in = list(dataToFilter['pspr']))
        if dataToFilter['papr']:
            polizasToF = polizasToF.filter(groupinglevel__in = list(dataToFilter['papr']))
        if dataToFilter['pcapr']:
            polizasToF = polizasToF.filter(clave__in = list(dataToFilter['pcapr']))
        if dataToFilter['psrpr']:
            polizasToF = polizasToF.filter(subramo__subramo_code__in = list(dataToFilter['psrpr']))
        if dataToFilter['paspr']:
            polizasToF = polizasToF.filter(aseguradora__in = list(dataToFilter['paspr']))
        if dataToFilter['pstpr']:
            polizasToF = polizasToF.filter(status__in = list(dataToFilter['pstpr']))
        
        polizasCT = polizasCol.filter(document_type = 12, parent__in = list(polizasToF))
        polizasGT = polizasGCer.filter(Q(parent__parent__parent__in = list(polizasToF)) | Q(parent__parent__in = list(polizasToF)),document_type__in = [6,4])
        polizasFin = list(polizasToF.values_list('pk', flat = True)) + list(polizasCT.values_list('pk', flat = True)) + list(polizasGT.values_list('pk', flat = True))
        fpol = Polizas.objects.filter(pk__in = list(polizas))
        polizas = fpol.filter(pk__in = list(polizasFin))
    # recibos = Recibos.objects.filter(isActive = True, isCopy = False , poliza__in = polizas)
    recibos = Recibos.objects.filter(poliza__in = polizas, isActive = True, isCopy = False).exclude(status__in = [0]).filter(receipt_type__in =[1,2,3,4])
    recibos = recibos.filter(poliza__contractor__id=request.data['contractor'],
        status = status,org_name=request.GET.get('org'))
    columns = ['No.Recibo','Estatus', 'Prima Neta', 'RPF', 'Derecho', 'IVA', 'Prima Total', 'Comisión', 
               'Fecha Inicio', 'Fecha Fin', 'Vencimiento', 'Conducto de Pago', 'Tipo', 'No.Póliza', 'No.Endoso', 
               'Contratante', 'Email', 'Teléfono', 'Aseguradora', 'Subramo', 'Forma de Pago', 'Estatus Póliza', 
               'Inicio Póliza', 'Fin Póliza', 'Clave', 'Asegurado', 'Referenciador','Ejecutivo Cobranza',
               'Folio Liquidación','Pagado por','Responsable','Creado por','Fecha Pago','Sucursal','Grupo','Célula','POLIZA CON OT DE ENDOSO(S) EN TRAMITE']

    asegurado = []
    antiguedad = []
    referenciador = []
    responsable = []
    collection = []
    userpay = []
    creadopor = []
    contract = []
    contractE = []
    contractP = []
    contractG= []
    inicio = []
    fin = []
    aseguradora = []
    clave = []
    poliza_number = []
    inc = ''
    fn = ''
    aseg = ''
    cve = ''
    pnumber = ''
    subramo = []
    receipttype = []
    currency = []
    fc = 1

    grupo1 = []
    grupo2 = []
    nivelAg = []
    grupo3 = []
    grupo4 = []
    clasifica = []
    businessLine = []
    celulaC = []
    endosotramite = []
    # recibos = recibos.order_by('poliza__contractor__full_name','poliza__juridical__j_name','fianza____full_name','fianza__juridical__j_name','poliza__ramo__ramo_name','fianza__ramo__ramo_name','poliza__aseguradora__compania','fianza__aseguradora__compania')
    recibos = recibos.order_by('id')
    for r in recibos:
        try:
            poliza_aux = Endorsement.objects.filter(policy = r.poliza, status__in = [1,5], org_name = r.poliza.org_name).exists()    
            if poliza_aux:
                endosotramite.append('Si')
            else:
                endosotramite.append('No')
        except:
            endosotramite.append('No')
        receipt1 = ''
        fc=1
        inc = ''
        fn = ''
        aseg = ''
        cve = ''
        pnumber = ''
        sramo = ''
        grupo1_ = ''
        contratantex = ''
        contratanteE = ''
        contratanteP = ''
        cel = ''
        contratanteG = ''
        antig = get_antiguedad(r.fecha_inicio)
        if r.user_pay:
            val_userpay = r.user_pay.first_name + ' '+ str(r.user_pay.last_name)
        else:
            val_userpay = ''
        if r.owner:
            val_owner = r.owner.first_name + ' '+ str(r.owner.last_name)
        else:
            val_owner = ''
        if r.poliza:
            if r.poliza.document_type == 6:
                receipt1 = 'Categoría'
                try:
                    sramo = r.poliza.parent.parent.parent.subramo.subramo_name
                    fc = r.poliza.parent.parent.parent.f_currency
                    pnumber = r.poliza.parent.parent.parent.poliza_number
                    inc = r.poliza.parent.parent.parent.start_of_validity.strftime("%d/%m/%Y")
                    fn =r.poliza.parent.parent.parent.end_of_validity.strftime("%d/%m/%Y")
                    try:
                        cve = r.poliza.parent.parent.parent.clave.name +' '+str(r.poliza.parent.parent.parent.clave.clave)
                        cve = ((((((cve).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')  
                    except Exception as ds:
                        cve =''
                    aseg = r.poliza.parent.parent.parent.aseguradora.alias
                except Exception as fd:
                    inc = ''
                    fn = ''
                    aseg = ''
                    cve = ''
                    pnumber = ''
                    sramo = ''
                    fc =1
                if r.poliza.parent.parent.parent.contractor:
                    contratantex = ((((((r.poliza.parent.parent.parent.contractor.full_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    contratanteE = r.poliza.parent.parent.parent.contractor.email
                    contratanteP = r.poliza.parent.parent.parent.contractor.phone_number

                    # contratanteG = ((((((r.parent.parent.parent.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')     
                    # contratanteG = r.parent.parent.parent.contractor.group.group_name
                    if r.poliza.parent.parent.parent.business_line:
                        if int(r.poliza.parent.parent.parent.business_line) ==1:
                            businessLine_ = 'Comercial'
                        elif int(r.poliza.parent.parent.parent.business_line) ==2:
                            businessLine_ = 'Personal'
                        elif int(r.poliza.parent.parent.parent.business_line) ==0:
                            businessLine_ = 'Otro'
                        else:
                            businessLine_ = ''
                    else:
                        if int(r.poliza.parent.parent.parent.business_line) ==0:
                            businessLine_ = 'Otro'
                        else:
                            businessLine_ = ''
                    try:
                        if r.poliza.parent.parent.parent.contractor.group.type_group == 1:
                            contratanteG = ((((((r.poliza.parent.parent.parent.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                            grupo1_ = ''
                            grupo2_ = ''
                        elif r.poliza.parent.parent.parent.contractor.group.type_group == 2:
                            grupotype1 = Group.objects.get(pk = r.poliza.parent.parent.parent.contractor.group.parent.id)
                            contratanteG = ((((((grupotype1.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                            grupo1_ = ((((((r.poliza.parent.parent.parent.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                            grupo2_ = ''
                        elif r.poliza.parent.parent.parent.contractor.group.type_group == 3:
                            grupotype1 = Group.objects.get(pk = r.poliza.parent.parent.parent.contractor.group.parent.parent.id)
                            contratanteG = ((((((grupotype1.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                            subgrupotype2 = Group.objects.get(pk = r.poliza.parent.parent.parent.contractor.group.parent.id)
                            grupo1_ = ((((((subgrupotype2.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                            grupo2_ = ((((((r.poliza.parent.parent.parent.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    except Exception as e:
                        contratanteG = ''
                        grupo1_ = ''
                        grupo2_ = ''
                    try:
                        if r.poliza.parent.parent.parent.groupinglevel:
                            if r.poliza.parent.parent.parent.groupinglevel.type_grouping == 1:
                                nivelAg_ = ((((((r.poliza.parent.parent.parent.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo3_ = ''
                                grupo4_ = ''
                            elif r.poliza.parent.parent.parent.groupinglevel.type_grouping == 2:
                                grupotype1 = GroupingLevel.objects.get(pk = r.poliza.parent.parent.parent.groupinglevel.parent.id)
                                nivelAg_ = ((((((grupotype1.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo3_ = ((((((r.poliza.parent.parent.parent.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo4_ = ''
                            elif r.poliza.parent.parent.parent.groupinglevel.type_grouping == 3:
                                grupotype1 = GroupingLevel.objects.get(pk = r.poliza.parent.parent.parent.groupinglevel.parent.parent.id)
                                nivelAg_ = ((((((grupotype1.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                subgrupotype2 = GroupingLevel.objects.get(pk = r.poliza.parent.parent.parent.groupinglevel.parent.id)
                                grupo3_ = ((((((subgrupotype2.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo4_ = ((((((r.poliza.parent.parent.parent.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        else:
                            nivelAg_ = ''
                            grupo3_ = ''
                            grupo4_ = ''  
                    except Exception as e:
                        nivelAg_ = ''
                        grupo3_ = ''
                        grupo4_ = '' 
         
                    if r.poliza.parent.parent.parent.contractor.classification:
                        clasifica_ = r.poliza.parent.parent.parent.contractor.classification.classification_name  
                    else:
                        clasifica_='-----'
                    if r.poliza.parent.parent.parent.celula:
                        cel = r.poliza.parent.parent.parent.celula.celula_name  
                    else:
                        cel='-----'
                else:
                    contratantex = ''
                    contratanteE = ''
                    contratanteP = ''
                    contratanteG = ''     
                    contratanteG = ''
                    grupo1_ = ''
                    grupo2_ = ''                       
                    nivelAg_ = ''
                    grupo3_ = ''
                    grupo4_ = '' 
                    clasifica_='-----'
                    cel='-----'
            elif r.poliza.document_type == 4:
                receipt1 = 'Subgrupo'
                try:
                    sramo = r.poliza.parent.subramo.subramo_name
                    fc = r.poliza.parent.f_currency
                    pnumber = r.poliza.parent.poliza_number
                    inc = r.poliza.parent.start_of_validity.strftime("%d/%m/%Y")
                    fn =r.poliza.parent.end_of_validity.strftime("%d/%m/%Y")
                    try:
                        cve = r.poliza.parent.clave.name +' '+str(r.poliza.parent.clave.clave)
                        cve = ((((((cve).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')  
                    except Exception as re:
                        cve =''
                    aseg = r.poliza.parent.aseguradora.alias
                except Exception as fd:
                    inc = ''
                    fn = ''
                    aseg = ''
                    cve = ''
                    pnumber = ''
                    sramo = ''
                    fc = 1
                if r.poliza.parent.contractor:
                    contratantex = ((((((r.poliza.parent.contractor.full_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    contratanteE = r.poliza.parent.contractor.email
                    contratanteP = r.poliza.parent.contractor.phone_number
                    contratanteG = ((((((r.poliza.parent.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')     
                    
                    # contratanteG = ((((((r.parent.parent.parent.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')     
                    # contratanteG = r.parent.parent.parent.contractor.group.group_name
                    if r.poliza.parent.business_line:
                        if int(r.poliza.parent.business_line) ==1:
                            businessLine_ = 'Comercial'
                        elif int(r.poliza.parent.business_line) ==2:
                            businessLine_ = 'Personal'
                        elif int(r.poliza.parent.business_line) ==0:
                            businessLine_ = 'Otro'
                        else:
                            if int(r.poliza.parent.business_line) ==0:
                                businessLine_ = 'Otro'
                            else:
                                businessLine_ = ''
                    else:
                        businessLine_ = ''
                    try:
                        if r.poliza.parent.contractor.group.type_group == 1:
                            contratanteG = ((((((r.poliza.parent.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                            grupo1_ = ''
                            grupo2_ = ''
                        elif r.poliza.parent.contractor.group.type_group == 2:
                            grupotype1 = Group.objects.get(pk = r.poliza.parent.contractor.group.parent.id)
                            contratanteG = ((((((grupotype1.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                            grupo1_ = ((((((r.poliza.parent.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                            grupo2_ = ''
                        elif r.poliza.parent.contractor.group.type_group == 3:
                            grupotype1 = Group.objects.get(pk = r.poliza.parent.contractor.group.parent.parent.id)
                            contratanteG = ((((((grupotype1.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                            subgrupotype2 = Group.objects.get(pk = r.poliza.parent.contractor.group.parent.id)
                            grupo1_ = ((((((subgrupotype2.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                            grupo2_ = ((((((r.poliza.parent.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    except Exception as e:
                        contratanteG = ''
                        grupo1_ = ''
                        grupo2_ = ''
                    try:
                        if r.poliza.parent.groupinglevel:
                            if r.poliza.parent.groupinglevel.type_grouping == 1:
                                nivelAg_ = ((((((r.poliza.parent.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo3_ = ''
                                grupo4_ = ''
                            elif r.poliza.parent.groupinglevel.type_grouping == 2:
                                grupotype1 = GroupingLevel.objects.get(pk = r.poliza.parent.groupinglevel.parent.id)
                                nivelAg_ = ((((((grupotype1.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo3_ = ((((((r.poliza.parent.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo4_ = ''
                            elif r.poliza.parent.groupinglevel.type_grouping == 3:
                                grupotype1 = GroupingLevel.objects.get(pk = r.poliza.parent.groupinglevel.parent.parent.id)
                                nivelAg_ = ((((((grupotype1.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                subgrupotype2 = GroupingLevel.objects.get(pk = r.poliza.parent.groupinglevel.parent.id)
                                grupo3_ = ((((((subgrupotype2.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo4_ = ((((((r.poliza.parent.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        else:
                            nivelAg_ = ''
                            grupo3_ = ''
                            grupo4_ = ''  
                    except Exception as e:
                        nivelAg_ = ''
                        grupo3_ = ''
                        grupo4_ = '' 
         
                    if r.poliza.parent.contractor.classification:
                        clasifica_ = r.poliza.parent.contractor.classification.classification_name  
                    else:
                        clasifica_='-----'
                    if r.poliza.parent.celula:
                        cel = r.poliza.parent.celula.celula_name  
                    else:
                        cel='-----'
                    # contratanteG = r.poliza.parent.contractor.group.group_name
                else:
                    contratantex = ''
                    contratanteE = ''
                    contratanteP = ''
                    contratanteG = ''     
                    contratanteG = ''
                    grupo1_ = ''
                    grupo2_ = ''
                    nivelAg_ = ''
                    grupo3_ = ''
                    grupo4_ = ''  
                    clasifica_='-----'
                    cel='-----'
                    if r.poliza.parent.business_line:
                        if int(r.poliza.parent.business_line) ==1:
                            businessLine_ = 'Comercial'
                        elif int(r.poliza.parent.business_line) ==2:
                            businessLine_ = 'Personal'
                        elif int(r.poliza.parent.business_line) ==0:
                            businessLine_ = 'Otro'
                        else:
                            if int(r.poliza.parent.business_line) ==0:
                                businessLine_ = 'Otro'
                            else:
                                businessLine_ = ''                
                    else:
                        businessLine_ = ''
                    # contratanteG = r.poliza.parent.juridical.group.group_name
            else:
                receipt1 = 'Póliza'
                if r.poliza.document_type == 7:
                    receipt1 = 'Fianza'
                if r.poliza.document_type == 8:
                    receipt1 = 'Fianza Colectiva'
                if r.poliza.document_type == 11:
                    receipt1 = 'Colectividad'
                if r.poliza.document_type == 12:
                    receipt1 = 'Póliza de Colectividad'
                if r.poliza.document_type == 3:
                    receipt1 = 'Póliza de Grupo'
                try:
                    sramo = r.poliza.subramo.subramo_name
                    fc = r.poliza.f_currency
                    pnumber = r.poliza.poliza_number
                    inc = r.poliza.start_of_validity.strftime("%d/%m/%Y")
                    fn =r.poliza.end_of_validity.strftime("%d/%m/%Y")
                    try:
                        cve = r.poliza.clave.name +' '+str(r.poliza.clave.clave)
                        cve = ((((((cve).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    except Exception as e:
                        cve =''
                    aseg = r.poliza.aseguradora.alias
                except Exception as fd:
                    inc = ''
                    fn = ''
                    aseg = ''
                    cve = ''
                    fc = 1
                    pnumber = ''
                if r.poliza.contractor:
                    contratantex = ((((((r.poliza.contractor.full_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    contratanteE = r.poliza.contractor.email
                    contratanteP = r.poliza.contractor.phone_number
                    contratanteG = ((((((r.poliza.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')     
                    if r.poliza.business_line:
                        if int(r.poliza.business_line) ==1:
                            businessLine_ = 'Comercial'
                        elif int(r.poliza.business_line) ==2:
                            businessLine_ = 'Personal'
                        elif int(r.poliza.business_line) ==0:
                            businessLine_ = 'Otro'
                        else:
                            businessLine_ = ''
                    else:
                        if r.poliza.business_line in [0, '0', None]:
                          businessLine_ = 'Otro'
                        else:
                          businessLine_ = ''
                    try:
                        if r.poliza.contractor.group.type_group == 1:
                            contratanteG = ((((((r.poliza.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                            grupo1_ = ''
                            grupo2_ = ''
                        elif r.poliza.contractor.group.type_group == 2:
                            grupotype1 = Group.objects.get(pk = r.poliza.contractor.group.parent.id)
                            contratanteG = ((((((grupotype1.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                            grupo1_ = ((((((r.poliza.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                            grupo2_ = ''
                        elif r.poliza.contractor.group.type_group == 3:
                            grupotype1 = Group.objects.get(pk = r.poliza.contractor.group.parent.parent.id)
                            contratanteG = ((((((grupotype1.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                            subgrupotype2 = Group.objects.get(pk = r.poliza.contractor.group.parent.id)
                            grupo1_ = ((((((subgrupotype2.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                            grupo2_ = ((((((r.poliza.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    except Exception as e:
                        contratanteG = ''
                        grupo1_ = ''
                        grupo2_ = ''
                    try:
                        if r.poliza.groupinglevel:
                            if r.poliza.groupinglevel.type_grouping == 1:
                                nivelAg_ = ((((((r.poliza.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo3_ = ''
                                grupo4_ = ''
                            elif r.poliza.groupinglevel.type_grouping == 2:
                                grupotype1 = GroupingLevel.objects.get(pk = r.poliza.groupinglevel.parent.id)
                                nivelAg_ = ((((((grupotype1.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo3_ = ((((((r.poliza.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo4_ = ''
                            elif r.poliza.groupinglevel.type_grouping == 3:
                                grupotype1 = GroupingLevel.objects.get(pk = r.poliza.groupinglevel.parent.parent.id)
                                nivelAg_ = ((((((grupotype1.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                subgrupotype2 = GroupingLevel.objects.get(pk = r.poliza.groupinglevel.parent.id)
                                grupo3_ = ((((((subgrupotype2.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                                grupo4_ = ((((((r.poliza.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        else:
                            nivelAg_ = ''
                            grupo3_ = ''
                            grupo4_ = ''  
                    except Exception as e:
                        nivelAg_ = ''
                        grupo3_ = ''
                        grupo4_ = '' 
         
                    if r.poliza.contractor.classification:
                        clasifica_ = r.poliza.contractor.classification.classification_name  
                    else:
                        clasifica_='-----'
                    if r.poliza.celula:
                        cel = r.poliza.celula.celula_name  
                    else:
                        cel='-----'
                    # contratanteG = r.poliza.contractor.group.group_name
                else:
                    contratantex = ''
                    contratanteE = ''
                    contratanteP = ''
                    contratanteG = ''     
                    contratanteG = ''
                    grupo1_ = ''
                    grupo2_ = ''
                    nivelAg_ = ''
                    grupo3_ = ''
                    grupo4_ = ''  
                    clasifica_='-----'
                    cel='-----'
            if r.poliza.responsable:
                val_resp = r.poliza.responsable.first_name + ' '+ str(r.poliza.responsable.last_name)
            else:
                val_resp = ''
            if r.poliza.collection_executive:
                val_cexe = r.poliza.collection_executive.first_name + ' '+ str(r.poliza.collection_executive.last_name)
            else:
                val_cexe = ''
            try:
                refs_policy = ReferenciadoresInvolved.objects.filter(policy = r.poliza.id,is_changed=False).values_list('referenciador__first_name','referenciador__last_name','comision_vendedor')
                if len(refs_policy):
                    v = []
                    try:
                        for it in refs_policy:
                            v.append(it[0] +' '+ str(it[1])+str('-')+str(it[2]))
                        referenc = v
                    except Exception as y:
                        v = []
                        referenc = []
                else:
                    v = []
                    referenc = []
            except Exception as e:
                v = []
                referenc = [] 
            if r.poliza.ramo:
                if r.poliza.ramo.ramo_code == 1:
                    form = Life.objects.filter(policy = r.poliza.id)
                    try:
                        if form:
                            value = form[0].personal.full_name
                        else:
                            value = ''
                    except Exception as rt:
                       value = ''
                elif r.poliza.ramo.ramo_code == 2:
                    form = AccidentsDiseases.objects.filter(policy = r.poliza.id)
                    if form:
                        value = form[0].personal.full_name
                    else:
                        value = ''
                elif r.poliza.subramo.subramo_code == 9:
                    form = AutomobilesDamages.objects.filter(policy = r.poliza.id)
                    if form:
                        try:
                            form[0].model = ((((((form[0].model).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                            form[0].version = ((((((form[0].version).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        except Exception as ers:
                            form[0].model = form[0].model
                            form[0].version = form[0].version
                        value = str(form[0].brand) + '-' + str(form[0].model) + '-' + str(form[0].version)+ '-' + str(form[0].serial)
                    else:
                        value = ''
                elif r.poliza.ramo.ramo_code == 3 and not r.poliza.subramo.subramo_code == 9:
                    form = Damages.objects.filter(policy = r.poliza.id)
                    if form:
                        value = form[0].insured_item
                    else:
                        value = ''
                else:
                    value = 'Sin asegurado'
            else:
                value = 'Sin asegurado'

        else:
            value = 'Sin asegurado'
            val_resp = 'Sin responsable'
            val_cexe = 'Sin ejecutivo'
        if r.bono:
            receipt1 = 'Bono'
            fc = r.bono.tipo_cambio
            try:
                cve = r.bono.clave.name +' '+str(r.bono.clave.clave)
                cve =((((((cve).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
            except  Exception as e:
                cve =''
            aseg = r.bono.aseguradora.alias
            pnumber = r.bono.factura_number
            if r.bono.vendor:
                referenc = [r.bono.vendor.first_name + ' '+ str(r.bono.vendor.last_name)]
            else:
                referenc = []
        if r.receipt_type == 3:
            receipt1 = 'Nota de Crédito'
        elif r.receipt_type == 2:
            receipt1 = 'Endoso'
        if value:
            value = ((((((value).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'') 
        else:
            value = value
        asegurado.append(value)
        receipttype.append(receipt1)
        referenciador.append(referenc)
        antiguedad.append(antig)
        responsable.append(val_resp)
        collection.append(val_cexe)
        userpay.append(val_userpay)
        creadopor.append(val_owner)
        contract.append(contratantex)
        contractE.append(contratanteE)
        contractP.append(contratanteP)
        contractG.append(contratanteG)
        aseguradora.append(aseg)
        inicio.append(inc)
        fin.append(fn)
        poliza_number.append(pnumber)
        clave.append(cve)
        subramo.append(sramo)
        currency.append(fc)
        # ---
        grupo1.append(grupo1_)
        grupo2.append(grupo2_)
        nivelAg.append(nivelAg_)
        grupo3.append(grupo3_)
        grupo4.append(grupo4_)
        clasifica.append(clasifica_)
        celulaC.append(cel)
        businessLine.append(businessLine_)    

    obj = {
        'document_type'   : str(list(recibos.values_list('poliza__document_type', flat = True))),
        'receipttype'   : str(list(receipttype)),
        'recibo'   : str(list(recibos.values_list('recibo_numero', flat = True))),
        'endoso_number'   : str(list(recibos.values_list('endorsement__number_endorsement', flat = True))),
        'endosotramite'   : str(list(endosotramite)),
        'poliza_number'   : str(list(poliza_number)),
        'aseguradora__compania'   : str(list(aseguradora)),
        'subramo__subramo_name'   : str(list(subramo)),
        'forma_de_pago'   : str(list(recibos.values_list('poliza__forma_de_pago', flat = True))),
        'status'   : str(list(recibos.values_list('status', flat = True))),
        'status_p'   : str(list(recibos.values_list('poliza__status', flat = True))),
        'fecha_inicio'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in recibos.values_list('fecha_inicio', flat = True) ])) ,
        'fecha_fin'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in recibos.values_list('fecha_fin', flat = True) ])) ,
        'vencimiento'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in recibos.values_list('vencimiento', flat = True) ])) ,
        'fecha_pago'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in recibos.values_list('pay_date', flat = True) ])) ,
        'liquidacion_folio'   : str(list(recibos.values_list('liquidacion_folio', flat = True))) ,
        'start_of_validity'   : str(list(inicio)) ,
        'end_of_validity'   : str(list(fin)) ,
        'start_of_validity_f'   : str(list(fin)) ,
        'end_of_validity_f'   : str(list(fin)) ,
        'f_currency'   : str(list(currency)),
        'p_neta'   : str(list(recibos.values_list('prima_neta', flat = True))),
        'rpf'   : str(list(recibos.values_list('rpf', flat = True))),
        'derecho'   : str(list(recibos.values_list('derecho', flat = True))),
        'iva'   : str(list(recibos.values_list('iva', flat = True))),
        'p_total'   : str(list(recibos.values_list('prima_total', flat = True))),
        'comision'   : str(list(recibos.values_list('comision', flat = True))),
        'is_cat'   : str(list(recibos.values_list('conducto_de_pago', flat = True))),
        'clave__clave'   : str(list(clave)),
        'clave__clave_f'   : str(list(clave)),
        '_id'   : str(list(recibos.values_list('id', flat = True))),
        'observations'   : str(list([(((((((x).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')) if x else '' for x in recibos.values_list('poliza__observations', flat = True)])),
        'created_at'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in recibos.values_list('created_at', flat = True) ]))  ,        
        'clave__name'   : str(list(recibos.values_list('poliza__clave__name', flat = True))),
        'sucursal__sucursal_name'   : str(list(recibos.values_list('poliza__sucursal__sucursal_name', flat = True))),
        'asegurado'   : str(list(asegurado)),
        'referenciador'   : str(list(referenciador)),
        'antiguedad'   : str(list(antiguedad)),
        'creadopor'   : str(list(creadopor)),
        'collection'   : str(list(collection)),
        'user_pay'   : str(list(userpay)),
        'responsable'   : str(list(responsable)),
        'contratante'   : str(list(contract)),
        'contratanteE'   : str(list(contractE)),
        'contratanteP'   : str(list(contractP)),
        'contratanteG'   : str(list(contractG)),
        'celula'   : str(list(celulaC)),
        # ----
        'grupo1'   : str(list(grupo1)) ,
        'grupo2'   : str(list(grupo2)) ,
        'nivelAg'   : str(list(nivelAg)) ,
        'grupo3'   : str(list(grupo3)) ,
        'grupo4'   : str(list(grupo4)) ,
        'clasifica'   : str(list(clasifica)) ,
        'businessLine'   : str(list(businessLine)) ,
        'tipo_reporte': tipo_reporte,
        'email_org':info_org['email'],
        'phone_org':info_org['phone'],
        'webpage_org':info_org['webpage'],
        'address_org':info_org['address'],
        'urlname_org':info_org['name'],
        }   
    obj['columns'] = str(list(columns))
    obj['imagen'] = archivo_imagen
    obj['valueCom'] = valueCom
    obj['registros'] = len(recibos)
    r = requests.post(settings.SERVICEEXCEL_URL + 'get-CobranzaExcel/', obj,
    # headers = {
    # 'Authorization':'Bearer %s'%request.user.user_info.fi_token_refresh,
    # # 'Content-Type':'application/json' 
    # }, 
    stream=True)
    response_data= r.text

    response = HttpResponse(r.content,content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

    return response

@api_view(['POST'])
@permission_classes((IsAuthenticatedV2, CobranzaReportesPermissionsV2, IsOrgMemberV2))
def Service_contractorpoliza_Excel(request):
    tipo_reporte='Reporte Poliza Contratante'
    info_org = getInfoOrg(request)
    if len(info_org['logo']) != 0:
        archivo_imagen = 'https://miurabox-public.s3.amazonaws.com/cas/' + info_org['logo']
        # archivo_imagen = get_presigned_url("cas/{url}".format(url=info_org['logo']),28800) 
    else:
            archivo_imagen = 'saam.jpg'
    valueCom = True
    
    campo_celula, campo_agrupacion, campo_lineanegocio, moduleName = getOrgInfo(request)
    
    try:
        valueCom = comisions(request)
    except Exception as ers:
        valueCom =  True

    policies = Polizas.objects.filter(contractor__id = request.data['contractor'], 
        org_name = (request.GET.get('org'))).exclude(document_type__in = list([2,4,5,6,10])).exclude(status = 0).order_by('-status')            
    try:
        dataToFilter = getDataForPerfilRestricted(request, request.GET.get('org'))
    except Exception as er:
        dataToFilter = {}
    if dataToFilter:
        # Contratantes***
        polizasToF = Polizas.objects.filter(document_type__in = [1,3,11], pk__in = list(polizas), org_name = request.GET.get('org')).exclude(status = 0)
        polizasCol = Polizas.objects.filter(document_type__in = [12], pk__in = list(polizas), org_name = request.GET.get('org')).exclude(status = 0)
        polizasGCer = Polizas.objects.filter(document_type__in = [6], pk__in = list(polizas), org_name = request.GET.get('org')).exclude(status = 0)
        if dataToFilter['ccpr']:
            polizasToF = polizasToF.filter(contractor__in = list(dataToFilter['ccpr']))
        if dataToFilter['cgpr']:
            polizasToF = polizasToF.filter(contractor__group__in = list(dataToFilter['cgpr']))
        if dataToFilter['ccepr']:
            polizasToF = polizasToF.filter(contractor__cellule__in = list(dataToFilter['ccepr']))
        if dataToFilter['crpr']:
            polizasToF = polizasToF.filter(contractor__vendor__in = list(dataToFilter['crpr']))
        if dataToFilter['cspr']:
            polizasToF = polizasToF.filter(contractor__sucursal__in = list(dataToFilter['cspr']))
        # Pólizas ****
        if dataToFilter['pppr']:
            polizasToF = polizasToF.filter(pk__in = list(dataToFilter['pppr']))
        if dataToFilter['pgpr']:
            polizasToF = polizasToF.filter(contractor__group__in = list(dataToFilter['pgpr']))
        if dataToFilter['pcepr']:
            polizasToF = polizasToF.filter(celula__in = list(dataToFilter['pcepr']))
        if dataToFilter['prpr']:
            polizasToF = polizasToF.filter(ref_policy__referenciador__in = list(dataToFilter['prpr']))
        if dataToFilter['pspr']:
            polizasToF = polizasToF.filter(sucursal__in = list(dataToFilter['pspr']))
        if dataToFilter['papr']:
            polizasToF = polizasToF.filter(groupinglevel__in = list(dataToFilter['papr']))
        if dataToFilter['pcapr']:
            polizasToF = polizasToF.filter(clave__in = list(dataToFilter['pcapr']))
        if dataToFilter['psrpr']:
            polizasToF = polizasToF.filter(subramo__subramo_code__in = list(dataToFilter['psrpr']))
        if dataToFilter['paspr']:
            polizasToF = polizasToF.filter(aseguradora__in = list(dataToFilter['paspr']))
        if dataToFilter['pstpr']:
            polizasToF = polizasToF.filter(status__in = list(dataToFilter['pstpr']))
        
        polizasCT = polizasCol.filter(document_type = 12, parent__in = list(polizasToF))
        polizasGT = polizasGCer.filter(Q(parent__parent__parent__in = list(polizasToF)) | Q(parent__parent__in = list(polizasToF)),document_type__in = [6,4])
        polizasFin = list(polizasToF.values_list('pk', flat = True)) + list(polizasCT.values_list('pk', flat = True)) + list(polizasGT.values_list('pk', flat = True))
        fpol = Polizas.objects.filter(pk__in = list(policies))
        policies = fpol.filter(pk__in = list(polizasFin))
    
    columns = ['Tipo', 'No.Póliza', 'Contratante','Grupo','SubGrupo', 'SubSubGrupo', 'Email', 'Teléfono', 'Proveedor', 'Subramo', 'Forma de Pago', 'Estatus', 
                       'Inicio Póliza', 'Fin Póliza', 'Moneda', 'Prima Neta', 'RPF', 'Derecho', 'IVA', 'Prima Total', 'Comisión',
                       'Clave', 'Asegurado', 'Observaciones', 'Referenciador', 'Fecha de creación', 'Creado por','Sucursal',
                       'Agrupación','SubAgrupación', 'SubsubAgrupación','Clasificación','Línea Negocio','Célula','Estado de Circulación',
                       'Motivo No Renovación','Motivo Cancelación','Fecha de Cancelación']

    # order_polizas = order_polizas.order_by('natural__full_name','juridical__j_name','ramo__ramo_name','aseguradora__compania')
    order_polizas = policies.order_by('id')
    asegurado = []
    antiguedad = []
    referenciador = []
    creadopor = []
    contratante = []
    contratanteE = []
    contratanteP = []
    contratanteG = []
    grupo1 = []
    grupo2 = []
    nivelAg = []
    grupo3 = []
    grupo4 = []
    clasifica = []
    businessLine = []
    clave = []
    celulaC = []
    edocir = []
    mrenovacion = []
    mcancelacion = []
    ownercancel = []
    for r in order_polizas:
        cl = ''
        cve = ''
        antig = get_antiguedad(r.start_of_validity)
        if r.owner:
            val_owner = r.owner.first_name + ' '+ str(r.owner.last_name)
        else:
            val_owner = ''
        if r.status ==11:
            if r.owner_cancel:
                ownercancel.append(r.owner_cancel.first_name+' '+str(r.owner_cancel.last_name))
            else:
                ownercancel.append('')
        else:
            ownercancel.append('')
        if r.state_circulation:
            valstate = r.state_circulation
            try:
                valstate = getStates(int(r.state_circulation))
            except Exception as e:                
                valstate = r.state_circulation
        else:
            valstate = ''
        if r.business_line:
            if int(r.business_line) ==1:
                businessLine_ = 'Comercial'
            elif int(r.business_line) ==2:
                businessLine_ = 'Personal'
            elif int(r.business_line) ==0:
                businessLine_ = 'Otro'
            else:
                businessLine_ = ''
        else:
            try:
                if int(r.business_line) ==0:
                    businessLine_ = 'Otro'
                else:
                    businessLine_ = ''
            except:
                businessLine_ = ''
        if r.clave:
            try:
                try:
                    cve = r.clave.name + ' '+ str(r.clave.clave)
                    cve = ((((((cve).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                except Exception as fds:
                    cve =''
            except Exception as ecv:
                cve = ''
        else:
            cve = ''
        try:
            refs_policy = ReferenciadoresInvolved.objects.filter(policy = r.id,is_changed=False).values_list('referenciador__first_name','referenciador__last_name')
            if len(refs_policy):
                v = []
                try:
                    for it in refs_policy:
                        v.append(it[0] +' '+ str(it[1])+str('; '))
                    referenc = v
                except Exception as y:
                    v = []
                    referenc = v
            else:
                v = []
                referenc = v
        except Exception as e:
            v = []
            referenc = v 
        value=''
        if r.ramo and r.ramo.ramo_code == 1:
            form = Life.objects.filter(policy = r.id)
            if form:
                try:
                    if form:
                        value = form[0].personal.full_name
                    else:
                        value = ''
                except Exception as rt:
                   value = ''
            else:
               value = ''
        elif r.ramo and r.ramo.ramo_code == 2:
            form = AccidentsDiseases.objects.filter(policy = r.id)
            if form:
                value = form[0].personal.full_name
            else:
                value = ''
        elif r.subramo and r.subramo.subramo_code == 9:
            form = AutomobilesDamages.objects.filter(policy = r.id)
            if form:
                try:
                    form[0].model = ((((((form[0].model).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    form[0].version = ((((((form[0].version).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                except Exception as ers:
                    form[0].model = form[0].model
                    form[0].version = form[0].version
                value = str(form[0].brand) + '-' + str(form[0].model) + '-' + str(form[0].version)+ '-' + str(form[0].serial)
            else:
                value = ''
        elif r.ramo and r.ramo.ramo_code == 3 and not r.subramo and r.subramo.subramo_code == 9:
            form = Damages.objects.filter(policy = r.id)
            if form:
                value = form[0].insured_item
            else:
                value = ''
        if r.contractor:
            contratan = ((((((r.contractor.full_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
            contratanE = r.contractor.email
            contratanP = r.contractor.phone_number
            try:
                if r.contractor.group.type_group == 1:
                    contratanG = ((((((r.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    grupo1_ = ''
                    grupo2_ = ''
                elif r.contractor.group.type_group == 2:
                    grupotype1 = Group.objects.get(pk = r.contractor.group.parent.id)
                    contratanG = ((((((grupotype1.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    grupo1_ = ((((((r.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    grupo2_ = ''
                elif r.contractor.group.type_group == 3:
                    grupotype1 = Group.objects.get(pk = r.contractor.group.parent.parent.id)
                    contratanG = ((((((grupotype1.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    subgrupotype2 = Group.objects.get(pk = r.contractor.group.parent.id)
                    grupo1_ = ((((((subgrupotype2.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                    grupo2_ = ((((((r.contractor.group.group_name).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
            except Exception as e:
                contratanG = ''
                grupo1_ = ''
                grupo2_ = ''
            try:
                if r.groupinglevel:
                    if r.groupinglevel.type_grouping == 1:
                        nivelAg_ = ((((((r.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        grupo3_ = ''
                        grupo4_ = ''
                    elif r.groupinglevel.type_grouping == 2:
                        grupotype1 = GroupingLevel.objects.get(pk = r.groupinglevel.parent.id)
                        nivelAg_ = ((((((grupotype1.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        grupo3_ = ((((((r.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        grupo4_ = ''
                    elif r.groupinglevel.type_grouping == 3:
                        grupotype1 = GroupingLevel.objects.get(pk = r.groupinglevel.parent.parent.id)
                        nivelAg_ = ((((((grupotype1.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        subgrupotype2 = GroupingLevel.objects.get(pk = r.groupinglevel.parent.id)
                        grupo3_ = ((((((subgrupotype2.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                        grupo4_ = ((((((r.groupinglevel.description).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')
                else:
                    nivelAg_ = ''
                    grupo3_ = ''
                    grupo4_ = ''  
            except Exception as e:
                nivelAg_ = ''
                grupo3_ = ''
                grupo4_ = ''  
            if r.contractor.classification:
                clasifica_ = r.contractor.classification.classification_name  
            else:
                clasifica_='-----'
            if r.celula:
                cel = r.celula.celula_name  
            else:
                cel='-----'   
        
        if value:
            value = ((((((value).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'') 
        else:
            value = value
        mren = r.reason_ren
        if mren:
            mren = ((((((mren).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'') 
        else:
            mren = mren
        mcan = r.reason_cancel
        if mcan:
            mcan = ((((((mcan).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'') 
        else:
            mcan = mcan
        contratante.append(contratan)
        contratanteE.append(contratanE)
        contratanteP.append(contratanP)
        contratanteG.append(contratanG)
        # ---
        grupo1.append(grupo1_)
        grupo2.append(grupo2_)
        nivelAg.append(nivelAg_)
        grupo3.append(grupo3_)
        grupo4.append(grupo4_)
        clasifica.append(clasifica_)
        businessLine.append(businessLine_)
        celulaC.append(cel)
        # ----
        asegurado.append(value)
        referenciador.append(referenc)
        antiguedad.append(antig)
        creadopor.append(val_owner)
        clave.append(cve)
        edocir.append(valstate)
        mrenovacion.append(mren)
        mcancelacion.append(mcan)
    obj = {
        'document_type'   : str(list(order_polizas.values_list('document_type', flat = True))),
        'poliza_number'   :str(list([(((((((x).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')) if x else '' for x in order_polizas.values_list('poliza_number', flat = True)])),
        'contratante'   : str(list(contratante)),
        'contratanteE'   : str(list(contratanteE)),
        'contratanteP'   : str(list(contratanteP)),
        'aseguradora__compania'   : str(list(order_polizas.values_list('aseguradora__alias', flat = True))),
        'subramo__subramo_name'   : str(list(order_polizas.values_list('subramo__subramo_name', flat = True))),
        'forma_de_pago'   : str(list(order_polizas.values_list('forma_de_pago', flat = True))),
        'status'   : str(list(order_polizas.values_list('status', flat = True))),
        'start_of_validity'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in order_polizas.values_list('start_of_validity', flat = True) ])) ,
        'end_of_validity'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in order_polizas.values_list('end_of_validity', flat = True) ])) ,
        'dateCancel'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in order_polizas.values_list('date_cancel', flat = True) ])) ,
        'f_currency'   : str(list(order_polizas.values_list('f_currency', flat = True))),
        'p_neta'   : str(list(order_polizas.values_list('p_neta', flat = True))),
        'rpf'   : str(list(order_polizas.values_list('rpf', flat = True))),
        'derecho'   : str(list(order_polizas.values_list('derecho', flat = True))),
        'iva'   : str(list(order_polizas.values_list('iva', flat = True))),
        'p_total'   : str(list(order_polizas.values_list('p_total', flat = True))),
        'comision'   : str(list(order_polizas.values_list('comision', flat = True))),
        'clave__clave'   : str(list(clave)),
        '_id'   : str(list(order_polizas.values_list('id', flat = True))),
        'observations'   : str(list([(((((((x).replace('[','')).replace(']',''))).replace(",",'')).replace(".",'')).replace("'",'')) if x else '' for x in order_polizas.values_list('observations', flat = True)])),
        'owner__first_name'   : str(list(order_polizas.values_list('owner__first_name', flat = True))),
        'owner__last_name'   : str(list(order_polizas.values_list('owner__last_name', flat = True))),
        'created_at'   : str(list([date.strftime("%d/%m/%Y") if date else '' for date in order_polizas.values_list('created_at', flat = True) ]))  ,
        'clave__name'   : str(list(order_polizas.values_list('clave__name', flat = True))),
        'contratanteG'   : str(list(contratanteG)) ,
        'grupo1'   : str(list(grupo1)) ,
        'grupo2'   : str(list(grupo2)) ,
        'nivelAg'   : str(list(nivelAg)) ,
        'grupo3'   : str(list(grupo3)) ,
        'grupo4'   : str(list(grupo4)) ,
        'clasifica'   : str(list(clasifica)) ,
        'businessLine'   : str(list(businessLine)) ,
        'celula'   : str(list(celulaC)) ,
        'motivor'   : str(list(mrenovacion)) ,
        'motivoc'   : str(list(mcancelacion)) ,
        'sucursal__sucursal_name'   : str(list(order_polizas.values_list('sucursal__sucursal_name', flat = True))),
        'asegurado'   : str(list(asegurado)),
        'referenciador'   : str(list(referenciador)),
        'antiguedad'   : str(list(antiguedad)),
        'creadopor'   : str(list(creadopor)),
        'estadoc'   : str(list(edocir)),
        'ownercancel':str(list(ownercancel)),
        'tipo_reporte': ' ',
        'email_org':info_org['email'],
        'phone_org':info_org['phone'],
        'webpage_org':info_org['webpage'],
        'address_org':info_org['address'],
        'urlname_org':info_org['name'],
        'campo_celula':campo_celula,
        'campo_agrupacion':campo_agrupacion,
        'campo_lineanegocio':campo_lineanegocio
        }   
    obj['columns'] = str(list(columns))
    obj['imagen'] = archivo_imagen
    obj['valueCom'] = valueCom
    obj['registros'] = len(order_polizas)
    obj['campo_celula'] =campo_celula,
    obj['campo_agrupacion'] =campo_agrupacion,
    obj['campo_lineanegocio'] =campo_lineanegocio
    r = requests.post(settings.SERVICEEXCEL_URL + 'get-PolicyExcel/', obj,
    # headers = {
    # 'Authorization':'Bearer %s'%request.user.user_info.fi_token_refresh,
    # # 'Content-Type':'application/json' 
    # },
    stream=True)
    response_data= r.text

    response = HttpResponse(r.content,content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

    return response
# reporte auditoria
@api_view(['POST'])
@permission_classes((IsAuthenticatedV2, RenovacionesReportesPermissionsV2, IsOrgMemberV2))
def Service_ReporteAuditoriaExcel(request): 
    request.query_params._mutable = True
    post = request.data.copy() # to make it mutable
    post['org'] = request.GET.get('org')
    post['token'] = request.META['HTTP_AUTHORIZATION'].replace('Bearer ', '')
    post['cols1'] = str(request.data['cols1'] if 'cols1' in request.data else [])
    post['cols'] = str(request.data['cols1'] if 'cols1' in request.data else [])
    post['ramos'] = str(request.data['ramos'])
    post['subramos'] = str(request.data['subramos'])
    post['providers'] = str(request.data['providers'])
    verReferenciadores = is_perm_ver_referenciadores(request)
    try:
        ui = UserInfo.objects.get(user= request.user)
        perfil = None
        try:
            if ui.perfil_restringido:
                perfil = PerfilUsuarioRestringido.objects.get(pk = ui.perfil_restringido.id)
            else:
                perfil = None
        except Exception as ert:
            perfil = None
    except Exception as er:
        perfil = None
    post['user'] = perfil.id if perfil else None
    post['user_req'] = request.user
    post['verReferenciadores'] = verReferenciadores
    if request.GET.get('org') == 'ancora':
        url = settings.SERVICEEXCEL_ANCORA_URL
    else:
        url = settings.SERVICEEXCEL_2_URL
    r = requests.post(
        url + 'reporte-auditoria-asincrono/', 
        headers={'Authorization': request.META['HTTP_AUTHORIZATION']}, 
        data = post, 
        stream=True)   

    return Response(r.text, status = r.status_code)

def checkDocumentType(request):
    switcher = {
        1: "Individual",
        2: "Endoso",
        3: "Póliza de Grupo",
        4: "SubGrupo",
        5: "Categoría",
        6: "Certificado",
        7: "Fianza",
        8: "Fianza Colectiva",
        10: "Fianza Certificado",
        11: "Colectividad",
        12: "Póliza de Colectividad",
    }
    return switcher.get(request, "No aplica")
def get_age(birthdate):
        if birthdate:
            fecha_actual = date.today()
            resultado = fecha_actual.year - birthdate.year
            resultado -= ((fecha_actual.month, fecha_actual.day) < (birthdate.month, 
            birthdate.day))
        else:
            resultado = 0
        return resultado
def getTipoAuto(typo):
    switcher = {
        1: 'Auto',
        2: 'Moto', 
        3: 'Tracto',
        4: 'Autobus',
        5: 'Pick Up',
        6: 'Camiones hasta 1.5 ton', 
        7: 'Chofer app', 
        8: 'Remolque',
        9: 'Camiones + 1.5 ton',      
    }
    return switcher.get(typo,'')
def getTipoDanio(typo):
    switcher = {
        0: 'No aplica',
        1: 'Familiar',
        2: 'Casa Habitación',
        3: 'Condominio',
        4: 'Edificio',
        5: 'Empresarial',
        6: 'Múltiple Empresarial',
        10: 'Sólo Incendio',
        46: 'Avión',
        47: 'Avioneta',
        48: 'Barco',
        49: 'Buque',
        9:'Declaración',
        50: 'Dron',
        51: 'Embarcación de Placer',
        7:'Específica',
        52: 'Helicóptero',
        35: 'Otro',
        8:'Pronóstico',
        11: 'Animales',
        12: 'Cultivo',
        13: 'Crédito General',
        14: 'Crédito a la Vivienda',
        15: 'Documentos que sean objeto de oferta pública o de intermediación en mercados de valores',
        16: 'Emisores de Valores',
        17: 'Títulos de Crédito',
        18: 'Administración',
        19: 'Arquitectos',
        20: 'Aviones',
        21: 'Barcos',
        22: 'Contratista',
        23: 'Crime',
        24: 'Cyber (Protección de datos)',
        25: 'D&O (Consejeros y Funcionarios)',
        26: 'E&O Miscelaneos',
        27: 'Empresarial',
        28: 'Eventos',
        29: 'Familiar/Condominal',
        30: 'Hole in One',
        31: 'Ingeniería',
        32: 'Instituciones Financieras',
        33: 'Lineas Financieras',
        34: 'Médicos',
        35: 'Otro',
        36: 'Riesgos Catastróficos',
        37: 'Calderas y Recipientes Sujetos a Presión',
        38: 'Dinero y Valores',
        39: 'Eq. Contratistas y Maquinaria pesada',
        40: 'Eq. Electrónico',
        41: 'Montaje de Maquinaria',
        42: 'Obra Civil en Contrucción',
        43: 'Obra Civil Terminada',
        44: 'Rotura de Cristales',
        45: 'Rotura de Maquinaria',
        35: 'Otro',
        53: 'CRIME/BBB',
        54: 'D&O',
        55: 'FIPI',
        56: 'CYBER',
        57: 'VCAPS',
        58: 'RCP MÉDICA',
        59: 'E&O MISCELANEO',
        60: 'RIESGO POLITICO',
        61: 'RC SERVIDORES PUBLICOS',
        62: 'RCP',
        63: 'Terrorismo y Sabotaje'
          
    }
    return switcher.get(typo,'')
def dias_horas_final(obj):
    if obj.status in [3,5,4]:
        #get horas-dias transcurrido
        if obj.fecha_termino_conteo:
            fecha_termino_conteo = obj.fecha_termino_conteo
    else:
        dias = 'Sin Fecha'
        val_semaforo = 0
        return val_semaforo,dias
    # ------------------------------------------------------------------------------------------------------------------------
    start_date = obj.fecha_archivos_cargados
    # si tipo_siniestro =20 entonces toma fecha compromiso para semáforo
    auto_siniester = Autos.objects.filter(siniestro = obj, org_name = obj.org_name)
    if auto_siniester.exists():
        auto_siniester = auto_siniester.first()

        if auto_siniester.tipo_siniestro ==20:
            if auto_siniester.subtipo_siniestro_1 ==4:
                start_date = obj.promise_date

    if not start_date:
        dias = 'Sin Fecha'
        val_semaforo = 0
        return val_semaforo,dias
    # restar 6 horas a la fecha que guarda python
    now_date_files = start_date- timedelta(hours=6, minutes=00)
    start_date = now_date_files
    start_date = pd.to_datetime(str(start_date).split('.')[0] , utc = True)
    #Start date must be in standard python datetime format
    if obj.fecha_termino_conteo:
        end_date =  pd.to_datetime(str(obj.fecha_termino_conteo).split('.')[0], utc = True)
        end_date = end_date- timedelta(hours=6, minutes=00)
    else:
        dias = 'Sin Fecha'
        val_semaforo = 0
        return val_semaforo,dias
    #Business open hour must be in standard python time format-Hour,Min,Sec
    biz_open_time=time(8,0,0)        
    #Business close hour must be in standard python time format-Hour,Min,Sec
    biz_close_time=time(17,0,0)
    #US public holidays
    now = datetime.now()
    weekend_list = [3,7]
    MX_holiday_list = holidays.Mexico(years=now.year)        
    fechaE = date(now.year, 1, 2)
    if fechaE in MX_holiday_list:
        MX_holiday_list.pop(fechaE)
    fechaReyes = date(now.year, 1, 6)
    if fechaReyes in MX_holiday_list:
        MX_holiday_list.pop(fechaReyes)
    fech2103 = date(now.year,3,21)
    if fech2103 in MX_holiday_list:
        MX_holiday_list.pop(fech2103)
    fech1509 = date(now.year,9,15)
    if fech1509 in MX_holiday_list:
        MX_holiday_list.pop(fech1509)
    start_date_ = start_date
    try:
        if end_date:
            end_date_ = end_date
        else:        
            dias ='0 Días'
            val_semaforo = (0)
            return val_semaforo,dias
    except Exception as rt:  
        print('==============',rt,obj.status,auto_siniester.subtipo_siniestro_1,obj.numero_siniestro,obj.id)
        dias = '0 Días'
        val_semaforo = int(0)
        return val_semaforo,dias
    # subtipo_siniestro_2 = 1 revisión(horas) 2 indemnización (dias)
    #Business duration can be 'day', 'hour', 'min', 'sec'
    #si unit_hour es day then only cunt days not hours time
    if (auto_siniester.tipo_siniestro == 20 and auto_siniester.subtipo_siniestro_1 ==4) or  (auto_siniester.subtipo_siniestro_2 ==2):        
        unit_hour='day'
        try:
            days_ant = businessDuration(
            
                startdate=start_date,
                enddate=end_date,
                # starttime=biz_open_time,
                # endtime=biz_close_time,                
                holidaylist=MX_holiday_list,
                unit=unit_hour
            )
            if days_ant >0:
                dias = str(int(days_ant)) +' Días'
                val_semaforo = int(days_ant)
            else:
                dias ='0 Días'
                val_semaforo =0
        except Exception as ers:
            print('excepton 4', ers)
            dias ='0 Días'
            val_semaforo =0
            return val_semaforo,dias
    elif (auto_siniester.tipo_siniestro ==20 and auto_siniester.subtipo_siniestro_1==1) or (auto_siniester.tipo_siniestro ==20 and auto_siniester.subtipo_siniestro_1 ==2) or (auto_siniester.tipo_siniestro ==20 and auto_siniester.subtipo_siniestro_1==3) or (auto_siniester.tipo_siniestro ==10 and auto_siniester.subtipo_siniestro_1 ==5) or auto_siniester.subtipo_siniestro_2 ==1 or auto_siniester.tipo_siniestro ==19:
        unit_hour='hour'
        daterange_s=[]
        daterange_v=[]
        try:
            days_ant = businessDuration(
            
                startdate=start_date,
                enddate=end_date,
                starttime=biz_open_time,
                endtime=biz_close_time,                
                holidaylist=MX_holiday_list,
                unit=unit_hour
            )
            try:
                inicio = start_date
                fin = end_date
                lista_fechas = [(inicio + timedelta(days=d)).strftime("%Y-%m-%d %H:%M:%S") for d in range((end_date - start_date).days + 1)] 
                for p in lista_fechas:
                    o = datetime.strptime(p, "%Y-%m-%d %H:%M:%S")
                    if o.weekday() == 4:#viernes
                        daterange_v.append(o)
                        if not o in MX_holiday_list:
                            days_ant = days_ant-2
                    else:#no es viernes
                        daterange_s.append(o)
            except Exception as r:
                print('errorrrrr lista fechas viernes',r)
            print('----------hours',days_ant)
            if days_ant >0:
                dias = str(int(days_ant)) +' Horas'
                val_semaforo = int(days_ant)
            else:
                dias ='0 Horas'
                val_semaforo =0
        except Exception as ers:
            print('excepton 5', ers)
            dias ='0 Horas'
            val_semaforo =0
    else:
        unit_hour='day'
        try:
            days_ant = businessDuration(
            
                startdate=start_date,
                enddate=end_date,
                # starttime=biz_open_time,
                # endtime=biz_close_time,
            
                holidaylist=MX_holiday_list,
                unit=unit_hour
            )

            if days_ant >0:
                dias = str(int(days_ant)) +' Días'
                val_semaforo = int(days_ant)
            else:
                dias ='0 Días'
                val_semaforo =0
        except Exception as ers:
            print('excepton 6', ers)
            dias ='0 Días'
            val_semaforo =0
    return val_semaforo,dias
def dias_horas_final_promesa(obj):
    if obj.status in [3,5,4]:
        #get horas-dias transcurrido
        if obj.fecha_termino_conteo:
            fecha_termino_conteo = obj.fecha_termino_conteo
    else:
        dias = 'Sin Fecha'
        val_semaforo = 0
        return val_semaforo,dias
    today = date.today()
    a = arrow.get(today)
    if not obj.promise_date:        
        dias = 'Sin Fecha'
        val_semaforo = 0
        return val_semaforo,dias
    if obj.fecha_termino_conteo:
        aaa =  pd.to_datetime(str(obj.fecha_termino_conteo).split('.')[0], utc = True)
        a = arrow.get(aaa)
        a = a- timedelta(hours=6, minutes=00)
    else:
        dias = 'Sin Fecha'
        val_semaforo = 0
        return val_semaforo,dias
    a_ok = a
    aux_date = obj.promise_date
    b = arrow.get(aux_date)
    b_ok=b
    antiguedad = (a-b).days
    antiguedad = int(antiguedad)+1
    # return antiguedad
    ahora = datetime.now()
    futuro =b
    diferencia = a-b
    legible = obtener_tiempo_transcurrido(diferencia.total_seconds())
    if b > a:
        b = a
        a= arrow.get(obj.promise_date)
    start_date_ = b
    end_date_ = a
    start_date = pd.to_datetime(str(start_date_).split('.')[0] , utc = True)
    #Start date must be in standard python datetime format
    end_date =  pd.to_datetime(str(end_date_).split('.')[0], utc = True)
    weekend_list = [3,7]
    MX_holiday_list = holidays.Mexico(years=a.year)        
    fechaE = date(a.year, 1, 2)
    if fechaE in MX_holiday_list:
        MX_holiday_list.pop(fechaE)
    fechaReyes = date(a.year, 1, 6)
    if fechaReyes in MX_holiday_list:
        MX_holiday_list.pop(fechaReyes)
    fech2103 = date(a.year,3,21)
    if fech2103 in MX_holiday_list:
        MX_holiday_list.pop(fech2103)
    fech1509 = date(a.year,9,15)
    if fech1509 in MX_holiday_list:
        MX_holiday_list.pop(fech1509)
    unit_hour='day'
    try:
        days_ant = businessDuration(            
            startdate=start_date,
            enddate=end_date,              
            holidaylist=MX_holiday_list,
            unit=unit_hour
        )
        if days_ant:
            if b_ok > a_ok:
                # return int(days_ant)*-1
                dias = str(int(days_ant)*-1)+' Días'
                val_semaforo = int(days_ant)
            else:
                # return int(days_ant)
                dias = str(int(days_ant))+' Días'
                val_semaforo = int(days_ant)
        else:
            # return 0
            dias ='0 Días'
            val_semaforo = 0
    except Exception as ers:
        print('excepton 1', ers)
        # return legible
        dias = str(int(legible))+' Días'
        val_semaforo = int(legible)
    return val_semaforo,dias

def antiguedad_dias_habiles(obj):
    start_date = obj.fecha_archivos_cargados
    # si tipo_siniestro =20 entonces toma fecha compromiso para semáforo
    auto_siniester = Autos.objects.filter(siniestro = obj, org_name = obj.org_name)
    if auto_siniester.exists():
        auto_siniester = auto_siniester.first()

        if auto_siniester.tipo_siniestro ==20:
            if auto_siniester.subtipo_siniestro_1 ==4:
                start_date = obj.promise_date
    if not start_date:
        dias = 0
        val_semaforo = 0
        return val_semaforo,dias
    # start_date = pd.to_datetime(str(obj.fecha_archivos_cargados).split('.')[0] )
    # restar 6 horas a la fecha que guarda python
    now_date_files = start_date- timedelta(hours=6, minutes=00)
    start_date = now_date_files
    start_date = pd.to_datetime(str(start_date).split('.')[0] , utc = True)
    #Start date must be in standard python datetime format
    end_date =  pd.to_datetime(str(datetime.now()).split('.')[0], utc = True)
    #Business open hour must be in standard python time format-Hour,Min,Sec
    biz_open_time=time(8,0,0)

    #Business close hour must be in standard python time format-Hour,Min,Sec
    biz_close_time=time(17,0,0)
    biz_open_time_v=time(8,0,0)
    biz_close_time_v=time(15,0,0)

    #US public holidays
    now = datetime.now()
    weekend_list = [0,1,2,3]
    MX_holiday_list = holidays.Mexico(years=now.year)
    fechaE = date(now.year, 1, 2)
    if fechaE in MX_holiday_list:
        MX_holiday_list.pop(fechaE)
    fechaReyes = date(now.year, 1, 6)
    if fechaReyes in MX_holiday_list:
        MX_holiday_list.pop(fechaReyes)
    fech2103 = date(now.year,3,21)
    if fech2103 in MX_holiday_list:
        MX_holiday_list.pop(fech2103)
    fech1509 = date(now.year,9,15)
    if fech1509 in MX_holiday_list:
        MX_holiday_list.pop(fech1509)
    start_date_ = start_date
    end_date_ = end_date
    import numpy as np
    # subtipo_siniestro_2 = 1 revisión(horas) 2 indemnización (dias)
    #Business duration can be 'day', 'hour', 'min', 'sec'
    #si unit_hour es day then only cunt days not hours time        
    # ------------------------
    if (auto_siniester.tipo_siniestro == 20 and auto_siniester.subtipo_siniestro_1 ==4) or  (auto_siniester.subtipo_siniestro_2 ==2):        
        unit_hour='day'
        try:
            days_ant = businessDuration(
            
                startdate=start_date,
                enddate=end_date,
                # starttime=biz_open_time,
                # endtime=biz_close_time,                
                holidaylist=MX_holiday_list,
                unit=unit_hour
            )
            if days_ant >0:                
                dias = str(int(days_ant)) +' Días'
                val_semaforo = int(days_ant)
            else:                
                dias = '0 Días'
                val_semaforo = 0
        except Exception as ers:
            print('excepton ', ers)
            dias = '0 Días'
            val_semaforo = 0
    elif (auto_siniester.tipo_siniestro ==20 and auto_siniester.subtipo_siniestro_1==1) or (auto_siniester.tipo_siniestro ==20 and auto_siniester.subtipo_siniestro_1 ==2) or (auto_siniester.tipo_siniestro ==20 and auto_siniester.subtipo_siniestro_1==3) or (auto_siniester.tipo_siniestro ==10 and auto_siniester.subtipo_siniestro_1 ==5) or auto_siniester.subtipo_siniestro_2 ==1 or auto_siniester.tipo_siniestro ==19:
        unit_hour='hour'
        try:
            days_ant = businessDuration(
            
                startdate=start_date,
                enddate=end_date,
                starttime=biz_open_time,
                endtime=biz_close_time,                
                holidaylist=MX_holiday_list,
                unit=unit_hour
            )
            try:
                daterange_v=[]
                daterange_s=[]
                inicio = start_date
                fin = end_date
                lista_fechas = [(inicio + timedelta(days=d)).strftime("%Y-%m-%d %H:%M:%S") for d in range((end_date - start_date).days + 1)] 
                for p in lista_fechas:
                    o = datetime.strptime(p, "%Y-%m-%d %H:%M:%S")
                    saber = datetime.strftime(o, "%H:%M:%S")
                    hora1 = "15:00:00"
                    o2 = datetime.strptime(hora1,"%H:%M:%S")
                    o1 = datetime.strptime(saber,"%H:%M:%S")
                    if o1 > o2:
                        print('-hora menr a 15:00:00-',saber,o2)
                    else:
                        if o.weekday() == 4:#viernes
                            daterange_v.append(o)
                            if not o in MX_holiday_list:
                                days_ant = days_ant-2
                            else:
                                print('existe en mxh',o,MX_holiday_list)
                        else:#no es viernes
                            daterange_s.append(o)
            except Exception as r:
                print('errorrrrr lista fechas viernes',r)
            if days_ant >0:                
                dias = str(int(days_ant)) +' Horas'
                val_semaforo = int(days_ant)
            else:                
                dias = '0 Horas'
                val_semaforo = 0
        except Exception as ers:
            print('22err ', ers)
            dias = '0 Días'
            val_semaforo = 0
    else:
        unit_hour='day'
        try:
            days_ant = businessDuration(
            
                startdate=start_date,
                enddate=end_date,
                # starttime=biz_open_time,
                # endtime=biz_close_time,                
                holidaylist=MX_holiday_list,
                unit=unit_hour
            )
            if days_ant >0:                
                dias = str(int(days_ant)) +str(' Días')
                val_semaforo = int(days_ant)
            else:                
                dias = 0 +str(' Días')
                val_semaforo = 0
        except Exception as ers:
            print('excepto2n ', ers)
            dias ='0 Días'
            val_semaforo = 0
    return val_semaforo,dias
    # return businessDuration(startdate=start_date,enddate=end_date,starttime=biz_open_time,endtime=biz_close_time,holidaylist=MX_holiday_list,unit=unit_hour)

def antiguedad_dias_promesa(obj):
    today = date.today()
    a = arrow.get(today)
    a_ok = a
    aux_date = obj.promise_date
    b = arrow.get(aux_date)
    b_ok=b
    antiguedad = (a-b).days
    antiguedad = int(antiguedad)+1
    # return antiguedad
    ahora = datetime.now()
    futuro =b
    diferencia = a-b
    legible = obtener_tiempo_transcurrido(diferencia.total_seconds())
    if b > a:
        b = a
        a= arrow.get(obj.promise_date)
    start_date_ = b
    end_date_ = a
    start_date = pd.to_datetime(str(start_date_).split('.')[0] , utc = True)
    #Start date must be in standard python datetime format
    end_date =  pd.to_datetime(str(end_date_).split('.')[0], utc = True)
    weekend_list = [3,7]
    MX_holiday_list = holidays.Mexico(years=a.year)        
    fechaE = date(a.year, 1, 2)
    if fechaE in MX_holiday_list:
        MX_holiday_list.pop(fechaE)
    fechaReyes = date(a.year, 1, 6)
    if fechaReyes in MX_holiday_list:
        MX_holiday_list.pop(fechaReyes)
    fech2103 = date(a.year,3,21)
    if fech2103 in MX_holiday_list:
        MX_holiday_list.pop(fech2103)
    fech1509 = date(a.year,9,15)
    if fech1509 in MX_holiday_list:
        MX_holiday_list.pop(fech1509)
    unit_hour='day'
    try:
        days_ant = businessDuration(            
            startdate=start_date,
            enddate=end_date,              
            holidaylist=MX_holiday_list,
            unit=unit_hour
        )
        if days_ant:
            if b_ok > a_ok:
                dias = str(int(days_ant)*-1)+' Días'
                val_semaforo = int(days_ant)*-1
            else:
                dias = str(int(days_ant))+' Días'
                val_semaforo = int(days_ant)
        else:
            return 0,0
    except Exception as ers:
        print('excepton2 ', ers)
        dias = str(int(legible))+' Días'
        val_semaforo = int(legible)
    return val_semaforo,dias
def obtener_tiempo_transcurrido(segundos):
    dias = int(segundos / 60 / 60 / 24)
    segundos -= dias * 60 * 60 * 24
    horas = int(segundos / 60 / 60)
    segundos -= horas*60*60
    minutos = int(segundos/60)
    segundos -= minutos*60
    val_semaforo = int(dias)
    dias = int(dias)
    return dias
def checkStatusPolicy(request):
    switcher = {
        1: "En trámite",
        2: "OT Cancelada",
        4: "Precancelada",
        10: "Por iniciar",
        11: "Cancelada",
        12: "Renovada",
        13: "Vencida",
        14: "Vigente",
        15: "No Renovada",
        16: "Siniestrada",
    }
    return switcher.get(request, "Sin estatus")


# nueva función excel stadistica
def _to_bool(value):
    if isinstance(value, bool):
        return value
    if isinstance(value, (int, float)):
        return bool(value)
    if value is None:
        return False
    s = str(value).strip().lower()
    return s in ("1", "true", "t", "yes", "y", "si", "sí")

def _parse_status(value):
    """
    Acepta lista, str "1,2,3" o número. Devuelve lista de ints.
    """
    if value is None or value == "":
        return []
    if isinstance(value, list):
        out = []
        for v in value:
            try:
                out.append(int(v))
            except Exception:
                pass
        return out
    try:
        # "1,2,3" o "1 2 3"
        parts = re.split(r"[,\s]+", str(value).strip())
        out = []
        for p in parts:
            if p == "":
                continue
            try:
                out.append(int(p))
            except Exception:
                pass
        if out:
            return out
        # número suelto
        return [int(value)]
    except Exception:
        return []

def _parse_dt(value, default_dt=None):
    """
    Intenta múltiples formatos de fecha. Si no puede, devuelve default_dt o now().
    """
    if isinstance(value, datetime):
        return value
    if value is None or value == "":
        return default_dt or datetime.today()
    s = str(value).strip()
    fmts = [
        "%d/%m/%Y %H:%M:%S",
        "%m/%d/%Y %H:%M:%S",
        "%Y-%m-%d %H:%M:%S",
        "%d/%m/%Y",
        "%m/%d/%Y",
        "%Y-%m-%d",
    ]
    for f in fmts:
        try:
            dt = datetime.strptime(s, f)
            # Si el formato era solo fecha, asegura 00:00:00
            if "H" not in f:
                dt = dt.replace(hour=0, minute=0, second=0)
            return dt
        except Exception:
            continue
    return default_dt or datetime.today()


def to_pct(num, den):
    num = safe_value(num)
    den = safe_value(den)
    return (num * 100.0 / den) if den else 0.0
def parse_status_list(v):
    """
    Acepta: 0, [], [1,2], "1,2"
    Devuelve lista de enteros; lista vacía implica 'por defecto'.
    """
    if v in (None, '', 0, '0'):
        return []
    if isinstance(v, list):
        try:
            return [int(x) for x in v]
        except Exception:
            return []
    if isinstance(v, int):
        return [v]
    if isinstance(v, (str,)):
        parts = [p.strip() for p in v.split(',') if p.strip()]
        try:
            return [int(p) for p in parts]
        except Exception:
            return []
    return []

from rest_framework import status as drf_status
def _build_date_filters(period, since_dt, until_dt):
    """
    Devuelve dict con listas de Q() por dataset para un periodo dado.
    """
    if period == 1:  # Vigencia
        return {
            'p': [Q(start_of_validity__gte=since_dt), Q(start_of_validity__lte=until_dt)],
            'f': [Q(start_of_validity__gte=since_dt), Q(start_of_validity__lte=until_dt)],
            'r': [Q(fecha_inicio__gte=since_dt), Q(fecha_inicio__lte=until_dt)],
            'e': [Q(init_date__gte=since_dt), Q(init_date__lte=until_dt)],
        }
    if period == 2:  # Emisión / Creación
        return {
            'p': [Q(emision_date__gte=since_dt), Q(emision_date__lte=until_dt)],  # fallback a created_at
            'f': [Q(created_at__gte=since_dt), Q(created_at__lte=until_dt)],
            'r': [Q(created_at__gte=since_dt), Q(created_at__lte=until_dt)],
            'e': [Q(created_at__gte=since_dt), Q(created_at__lte=until_dt)],
        }
    if period == 3:  # Pago (solo recibos)
        return {
            'p': [], 'f': [],
            'r': [Q(pay_date__gte=since_dt), Q(pay_date__lte=until_dt)],
            'e': [],
        }
    raise ValueError('period debe ser 1, 2 o 3')

def _build_datasets(org_name, date_filters, period, statusP, statusF, statusE,
                    polizasAdd, fianzasAdd, recibosAdd, endososAdd,
                    fallback_since=None, fallback_until=None):
    """
    Construye los QuerySets por dataset para un periodo.
    `fallback_since/until` se usan solo para period==2 cuando emision_date no exista.
    """
    ds = {'p': None, 'f': None, 'r': None, 'e': None}

    if polizasAdd:
        try:
            qs = (Polizas.objects.filter(org_name=org_name)
                  .exclude(status=0)
                  .exclude(document_type__in=[7, 8, 6]))
            if date_filters['p']:
                try:
                    qs = apply_filters(qs, date_filters['p'])
                except FieldError:
                    # Fallback si no existe emision_date:
                    if fallback_since is not None and fallback_until is not None:
                        qs = apply_filters(qs, [Q(created_at__gte=fallback_since),
                                                Q(created_at__lte=fallback_until)])
            if statusP:
                qs = qs.filter(status__in=statusP)
            ds['p'] = qs
        except Exception:
            ds['p'] = Polizas.objects.none()

    if fianzasAdd:
        try:
            qs = (Polizas.objects.filter(org_name=org_name, document_type__in=[7, 8])
                  .exclude(status=0))
            if date_filters['f']:
                qs = apply_filters(qs, date_filters['f'])
            if statusF:
                qs = qs.filter(status__in=statusF)
            ds['f'] = qs
        except Exception:
            ds['f'] = Polizas.objects.none()

    if recibosAdd:
        try:
            qs = (Recibos.objects.filter(org_name=org_name)
                  .exclude(status__in=[3, 4, 0, 2, 7, 8, 9])
                  .exclude(receipt_type=2))
            if date_filters['r']:
                qs = apply_filters(qs, date_filters['r'])
            qs = qs.filter(Q(poliza__status__in=statusP) | Q(endorsement__status__in=statusE))
            ds['r'] = qs
        except Exception:
            ds['r'] = Recibos.objects.none()

    if endososAdd:
        try:
            qs = (Endorsement.objects.filter(org_name=org_name)
                  .exclude(status=0)
                  .filter(policy__status__in=statusP)
                  .filter(status__in=statusE))
            if date_filters['e']:
                qs = apply_filters(qs, date_filters['e'])
            ds['e'] = qs
        except Exception:
            ds['e'] = Endorsement.objects.none()

    return ds


def _apply_profile_restrictions(request, org_name, ds1, ds2):
    """
    Aplica filtros de seguridad getDataForPerfilRestricted a ambos periodos.
    """
    try:
        dataToFilter = getDataForPerfilRestricted(request, org_name)
    except Exception:
        dataToFilter = {}

    if not dataToFilter:
        return ds1, ds2

    polizasCl = Polizas.objects.filter(document_type__in=[1, 3, 11, 7, 8, 12, 6, 4], org_name=org_name)
    polizasToF = Polizas.objects.filter(document_type__in=[1, 3, 11, 7, 8], org_name=org_name)

    # Contratantes
    if dataToFilter.get('ccpr'):
        polizasToF = polizasToF.filter(contractor__in=list(dataToFilter.get('ccpr')))
    if dataToFilter.get('cgpr'):
        polizasToF = polizasToF.filter(contractor__group__in=list(dataToFilter.get('cgpr')))
    if dataToFilter.get('ccepr'):
        polizasToF = polizasToF.filter(contractor__cellule__in=list(dataToFilter.get('ccepr')))
    if dataToFilter.get('crpr'):
        polizasToF = polizasToF.filter(contractor__vendor__in=list(dataToFilter.get('crpr')))
    if dataToFilter.get('cspr'):
        polizasToF = polizasToF.filter(contractor__sucursal__in=list(dataToFilter.get('cspr')))

    # Pólizas
    if dataToFilter.get('pppr'):
        polizasToF = polizasToF.filter(pk__in=list(dataToFilter.get('pppr')))
    if dataToFilter.get('pgpr'):
        polizasToF = polizasToF.filter(contractor__group__in=list(dataToFilter.get('pgpr')))
    if dataToFilter.get('pcepr'):
        polizasToF = polizasToF.filter(celula__in=list(dataToFilter.get('pcepr')))
    if dataToFilter.get('prpr'):
        polizasToF = polizasToF.filter(ref_policy__referenciador__in=list(dataToFilter.get('prpr')))
    if dataToFilter.get('pspr'):
        polizasToF = polizasToF.filter(sucursal__in=list(dataToFilter.get('pspr')))
    if dataToFilter.get('papr'):
        polizasToF = polizasToF.filter(groupinglevel__in=list(dataToFilter.get('papr')))
    if dataToFilter.get('pcapr'):
        polizasToF = polizasToF.filter(clave__in=list(dataToFilter.get('pcapr')))
    if dataToFilter.get('psrpr'):
        polizasToF = polizasToF.filter(subramo__subramo_code__in=list(dataToFilter.get('psrpr')))
    if dataToFilter.get('paspr'):
        polizasToF = polizasToF.filter(aseguradora__in=list(dataToFilter.get('paspr')))
    if dataToFilter.get('pstpr'):
        polizasToF = polizasToF.filter(status__in=list(dataToFilter.get('pstpr')))

    polizasCT = polizasCl.filter(document_type=12, parent__in=list(polizasToF))
    polizasGT = polizasCl.filter(document_type=6, parent__parent__parent__in=list(polizasToF))
    polizasFin_ids = list(polizasToF.values_list('pk', flat=True)) \
        + list(polizasCT.values_list('pk', flat=True)) \
        + list(polizasGT.values_list('pk', flat=True))

    def _restrict(ds):
        if ds.get('p') is not None:
            ds['p'] = ds['p'].filter(pk__in=polizasFin_ids)
        if ds.get('f') is not None:
            ds['f'] = ds['f'].filter(pk__in=polizasFin_ids)
        if ds.get('r') is not None:
            ds['r'] = ds['r'].filter(poliza__in=polizasFin_ids)
        if ds.get('e') is not None:
            ds['e'] = ds['e'].filter(policy__in=polizasFin_ids)
        return ds

    return _restrict(ds1), _restrict(ds2)


def _aggregate_by_group(ds, groupBy):
    """
    Aplica las agregaciones por groupBy para un conjunto de datasets.
    Devuelve un dict con las mismas llaves que GetReportStadistics.
    """
    rslts = {}

    # 1..5: usar GROUP_MAP + aggregate_block
    if groupBy in (1, 2, 3, 4, 5):
        if ds.get('p') is not None:
            rslts['resultsOKP'] = aggregate_block(ds['p'], 'p', groupBy)
        if ds.get('f') is not None:
            rslts['resultsOKF'] = aggregate_block(ds['f'], 'f', groupBy)
        if ds.get('r') is not None:
            rslts['resultsOKR'] = aggregate_block(ds['r'], 'r', groupBy)
        if ds.get('e') is not None:
            rslts['resultsOKE'] = aggregate_block(ds['e'], 'e', groupBy)

        # Compat de groupBy 3 (llaves duplicadas con sufijo J como en tu front)
        if groupBy == 3:
            if ds.get('p') is not None:
                rslts['resultsOKPJ'] = aggregate_block(ds['p'], 'p', groupBy)
            if ds.get('f') is not None:
                rslts['resultsOKFJ'] = aggregate_block(ds['f'], 'f', groupBy)
            if ds.get('r') is not None:
                rslts['resultsOKRJ'] = aggregate_block(ds['r'], 'r', groupBy)
            if ds.get('e') is not None:
                rslts['resultsOKEJ'] = aggregate_block(ds['e'], 'e', groupBy)
            # FR/FRJ vacíos como en original
            rslts['resultsFR'] = []
            rslts['resultsFRJ'] = []

        return rslts

    # 6: Moneda
    if groupBy == 6:
        if ds.get('p') is not None:
            cur = _agg_currency_block(ds['p'], 'f_currency', 'p_neta', 'p_total', 'comision')
            rslts['resultsOKP']  = cur[""]
            rslts['resultsOKPD'] = cur["D"]
            rslts['resultsOKPU'] = cur["U"]
            rslts['resultsOKPE'] = cur["E"]
        if ds.get('f') is not None:
            cur = _agg_currency_block(ds['f'], 'f_currency', 'p_neta', 'p_total', 'comision')
            rslts['resultsOKF']  = cur[""]
            rslts['resultsOKFD'] = cur["D"]
            rslts['resultsOKFU'] = cur["U"]
            rslts['resultsOKFE'] = cur["E"]
        if ds.get('r') is not None:
            cur = _agg_currency_block(ds['r'], 'poliza__f_currency', 'prima_neta', 'prima_total', 'comision')
            rslts['resultsOKR']  = cur[""]
            rslts['resultsOKRD'] = cur["D"]
            rslts['resultsOKRU'] = cur["U"]
            rslts['resultsOKRE'] = cur["E"]
        if ds.get('e') is not None:
            cur = _agg_currency_block(ds['e'], 'policy__f_currency', 'p_neta', 'p_total', 'comision')
            rslts['resultsOKE']  = cur[""]
            rslts['resultsOKED'] = cur["D"]
            rslts['resultsOKEU'] = cur["U"]
            rslts['resultsOKEE'] = cur["E"]
        return rslts

    # 7: Sucursal
    if groupBy == 7:
        if ds.get('p') is not None:
            rslts.update(_agg_branch_block('p', ds['p']))
        if ds.get('f') is not None:
            rslts.update(_agg_branch_block('f', ds['f']))
        if ds.get('r') is not None:
            rslts.update(_agg_branch_block('r', ds['r']))
        if ds.get('e') is not None:
            rslts.update(_agg_branch_block('e', ds['e']))
        return rslts

    return rslts

def _rows_to_percentages(rows, ds, groupBy):
    """Convierte una lista de filas agregadas en labels + %N/%T/%C."""
    labels, pctN, pctT, pctC = [], [], [], []
    if not rows:
        return labels, pctN, pctT, pctC

    label_field = _LABEL_FIELD[groupBy][ds]
    count_field = _COUNT_FIELD.get(groupBy, {}).get(ds)  # puede no existir (p.ej. gby 6)

    net_f, tot_f, com_f = _SUM_FIELDS[ds]

    # Denominadores
    net_sum = 0.0
    tot_sum = 0.0
    com_sum = 0.0
    filtered = []

    for r in rows:
        # si hay campo de conteo y es 0, se omite
        if count_field:
            cval = safe_value(r.get(count_field))
            if not cval:
                continue

        n = safe_value(r.get(net_f))
        t = safe_value(r.get(tot_f))
        c = safe_value(r.get(com_f))

        filtered.append(r)
        net_sum += n
        tot_sum += t
        com_sum += c

    # Evita división por cero
    for r in filtered:
        # labels.append(str(r.get(label_field)))
        base_label=re.sub(r"[^A-Za-z0-9\s]", "", str(r.get(label_field, ""))).strip()
        currency = str(r.get("f_currency", ""))  # obtiene f_currency si existe
        if currency:
            if currency=='1':
                currency='Pesos'
            if currency=='2':
                currency='Dólar'
            if currency=='3':
                currency='UDI'
            if currency=='4':
                currency='Euro'
            label = base_label
        else:
            label = base_label
        labels.append(label)
        n = safe_value(r.get(net_f))
        t = safe_value(r.get(tot_f))
        c = safe_value(r.get(com_f))
        pctN.append(safe_div(n, net_sum, factor=100.0))
        pctT.append(safe_div(t, tot_sum, factor=100.0))
        pctC.append(safe_div(c, com_sum, factor=100.0))

    return labels, pctN, pctT, pctC


def _currency_block_to_percentages(period_results, ds, groupBy):
    """Construye labels y porcentajes para groupBy==6 (monedas)."""
    labels, rawN, rawT, rawC = [], [], [], []
    net_f, tot_f, com_f = _SUM_FIELDS[ds]
    label_field = _LABEL_FIELD[groupBy][ds]

    for key in _AGG_CURR_KEYS[ds]:
        rows = period_results.get(key, [])
        if not rows:
            continue
        # Normalmente 1 fila por divisa
        for r in rows:
            base_label = str(r.get(label_field))
            currency = str(r.get("f_currency", ""))  # obtiene f_currency si existe
            if currency:
                if currency=='1':
                    currency='Pesos'
                if currency=='2':
                    currency='Dólar'
                if currency=='3':
                    currency='UDI'
                if currency=='4':
                    currency='Euro'
                label = "{} ({})".format(base_label, currency)
            else:
                label = base_label
            rawN.append(safe_value(r.get(net_f)))
            rawT.append(safe_value(r.get(tot_f)))
            rawC.append(safe_value(r.get(com_f)))

    denN = sum(rawN)
    denT = sum(rawT)
    denC = sum(rawC)

    pctN = [safe_div(v, denN, factor=100.0) for v in rawN]
    pctT = [safe_div(v, denT, factor=100.0) for v in rawT]
    pctC = [safe_div(v, denC, factor=100.0) for v in rawC]
    return labels, pctN, pctT, pctC


def _period_arrays(period_results, ds, groupBy):
    """Devuelve (labels, %N, %T, %C) del periodo para un dataset y groupBy."""
    if groupBy == 6:
        return _currency_block_to_percentages(period_results, ds, groupBy)
    # 1..5 y 7 usan el bloque principal
    rows = period_results.get(_AGG_KEY[ds], [])
    return _rows_to_percentages(rows, ds, groupBy)


def aggregate_block(qs, dataset_key, group_by):
    """
    Genera la lista agregada por dataset (p/f/r/e) y group_by (1..5).
    Añade comision_pct con división segura.
    """
    if group_by not in GROUP_MAP or dataset_key not in GROUP_MAP[group_by]:
        return []

    group_field, count_field = GROUP_MAP[group_by][dataset_key]

    # Campos de suma según dataset
    if dataset_key in ('p', 'f', 'e'):
        sum_neta = 'p_neta'
        sum_total = 'p_total'
        sum_comm = 'comision'
        if dataset_key=='e':
            base = qs.values(group_field,'policy__f_currency') \
                 .annotate(Count(count_field)) \
                 .annotate(Sum(sum_neta)) \
                 .annotate(Sum(sum_total)) \
                 .annotate(Sum(sum_comm)) \
                 .order_by('policy__f_currency', group_field) 
        else:
            base = qs.values(group_field,'f_currency') \
                 .annotate(Count(count_field)) \
                 .annotate(Sum(sum_neta)) \
                 .annotate(Sum(sum_total)) \
                 .annotate(Sum(sum_comm)) \
                 .order_by('f_currency', group_field) 
        out = []
        for row in base:
            p_neta_sum = safe_value(row.get(sum_neta + '__sum'))
            p_total_sum = safe_value(row.get(sum_total + '__sum'))
            com_sum = safe_value(row.get(sum_comm + '__sum'))

            if dataset_key=='e':
                currency=row.get("policy__f_currency")
                fcurrency=row.get("policy__f_currency")
            else:
                currency=row.get("f_currency")
                fcurrency=row.get("f_currency")
            if currency==1:
                currency='Pesos'
            if currency==2:
                currency='Dólar'
            if currency==3:
                currency='UDI'
            if currency==4:
                currency='Euro'
            field_label = "{}_{}".format(row.get(group_field), currency)

            item = {
                group_field: field_label,
                "f_currency":fcurrency,
                count_field + '__count': safe_value(row.get(count_field + '__count')),
                sum_neta + '__sum': p_neta_sum,
                sum_total + '__sum': p_total_sum,
                sum_comm + '__sum': com_sum,
                # % comisión sobre neta (puedes cambiar el denominador si prefieres total)
                'comision_pct': safe_div(com_sum, p_neta_sum, factor=100.0)
            }
            out.append(item)
        return out

    elif dataset_key == 'r':
        sum_neta = 'prima_neta'
        sum_total = 'prima_total'
        sum_comm = 'comision'
        base = qs.values(group_field,'poliza__f_currency') \
                 .annotate(Count(count_field)) \
                 .annotate(Sum(sum_neta)) \
                 .annotate(Sum(sum_total)) \
                 .annotate(Sum(sum_comm)) \
                 .order_by('poliza__f_currency', group_field) 
        out = []
        for row in base:
            pn = safe_value(row.get(sum_neta + '__sum'))
            pt = safe_value(row.get(sum_total + '__sum'))
            cm = safe_value(row.get(sum_comm + '__sum'))

            currency=row.get("poliza__f_currency")
            if currency==1:
                currency='Pesos'
            if currency==2:
                currency='Dólar'
            if currency==3:
                currency='UDI'
            if currency==4:
                currency='Euro'
            field_label = "{}_{}".format(row.get(group_field), currency)
            item = {
                group_field: field_label,
                "f_currency": row.get("poliza__f_currency"),
                count_field + '__count': safe_value(row.get(count_field + '__count')),
                sum_neta + '__sum': pn,
                sum_total + '__sum': pt,
                sum_comm + '__sum': cm,
                'comision_pct': safe_div(cm, pn, factor=100.0)
            }
            out.append(item)
        return out

    return []


GROUP_MAP = {
    # 1: por clave (agente / clave)
    1: {
        'p': ('clave__clave', 'clave__id'),
        'f': ('clave__clave', 'clave__id'),
        'r': ('poliza__clave__clave', 'poliza__clave__id'),
        'e': ('policy__clave__clave', 'policy__clave__id')
    },
    # 2: por aseguradora
    2: {
        'p': ('aseguradora__compania', 'aseguradora__id'),
        'f': ('aseguradora__compania', 'aseguradora__id'),
        'r': ('poliza__aseguradora__compania', 'poliza__aseguradora__id'),
        'e': ('policy__aseguradora__compania', 'policy__aseguradora__id')
    },
    # 3: por contratante
    3: {
        'p': ('contractor__full_name', 'contractor__id'),
        'f': ('contractor__full_name', 'contractor__id'),
        'r': ('poliza__contractor__full_name', 'poliza__contractor__id'),
        'e': ('policy__contractor__full_name', 'policy__contractor__id')
    },
    # 4: por ramo
    4: {
        'p': ('ramo__ramo_name', 'ramo__ramo_code'),
        'f': ('ramo__ramo_name', 'ramo__ramo_code'),
        'r': ('poliza__ramo__ramo_name', 'poliza__ramo__ramo_code'),
        'e': ('policy__ramo__ramo_name', 'policy__ramo__ramo_code')
    },
    # 5: por subramo
    5: {
        'p': ('subramo__subramo_name', 'subramo__subramo_code'),
        'f': ('subramo__subramo_name', 'subramo__subramo_code'),
        'r': ('poliza__subramo__subramo_name', 'poliza__subramo__subramo_code'),
        'e': ('policy__subramo__subramo_name', 'policy__subramo__subramo_code')
    }
}

def _choose_main_dataset(present_keys, flags_order=('p', 'f', 'r', 'e')):
    """Elige el dataset principal según flags disponibles y presencia de bloques."""
    for ds in flags_order:
        key = _AGG_KEY.get(ds)
        if key and key in present_keys:
            return ds
        # groupBy 6: si hay cualquiera de los 4 bloques de moneda
        if ds in _AGG_CURR_KEYS and any(k in present_keys for k in _AGG_CURR_KEYS[ds]):
            return ds
    # por defecto pólizas
    return 'p'


from django.db.models.functions import Coalesce

ZERO_DEC = Value(0, output_field=DecimalField(max_digits=20, decimal_places=2))
ZERO_INT = Value(0, output_field=IntegerField())

def to_pct(num, den):
    if not den or den == 0:
        return 0
    try:
        return (float(num) * 100.0) / float(den)
    except Exception:
        return 0

def safe_values_sum_count(qs, group_fields, id_field_to_count, sum_fields, order_by):
    """
    Agrupa garantizando 0s con Coalesce y excluyendo claves nulas/vacías.
    Retorna list(...) para evaluar de inmediato y evitar sorpresas luego.
    """
    if qs is None:
        return []
    # Excluir claves nulas/vacías (para todas las claves de agrupación tipo texto)
    q_exclude = Q()
    for gf in group_fields:
        q_exclude |= Q(**{gf + "__isnull": True}) | Q(**{gf: ""})
    qs = qs.exclude(q_exclude)

    # Anotaciones seguras
    annotations = {
        "{}__count".format(id_field_to_count): Coalesce(Count(id_field_to_count), ZERO_INT),
    }
    for f in sum_fields:
        annotations["{}__sum".format(f)] = Coalesce(Sum(f), ZERO_DEC)

    return list(
        qs.values(*group_fields)
          .annotate(**annotations)
          .order_by(order_by)
    )


_LABEL_FIELD = {
    1: {'p': 'clave__clave',                'f': 'clave__clave',
        'r': 'poliza__clave__clave',        'e': 'policy__clave__clave'},
    2: {'p': 'aseguradora__compania',       'f': 'aseguradora__compania',
        'r': 'poliza__aseguradora__compania','e': 'policy__aseguradora__compania'},
    3: {'p': 'contractor__full_name',       'f': 'contractor__full_name',
        'r': 'poliza__contractor__full_name','e': 'policy__contractor__full_name'},
    4: {'p': 'ramo__ramo_name',             'f': 'ramo__ramo_name',
        'r': 'poliza__ramo__ramo_name',     'e': 'policy__ramo__ramo_name'},
    5: {'p': 'subramo__subramo_name',       'f': 'subramo__subramo_name',
        'r': 'poliza__subramo__subramo_name','e': 'policy__subramo__subramo_name'},
    6: {'p': 'f_currency',                  'f': 'f_currency',
        'r': 'poliza__f_currency',          'e': 'policy__f_currency'},
    7: {'p': 'sucursal__sucursal_name',     'f': 'contractor__sucursal__sucursal_name',
        'r': 'poliza__sucursal__sucursal_name', 'e': 'policy__sucursal__sucursal_name'},
}

_COUNT_FIELD = {
    1: {'p': 'clave__id__count',                'f': 'clave__id__count',
        'r': 'poliza__clave__id__count',        'e': 'policy__clave__id__count'},
    2: {'p': 'aseguradora__id__count',          'f': 'aseguradora__id__count',
        'r': 'poliza__aseguradora__id__count',  'e': 'policy__aseguradora__id__count'},
    3: {'p': 'contractor__id__count',           'f': 'contractor__id__count',
        'r': 'poliza__contractor__id__count',   'e': 'policy__contractor__id__count'},
    4: {'p': 'ramo__ramo_code__count',          'f': 'ramo__ramo_code__count',
        'r': 'poliza__ramo__ramo_code__count',  'e': 'policy__ramo__ramo_code__count'},
    5: {'p': 'subramo__subramo_code__count',    'f': 'subramo__subramo_code__count',
        'r': 'poliza__subramo__subramo_code__count', 'e': 'policy__subramo__subramo_code__count'},
    7: {'p': 'sucursal__id__count',             'f': 'contractor__sucursal__id__count',
        'r': 'poliza__sucursal__id__count',     'e': 'policy__sucursal__id__count'},
    # groupBy 6 no usa count-field (es por moneda y viene 1 fila por divisa)
}

# Campos de suma por dataset
_SUM_FIELDS = {
    'p': ('p_neta__sum', 'p_total__sum', 'comision__sum'),
    'f': ('p_neta__sum', 'p_total__sum', 'comision__sum'),
    'r': ('prima_neta__sum', 'prima_total__sum', 'comision__sum'),
    'e': ('p_neta__sum', 'p_total__sum', 'comision__sum'),
}

# Clave del bloque agregado "principal" por dataset (groupBy 1..5 y 7)
_AGG_KEY = {'p': 'resultsOKP', 'f': 'resultsOKF', 'r': 'resultsOKR', 'e': 'resultsOKE'}

# Claves de moneda (groupBy 6)
_AGG_CURR_KEYS = {
    'p': ('resultsOKP',  'resultsOKPD', 'resultsOKPU', 'resultsOKPE'),
    'f': ('resultsOKF',  'resultsOKFD', 'resultsOKFU', 'resultsOKFE'),
    'r': ('resultsOKR',  'resultsOKRD', 'resultsOKRU', 'resultsOKRE'),
    'e': ('resultsOKE',  'resultsOKED', 'resultsOKEU', 'resultsOKEE'),
}
def _agg_currency_block(qs, field_name, net_field, total_field, comm_field):
    """
    Devuelve dict con llaves esperadas por tu front para groupBy==6:
    P -> resultsOKP, resultsOKPD, resultsOKPU, resultsOKPE
    F -> resultsOKF, resultsOKFD, resultsOKFU, resultsOKFE
    R -> resultsOKR, resultsOKRD, resultsOKRU, resultsOKRE
    E -> resultsOKE, resultsOKED, resultsOKEU, resultsOKEE
    """
    out = {}
    if qs is None:
        return out
    # 1: Pesos, 2: Dólar, 3: ???, 4: Euro (como en tu código)
    suffixes = [("", 1), ("D", 2), ("U", 3), ("E", 4)]
    for suf, cur in suffixes:
        rows = list(
            qs.filter(**{field_name: cur})
            .values(field_name)
            .annotate(Count(field_name))
            .annotate(Sum(net_field))
            .annotate(Sum(total_field))
            .annotate(Sum(comm_field))
            .order_by(field_name)
        )
        out[suf] = rows
    return out


def _agg_branch_block(ds_key, qs):
    """
    Agrupación por sucursal (groupBy==7) con las llaves que ya usa tu front.
    """
    if qs is None:
        return {}
    if ds_key == 'p':  # Polizas
        return {
            'resultsOKP': list(qs.values('sucursal__sucursal_name')
                               .annotate(Count('sucursal__id'), Sum('p_neta'), Sum('p_total'), Sum('comision'))
                               .order_by('sucursal__id')),
            'resultsOKPN': list(qs.values('contractor__sucursal__sucursal_name')
                                .annotate(Count('contractor__sucursal__id'), Sum('p_neta'), Sum('p_total'), Sum('comision'))
                                .order_by('contractor__sucursal__id')),
            # Compat: PJ idéntico al N en tu código original
            'resultsOKPJ': list(qs.values('contractor__sucursal__sucursal_name')
                                .annotate(Count('contractor__sucursal__id'), Sum('p_neta'), Sum('p_total'), Sum('comision'))
                                .order_by('contractor__sucursal__id')),
        }
    if ds_key == 'f':  # Fianzas (sobre Polizas con document_type 7/8)
        return {
            'resultsOKF': list(qs.values('contractor__sucursal__sucursal_name')
                               .annotate(Count('contractor__sucursal__id'), Sum('p_neta'), Sum('p_total'), Sum('comision'))
                               .order_by('contractor__sucursal__id')),
            'resultsOKFJ': list(qs.values('contractor__sucursal__sucursal_name')
                                .annotate(Count('contractor__sucursal__id'), Sum('p_neta'), Sum('p_total'), Sum('comision'))
                                .order_by('contractor__sucursal__id')),
        }
    if ds_key == 'r':  # Recibos
        return {
            'resultsOKR': list(qs.values('poliza__sucursal__sucursal_name')
                               .annotate(Count('poliza__sucursal__id'), Sum('prima_neta'), Sum('prima_total'), Sum('comision'))
                               .order_by('poliza__sucursal__id')),
            'resultsOKRN': list(qs.values('poliza__contractor__sucursal__sucursal_name')
                                .annotate(Count('poliza__contractor__sucursal__id'), Sum('prima_neta'), Sum('prima_total'), Sum('comision'))
                                .order_by('poliza__contractor__sucursal__id')),
            'resultsOKRJ': list(qs.values('poliza__contractor__sucursal__sucursal_name')
                                .annotate(Count('poliza__contractor__sucursal__id'), Sum('prima_neta'), Sum('prima_total'), Sum('comision'))
                                .order_by('poliza__contractor__sucursal__id')),
        }
    if ds_key == 'e':  # Endosos
        return {
            'resultsOKE': list(qs.values('policy__sucursal__sucursal_name')
                               .annotate(Count('policy__sucursal__id'), Sum('p_neta'), Sum('p_total'), Sum('comision'))
                               .order_by('policy__sucursal__id')),
            'resultsOKEN': list(qs.values('policy__contractor__sucursal__sucursal_name')
                                .annotate(Count('policy__contractor__sucursal__id'), Sum('p_neta'), Sum('p_total'), Sum('comision'))
                                .order_by('policy__contractor__sucursal__id')),
            'resultsOKEJ': list(qs.values('policy__contractor__sucursal__sucursal_name')
                                .annotate(Count('policy__contractor__sucursal__id'), Sum('p_neta'), Sum('p_total'), Sum('comision'))
                                .order_by('policy__contractor__sucursal__id')),
        }
    return {}


# Reporte prueba Reporte
# ********************
def _build_status_lists(user_status):
    """
    Traduce 'status' del request a listas de estados para P y F.
    """
    if user_status:
        statusP, statusF = [], []
        if 6 in user_status:  # NoRenovada
            statusP.append(15)
        if 5 in user_status:  # PorIniciar
            statusP.append(10)
        if 2 in user_status:  # Renovada
            statusP.append(12); statusF.append(15)
        if 4 in user_status:  # Cancelada
            statusP.append(11); statusF.extend([11, 12])
        if 3 in user_status:  # Vencida
            statusP.append(13)
        if 1 in user_status:  # Vigente
            statusP.append(14); statusF.append(14)
    else:
        statusP = [12, 11, 13, 14]
        statusF = [12, 11, 13, 14, 15]
    statusE = [2, 4]
    return statusP, statusF, statusE

# ---------------------------
from django.utils import timezone
def parse_datetime_multi(value):
    """
    Acepta 'dd/mm/YYYY HH:MM:SS', 'mm/dd/YYYY HH:MM:SS', 'YYYY-mm-dd HH:MM:SS'.
    Devuelve datetime timezone-aware si el proyecto está configurado con TZ.
    """
    if value is None:
        raise ValueError("Fecha requerida.")
    fmts = ("%d/%m/%Y %H:%M:%S", "%m/%d/%Y %H:%M:%S", "%Y-%m-%d %H:%M:%S")
    last_err = None
    for f in fmts:
        try:
            dt = datetime.strptime(value, f)
            if timezone.is_naive(dt):
                try:
                    dt = timezone.make_aware(dt, timezone.get_current_timezone())
                except Exception:
                    # Si el proyecto es naive, retorna naive
                    pass
            return dt
        except Exception as e:
            last_err = e
    raise ValueError("Formato de fecha inválido: %s" % (value,))
def to_bool(v, default=False):
    if isinstance(v, bool):
        return v
    if v in (None, ''):
        return default
    if isinstance(v, (int, float)):
        return bool(v)
    if isinstance(v, (str,)):
        s = v.strip().lower()
        if s in ('1', 'true', 't', 'yes', 'y', 'si', 'sí'):
            return True
        if s in ('0', 'false', 'f', 'no', 'n'):
            return False
    return default

from django.core.exceptions import FieldError
def apply_filters(qs, filters):
    """
    Aplica una lista de Q() a un queryset, sin usar reduce().
    """
    if not filters:
        return qs
    for f in filters:
        qs = qs.filter(f)
    return qs
def safe_div_b(a, b):
    if (
        a is not None and not (isinstance(a, float) and math.isnan(a)) and
        b is not None and not (isinstance(b, float) and math.isnan(b)) and
        b != 0
    ):
        return (a * 100) / b
    return 0
@api_view(['POST'])
@permission_classes((IsAuthenticatedV2, IsOrgMemberV2))
def Service_ReporteEstadistica1Excel(request):
    # -------------------------
    # Primer periodo
    # -------------------------
    org_name = request.GET.get('org')
    if not org_name:
        return Response(
            {'detail': "El parámetro 'org' es requerido en query string (?org=...)."},
            status=drf_status.HTTP_400_BAD_REQUEST
        )
    body = request.data or {}
    valueCom = True
    try:
        valueCom = comisions(request)
    except Exception as ers:
        valueCom =  True
    # Fechas
    try:
        since = parse_datetime_multi(body.get('since'))
        until = parse_datetime_multi(body.get('until'))
        since2 = parse_datetime_multi(body.get('since2'))
        until2 = parse_datetime_multi(body.get('until2'))
    except Exception as e:
        return Response(
            {'detail': 'Fechas inválidas. Formatos soportados: dd/mm/YYYY HH:MM:SS, mm/dd/YYYY HH:MM:SS, YYYY-mm-dd HH:MM:SS',
             'error': str(e)},
            status=drf_status.HTTP_400_BAD_REQUEST
        )
    # Parámetros
    try:
        groupBy = int(body.get('groupBy', 1) or 1)
        period = int(body.get('period', 1) or 1)
    except Exception:
        return Response({'detail': 'groupBy y period deben ser enteros.'}, status=drf_status.HTTP_400_BAD_REQUEST)

    polizasAdd = to_bool(body.get('polizasAdd', True))
    fianzasAdd = to_bool(body.get('fianzasAdd', False))
    recibosAdd = to_bool(body.get('recibosAdd', False))
    endososAdd = to_bool(body.get('endososAdd', False))
    user_status = parse_status_list(body.get('status'))

    # Filtros de periodo
    date_filters_p, date_filters_f, date_filters_r, date_filters_e = [], [], [], []
    date_filters_p2, date_filters_f2, date_filters_r2, date_filters_e2 = [], [], [], []
    if period == 1:
        date_filters_p = [Q(start_of_validity__gte=since), Q(start_of_validity__lte=until)]
        date_filters_f = [Q(start_of_validity__gte=since), Q(start_of_validity__lte=until)]
        date_filters_r = [Q(fecha_inicio__gte=since), Q(fecha_inicio__lte=until)]
        date_filters_e = [Q(init_date__gte=since), Q(init_date__lte=until)]
        # periodo 2
        date_filters_p2 = [Q(start_of_validity__gte=since2), Q(start_of_validity__lte=until2)]
        date_filters_f2 = [Q(start_of_validity__gte=since2), Q(start_of_validity__lte=until2)]
        date_filters_r2 = [Q(fecha_inicio__gte=since2), Q(fecha_inicio__lte=until2)]
        date_filters_e2 = [Q(init_date__gte=since2), Q(init_date__lte=until2)]
    elif period == 2:
        # Polizas: intentamos emision_date; si falla, usamos created_at
        date_filters_p = [Q(emision_date__gte=since), Q(emision_date__lte=until)]
        date_filters_f = [Q(created_at__gte=since), Q(created_at__lte=until)]
        date_filters_r = [Q(created_at__gte=since), Q(created_at__lte=until)]
        date_filters_e = [Q(created_at__gte=since), Q(created_at__lte=until)]
        # periodo 2
        date_filters_p2 = [Q(emision_date__gte=since2), Q(emision_date__lte=until2)]
        date_filters_f2 = [Q(created_at__gte=since2), Q(created_at__lte=until2)]
        date_filters_r2 = [Q(created_at__gte=since2), Q(created_at__lte=until2)]
        date_filters_e2 = [Q(created_at__gte=since2), Q(created_at__lte=until2)]
    elif period == 3:
        date_filters_r = [Q(pay_date__gte=since), Q(pay_date__lte=until)]
        date_filters_r2 = [Q(pay_date__gte=since2), Q(pay_date__lte=until2)]
    else:
        return Response({'detail': 'period debe ser 1, 2 o 3.'}, status=drf_status.HTTP_400_BAD_REQUEST)

    # Mapeo de status
    if user_status:
        statusP, statusF = [], []
        if 6 in user_status:  # NoRenovada
            statusP.append(15)
        if 5 in user_status:  # PorIniciar
            statusP.append(10)
        if 2 in user_status:  # Renovada
            statusP.append(12)
            statusF.append(15)
        if 4 in user_status:  # Cancelada
            statusP.append(11)
            statusF.append(11)
            statusF.append(12)
        if 3 in user_status:  # Vencida
            statusP.append(13)
        if 1 in user_status:  # Vigente
            statusP.append(14)
            statusF.append(14)
    else:
        statusP = [12, 11, 13, 14]
        statusF = [12, 11, 13, 14, 15]
    statusE = [2, 4]  # Endosos

    # --------------------------
    # Construcción de QuerySets
    # --------------------------
    # Nota: solo construimos lo que se solicitó (polizasAdd, etc.)
    results_p = None
    results_f = None
    results_r = None
    results_e = None
    # periodo 2
    results_p2 = None
    results_f2 = None
    results_r2 = None
    results_e2 = None

    # Pólizas (document_type != fianzas)
    if polizasAdd:
        try:
            results_p = (Polizas.objects
                         .filter(org_name=org_name)
                         .exclude(status=0)
                         .exclude(document_type__in=[7, 8, 6]))
            # Fechas
            if date_filters_p:
                try:
                    results_p = apply_filters(results_p, date_filters_p)
                except FieldError:
                    # Fallback si emision_date no existe en este modelo
                    results_p = apply_filters(results_p, [Q(created_at__gte=since), Q(created_at__lte=until)])
            # Status
            if statusP:
                results_p = results_p.filter(status__in=statusP)
        except Exception:
            results_p = Polizas.objects.none()
        # periodo 2
        try:
            results_p2 = (Polizas.objects
                         .filter(org_name=org_name)
                         .exclude(status=0)
                         .exclude(document_type__in=[7, 8, 6]))
            # Fechas
            if date_filters_p2:
                try:
                    results_p2 = apply_filters(results_p2, date_filters_p2)
                except FieldError:
                    # Fallback si emision_date no existe en este modelo
                    results_p2 = apply_filters(results_p2, [Q(created_at__gte=since2), Q(created_at__lte=until2)])
            # Status
            if statusP:
                results_p2 = results_p2.filter(status__in=statusP)
        except Exception:
            results_p2 = Polizas.objects.none()

    # Fianzas (Polizas con document_type 7,8)
    if fianzasAdd:
        try:
            results_f = (Polizas.objects
                         .filter(org_name=org_name, document_type__in=[7, 8])
                         .exclude(status=0))
            if date_filters_f:
                results_f = apply_filters(results_f, date_filters_f)
            if statusF:
                results_f = results_f.filter(status__in=statusF)
        except Exception:
            results_f = Polizas.objects.none()
        # periodo 2
        try:
            results_f2 = (Polizas.objects
                         .filter(org_name=org_name, document_type__in=[7, 8])
                         .exclude(status=0))
            if date_filters_f2:
                results_f2 = apply_filters(results_f2, date_filters_f2)
            if statusF:
                results_f2 = results_f2.filter(status__in=statusF)
        except Exception:
            results_f2 = Polizas.objects.none()

    # Recibos
    if recibosAdd:
        try:
            results_r = (Recibos.objects
                         .filter(org_name=org_name)
                         .exclude(status__in=[3, 4, 0, 2, 7, 8, 9])
                         .exclude(receipt_type=2))
            if date_filters_r:
                results_r = apply_filters(results_r, date_filters_r)
            # Filtra por status de póliza o endoso
            results_r = results_r.filter(Q(poliza__status__in=statusP) | Q(endorsement__status__in=statusE))
        except Exception:
            results_r = Recibos.objects.none()

    # Endosos
    if endososAdd:
        try:
            results_e = (Endorsement.objects
                         .filter(org_name=org_name)
                         .exclude(status=0)
                         .filter(policy__status__in=statusP)
                         .filter(status__in=statusE))
            if date_filters_e:
                results_e = apply_filters(results_e, date_filters_e)
        except Exception:
            results_e = Endorsement.objects.none()
        # periodo 2
        try:
            results_e2 = (Endorsement.objects
                         .filter(org_name=org_name)
                         .exclude(status=0)
                         .filter(policy__status__in=statusP)
                         .filter(status__in=statusE))
            if date_filters_e2:
                results_e2 = apply_filters(results_e2, date_filters_e2)
        except Exception:
            results_e2 = Endorsement.objects.none()

    # --------------------------
    # Filtro de seguridad por perfil
    # --------------------------
    try:
        dataToFilter = getDataForPerfilRestricted(request, org_name)
    except Exception:
        dataToFilter = {}

    if dataToFilter:
        polizasCl = Polizas.objects.filter(document_type__in=[1, 3, 11, 7, 8, 12, 6, 4], org_name=org_name)
        polizasToF = Polizas.objects.filter(document_type__in=[1, 3, 11, 7, 8], org_name=org_name)

        # Contratantes
        if dataToFilter.get('ccpr'):
            polizasToF = polizasToF.filter(contractor__in=list(dataToFilter.get('ccpr')))
        if dataToFilter.get('cgpr'):
            polizasToF = polizasToF.filter(contractor__group__in=list(dataToFilter.get('cgpr')))
        if dataToFilter.get('ccepr'):
            polizasToF = polizasToF.filter(contractor__cellule__in=list(dataToFilter.get('ccepr')))
        if dataToFilter.get('crpr'):
            polizasToF = polizasToF.filter(contractor__vendor__in=list(dataToFilter.get('crpr')))
        if dataToFilter.get('cspr'):
            polizasToF = polizasToF.filter(contractor__sucursal__in=list(dataToFilter.get('cspr')))

        # Pólizas
        if dataToFilter.get('pppr'):
            polizasToF = polizasToF.filter(pk__in=list(dataToFilter.get('pppr')))
        if dataToFilter.get('pgpr'):
            polizasToF = polizasToF.filter(contractor__group__in=list(dataToFilter.get('pgpr')))
        if dataToFilter.get('pcepr'):
            polizasToF = polizasToF.filter(celula__in=list(dataToFilter.get('pcepr')))
        if dataToFilter.get('prpr'):
            polizasToF = polizasToF.filter(ref_policy__referenciador__in=list(dataToFilter.get('prpr')))
        if dataToFilter.get('pspr'):
            polizasToF = polizasToF.filter(sucursal__in=list(dataToFilter.get('pspr')))
        if dataToFilter.get('papr'):
            polizasToF = polizasToF.filter(groupinglevel__in=list(dataToFilter.get('papr')))
        if dataToFilter.get('pcapr'):
            polizasToF = polizasToF.filter(clave__in=list(dataToFilter.get('pcapr')))
        if dataToFilter.get('psrpr'):
            polizasToF = polizasToF.filter(subramo__subramo_code__in=list(dataToFilter.get('psrpr')))
        if dataToFilter.get('paspr'):
            polizasToF = polizasToF.filter(aseguradora__in=list(dataToFilter.get('paspr')))
        if dataToFilter.get('pstpr'):
            polizasToF = polizasToF.filter(status__in=list(dataToFilter.get('pstpr')))

        polizasCT = polizasCl.filter(document_type=12, parent__in=list(polizasToF))
        polizasGT = polizasCl.filter(document_type=6, parent__parent__parent__in=list(polizasToF))
        polizasFin_ids = list(polizasToF.values_list('pk', flat=True)) \
            + list(polizasCT.values_list('pk', flat=True)) \
            + list(polizasGT.values_list('pk', flat=True))

        if results_p is not None:
            results_p = results_p.filter(pk__in=polizasFin_ids)
        if results_f is not None:
            results_f = results_f.filter(pk__in=polizasFin_ids)
        if results_r is not None:
            results_r = results_r.filter(poliza__in=polizasFin_ids)
        if results_e is not None:
            results_e = results_e.filter(policy__in=polizasFin_ids)
        # perido 2
        if results_p2 is not None:
            results_p2 = results_p2.filter(pk__in=polizasFin_ids)
        if results_f2 is not None:
            results_f2 = results_f2.filter(pk__in=polizasFin_ids)
        if results_r2 is not None:
            results_r2 = results_r2.filter(poliza__in=polizasFin_ids)
        if results_e2 is not None:
            results_e2 = results_e2.filter(policy__in=polizasFin_ids)

    # --------------------------
    # Agrupaciones
    # --------------------------
    rslts = {}
    agrupacion_periodo_1=[]
    # GroupBy 1..5: genérico por mapeo
    if groupBy in (1, 2, 3, 4, 5):
        if results_p is not None:
            rslts['resultsOKP'] = aggregate_block(results_p, 'p', groupBy)
            data_p_1=rslts['resultsOKP']
            if groupBy==1:#calve de agente
                agrupacion_claves = [d["clave__clave"] for d in data_p_1]
                agrupacion_counts = [d["clave__id__count"] for d in data_p_1]            
            if groupBy==2:#aseguradora
                agrupacion_claves = [re.sub(r"[^A-Za-z0-9\s]", "", str(d.get("aseguradora__compania", ""))).strip() for d in data_p_1]
                agrupacion_counts = [d["aseguradora__id__count"] for d in data_p_1]
            if groupBy==3:#contratante
                agrupacion_claves = [re.sub(r"[^A-Za-z0-9\s]", "", str(d.get("contractor__full_name", ""))).strip() for d in data_p_1]
                agrupacion_counts = [d["contractor__id__count"] for d in data_p_1]
            if groupBy==4:#ramo
                agrupacion_claves = [d["ramo__ramo_name"] for d in data_p_1]
                agrupacion_counts = [d["ramo__ramo_code__count"] for d in data_p_1]
            if groupBy==5:#ramo
                agrupacion_claves = [d["subramo__subramo_name"] for d in data_p_1]
                agrupacion_counts = [d["subramo__subramo_code__count"] for d in data_p_1]
            agrupacion_pneta = [d["p_neta__sum"] for d in data_p_1]
            agrupacion_ptotal = [d["p_total__sum"] for d in data_p_1]
            agrupacion_comision = [d["comision__sum"] for d in data_p_1]
            agrupacion_comision_pct = [d["comision_pct"] for d in data_p_1]
        if results_f is not None:
            rslts['resultsOKF'] = aggregate_block(results_f, 'f', groupBy)
            data_p_1 = rslts['resultsOKF']
            if groupBy==1:#calve de agente
                agrupacion_claves = [d["clave__clave"] for d in data_p_1]
                agrupacion_counts = [d["clave__id__count"] for d in data_p_1]            
            if groupBy==2:#aseguradora
                agrupacion_claves = [re.sub(r"[^A-Za-z0-9\s]", "", str(d.get("aseguradora__compania", ""))).strip() for d in data_p_1]
                agrupacion_counts = [d["aseguradora__id__count"] for d in data_p_1]
            if groupBy==3:#contratante
                agrupacion_claves = [re.sub(r"[^A-Za-z0-9\s]", "", str(d.get("contractor__full_name", ""))).strip() for d in data_p_1]
                agrupacion_counts = [d["contractor__id__count"] for d in data_p_1]
            if groupBy==4:#ramo
                agrupacion_claves = [d["ramo__ramo_name"] for d in data_p_1]
                agrupacion_counts = [d["ramo__ramo_code__count"] for d in data_p_1]
            if groupBy==5:#ramo
                agrupacion_claves = [d["subramo__subramo_name"] for d in data_p_1]
                agrupacion_counts = [d["subramo__subramo_code__count"] for d in data_p_1]
            agrupacion_pneta = [d["p_neta__sum"] for d in data_p_1]
            agrupacion_ptotal = [d["p_total__sum"] for d in data_p_1]
            agrupacion_comision = [d["comision__sum"] for d in data_p_1]
            agrupacion_comision_pct = [d["comision_pct"] for d in data_p_1]
        if results_r is not None:
            rslts['resultsOKR'] = aggregate_block(results_r, 'r', groupBy)
            data_p_1 = rslts['resultsOKR']
            if groupBy==1:#calve de agente
                agrupacion_claves = [d["poliza__clave__clave"] for d in data_p_1]
                agrupacion_counts = [d["poliza__clave__id__count"] for d in data_p_1]            
            if groupBy==2:#aseguradora
                agrupacion_claves =[re.sub(r"[^A-Za-z0-9\s]", "", str(d.get("poliza__aseguradora__compania", ""))).strip() for d in data_p_1]
                agrupacion_counts = [d["poliza__aseguradora__id__count"] for d in data_p_1]
            if groupBy==3:#contratante
                agrupacion_claves = [re.sub(r"[^A-Za-z0-9\s]", "", str(d.get("poliza__contractor__full_name", ""))).strip() for d in data_p_1]
                agrupacion_counts = [d["poliza__contractor__id__count"] for d in data_p_1]
            if groupBy==4:#ramo
                agrupacion_claves = [d["poliza__ramo__ramo_name"] for d in data_p_1]
                agrupacion_counts = [d["poliza__ramo__ramo_code__count"] for d in data_p_1]
            if groupBy==5:#ramo
                agrupacion_claves = [d["poliza__subramo__subramo_name"] for d in data_p_1]
                agrupacion_counts = [d["poliza__subramo__subramo_code__count"] for d in data_p_1]
            agrupacion_pneta = [d["p_neta__sum"] for d in data_p_1]
            agrupacion_ptotal = [d["p_total__sum"] for d in data_p_1]
            agrupacion_comision = [d["comision__sum"] for d in data_p_1]
            agrupacion_comision_pct = [d["comision_pct"] for d in data_p_1]
        if results_e is not None:
            rslts['resultsOKE'] = aggregate_block(results_e, 'e', groupBy)
            data_p_1 = rslts['resultsOKE']
            if groupBy==1:#calve de agente
                agrupacion_claves = [d["policy__clave__clave"] for d in data_p_1]
                agrupacion_counts = [d["policy__clave__id__count"] for d in data_p_1]            
            if groupBy==2:#aseguradora
                agrupacion_claves = [re.sub(r"[^A-Za-z0-9\s]", "", str(d.get("policy__aseguradora__compania", ""))).strip() for d in data_p_1]
                agrupacion_counts = [d["policy__aseguradora__id__count"] for d in data_p_1]
            if groupBy==3:#contratante
                agrupacion_claves = [re.sub(r"[^A-Za-z0-9\s]", "", str(d.get("policy__contractor__full_name", ""))).strip() for d in data_p_1]
                agrupacion_counts = [d["policy__contractor__id__count"] for d in data_p_1]
            if groupBy==4:#ramo
                agrupacion_claves = [d["policy__ramo__ramo_name"] for d in data_p_1]
                agrupacion_counts = [d["policy__ramo__ramo_code__count"] for d in data_p_1]
            if groupBy==5:#ramo
                agrupacion_claves = [d["policy__subramo__subramo_name"] for d in data_p_1]
                agrupacion_counts = [d["policy__subramo__subramo_code__count"] for d in data_p_1]
            agrupacion_pneta = [d["p_neta__sum"] for d in data_p_1]
            agrupacion_ptotal = [d["p_total__sum"] for d in data_p_1]
            agrupacion_comision = [d["comision__sum"] for d in data_p_1]
            agrupacion_comision_pct = [d["comision_pct"] for d in data_p_1]
        # periodo 2
        if results_p2 is not None:
            rslts['resultsOKP_'] = aggregate_block(results_p2, 'p', groupBy)
            data_p = rslts['resultsOKP_']
            if groupBy==1:#calve de agente
                agrupacion_2_claves = [d["clave__clave"] for d in data_p]
                agrupacion_2_counts = [d["clave__id__count"] for d in data_p]            
            if groupBy==2:#aseguradora
                agrupacion_2_claves = [re.sub(r"[^A-Za-z0-9\s]", "", str(d.get("aseguradora__compania", ""))).strip() for d in data_p]
                agrupacion_2_counts = [d["aseguradora__id__count"] for d in data_p]
            if groupBy==3:#contratante
                agrupacion_2_claves = [re.sub(r"[^A-Za-z0-9\s]", "", str(d.get("contractor__full_name", ""))).strip() for d in data_p]
                agrupacion_2_counts = [d["contractor__id__count"] for d in data_p]
            if groupBy==4:#ramo
                agrupacion_2_claves = [d["ramo__ramo_name"] for d in data_p]
                agrupacion_2_counts = [d["ramo__ramo_code__count"] for d in data_p]
            if groupBy==5:#ramo
                agrupacion_2_claves = [d["subramo__subramo_name"] for d in data_p]
                agrupacion_2_counts = [d["subramo__subramo_code__count"] for d in data_p]
            agrupacion_2_pneta = [d["p_neta__sum"] for d in data_p]
            agrupacion_2_ptotal = [d["p_total__sum"] for d in data_p]
            agrupacion_2_comision = [d["comision__sum"] for d in data_p]
            agrupacion_2_comision_pct = [d["comision_pct"] for d in data_p]
        if results_f2 is not None:
            rslts['resultsOKF_'] = aggregate_block(results_f2, 'f', groupBy)
            data_p = rslts['resultsOKF_']
            if groupBy==1:#calve de agente
                agrupacion_2_claves = [d["clave__clave"] for d in data_p]
                agrupacion_2_counts = [d["clave__id__count"] for d in data_p]            
            if groupBy==2:#aseguradora
                agrupacion_2_claves = [d["aseguradora__compania"] for d in data_p]
                agrupacion_2_counts = [d["aseguradora__id__count"] for d in data_p]
            if groupBy==3:#contratante
                agrupacion_2_claves = [d["contractor__full_name"] for d in data_p]
                agrupacion_2_counts = [d["contractor__id__count"] for d in data_p]
            if groupBy==4:#ramo
                agrupacion_2_claves = [d["ramo__ramo_name"] for d in data_p]
                agrupacion_2_counts = [d["ramo__ramo_code__count"] for d in data_p]
            if groupBy==5:#ramo
                agrupacion_2_claves = [d["subramo__subramo_name"] for d in data_p]
                agrupacion_2_counts = [d["subramo__subramo_code__count"] for d in data_p]
            agrupacion_2_pneta = [d["p_neta__sum"] for d in data_p]
            agrupacion_2_ptotal = [d["p_total__sum"] for d in data_p]
            agrupacion_2_comision = [d["comision__sum"] for d in data_p]
            agrupacion_2_comision_pct = [d["comision_pct"] for d in data_p]
        if results_r2 is not None:
            rslts['resultsOKR_'] = aggregate_block(results_r2, 'r', groupBy)
            data_p = rslts['resultsOKR_']
            if groupBy==1:#calve de agente
                agrupacion_2_claves = [d["poliza__clave__clave"] for d in data_p]
                agrupacion_2_counts = [d["poliza__clave__id__count"] for d in data_p]            
            if groupBy==2:#aseguradora
                agrupacion_2_claves = [d["poliza__aseguradora__compania"] for d in data_p]
                agrupacion_2_counts = [d["poliza__aseguradora__id__count"] for d in data_p]
            if groupBy==3:#contratante
                agrupacion_2_claves = [d["poliza__contractor__full_name"] for d in data_p]
                agrupacion_2_counts = [d["poliza__contractor__id__count"] for d in data_p]
            if groupBy==4:#ramo
                agrupacion_2_claves = [d["poliza__ramo__ramo_name"] for d in data_p]
                agrupacion_2_counts = [d["poliza__ramo__ramo_code__count"] for d in data_p]
            if groupBy==5:#ramo
                agrupacion_2_claves = [d["poliza__subramo__subramo_name"] for d in data_p]
                agrupacion_2_counts = [d["poliza__subramo__subramo_code__count"] for d in data_p]
            agrupacion_2_pneta = [d["p_neta__sum"] for d in data_p]
            agrupacion_2_ptotal = [d["p_total__sum"] for d in data_p]
            agrupacion_2_comision = [d["comision__sum"] for d in data_p]
            agrupacion_2_comision_pct = [d["comision_pct"] for d in data_p]
        if results_e2 is not None:
            rslts['resultsOKE_'] = aggregate_block(results_e2, 'e', groupBy)
            data_p = rslts['resultsOKE_']
            if groupBy==1:#calve de agente
                agrupacion_2_claves = [d["policy__clave__clave"] for d in data_p]
                agrupacion_2_counts = [d["policy__clave__id__count"] for d in data_p]            
            if groupBy==2:#aseguradora
                agrupacion_2_claves = [re.sub(r"[^A-Za-z0-9\s]", "", str(d.get("policy__aseguradora__compania", ""))).strip() for d in data_p]
                agrupacion_2_counts = [d["policy__aseguradora__id__count"] for d in data_p]
            if groupBy==3:#contratante
                agrupacion_2_claves =[re.sub(r"[^A-Za-z0-9\s]", "", str(d.get("policy__contractor__full_name", ""))).strip() for d in data_p]
                agrupacion_2_counts = [d["policy__contractor__id__count"] for d in data_p]
            if groupBy==4:#ramo
                agrupacion_2_claves = [d["policy__ramo__ramo_name"] for d in data_p]
                agrupacion_2_counts = [d["policy__ramo__ramo_code__count"] for d in data_p]
            if groupBy==5:#ramo
                agrupacion_2_claves = [d["policy__subramo__subramo_name"] for d in data_p]
                agrupacion_2_counts = [d["policy__subramo__subramo_code__count"] for d in data_p]
            agrupacion_2_pneta = [d["p_neta__sum"] for d in data_p]
            agrupacion_2_ptotal = [d["p_total__sum"] for d in data_p]
            agrupacion_2_comision = [d["comision__sum"] for d in data_p]
            agrupacion_2_comision_pct = [d["comision_pct"] for d in data_p]

        # Compat: en tu código original, groupBy==3 repetía bloques con sufijos J y devolvía listas vacías FR/FRJ.
        if groupBy == 3:
            if results_p is not None:
                rslts['resultsOKPJ'] = aggregate_block(results_p, 'p', groupBy)
                data_p = rslts['resultsOKPJ']
                agrupacion_claves = [re.sub(r"[^A-Za-z0-9\s]", "", str(d.get("contractor__full_name", ""))).strip() for d in data_p]
                agrupacion_counts = [d["contractor__id__count"] for d in data_p]
                agrupacion_pneta = [d["p_neta__sum"] for d in data_p]
                agrupacion_ptotal = [d["p_total__sum"] for d in data_p]
                agrupacion_comision = [d["comision__sum"] for d in data_p]
                agrupacion_comision_pct = [d["comision_pct"] for d in data_p]
            if results_f is not None:
                rslts['resultsOKFJ'] = aggregate_block(results_f, 'f', groupBy)
                data_p = rslts['resultsOKFJ']
                agrupacion_claves = [re.sub(r"[^A-Za-z0-9\s]", "", str(d.get("contractor__full_name", ""))).strip() for d in data_p]
                agrupacion_counts = [d["contractor__id__count"] for d in data_p]
                agrupacion_pneta = [d["p_neta__sum"] for d in data_p]
                agrupacion_ptotal = [d["p_total__sum"] for d in data_p]
                agrupacion_comision = [d["comision__sum"] for d in data_p]
                agrupacion_comision_pct = [d["comision_pct"] for d in data_p]
            if results_r is not None:
                rslts['resultsOKRJ'] = aggregate_block(results_r, 'r', groupBy)
                data_p = rslts['resultsOKRJ']
                agrupacion_claves = [d["poliza__contractor__full_name"] for d in data_p]
                agrupacion_counts = [d["poliza__contractor__id__count"] for d in data_p]
                agrupacion_pneta = [d["p_neta__sum"] for d in data_p]
                agrupacion_ptotal = [d["p_total__sum"] for d in data_p]
                agrupacion_comision = [d["comision__sum"] for d in data_p]
                agrupacion_comision_pct = [d["comision_pct"] for d in data_p]
            if results_e is not None:
                rslts['resultsOKEJ'] = aggregate_block(results_e, 'e', groupBy)
                data_p = rslts['resultsOKEJ']
                agrupacion_claves = [re.sub(r"[^A-Za-z0-9\s]", "", str(d.get("polcy__contractor__full_name", ""))).strip() for d in data_p]
                agrupacion_counts = [d["policy__contractor__id__count"] for d in data_p]
                agrupacion_pneta = [d["p_neta__sum"] for d in data_p]
                agrupacion_ptotal = [d["p_total__sum"] for d in data_p]
                agrupacion_comision = [d["comision__sum"] for d in data_p]
                agrupacion_comision_pct = [d["comision_pct"] for d in data_p]
            rslts['resultsFR'] = []
            rslts['resultsFRJ'] = []
            # periodo 2
            if results_p2 is not None:
                rslts['resultsOKPJ_'] = aggregate_block(results_p2, 'p', groupBy)
                data_p = rslts['resultsOKPJ_']
                agrupacion_2_claves =[re.sub(r"[^A-Za-z0-9\s]", "", str(d.get("contractor__full_name", ""))).strip() for d in data_p]
                agrupacion_2_counts = [d["contractor__id__count"] for d in data_p]
                agrupacion_2_pneta = [d["p_neta__sum"] for d in data_p]
                agrupacion_2_ptotal = [d["p_total__sum"] for d in data_p]
                agrupacion_2_comision = [d["comision__sum"] for d in data_p]
                agrupacion_2_comision_pct = [d["comision_pct"] for d in data_p]
            if results_f2 is not None:
                rslts['resultsOKFJ_'] = aggregate_block(results_f2, 'f', groupBy)
                data_p = rslts['resultsOKFJ_']
                agrupacion_2_claves = [re.sub(r"[^A-Za-z0-9\s]", "", str(d.get("contractor__full_name", ""))).strip() for d in data_p]
                agrupacion_2_counts = [d["contractor__id__count"] for d in data_p]
                agrupacion_2_pneta = [d["p_neta__sum"] for d in data_p]
                agrupacion_2_ptotal = [d["p_total__sum"] for d in data_p]
                agrupacion_2_comision = [d["comision__sum"] for d in data_p]
                agrupacion_2_comision_pct = [d["comision_pct"] for d in data_p]
            if results_r2 is not None:
                rslts['resultsOKRJ_'] = aggregate_block(results_r2, 'r', groupBy)
                data_p = rslts['resultsOKRJ_']
                agrupacion_2_claves = [re.sub(r"[^A-Za-z0-9\s]", "", str(d.get("poliza__contractor__full_name", ""))).strip() for d in data_p]
                agrupacion_2_counts = [d["poliza__contractor__id__count"] for d in data_p]
                agrupacion_2_pneta = [d["p_neta__sum"] for d in data_p]
                agrupacion_2_ptotal = [d["p_total__sum"] for d in data_p]
                agrupacion_2_comision = [d["comision__sum"] for d in data_p]
                agrupacion_2_comision_pct = [d["comision_pct"] for d in data_p]
            if results_e2 is not None:
                rslts['resultsOKEJ_'] = aggregate_block(results_e2, 'e', groupBy)
                data_p = rslts['resultsOKEJ_']
                agrupacion_2_claves = [re.sub(r"[^A-Za-z0-9\s]", "", str(d.get("policy__contractor__full_name", ""))).strip() for d in data_p]
                agrupacion_2_counts = [d["policy__contractor__id__count"] for d in data_p]
                agrupacion_2_pneta = [d["p_neta__sum"] for d in data_p]
                agrupacion_2_ptotal = [d["p_total__sum"] for d in data_p]
                agrupacion_2_comision = [d["comision__sum"] for d in data_p]
                agrupacion_2_comision_pct = [d["comision_pct"] for d in data_p]


    # GroupBy 6: Moneda (estructura especial compatible con tu front)
    elif groupBy == 6:
        if results_p is not None:
            rslts['resultsOKP'] = results_p.filter(f_currency=1).values('f_currency') \
                .annotate(Count('f_currency'), Sum('p_neta'), Sum('p_total'), Sum('comision')).order_by('f_currency')
            rslts['resultsOKPD'] = results_p.filter(f_currency=2).values('f_currency') \
                .annotate(Count('f_currency'), Sum('p_neta'), Sum('p_total'), Sum('comision')).order_by('f_currency')
            rslts['resultsOKPU'] = results_p.filter(f_currency=3).values('f_currency') \
                .annotate(Count('f_currency'), Sum('p_neta'), Sum('p_total'), Sum('comision')).order_by('f_currency')
            rslts['resultsOKPE'] = results_p.filter(f_currency=4).values('f_currency') \
                .annotate(Count('f_currency'), Sum('p_neta'), Sum('p_total'), Sum('comision')).order_by('f_currency')
        if results_f is not None:
            rslts['resultsOKF'] = results_f.filter(f_currency=1).values('f_currency') \
                .annotate(Count('f_currency'), Sum('p_neta'), Sum('p_total'), Sum('comision')).order_by('f_currency')
            rslts['resultsOKFD'] = results_f.filter(f_currency=2).values('f_currency') \
                .annotate(Count('f_currency'), Sum('p_neta'), Sum('p_total'), Sum('comision')).order_by('f_currency')
            rslts['resultsOKFU'] = results_f.filter(f_currency=3).values('f_currency') \
                .annotate(Count('f_currency'), Sum('p_neta'), Sum('p_total'), Sum('comision')).order_by('f_currency')
            rslts['resultsOKFE'] = results_f.filter(f_currency=4).values('f_currency') \
                .annotate(Count('f_currency'), Sum('p_neta'), Sum('p_total'), Sum('comision')).order_by('f_currency')
        if results_r is not None:
            r_keys = [('resultsOKR', 1), ('resultsOKRD', 2), ('resultsOKRU', 3), ('resultsOKRE', 4)]
            for key, cur in r_keys:
                rslts[key] = results_r.filter(poliza__f_currency=cur).values('poliza__f_currency') \
                    .annotate(Count('poliza__f_currency'), Sum('prima_neta'), Sum('prima_total'), Sum('comision')) \
                    .order_by('poliza__f_currency')
        if results_e is not None:
            e_keys = [('resultsOKE', 1), ('resultsOKED', 2), ('resultsOKEU', 3), ('resultsOKEE', 4)]
            for key, cur in e_keys:
                rslts[key] = results_e.filter(policy__f_currency=cur).values('policy__f_currency') \
                    .annotate(Count('policy__f_currency'), Sum('p_neta'), Sum('p_total'), Sum('comision')) \
                    .order_by('policy__f_currency')
        # ------------------------
        # --periodo 2
        # ------------------------
        if results_p2 is not None:
            rslts['resultsOKP_'] = results_p2.filter(f_currency=1).values('f_currency') \
                .annotate(Count('f_currency'), Sum('p_neta'), Sum('p_total'), Sum('comision')).order_by('f_currency')
            rslts['resultsOKPD_'] = results_p2.filter(f_currency=2).values('f_currency') \
                .annotate(Count('f_currency'), Sum('p_neta'), Sum('p_total'), Sum('comision')).order_by('f_currency')
            rslts['resultsOKPU_'] = results_p2.filter(f_currency=3).values('f_currency') \
                .annotate(Count('f_currency'), Sum('p_neta'), Sum('p_total'), Sum('comision')).order_by('f_currency')
            rslts['resultsOKPE_'] = results_p2.filter(f_currency=4).values('f_currency') \
                .annotate(Count('f_currency'), Sum('p_neta'), Sum('p_total'), Sum('comision')).order_by('f_currency')
        if results_f2 is not None:
            rslts['resultsOKF_'] = results_f2.filter(f_currency=1).values('f_currency') \
                .annotate(Count('f_currency'), Sum('p_neta'), Sum('p_total'), Sum('comision')).order_by('f_currency')
            rslts['resultsOKFD_'] = results_f2.filter(f_currency=2).values('f_currency') \
                .annotate(Count('f_currency'), Sum('p_neta'), Sum('p_total'), Sum('comision')).order_by('f_currency')
            rslts['resultsOKFU_'] = results_f2.filter(f_currency=3).values('f_currency') \
                .annotate(Count('f_currency'), Sum('p_neta'), Sum('p_total'), Sum('comision')).order_by('f_currency')
            rslts['resultsOKFE_'] = results_f2.filter(f_currency=4).values('f_currency') \
                .annotate(Count('f_currency'), Sum('p_neta'), Sum('p_total'), Sum('comision')).order_by('f_currency')
        if results_r2 is not None:
            r_keys = [('resultsOKR_', 1), ('resultsOKRD_', 2), ('resultsOKRU_', 3), ('resultsOKRE_', 4)]
            for key, cur in r_keys:
                rslts[key] = results_r2.filter(poliza__f_currency=cur).values('poliza__f_currency') \
                    .annotate(Count('poliza__f_currency'), Sum('prima_neta'), Sum('prima_total'), Sum('comision')) \
                    .order_by('poliza__f_currency')
        if results_e2 is not None:
            e_keys = [('resultsOKE_', 1), ('resultsOKED_', 2), ('resultsOKEU_', 3), ('resultsOKEE_', 4)]
            for key, cur in e_keys:
                rslts[key] = results_e2.filter(policy__f_currency=cur).values('policy__f_currency') \
                    .annotate(Count('policy__f_currency'), Sum('p_neta'), Sum('p_total'), Sum('comision')) \
                    .order_by('policy__f_currency')

    # GroupBy 7: Sucursal (estructura especial compatible)
    elif groupBy == 7:
        if results_p is not None:
            rslts['resultsOKP'] = results_p.values('sucursal__sucursal_name') \
                .annotate(Count('sucursal__id'), Sum('p_neta'), Sum('p_total'), Sum('comision')).order_by('sucursal__id')
            rslts['resultsOKPN'] = results_p.values('contractor__sucursal__sucursal_name') \
                .annotate(Count('contractor__sucursal__id'), Sum('p_neta'), Sum('p_total'), Sum('comision')) \
                .order_by('contractor__sucursal__id')
        if results_f is not None:
            rslts['resultsOKF'] = results_f.values('contractor__sucursal__sucursal_name') \
                .annotate(Count('contractor__sucursal__id'), Sum('p_neta'), Sum('p_total'), Sum('comision')) \
                .order_by('contractor__sucursal__id')
        if results_r is not None:
            rslts['resultsOKR'] = results_r.values('poliza__sucursal__sucursal_name') \
                .annotate(Count('poliza__sucursal__id'), Sum('prima_neta'), Sum('prima_total'), Sum('comision')) \
                .order_by('poliza__sucursal__id')
            rslts['resultsOKRN'] = results_r.values('poliza__contractor__sucursal__sucursal_name') \
                .annotate(Count('poliza__contractor__sucursal__id'), Sum('prima_neta'), Sum('prima_total'), Sum('comision')) \
                .order_by('poliza__contractor__sucursal__id')
            # Compat: tu código incluía también OKRJ (idéntico a OKRN)
            rslts['resultsOKRJ'] = rslts['resultsOKRN']
        if results_e is not None:
            rslts['resultsOKE'] = results_e.values('policy__sucursal__sucursal_name') \
                .annotate(Count('policy__sucursal__id'), Sum('p_neta'), Sum('p_total'), Sum('comision')) \
                .order_by('policy__sucursal__id')
            rslts['resultsOKEN'] = results_e.values('policy__contractor__sucursal__sucursal_name') \
                .annotate(Count('policy__contractor__sucursal__id'), Sum('p_neta'), Sum('p_total'), Sum('comision')) \
                .order_by('policy__contractor__sucursal__id')
            # Compat: también OKEJ (idéntico aOKEN)
            rslts['resultsOKEJ'] = rslts['resultsOKEN']
        # ---------------------------
        # --periodo 2
        # ---------------------------
        if results_p2 is not None:
            rslts['resultsOKP_'] = results_p2.values('sucursal__sucursal_name') \
                .annotate(Count('sucursal__id'), Sum('p_neta'), Sum('p_total'), Sum('comision')).order_by('sucursal__id')
            rslts['resultsOKPN_'] = results_p2.values('contractor__sucursal__sucursal_name') \
                .annotate(Count('contractor__sucursal__id'), Sum('p_neta'), Sum('p_total'), Sum('comision')) \
                .order_by('contractor__sucursal__id')
        if results_f2 is not None:
            rslts['resultsOKF_'] = results_f2.values('contractor__sucursal__sucursal_name') \
                .annotate(Count('contractor__sucursal__id'), Sum('p_neta'), Sum('p_total'), Sum('comision')) \
                .order_by('contractor__sucursal__id')
        if results_r2 is not None:
            rslts['resultsOKR_'] = results_r2.values('poliza__sucursal__sucursal_name') \
                .annotate(Count('poliza__sucursal__id'), Sum('prima_neta'), Sum('prima_total'), Sum('comision')) \
                .order_by('poliza__sucursal__id')
            rslts['resultsOKRN_'] = results_r2.values('poliza__contractor__sucursal__sucursal_name') \
                .annotate(Count('poliza__contractor__sucursal__id'), Sum('prima_neta'), Sum('prima_total'), Sum('comision')) \
                .order_by('poliza__contractor__sucursal__id')
            # Compat: tu código incluía también OKRJ (idéntico a OKRN)
            rslts['resultsOKRJ_'] = rslts['resultsOKRN_']
        if results_e2 is not None:
            rslts['resultsOKE_'] = results_e2.values('policy__sucursal__sucursal_name') \
                .annotate(Count('policy__sucursal__id'), Sum('p_neta'), Sum('p_total'), Sum('comision')) \
                .order_by('policy__sucursal__id')
            rslts['resultsOKEN_'] = results_e2.values('policy__contractor__sucursal__sucursal_name') \
                .annotate(Count('policy__contractor__sucursal__id'), Sum('p_neta'), Sum('p_total'), Sum('comision')) \
                .order_by('policy__contractor__sucursal__id')
            # Compat: también OKEJ (idéntico aOKEN)
            rslts['resultsOKEJ_'] = rslts['resultsOKEN_']
    data = rslts

    # --------------------------
    # Gráficas
    # --------------------------

    polizasAdd  = to_bool(body.get('polizasAdd', True))
    fianzasAdd  = to_bool(body.get('fianzasAdd', False))
    recibosAdd  = to_bool(body.get('recibosAdd', False))
    endososAdd  = to_bool(body.get('endososAdd', False))
    user_status = parse_status_list(body.get('status'))

    # Estatus
    statusP, statusF, statusE = _build_status_lists(user_status)
    # Filtros por periodo
    try:
        date_filters_1 = _build_date_filters(period, since, until)
        date_filters_2 = _build_date_filters(period, since2, until2)
    except Exception as e:
        return Response({'detail': str(e)}, status=drf_status.HTTP_400_BAD_REQUEST)

    # QuerySets (ambos periodos)
    ds1 = _build_datasets(org_name, date_filters_1, period, statusP, statusF, statusE,
                          polizasAdd, fianzasAdd, recibosAdd, endososAdd,
                          fallback_since=since, fallback_until=until)
    ds2 = _build_datasets(org_name, date_filters_2, period, statusP, statusF, statusE,
                          polizasAdd, fianzasAdd, recibosAdd, endososAdd,
                          fallback_since=since2, fallback_until=until2)

    # Restricción por perfil (si aplica)
    ds1, ds2 = _apply_profile_restrictions(request, org_name, ds1, ds2)

    # Agregación por groupBy (ya existente en tu código)
    res1 = _aggregate_by_group(ds1, groupBy)
    res2 = _aggregate_by_group(ds2, groupBy)

    # ---------- Construcción del JSON solicitado ----------
    # Elegimos dataset "principal" para poblar percentages... (prioridad: P, luego F, luego R, luego E)
    present1 = set(res1.keys())
    present2 = set(res2.keys())
    flags_order = tuple(d for d, flag in [('p', polizasAdd), ('f', fianzasAdd), ('r', recibosAdd), ('e', endososAdd)] if flag)
    if not flags_order:
        flags_order = ('p', 'r', 'e', 'f')
    main_ds_1 = _choose_main_dataset(present1, flags_order)
    main_ds_2 = _choose_main_dataset(present2, flags_order)

    # Periodo 1 (principal)
    p1_labels, p1N, p1T, p1C = _period_arrays(res1, main_ds_1, groupBy)
    # Periodo 2 (principal)
    p2_labels, p2N, p2T, p2C = _period_arrays(res2, main_ds_2, groupBy)

    # Si además quieres el bloque F (fianzas) explícito:
    if fianzasAdd:
        f1_labels, f1N, f1T, f1C = _period_arrays(res1, 'f', groupBy)
        f2_labels, f2N, f2T, f2C = _period_arrays(res2, 'f', groupBy)
    else:
        f1_labels, f1N, f1T, f1C = [], [], [], []
        f2_labels, f2N, f2T, f2C = [], [], [], []

    # Estructura final EXACTA
    results_to_graphics = {
        # Periodo 1 (principal)
        "percentages": p1_labels,
        "percentagesN": p1N,
        "percentagesT": p1T,
        "percentagesC": p1C,
        # Periodo 1 (fianzas)
        "percentagesF": f1_labels,
        "percentagesNF": f1N,
        "percentagesTF": f1T,
        "percentagesCF": f1C,
        # Periodo 2 (principal)
        "percentages2": p2_labels,
        "percentagesN2": p2N,
        "percentagesT2": p2T,
        "percentagesC2": p2C,
        # Periodo 2 (fianzas)
        "percentages2F": f2_labels,
        "percentagesN2F": f2N,
        "percentagesT2F": f2T,
        "percentagesC2F": f2C
    }
    # print('*********para graficas************',results_to_graphics)
    # ----- Metadatos y datos para el servicio Excel -----
    tipo_reporte = "Reporte Estadística"
    columns      = ['Presentación', 'Total Prima Neta', 'Total Prima total', 'Total Comisión', 'Registros']
    info_org     = getInfoOrg(request)
    archivo_imagen = (
        'https://miurabox-public.s3.amazonaws.com/cas/' + info_org['logo']
        if info_org['logo'] else 'saam.jpg'
    )
    # print('****1*****data para tablas****1*****',agrupacion_claves)
    # print('****2*****data para tablas****2*****',agrupacion_2_claves)



    obj = {
        'agrupacionP1': str(list(agrupacion_claves)), 
        'agrupacionP2': str(list(agrupacion_2_claves)),
        'primanetaP1': str(list(agrupacion_pneta)),   
        'primanetaP2': str(list(agrupacion_2_pneta)),
        'primatotalP1': str(list(agrupacion_ptotal)), 
        'primatotalP2': str(list(agrupacion_2_ptotal)),
        'comisionP1': str(list(agrupacion_comision)),     
        'comisionP2': str(list(agrupacion_2_comision)),
        'registrosP1': str(list(agrupacion_counts)),   
        'registrosP2': str(list(agrupacion_2_counts)),
        'agrupacionF1': str(list(agrupacion_claves)), 
        'agrupacionF2': str(list(agrupacion_2_claves)),
        'primanetaF1': str(list(agrupacion_pneta)),   
        'primanetaF2': str(list(agrupacion_2_pneta)),
        'primatotalF1': str(list(agrupacion_ptotal)), 
        'primatotalF2': str(list(agrupacion_2_ptotal)),
        'comisionF1': str(list(agrupacion_comision)),     
        'comisionF2': str(list(agrupacion_2_comision)),
        'registrosF1': str(list(agrupacion_counts)),   
        'registrosF2': str(list(agrupacion_2_counts)),

        'percentagesF': str(list([])),
        'percentagesNF': str(list([])),
        'percentagesTF': str(list([])),
        'percentagesCF': str(list([])),
        'percentagesC2F': str(list([])),
        'percentages2F': str(list([])),
        'percentagesN2F': str(list([])),
        'percentagesT2F': str(list([])),

        'percentages': str(list(results_to_graphics['percentages'])),
        'percentages2': str(list(results_to_graphics['percentages2'])),
        'percentagesN': str(list(results_to_graphics['percentagesN'])),
        'percentagesN2': str(list(results_to_graphics['percentagesN2'])),
        'percentagesT': str(list(results_to_graphics['percentagesT'])),
        'percentagesT2': str(list(results_to_graphics['percentagesT2'])),
        'percentagesC': str(list(results_to_graphics['percentagesC'])),
        'percentagesC2': str(list(results_to_graphics['percentagesC2'])),

        'tipo_reporte': tipo_reporte,
        'email_org':    info_org['email'],
        'phone_org':    info_org['phone'],
        'webpage_org':  info_org['webpage'],
        'address_org':  info_org['address'],
        'urlname_org':  info_org['name'],

        'columns': str(list(columns)),
        'lenregs1': len(agrupacion_counts), 'lenregs2': len(agrupacion_2_counts),
        'lenregs1F': 0, 'lenregs2F': 0,
        'periodo':  since.strftime("%d/%m/%Y"),
        'periodo_': until.strftime("%d/%m/%Y"),
        'periodo2': since2.strftime("%d/%m/%Y"),
        'periodo_2': until2.strftime("%d/%m/%Y"),
        'imagen': archivo_imagen,
        'valueCom': valueCom,
    }

    r = requests.post(
        settings.SERVICEEXCEL_URL + 'get-StadisticsExcel/',
        obj, stream=True, timeout=120
    )
    response = HttpResponse(
        r.content,
        content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
    )
    response['Content-Disposition'] = 'attachment; filename=\"reporte_estadistica.xlsx\"'
    return response
